// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.liquidfun;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.liquidfun.global.liquidfun.*;


/** Joint definitions are used to construct joints. */
@NoOffset @Properties(inherit = org.bytedeco.liquidfun.presets.liquidfun.class)
public class b2JointDef extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b2JointDef(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b2JointDef(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public b2JointDef position(long position) {
        return (b2JointDef)super.position(position);
    }
    @Override public b2JointDef getPointer(long i) {
        return new b2JointDef((Pointer)this).position(position + i);
    }

	public b2JointDef() { super((Pointer)null); allocate(); }
	private native void allocate();

	/** The joint type is set automatically for concrete joint types. */
	public native @Cast("b2JointType") int type(); public native b2JointDef type(int setter);

	/** Use this to attach application specific data to your joints. */
	public native Pointer userData(); public native b2JointDef userData(Pointer setter);

	/** The first attached body. */
	public native b2Body bodyA(); public native b2JointDef bodyA(b2Body setter);

	/** The second attached body. */
	public native b2Body bodyB(); public native b2JointDef bodyB(b2Body setter);

	/** Set this flag to true if the attached bodies should collide. */
	public native @Cast("bool") boolean collideConnected(); public native b2JointDef collideConnected(boolean setter);
}
