// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.liquidfun;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.liquidfun.global.liquidfun.*;


/** A distance proxy is used by the GJK algorithm.
 *  It encapsulates any shape. */
@NoOffset @Properties(inherit = org.bytedeco.liquidfun.presets.liquidfun.class)
public class b2DistanceProxy extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b2DistanceProxy(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b2DistanceProxy(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public b2DistanceProxy position(long position) {
        return (b2DistanceProxy)super.position(position);
    }

	public b2DistanceProxy() { super((Pointer)null); allocate(); }
	private native void allocate();

	/** Initialize the proxy using the given shape. The shape
	 *  must remain in scope while the proxy is in use. */
	public native void Set(@Const b2Shape shape, @Cast("int32") int index);

	/** Get the supporting vertex index in the given direction. */
	public native @Cast("int32") int GetSupport(@Const @ByRef b2Vec2 d);

	/** Get the supporting vertex in the given direction. */
	public native @Const @ByRef b2Vec2 GetSupportVertex(@Const @ByRef b2Vec2 d);

	/** Get the vertex count. */
	public native @Cast("int32") int GetVertexCount();

	/** Get a vertex by index. Used by b2Distance. */
	public native @Const @ByRef b2Vec2 GetVertex(@Cast("int32") int index);

	public native @ByRef b2Vec2 m_buffer(int i); public native b2DistanceProxy m_buffer(int i, b2Vec2 m_buffer);
	@MemberGetter public native b2Vec2 m_buffer();
	@MemberGetter public native @Const b2Vec2 m_vertices();
	public native @Cast("int32") int m_count(); public native b2DistanceProxy m_count(int m_count);
	public native @Cast("float32") float m_radius(); public native b2DistanceProxy m_radius(float m_radius);
}
