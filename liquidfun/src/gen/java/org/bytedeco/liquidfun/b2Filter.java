// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.liquidfun;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.liquidfun.global.liquidfun.*;


/** This holds contact filtering data. */
@NoOffset @Properties(inherit = org.bytedeco.liquidfun.presets.liquidfun.class)
public class b2Filter extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b2Filter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b2Filter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public b2Filter position(long position) {
        return (b2Filter)super.position(position);
    }

	public b2Filter() { super((Pointer)null); allocate(); }
	private native void allocate();

	/** The collision category bits. Normally you would just set one bit. */
	public native @Cast("uint16") int categoryBits(); public native b2Filter categoryBits(int categoryBits);

	/** The collision mask bits. This states the categories that this
	 *  shape would accept for collision. */
	public native @Cast("uint16") int maskBits(); public native b2Filter maskBits(int maskBits);

	/** Collision groups allow a certain group of objects to never collide (negative)
	 *  or always collide (positive). Zero means no collision group. Non-zero group
	 *  filtering always wins against the mask bits. */
	public native @Cast("int16") short groupIndex(); public native b2Filter groupIndex(short groupIndex);
}
