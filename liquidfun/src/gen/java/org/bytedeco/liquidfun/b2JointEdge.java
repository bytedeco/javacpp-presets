// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.liquidfun;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.liquidfun.global.liquidfun.*;


/** A joint edge is used to connect bodies and joints together
 *  in a joint graph where each body is a node and each joint
 *  is an edge. A joint edge belongs to a doubly linked list
 *  maintained in each attached body. Each joint has two joint
 *  nodes, one for each attached body. */
@Properties(inherit = org.bytedeco.liquidfun.presets.liquidfun.class)
public class b2JointEdge extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public b2JointEdge() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b2JointEdge(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b2JointEdge(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public b2JointEdge position(long position) {
        return (b2JointEdge)super.position(position);
    }

	/** provides quick access to the other body attached. */
	public native b2Body other(); public native b2JointEdge other(b2Body other);
	/** the joint */
	public native b2Joint joint(); public native b2JointEdge joint(b2Joint joint);
	/** the previous joint edge in the body's joint list */
	public native b2JointEdge prev(); public native b2JointEdge prev(b2JointEdge prev);
	/** the next joint edge in the body's joint list */
	public native b2JointEdge next(); public native b2JointEdge next(b2JointEdge next);
}
