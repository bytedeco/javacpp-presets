// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.liquidfun;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.liquidfun.global.liquidfun.*;


/** A contact edge is used to connect bodies and contacts together
 *  in a contact graph where each body is a node and each contact
 *  is an edge. A contact edge belongs to a doubly linked list
 *  maintained in each attached body. Each contact has two contact
 *  nodes, one for each attached body. */
@Properties(inherit = org.bytedeco.liquidfun.presets.liquidfun.class)
public class b2ContactEdge extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public b2ContactEdge() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b2ContactEdge(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b2ContactEdge(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public b2ContactEdge position(long position) {
        return (b2ContactEdge)super.position(position);
    }

	/** provides quick access to the other body attached. */
	public native b2Body other(); public native b2ContactEdge other(b2Body other);
	/** the contact */
	public native b2Contact contact(); public native b2ContactEdge contact(b2Contact contact);
	/** the previous contact edge in the body's contact list */
	public native b2ContactEdge prev(); public native b2ContactEdge prev(b2ContactEdge prev);
	/** the next contact edge in the body's contact list */
	public native b2ContactEdge next(); public native b2ContactEdge next(b2ContactEdge next);
}
