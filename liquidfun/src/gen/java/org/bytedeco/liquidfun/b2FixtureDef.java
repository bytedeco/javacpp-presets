// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.liquidfun;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.liquidfun.global.liquidfun.*;


/** A fixture definition is used to create a fixture. This class defines an
 *  abstract fixture definition. You can reuse fixture definitions safely. */
@NoOffset @Properties(inherit = org.bytedeco.liquidfun.presets.liquidfun.class)
public class b2FixtureDef extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b2FixtureDef(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b2FixtureDef(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public b2FixtureDef position(long position) {
        return (b2FixtureDef)super.position(position);
    }

	/** The constructor sets the default fixture definition values. */
	public b2FixtureDef() { super((Pointer)null); allocate(); }
	private native void allocate();

	/** The shape, this must be set. The shape will be cloned, so you
	 *  can create the shape on the stack. */
	@MemberGetter public native @Const b2Shape shape();
	@MemberSetter public native b2FixtureDef shape(@Const b2Shape shape);

	/** Use this to store application specific fixture data. */
	public native Pointer userData(); public native b2FixtureDef userData(Pointer userData);

	/** The friction coefficient, usually in the range [0,1]. */
	public native @Cast("float32") float friction(); public native b2FixtureDef friction(float friction);

	/** The restitution (elasticity) usually in the range [0,1]. */
	public native @Cast("float32") float restitution(); public native b2FixtureDef restitution(float restitution);

	/** The density, usually in kg/m^2. */
	public native @Cast("float32") float density(); public native b2FixtureDef density(float density);

	/** A sensor shape collects contact information but never generates a collision
	 *  response. */
	public native @Cast("bool") boolean isSensor(); public native b2FixtureDef isSensor(boolean isSensor);

	/** Contact filtering data. */
	public native @ByRef b2Filter filter(); public native b2FixtureDef filter(b2Filter filter);
}
