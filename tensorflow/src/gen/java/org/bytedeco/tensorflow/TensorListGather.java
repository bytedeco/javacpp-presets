// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflow;

import org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.tensorflow.global.tensorflow.*;


/** Creates a Tensor by indexing into the TensorList.
 * 
 *  Each row in the produced Tensor corresponds to the element in the TensorList
 *  specified by the given index (see {@code tf.gather}).
 * 
 *  input_handle: The input tensor list.
 *  indices: The indices used to index into the list.
 *  values: The tensor.
 * 
 *  Arguments:
 *  * scope: A Scope object
 * 
 *  Returns:
 *  * {@code Output}: The values tensor. */
@Namespace("tensorflow::ops") @NoOffset @Properties(inherit = org.bytedeco.tensorflow.presets.tensorflow.class)
public class TensorListGather extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TensorListGather(Pointer p) { super(p); }

  public TensorListGather(@Const @ByRef Scope scope, @ByVal Input input_handle, @ByVal Input indices, @ByVal Input element_shape, @Cast("tensorflow::DataType") int element_dtype) { super((Pointer)null); allocate(scope, input_handle, indices, element_shape, element_dtype); }
  private native void allocate(@Const @ByRef Scope scope, @ByVal Input input_handle, @ByVal Input indices, @ByVal Input element_shape, @Cast("tensorflow::DataType") int element_dtype);
  public native @ByVal @Name("operator tensorflow::Output") Output asOutput();
  public native @ByVal @Name("operator tensorflow::Input") Input asInput();
  public native Node node();

  public native @ByRef Operation operation(); public native TensorListGather operation(Operation setter);
  public native @ByRef Output values(); public native TensorListGather values(Output setter);
}
