// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflow;

import org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.tensorflow.global.tensorflow.*;


/** Replaces the contents of the table with the specified keys and values.
 * 
 *  The tensor {@code keys} must be of the same type as the keys of the table.
 *  The tensor {@code values} must be of the type of the table values.
 * 
 *  Arguments:
 *  * scope: A Scope object
 *  * table_handle: Handle to the table.
 *  * keys: Any shape.  Keys to look up.
 *  * values: Values to associate with keys.
 * 
 *  Returns:
 *  * the created {@code Operation} */
@Namespace("tensorflow::ops") @NoOffset @Properties(inherit = org.bytedeco.tensorflow.presets.tensorflow.class)
public class LookupTableImport extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LookupTableImport(Pointer p) { super(p); }

  public LookupTableImport(@Const @ByRef Scope scope, @ByVal Input table_handle, @ByVal Input keys, @ByVal Input values) { super((Pointer)null); allocate(scope, table_handle, keys, values); }
  private native void allocate(@Const @ByRef Scope scope, @ByVal Input table_handle, @ByVal Input keys, @ByVal Input values);
  public native @ByVal @Name("operator tensorflow::Operation") Operation asOperation();

  public native @ByRef Operation operation(); public native LookupTableImport operation(Operation setter);
}
