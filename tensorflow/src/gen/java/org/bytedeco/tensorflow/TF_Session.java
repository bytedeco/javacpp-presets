// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflow;

import org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflow.global.tensorflow.*;


@NoOffset @Properties(inherit = org.bytedeco.tensorflow.presets.tensorflow.class)
public class TF_Session extends org.bytedeco.tensorflow.AbstractTF_Session {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TF_Session(Pointer p) { super(p); }

  public TF_Session(Session s, TF_Graph g) { super((Pointer)null); allocate(s, g); }
  private native void allocate(Session s, TF_Graph g);

  public native Session session(); public native TF_Session session(Session session);
  @MemberGetter public native TF_Graph graph();

  public native @ByRef @Cast("tensorflow::mutex*") Pointer mu(); public native TF_Session mu(Pointer mu);
  public native int last_num_graph_nodes(); public native TF_Session last_num_graph_nodes(int last_num_graph_nodes);

  // If true, TF_SessionRun and similar methods will call
  // ExtendSessionGraphHelper before running the graph (this is the default
  // public behavior). Can be set to false if the caller needs to call
  // ExtendSessionGraphHelper manually.
  public native @MemberGetter @ByRef @Cast("std::atomic<bool>*") Pointer extend_before_run();
}
