// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflow;

import org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflow.global.tensorflow.*;

// -------------------------------------------------------------------

@Namespace("tensorflow::eager") @NoOffset @Properties(inherit = org.bytedeco.tensorflow.presets.tensorflow.class)
public class QueueItem extends MessageLite {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QueueItem(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QueueItem(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QueueItem position(long position) {
        return (QueueItem)super.position(position);
    }

  public QueueItem() { super((Pointer)null); allocate(); }
  private native void allocate();

  public QueueItem(@Const @ByRef QueueItem from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef QueueItem from);

  public native @ByRef @Name("operator =") QueueItem put(@Const @ByRef QueueItem from);
//   #if LANG_CXX11
//   #endif
  public static native @Cast("const google::protobuf::Descriptor*") Pointer descriptor();
  public static native @Const @ByRef QueueItem default_instance();

  /** enum tensorflow::eager::QueueItem::ItemCase */
  public static final int
    kHandleToDecref = 1,
    kOperation = 2,
    ITEM_NOT_SET = 0;

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const QueueItem internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(QueueItem other);
  

  // implements Message ----------------------------------------------

  public native QueueItem New();

  public native QueueItem New(Arena arena);
  public native void CopyFrom(@Cast("const google::protobuf::Message*") @ByRef MessageLite from);
  public native void MergeFrom(@Cast("const google::protobuf::Message*") @ByRef MessageLite from);
  public native void CopyFrom(@Const @ByRef QueueItem from);
  public native void MergeFrom(@Const @ByRef QueueItem from);
  public native void Clear();
  public native @Cast("bool") boolean IsInitialized();

  public native @Cast("size_t") long ByteSizeLong();
//   #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
//   #else
  public native @Cast("bool") boolean MergePartialFromCodedStream(
        CodedInputStream input);
//   #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  public native void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("google::protobuf::uint8*") byte[] target);
  public native int GetCachedSize();

  public native @ByVal @Cast("google::protobuf::Metadata*") Pointer GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
  public native @Cast("bool") boolean has_handle_to_decref();
  public native void clear_handle_to_decref();
  @MemberGetter public static native int kHandleToDecrefFieldNumber();
  public static final int kHandleToDecrefFieldNumber = kHandleToDecrefFieldNumber();
  public native @Const @ByRef RemoteTensorHandle handle_to_decref();
  public native RemoteTensorHandle release_handle_to_decref();
  public native RemoteTensorHandle mutable_handle_to_decref();
  public native void set_allocated_handle_to_decref(RemoteTensorHandle handle_to_decref);

  // .tensorflow.eager.Operation operation = 2;
  public native @Cast("bool") boolean has_operation();
  public native void clear_operation();
  @MemberGetter public static native int kOperationFieldNumber();
  public static final int kOperationFieldNumber = kOperationFieldNumber();
  public native @Const @ByRef Eager_Operation operation();
  public native Eager_Operation release_operation();
  public native Eager_Operation mutable_operation();
  public native void set_allocated_operation(Eager_Operation operation);

  public native void clear_item();
  public native @Cast("tensorflow::eager::QueueItem::ItemCase") int item_case();
}
