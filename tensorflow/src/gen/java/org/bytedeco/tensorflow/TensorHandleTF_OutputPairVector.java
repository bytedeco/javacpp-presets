// Targeted by JavaCPP version 1.5.2-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflow;

import org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflow.global.tensorflow.*;

@Name("std::vector<std::pair<tensorflow::TensorHandle*,TF_Output> >") @Properties(inherit = org.bytedeco.tensorflow.presets.tensorflow.class)
public class TensorHandleTF_OutputPairVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TensorHandleTF_OutputPairVector(Pointer p) { super(p); }
    public TensorHandleTF_OutputPairVector(TensorHandle[] firstValue, TF_Output[] secondValue) { this(Math.min(firstValue.length, secondValue.length)); put(firstValue, secondValue); }
    public TensorHandleTF_OutputPairVector()       { allocate();  }
    public TensorHandleTF_OutputPairVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef TensorHandleTF_OutputPairVector put(@ByRef TensorHandleTF_OutputPairVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native TensorHandle first(@Cast("size_t") long i); public native TensorHandleTF_OutputPairVector first(@Cast("size_t") long i, TensorHandle first);
    @Index(function = "at") public native @ByRef TF_Output second(@Cast("size_t") long i);  public native TensorHandleTF_OutputPairVector second(@Cast("size_t") long i, TF_Output second);

    public TensorHandleTF_OutputPairVector put(TensorHandle[] firstValue, TF_Output[] secondValue) {
        for (int i = 0; i < firstValue.length && i < secondValue.length; i++) {
            first(i, firstValue[i]);
            second(i, secondValue[i]);
        }
        return this;
    }
}

