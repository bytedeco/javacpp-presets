// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflow;

import org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.tensorflow.global.tensorflow.*;


// This is a base class that can be implemented by a variety of
// transports (e.g. gRPC which for each of the client methods makes an RPC).
@Namespace("tensorflow::eager") @Properties(inherit = org.bytedeco.tensorflow.presets.tensorflow.class)
public class EagerClient extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EagerClient(Pointer p) { super(p); }

// #define CLIENT_METHOD(method)
//   virtual void method##Async(const method##Request* request,
//                              method##Response* response,
//                              StatusCallback done) = 0;

  public native void CreateContextAsync(@Const CreateContextRequest request,
                               CreateContextResponse response,
                               @ByVal @Cast("tensorflow::StatusCallback*") Pointer done);
  public native void EnqueueAsync(@Const EnqueueRequest request,
                               EnqueueResponse response,
                               @ByVal @Cast("tensorflow::StatusCallback*") Pointer done);
  public native void WaitQueueDoneAsync(@Const WaitQueueDoneRequest request,
                               WaitQueueDoneResponse response,
                               @ByVal @Cast("tensorflow::StatusCallback*") Pointer done);
  public native void KeepAliveAsync(@Const KeepAliveRequest request,
                               KeepAliveResponse response,
                               @ByVal @Cast("tensorflow::StatusCallback*") Pointer done);
  public native void CloseContextAsync(@Const CloseContextRequest request,
                               CloseContextResponse response,
                               @ByVal @Cast("tensorflow::StatusCallback*") Pointer done);
  public native void RegisterFunctionAsync(@Const RegisterFunctionRequest request,
                               RegisterFunctionResponse response,
                               @ByVal @Cast("tensorflow::StatusCallback*") Pointer done);

// #undef CLIENT_METHOD

  // Feeds `request` into the request stream of EagerService::StreamingEnqueue.
  // `response` will be filled with the response for this `request`. The
  // 1-to-1 correspondence between requests and responses is a property
  // of the current service implementation. When the response is received,
  // `done` is invoked with the current status of the StreamingEnqueue call.
  // The status can contain an error because of an earlier request in the
  // current streaming call.
  // The client initiates a streaming call the first time StreamingEnqueueAsync
  // is invoked and keeps it open until some error condition.
  // Similarly to the methods above, the request can be deleted as soon as
  // StreamingEnqueueAsync returns.
  public native @ByVal Status StreamingEnqueueAsync(@Const EnqueueRequest request,
                                         EnqueueResponse response,
                                         @ByVal @Cast("tensorflow::StatusCallback*") Pointer done);
}
