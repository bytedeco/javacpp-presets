// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflow;

import org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflow.global.tensorflow.*;


// Utility class for representing a list of output tensors that are
// grouped as a single named output.
@Namespace("tensorflow") @NoOffset @Properties(inherit = org.bytedeco.tensorflow.presets.tensorflow.class)
public class OpOutputList extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OpOutputList(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OpOutputList(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OpOutputList position(long position) {
        return (OpOutputList)super.position(position);
    }

  public OpOutputList() { super((Pointer)null); allocate(); }
  private native void allocate();
  public OpOutputList(OpKernelContext ctx, int start, int stop) { super((Pointer)null); allocate(ctx, start, stop); }
  private native void allocate(OpKernelContext ctx, int start, int stop);
  public native @ByRef @Name("operator =") OpOutputList put(@Const @ByRef OpOutputList other);
  public native @Name("operator []") Tensor get(int i);
  public native @Cast("bool") boolean required(int i);
  public native @Cast("tensorflow::DataType") int expected_output_dtype(int i);
  public native @ByVal @Name("allocate") Status _allocate(int i, @Const @ByRef TensorShape shape, @Cast("tensorflow::Tensor**") PointerPointer output);
  public native @ByVal @Name("allocate") Status _allocate(int i, @Const @ByRef TensorShape shape, @ByPtrPtr Tensor output);
  public native void set(int i, @Const @ByRef Tensor tensor);
  public native void set_ref(int i, @Cast("tensorflow::mutex*") Pointer mu, Tensor tensor_for_ref);
  public native int size();
}
