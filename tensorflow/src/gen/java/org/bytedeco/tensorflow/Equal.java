// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflow;

import org.bytedeco.tensorflow.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.tensorflow.global.tensorflow.*;


/** Returns the truth value of (x == y) element-wise.
 * 
 *  *NOTE*: {@code Equal} supports broadcasting. More about broadcasting
 *  [here](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html)
 * 
 *  <pre>{@code python
 *  x = tf.constant([2, 4])
 *  y = tf.constant(2)
 *  tf.math.equal(x, y) ==> array([True, False])
 * 
 *  x = tf.constant([2, 4])
 *  y = tf.constant([2, 4])
 *  tf.math.equal(x, y) ==> array([True,  True])
 *  }</pre>
 * 
 *  Arguments:
 *  * scope: A Scope object
 * 
 *  Returns:
 *  * {@code Output}: The z tensor. */
@Namespace("tensorflow::ops") @NoOffset @Properties(inherit = org.bytedeco.tensorflow.presets.tensorflow.class)
public class Equal extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Equal(Pointer p) { super(p); }

  /** Optional attribute setters for Equal */
  public static class Attrs extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public Attrs() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public Attrs(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Attrs(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public Attrs position(long position) {
          return (Attrs)super.position(position);
      }
      @Override public Attrs getPointer(long i) {
          return new Attrs((Pointer)this).position(position + i);
      }
  
    /** Defaults to true */
    public native @ByVal Attrs IncompatibleShapeError(@Cast("bool") boolean x);

    public native @Cast("bool") boolean incompatible_shape_error_(); public native Attrs incompatible_shape_error_(boolean setter);
  }
  public Equal(@Const @ByRef Scope scope, @ByVal Input x,
        @ByVal Input y) { super((Pointer)null); allocate(scope, x, y); }
  private native void allocate(@Const @ByRef Scope scope, @ByVal Input x,
        @ByVal Input y);
  public Equal(@Const @ByRef Scope scope, @ByVal Input x,
        @ByVal Input y, @Const @ByRef Attrs attrs) { super((Pointer)null); allocate(scope, x, y, attrs); }
  private native void allocate(@Const @ByRef Scope scope, @ByVal Input x,
        @ByVal Input y, @Const @ByRef Attrs attrs);
  public native @ByVal @Name("operator tensorflow::Output") Output asOutput();
  public native @ByVal @Name("operator tensorflow::Input") Input asInput();
  public native Node node();

  public static native @ByVal Attrs IncompatibleShapeError(@Cast("bool") boolean x);

  public native @ByRef Operation operation(); public native Equal operation(Operation setter);
  public native @ByRef Output z(); public native Equal z(Output setter);
}
