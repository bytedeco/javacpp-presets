diff -ruN tensorflow-1.14.0-rc0/tensorflow/core/kernels/tridiagonal_solve_op_gpu.cu.cc tensorflow-1.14.0-rc0-cuda/tensorflow/core/kernels/tridiagonal_solve_op_gpu.cu.cc
--- tensorflow-1.14.0-rc0/tensorflow/core/kernels/tridiagonal_solve_op_gpu.cu.cc	2019-05-24 03:33:28.000000000 +0900
+++ tensorflow-1.14.0-rc0-cuda/tensorflow/core/kernels/tridiagonal_solve_op_gpu.cu.cc	2019-06-01 22:39:34.973400759 +0900
@@ -42,8 +42,11 @@
 __global__ void SolveForSizeOneOrTwoKernel(const int m, const Scalar* diags,
                                            const Scalar* rhs, const int num_rhs,
                                            Scalar* x, bool* not_invertible) {
+  Scalar z(0);
   if (m == 1) {
-    if (diags[1] == Scalar(0)) {
+    bool b = true;
+    for(int i = 0; i < sizeof(z); i++) b &= ((char*)&diags[1])[i] == ((char*)&z)[i];
+    if (b) {
       *not_invertible = true;
       return;
     }
@@ -52,7 +55,9 @@
     }
   } else {
     Scalar det = diags[2] * diags[3] - diags[0] * diags[5];
-    if (det == Scalar(0)) {
+    bool b = true;
+    for(int i = 0; i < sizeof(z); i++) b &= ((char*)&det)[i] == ((char*)&z)[i];
+    if (b) {
       *not_invertible = true;
       return;
     }
diff -ruN tensorflow-1.14.0-rc0/tensorflow/tensorflow.bzl tensorflow-1.14.0-rc0-cuda/tensorflow/tensorflow.bzl
--- tensorflow-1.14.0-rc0/tensorflow/tensorflow.bzl	2019-05-24 03:33:28.000000000 +0900
+++ tensorflow-1.14.0-rc0-cuda/tensorflow/tensorflow.bzl	2019-05-28 09:15:27.807632106 +0900
@@ -359,7 +359,7 @@
         )
 
 def _make_search_paths(prefix, levels_to_root):
-    return ",".join(
+    return "-rpath,/usr/local/cuda/lib/,-rpath,/usr/local/cuda/lib64/," + ",".join(
         [
             "-rpath,%s/%s" % (prefix, "/".join([".."] * search_level))
             for search_level in range(levels_to_root + 1)
diff -ruN tensorflow-1.14.0-rc0/tensorflow/tools/pip_package/BUILD tensorflow-1.14.0-rc0-cuda/tensorflow/tools/pip_package/BUILD
--- tensorflow-1.14.0-rc0/tensorflow/tools/pip_package/BUILD	2019-05-24 03:33:28.000000000 +0900
+++ tensorflow-1.14.0-rc0-cuda/tensorflow/tools/pip_package/BUILD	2019-05-28 09:15:27.808632119 +0900
@@ -228,7 +228,6 @@
         "//conditions:default": [],
     }) + if_cuda([
         "@cub_archive//:LICENSE.TXT",
-        "@local_config_nccl//:LICENSE",
     ]) + if_mkl([
         "//third_party/mkl:LICENSE",
         "//third_party/mkl_dnn:LICENSE",
diff -ruN tensorflow-1.14.0-rc0/tensorflow/workspace.bzl tensorflow-1.14.0-rc0-cuda/tensorflow/workspace.bzl
--- tensorflow-1.14.0-rc0/tensorflow/workspace.bzl	2019-05-24 03:33:28.000000000 +0900
+++ tensorflow-1.14.0-rc0-cuda/tensorflow/workspace.bzl	2019-05-29 19:28:27.741196742 +0900
@@ -137,6 +137,7 @@
     tf_http_archive(
         name = "com_google_absl",
         build_file = clean_dep("//third_party:com_google_absl.BUILD"),
+        patch_file = clean_dep("//third_party:absl.patch"),
         sha256 = "56cd3fbbbd94468a5fff58f5df2b6f9de7a0272870c61f6ca05b869934f4802a",
         strip_prefix = "abseil-cpp-daf381e8535a1f1f1b8a75966a74e7cca63dee89",
         urls = [
@@ -383,6 +384,7 @@
         name = "protobuf_archive",
         sha256 = PROTOBUF_SHA256,
         strip_prefix = PROTOBUF_STRIP_PREFIX,
+        patch_file = clean_dep("//third_party/protobuf:cuda.patch"),
         system_build_file = clean_dep("//third_party/systemlibs:protobuf.BUILD"),
         system_link_files = {
             "//third_party/systemlibs:protobuf.bzl": "protobuf.bzl",
@@ -397,6 +399,7 @@
         name = "com_google_protobuf",
         sha256 = PROTOBUF_SHA256,
         strip_prefix = PROTOBUF_STRIP_PREFIX,
+        patch_file = clean_dep("//third_party/protobuf:cuda.patch"),
         system_build_file = clean_dep("//third_party/systemlibs:protobuf.BUILD"),
         system_link_files = {
             "//third_party/systemlibs:protobuf.bzl": "protobuf.bzl",
@@ -408,6 +411,7 @@
         name = "com_google_protobuf_cc",
         sha256 = PROTOBUF_SHA256,
         strip_prefix = PROTOBUF_STRIP_PREFIX,
+        patch_file = clean_dep("//third_party/protobuf:cuda.patch"),
         system_build_file = clean_dep("//third_party/systemlibs:protobuf.BUILD"),
         system_link_files = {
             "//third_party/systemlibs:protobuf.bzl": "protobuf.bzl",
diff -ruN tensorflow-1.14.0-rc0/third_party/absl.patch tensorflow-1.14.0-rc0-cuda/third_party/absl.patch
--- tensorflow-1.14.0-rc0/third_party/absl.patch	1970-01-01 09:00:00.000000000 +0900
+++ tensorflow-1.14.0-rc0-cuda/third_party/absl.patch	2019-06-01 18:17:09.923175672 +0900
@@ -0,0 +1,22 @@
+diff -ruN abseil-cpp-daf381e8535a1f1f1b8a75966a74e7cca63dee89/absl/container/internal/compressed_tuple.h abseil-cpp-daf381e8535a1f1f1b8a75966a74e7cca63dee89-patch/absl/container/internal/compressed_tuple.h
+--- abseil-cpp-daf381e8535a1f1f1b8a75966a74e7cca63dee89/absl/container/internal/compressed_tuple.h	2019-05-17 04:48:51.000000000 +0900
++++ abseil-cpp-daf381e8535a1f1f1b8a75966a74e7cca63dee89-patch/absl/container/internal/compressed_tuple.h	2019-06-01 18:08:31.079239816 +0900
+@@ -167,14 +167,16 @@
+ 
+   template <int I>
+   ElemT<I>&& get() && {
++    using s = internal_compressed_tuple::Storage<CompressedTuple, I>;
+     return std::move(*this)
+-        .internal_compressed_tuple::template Storage<CompressedTuple, I>::get();
++        .s::get();
+   }
+ 
+   template <int I>
+   constexpr const ElemT<I>&& get() const&& {
++    using s = internal_compressed_tuple::Storage<CompressedTuple, I>;
+     return absl::move(*this)
+-        .internal_compressed_tuple::template Storage<CompressedTuple, I>::get();
++        .s::get();
+   }
+ };
+ 
diff -ruN tensorflow-1.14.0-rc0/third_party/eigen3/gpu_packet_math.patch tensorflow-1.14.0-rc0-cuda/third_party/eigen3/gpu_packet_math.patch
--- tensorflow-1.14.0-rc0/third_party/eigen3/gpu_packet_math.patch	2019-05-24 03:33:28.000000000 +0900
+++ tensorflow-1.14.0-rc0-cuda/third_party/eigen3/gpu_packet_math.patch	2019-05-29 19:25:45.700068424 +0900
@@ -40,3 +40,14 @@
      return res;
    }
  };
+--- a/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h
++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorRandom.h
+@@ -15,7 +15,7 @@
+ 
+ namespace {
+ 
+-EIGEN_DEVICE_FUNC uint64_t get_random_seed() {
++static EIGEN_DEVICE_FUNC uint64_t get_random_seed() {
+ #if defined(EIGEN_GPU_COMPILE_PHASE)
+   // We don't support 3d kernels since we currently only use 1 and
+   // 2d kernels.
diff -ruN tensorflow-1.14.0-rc0/third_party/protobuf/cuda.patch tensorflow-1.14.0-rc0-cuda/third_party/protobuf/cuda.patch
--- tensorflow-1.14.0-rc0/third_party/protobuf/cuda.patch	1970-01-01 09:00:00.000000000 +0900
+++ tensorflow-1.14.0-rc0-cuda/third_party/protobuf/cuda.patch	2019-05-02 16:40:39.928567881 +0900
@@ -0,0 +1,35 @@
+diff --git a/src/google/protobuf/map.h b/src/google/protobuf/map.h
+index 40f35e92..1af91f9c 100644
+--- a/src/google/protobuf/map.h
++++ b/src/google/protobuf/map.h
+@@ -425,10 +425,10 @@ class Map {
+         node_ = NULL;
+         for (bucket_index_ = start_bucket; bucket_index_ < m_->num_buckets_;
+              bucket_index_++) {
+-          if (m_->TableEntryIsNonEmptyList(bucket_index_)) {
++          if ((*m_).TableEntryIsNonEmptyList(bucket_index_)) {
+             node_ = static_cast<Node*>(m_->table_[bucket_index_]);
+             break;
+-          } else if (m_->TableEntryIsTree(bucket_index_)) {
++          } else if ((*m_).TableEntryIsTree(bucket_index_)) {
+             Tree* tree = static_cast<Tree*>(m_->table_[bucket_index_]);
+             GOOGLE_DCHECK(!tree->empty());
+             node_ = NodePtrFromKeyPtr(*tree->begin());
+@@ -487,7 +487,7 @@ class Map {
+           return true;
+         // Less common: the bucket is a linked list with node_ somewhere in it,
+         // but not at the head.
+-        if (m_->TableEntryIsNonEmptyList(bucket_index_)) {
++        if ((*m_).TableEntryIsNonEmptyList(bucket_index_)) {
+           Node* l = static_cast<Node*>(m_->table_[bucket_index_]);
+           while ((l = l->next) != NULL) {
+             if (l == node_) {
+@@ -501,7 +501,7 @@ class Map {
+         // find-like method that compares Node* instead of const Key&.
+         iterator_base i(m_->find(*KeyPtrFromNodePtr(node_), it));
+         bucket_index_ = i.bucket_index_;
+-        return m_->TableEntryIsList(bucket_index_);
++        return (*m_).TableEntryIsList(bucket_index_);
+       }
+ 
+       Node* node_;
