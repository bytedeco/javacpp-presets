// Targeted by JavaCPP version 1.4.4: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class libpostal extends org.bytedeco.javacpp.presets.libpostal {
    static { Loader.load(); }

// Parsed from libpostal/libpostal.h

// #ifndef LIBPOSTAL_H
// #define LIBPOSTAL_H

// #ifdef __cplusplus
// #endif

// #include <stdio.h>
// #include <stdlib.h>
// #include <stdint.h>
// #include <stdbool.h>

// #ifdef _WIN32
// #ifdef LIBPOSTAL_EXPORTS
// #define LIBPOSTAL_EXPORT __declspec(dllexport)
// #else
// #define LIBPOSTAL_EXPORT __declspec(dllimport)
// #endif
// #elif __GNUC__ >= 4
// #define LIBPOSTAL_EXPORT __attribute__ ((visibility("default")))
// #else
// #define LIBPOSTAL_EXPORT
// #endif

public static final int LIBPOSTAL_MAX_LANGUAGE_LEN = 4;

// Doing these as #defines so we can duplicate the values exactly in Python


/** enum libpostal_token_type_t */
public static final int
    LIBPOSTAL_TOKEN_TYPE_END = 0,                   // Null byte
    // Word types
    LIBPOSTAL_TOKEN_TYPE_WORD = 1,                  // Any letter-only word (includes all unicode letters)
    LIBPOSTAL_TOKEN_TYPE_ABBREVIATION = 2,          // Loose abbreviations (roughly anything containing a "." as we don't care about sentences in addresses)
    LIBPOSTAL_TOKEN_TYPE_IDEOGRAPHIC_CHAR = 3,      // For languages that don't separate on whitespace (e.g. Chinese, Japanese, Korean), separate by character
    LIBPOSTAL_TOKEN_TYPE_HANGUL_SYLLABLE = 4,       // Hangul syllable sequences which contain more than one codepoint
    LIBPOSTAL_TOKEN_TYPE_ACRONYM = 5,               // Specifically things like U.N. where we may delete internal periods

    LIBPOSTAL_TOKEN_TYPE_PHRASE = 10,               // Not part of the first stage tokenizer, but may be used after phrase parsing

    // Special tokens
    LIBPOSTAL_TOKEN_TYPE_EMAIL = 20,                // Make sure emails are tokenized altogether
    LIBPOSTAL_TOKEN_TYPE_URL = 21,                  // Make sure urls are tokenized altogether
    LIBPOSTAL_TOKEN_TYPE_US_PHONE = 22,             // US phone number (with or without country code)
    LIBPOSTAL_TOKEN_TYPE_INTL_PHONE = 23,           // A non-US phone number (must have country code)

    // Numbers and numeric types
    LIBPOSTAL_TOKEN_TYPE_NUMERIC = 50,              // Any sequence containing a digit
    LIBPOSTAL_TOKEN_TYPE_ORDINAL = 51,              // 1st, 2nd, 1er, 1 etc.
    LIBPOSTAL_TOKEN_TYPE_ROMAN_NUMERAL = 52,        // II, III, VI, etc.
    LIBPOSTAL_TOKEN_TYPE_IDEOGRAPHIC_NUMBER = 53,   // All numeric ideographic characters, includes e.g. Han numbers and chars like "Â²"

    // Punctuation types, may separate a phrase
    LIBPOSTAL_TOKEN_TYPE_PERIOD = 100,
    LIBPOSTAL_TOKEN_TYPE_EXCLAMATION = 101,
    LIBPOSTAL_TOKEN_TYPE_QUESTION_MARK = 102,
    LIBPOSTAL_TOKEN_TYPE_COMMA = 103,
    LIBPOSTAL_TOKEN_TYPE_COLON = 104,
    LIBPOSTAL_TOKEN_TYPE_SEMICOLON = 105,
    LIBPOSTAL_TOKEN_TYPE_PLUS = 106,
    LIBPOSTAL_TOKEN_TYPE_AMPERSAND = 107,
    LIBPOSTAL_TOKEN_TYPE_AT_SIGN = 108,
    LIBPOSTAL_TOKEN_TYPE_POUND = 109,
    LIBPOSTAL_TOKEN_TYPE_ELLIPSIS = 110,
    LIBPOSTAL_TOKEN_TYPE_DASH = 111,
    LIBPOSTAL_TOKEN_TYPE_BREAKING_DASH = 112,
    LIBPOSTAL_TOKEN_TYPE_HYPHEN = 113,
    LIBPOSTAL_TOKEN_TYPE_PUNCT_OPEN = 114,
    LIBPOSTAL_TOKEN_TYPE_PUNCT_CLOSE = 115,
    LIBPOSTAL_TOKEN_TYPE_DOUBLE_QUOTE = 119,
    LIBPOSTAL_TOKEN_TYPE_SINGLE_QUOTE = 120,
    LIBPOSTAL_TOKEN_TYPE_OPEN_QUOTE = 121,
    LIBPOSTAL_TOKEN_TYPE_CLOSE_QUOTE = 122,
    LIBPOSTAL_TOKEN_TYPE_SLASH = 124,
    LIBPOSTAL_TOKEN_TYPE_BACKSLASH = 125,
    LIBPOSTAL_TOKEN_TYPE_GREATER_THAN = 126,
    LIBPOSTAL_TOKEN_TYPE_LESS_THAN = 127,

    // Non-letters and whitespace
    LIBPOSTAL_TOKEN_TYPE_OTHER = 200,
    LIBPOSTAL_TOKEN_TYPE_WHITESPACE = 300,
    LIBPOSTAL_TOKEN_TYPE_NEWLINE = 301,

    LIBPOSTAL_TOKEN_TYPE_INVALID_CHAR = 500;


/* 
Address dictionaries
*/
// Bit set, should be able to keep it at a short (uint16_t)
public static final int LIBPOSTAL_ADDRESS_NONE = 0;
public static final int LIBPOSTAL_ADDRESS_ANY = (1 << 0);
public static final int LIBPOSTAL_ADDRESS_NAME = (1 << 1);
public static final int LIBPOSTAL_ADDRESS_HOUSE_NUMBER = (1 << 2);
public static final int LIBPOSTAL_ADDRESS_STREET = (1 << 3);
public static final int LIBPOSTAL_ADDRESS_UNIT = (1 << 4);
public static final int LIBPOSTAL_ADDRESS_LEVEL = (1 << 5);
public static final int LIBPOSTAL_ADDRESS_STAIRCASE = (1 << 6);
public static final int LIBPOSTAL_ADDRESS_ENTRANCE = (1 << 7);

public static final int LIBPOSTAL_ADDRESS_CATEGORY = (1 << 8);
public static final int LIBPOSTAL_ADDRESS_NEAR = (1 << 9);

public static final int LIBPOSTAL_ADDRESS_TOPONYM = (1 << 13);
public static final int LIBPOSTAL_ADDRESS_POSTAL_CODE = (1 << 14);
public static final int LIBPOSTAL_ADDRESS_PO_BOX = (1 << 15);
public static final int LIBPOSTAL_ADDRESS_ALL = ((1 << 16) - 1);

public static class libpostal_normalize_options_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_normalize_options_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_normalize_options_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_normalize_options_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_normalize_options_t position(long position) {
        return (libpostal_normalize_options_t)super.position(position);
    }

    // List of language codes
    public native @Cast("char*") BytePointer languages(int i); public native libpostal_normalize_options_t languages(int i, BytePointer languages);
    public native @Cast("char**") PointerPointer languages(); public native libpostal_normalize_options_t languages(PointerPointer languages);  
    public native @Cast("size_t") long num_languages(); public native libpostal_normalize_options_t num_languages(long num_languages);
    public native @Cast("uint16_t") short address_components(); public native libpostal_normalize_options_t address_components(short address_components);

    // String options
    public native @Cast("bool") boolean latin_ascii(); public native libpostal_normalize_options_t latin_ascii(boolean latin_ascii);
    public native @Cast("bool") boolean transliterate(); public native libpostal_normalize_options_t transliterate(boolean transliterate);
    public native @Cast("bool") boolean strip_accents(); public native libpostal_normalize_options_t strip_accents(boolean strip_accents);
    public native @Cast("bool") boolean decompose(); public native libpostal_normalize_options_t decompose(boolean decompose);
    public native @Cast("bool") boolean lowercase(); public native libpostal_normalize_options_t lowercase(boolean lowercase);
    public native @Cast("bool") boolean trim_string(); public native libpostal_normalize_options_t trim_string(boolean trim_string);
    public native @Cast("bool") boolean drop_parentheticals(); public native libpostal_normalize_options_t drop_parentheticals(boolean drop_parentheticals);
    public native @Cast("bool") boolean replace_numeric_hyphens(); public native libpostal_normalize_options_t replace_numeric_hyphens(boolean replace_numeric_hyphens);
    public native @Cast("bool") boolean delete_numeric_hyphens(); public native libpostal_normalize_options_t delete_numeric_hyphens(boolean delete_numeric_hyphens);
    public native @Cast("bool") boolean split_alpha_from_numeric(); public native libpostal_normalize_options_t split_alpha_from_numeric(boolean split_alpha_from_numeric);
    public native @Cast("bool") boolean replace_word_hyphens(); public native libpostal_normalize_options_t replace_word_hyphens(boolean replace_word_hyphens);
    public native @Cast("bool") boolean delete_word_hyphens(); public native libpostal_normalize_options_t delete_word_hyphens(boolean delete_word_hyphens);
    public native @Cast("bool") boolean delete_final_periods(); public native libpostal_normalize_options_t delete_final_periods(boolean delete_final_periods);
    public native @Cast("bool") boolean delete_acronym_periods(); public native libpostal_normalize_options_t delete_acronym_periods(boolean delete_acronym_periods);
    public native @Cast("bool") boolean drop_english_possessives(); public native libpostal_normalize_options_t drop_english_possessives(boolean drop_english_possessives);
    public native @Cast("bool") boolean delete_apostrophes(); public native libpostal_normalize_options_t delete_apostrophes(boolean delete_apostrophes);
    public native @Cast("bool") boolean expand_numex(); public native libpostal_normalize_options_t expand_numex(boolean expand_numex);
    public native @Cast("bool") boolean roman_numerals(); public native libpostal_normalize_options_t roman_numerals(boolean roman_numerals);

}

@NoException public static native @ByVal libpostal_normalize_options_t libpostal_get_default_options();

@NoException public static native @Cast("char**") PointerPointer libpostal_expand_address(@Cast("char*") BytePointer input, @ByVal libpostal_normalize_options_t options, @Cast("size_t*") SizeTPointer n);
@NoException public static native @Cast("char**") @ByPtrPtr String libpostal_expand_address(@Cast("char*") String input, @ByVal libpostal_normalize_options_t options, @Cast("size_t*") SizeTPointer n);
@NoException public static native @Cast("char**") PointerPointer libpostal_expand_address_root(@Cast("char*") BytePointer input, @ByVal libpostal_normalize_options_t options, @Cast("size_t*") SizeTPointer n);
@NoException public static native @Cast("char**") @ByPtrPtr String libpostal_expand_address_root(@Cast("char*") String input, @ByVal libpostal_normalize_options_t options, @Cast("size_t*") SizeTPointer n);

@NoException public static native void libpostal_expansion_array_destroy(@Cast("char**") PointerPointer expansions, @Cast("size_t") long n);
@NoException public static native void libpostal_expansion_array_destroy(@Cast("char**") @ByPtrPtr BytePointer expansions, @Cast("size_t") long n);
@NoException public static native void libpostal_expansion_array_destroy(@Cast("char**") @ByPtrPtr String expansions, @Cast("size_t") long n);

/*
Address parser
*/

public static class libpostal_address_parser_response_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_address_parser_response_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_address_parser_response_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_address_parser_response_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_address_parser_response_t position(long position) {
        return (libpostal_address_parser_response_t)super.position(position);
    }

    public native @Cast("size_t") long num_components(); public native libpostal_address_parser_response_t num_components(long num_components);
    public native @Cast("char*") BytePointer components(int i); public native libpostal_address_parser_response_t components(int i, BytePointer components);
    public native @Cast("char**") PointerPointer components(); public native libpostal_address_parser_response_t components(PointerPointer components);
    public native @Cast("char*") BytePointer labels(int i); public native libpostal_address_parser_response_t labels(int i, BytePointer labels);
    public native @Cast("char**") PointerPointer labels(); public native libpostal_address_parser_response_t labels(PointerPointer labels);
}

public static class libpostal_address_parser_options_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_address_parser_options_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_address_parser_options_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_address_parser_options_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_address_parser_options_t position(long position) {
        return (libpostal_address_parser_options_t)super.position(position);
    }

    public native @Cast("char*") BytePointer language(); public native libpostal_address_parser_options_t language(BytePointer language);
    public native @Cast("char*") BytePointer country(); public native libpostal_address_parser_options_t country(BytePointer country);
}

@NoException public static native void libpostal_address_parser_response_destroy(libpostal_address_parser_response_t self);

@NoException public static native @ByVal libpostal_address_parser_options_t libpostal_get_address_parser_default_options();

@NoException public static native libpostal_address_parser_response_t libpostal_parse_address(@Cast("char*") BytePointer address, @ByVal libpostal_address_parser_options_t options);
@NoException public static native libpostal_address_parser_response_t libpostal_parse_address(@Cast("char*") String address, @ByVal libpostal_address_parser_options_t options);

@NoException public static native @Cast("bool") boolean libpostal_parser_print_features(@Cast("bool") boolean print_features);


/*
Deduping
*/


// Near-dupe hashing methods

public static class libpostal_near_dupe_hash_options_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_near_dupe_hash_options_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_near_dupe_hash_options_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_near_dupe_hash_options_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_near_dupe_hash_options_t position(long position) {
        return (libpostal_near_dupe_hash_options_t)super.position(position);
    }

    public native @Cast("bool") boolean with_name(); public native libpostal_near_dupe_hash_options_t with_name(boolean with_name);
    public native @Cast("bool") boolean with_address(); public native libpostal_near_dupe_hash_options_t with_address(boolean with_address);
    public native @Cast("bool") boolean with_unit(); public native libpostal_near_dupe_hash_options_t with_unit(boolean with_unit);
    public native @Cast("bool") boolean with_city_or_equivalent(); public native libpostal_near_dupe_hash_options_t with_city_or_equivalent(boolean with_city_or_equivalent);
    public native @Cast("bool") boolean with_small_containing_boundaries(); public native libpostal_near_dupe_hash_options_t with_small_containing_boundaries(boolean with_small_containing_boundaries);
    public native @Cast("bool") boolean with_postal_code(); public native libpostal_near_dupe_hash_options_t with_postal_code(boolean with_postal_code);
    public native @Cast("bool") boolean with_latlon(); public native libpostal_near_dupe_hash_options_t with_latlon(boolean with_latlon);
    public native double latitude(); public native libpostal_near_dupe_hash_options_t latitude(double latitude);
    public native double longitude(); public native libpostal_near_dupe_hash_options_t longitude(double longitude);
    public native @Cast("uint32_t") int geohash_precision(); public native libpostal_near_dupe_hash_options_t geohash_precision(int geohash_precision);
    public native @Cast("bool") boolean name_and_address_keys(); public native libpostal_near_dupe_hash_options_t name_and_address_keys(boolean name_and_address_keys);
    public native @Cast("bool") boolean name_only_keys(); public native libpostal_near_dupe_hash_options_t name_only_keys(boolean name_only_keys);
    public native @Cast("bool") boolean address_only_keys(); public native libpostal_near_dupe_hash_options_t address_only_keys(boolean address_only_keys);
}


@NoException public static native @ByVal libpostal_near_dupe_hash_options_t libpostal_get_near_dupe_hash_default_options();
@NoException public static native @Cast("char**") PointerPointer libpostal_near_dupe_hashes(@Cast("size_t") long num_components, @Cast("char**") PointerPointer labels, @Cast("char**") PointerPointer values, @ByVal libpostal_near_dupe_hash_options_t options, @Cast("size_t*") SizeTPointer num_hashes);
@NoException public static native @Cast("char**") @ByPtrPtr BytePointer libpostal_near_dupe_hashes(@Cast("size_t") long num_components, @Cast("char**") @ByPtrPtr BytePointer labels, @Cast("char**") @ByPtrPtr BytePointer values, @ByVal libpostal_near_dupe_hash_options_t options, @Cast("size_t*") SizeTPointer num_hashes);
@NoException public static native @Cast("char**") @ByPtrPtr String libpostal_near_dupe_hashes(@Cast("size_t") long num_components, @Cast("char**") @ByPtrPtr String labels, @Cast("char**") @ByPtrPtr String values, @ByVal libpostal_near_dupe_hash_options_t options, @Cast("size_t*") SizeTPointer num_hashes);
@NoException public static native @Cast("char**") PointerPointer libpostal_near_dupe_hashes_languages(@Cast("size_t") long num_components, @Cast("char**") PointerPointer labels, @Cast("char**") PointerPointer values, @ByVal libpostal_near_dupe_hash_options_t options, @Cast("size_t") long num_languages, @Cast("char**") PointerPointer languages, @Cast("size_t*") SizeTPointer num_hashes);
@NoException public static native @Cast("char**") @ByPtrPtr BytePointer libpostal_near_dupe_hashes_languages(@Cast("size_t") long num_components, @Cast("char**") @ByPtrPtr BytePointer labels, @Cast("char**") @ByPtrPtr BytePointer values, @ByVal libpostal_near_dupe_hash_options_t options, @Cast("size_t") long num_languages, @Cast("char**") @ByPtrPtr BytePointer languages, @Cast("size_t*") SizeTPointer num_hashes);
@NoException public static native @Cast("char**") @ByPtrPtr String libpostal_near_dupe_hashes_languages(@Cast("size_t") long num_components, @Cast("char**") @ByPtrPtr String labels, @Cast("char**") @ByPtrPtr String values, @ByVal libpostal_near_dupe_hash_options_t options, @Cast("size_t") long num_languages, @Cast("char**") @ByPtrPtr String languages, @Cast("size_t*") SizeTPointer num_hashes);

// Dupe language classification

@NoException public static native @Cast("char**") PointerPointer libpostal_place_languages(@Cast("size_t") long num_components, @Cast("char**") PointerPointer labels, @Cast("char**") PointerPointer values, @Cast("size_t*") SizeTPointer num_languages);
@NoException public static native @Cast("char**") @ByPtrPtr BytePointer libpostal_place_languages(@Cast("size_t") long num_components, @Cast("char**") @ByPtrPtr BytePointer labels, @Cast("char**") @ByPtrPtr BytePointer values, @Cast("size_t*") SizeTPointer num_languages);
@NoException public static native @Cast("char**") @ByPtrPtr String libpostal_place_languages(@Cast("size_t") long num_components, @Cast("char**") @ByPtrPtr String labels, @Cast("char**") @ByPtrPtr String values, @Cast("size_t*") SizeTPointer num_languages);

// Pairwise dupe methods

/** enum libpostal_duplicate_status_t */
public static final int
    LIBPOSTAL_NULL_DUPLICATE_STATUS = -1,
    LIBPOSTAL_NON_DUPLICATE = 0,
    LIBPOSTAL_POSSIBLE_DUPLICATE_NEEDS_REVIEW = 3,
    LIBPOSTAL_LIKELY_DUPLICATE = 6,
    LIBPOSTAL_EXACT_DUPLICATE = 9;

public static class libpostal_duplicate_options_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_duplicate_options_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_duplicate_options_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_duplicate_options_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_duplicate_options_t position(long position) {
        return (libpostal_duplicate_options_t)super.position(position);
    }

    public native @Cast("size_t") long num_languages(); public native libpostal_duplicate_options_t num_languages(long num_languages);
    public native @Cast("char*") BytePointer languages(int i); public native libpostal_duplicate_options_t languages(int i, BytePointer languages);
    public native @Cast("char**") PointerPointer languages(); public native libpostal_duplicate_options_t languages(PointerPointer languages);
}


@NoException public static native @ByVal libpostal_duplicate_options_t libpostal_get_default_duplicate_options();
@NoException public static native @ByVal libpostal_duplicate_options_t libpostal_get_duplicate_options_with_languages(@Cast("size_t") long num_languages, @Cast("char**") PointerPointer languages);
@NoException public static native @ByVal libpostal_duplicate_options_t libpostal_get_duplicate_options_with_languages(@Cast("size_t") long num_languages, @Cast("char**") @ByPtrPtr BytePointer languages);
@NoException public static native @ByVal libpostal_duplicate_options_t libpostal_get_duplicate_options_with_languages(@Cast("size_t") long num_languages, @Cast("char**") @ByPtrPtr String languages);

@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_name_duplicate(@Cast("char*") BytePointer value1, @Cast("char*") BytePointer value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_name_duplicate(@Cast("char*") String value1, @Cast("char*") String value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_street_duplicate(@Cast("char*") BytePointer value1, @Cast("char*") BytePointer value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_street_duplicate(@Cast("char*") String value1, @Cast("char*") String value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_house_number_duplicate(@Cast("char*") BytePointer value1, @Cast("char*") BytePointer value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_house_number_duplicate(@Cast("char*") String value1, @Cast("char*") String value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_po_box_duplicate(@Cast("char*") BytePointer value1, @Cast("char*") BytePointer value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_po_box_duplicate(@Cast("char*") String value1, @Cast("char*") String value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_unit_duplicate(@Cast("char*") BytePointer value1, @Cast("char*") BytePointer value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_unit_duplicate(@Cast("char*") String value1, @Cast("char*") String value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_floor_duplicate(@Cast("char*") BytePointer value1, @Cast("char*") BytePointer value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_floor_duplicate(@Cast("char*") String value1, @Cast("char*") String value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_postal_code_duplicate(@Cast("char*") BytePointer value1, @Cast("char*") BytePointer value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_postal_code_duplicate(@Cast("char*") String value1, @Cast("char*") String value2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_toponym_duplicate(@Cast("size_t") long num_components1, @Cast("char**") PointerPointer labels1, @Cast("char**") PointerPointer values1, @Cast("size_t") long num_components2, @Cast("char**") PointerPointer labels2, @Cast("char**") PointerPointer values2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_toponym_duplicate(@Cast("size_t") long num_components1, @Cast("char**") @ByPtrPtr BytePointer labels1, @Cast("char**") @ByPtrPtr BytePointer values1, @Cast("size_t") long num_components2, @Cast("char**") @ByPtrPtr BytePointer labels2, @Cast("char**") @ByPtrPtr BytePointer values2, @ByVal libpostal_duplicate_options_t options);
@NoException public static native @Cast("libpostal_duplicate_status_t") int libpostal_is_toponym_duplicate(@Cast("size_t") long num_components1, @Cast("char**") @ByPtrPtr String labels1, @Cast("char**") @ByPtrPtr String values1, @Cast("size_t") long num_components2, @Cast("char**") @ByPtrPtr String labels2, @Cast("char**") @ByPtrPtr String values2, @ByVal libpostal_duplicate_options_t options);

// Pairwise fuzzy dupe methods, return status & similarity

public static class libpostal_fuzzy_duplicate_options_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_fuzzy_duplicate_options_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_fuzzy_duplicate_options_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_fuzzy_duplicate_options_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_fuzzy_duplicate_options_t position(long position) {
        return (libpostal_fuzzy_duplicate_options_t)super.position(position);
    }

    public native @Cast("size_t") long num_languages(); public native libpostal_fuzzy_duplicate_options_t num_languages(long num_languages);
    public native @Cast("char*") BytePointer languages(int i); public native libpostal_fuzzy_duplicate_options_t languages(int i, BytePointer languages);
    public native @Cast("char**") PointerPointer languages(); public native libpostal_fuzzy_duplicate_options_t languages(PointerPointer languages);
    public native double needs_review_threshold(); public native libpostal_fuzzy_duplicate_options_t needs_review_threshold(double needs_review_threshold);
    public native double likely_dupe_threshold(); public native libpostal_fuzzy_duplicate_options_t likely_dupe_threshold(double likely_dupe_threshold);
}

public static class libpostal_fuzzy_duplicate_status_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_fuzzy_duplicate_status_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_fuzzy_duplicate_status_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_fuzzy_duplicate_status_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_fuzzy_duplicate_status_t position(long position) {
        return (libpostal_fuzzy_duplicate_status_t)super.position(position);
    }

    public native @Cast("libpostal_duplicate_status_t") int status(); public native libpostal_fuzzy_duplicate_status_t status(int status);
    public native double similarity(); public native libpostal_fuzzy_duplicate_status_t similarity(double similarity);
}

@NoException public static native @ByVal libpostal_fuzzy_duplicate_options_t libpostal_get_default_fuzzy_duplicate_options();
@NoException public static native @ByVal libpostal_fuzzy_duplicate_options_t libpostal_get_default_fuzzy_duplicate_options_with_languages(@Cast("size_t") long num_languages, @Cast("char**") PointerPointer languages);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_options_t libpostal_get_default_fuzzy_duplicate_options_with_languages(@Cast("size_t") long num_languages, @Cast("char**") @ByPtrPtr BytePointer languages);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_options_t libpostal_get_default_fuzzy_duplicate_options_with_languages(@Cast("size_t") long num_languages, @Cast("char**") @ByPtrPtr String languages);

@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_name_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") PointerPointer tokens1, DoublePointer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") PointerPointer tokens2, DoublePointer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_name_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr BytePointer tokens1, DoublePointer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr BytePointer tokens2, DoublePointer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_name_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr String tokens1, DoubleBuffer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr String tokens2, DoubleBuffer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_name_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr BytePointer tokens1, double[] token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr BytePointer tokens2, double[] token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_name_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr String tokens1, DoublePointer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr String tokens2, DoublePointer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_name_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr BytePointer tokens1, DoubleBuffer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr BytePointer tokens2, DoubleBuffer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_name_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr String tokens1, double[] token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr String tokens2, double[] token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_street_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") PointerPointer tokens1, DoublePointer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") PointerPointer tokens2, DoublePointer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_street_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr BytePointer tokens1, DoublePointer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr BytePointer tokens2, DoublePointer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_street_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr String tokens1, DoubleBuffer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr String tokens2, DoubleBuffer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_street_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr BytePointer tokens1, double[] token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr BytePointer tokens2, double[] token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_street_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr String tokens1, DoublePointer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr String tokens2, DoublePointer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_street_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr BytePointer tokens1, DoubleBuffer token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr BytePointer tokens2, DoubleBuffer token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);
@NoException public static native @ByVal libpostal_fuzzy_duplicate_status_t libpostal_is_street_duplicate_fuzzy(@Cast("size_t") long num_tokens1, @Cast("char**") @ByPtrPtr String tokens1, double[] token_scores1, @Cast("size_t") long num_tokens2, @Cast("char**") @ByPtrPtr String tokens2, double[] token_scores2, @ByVal libpostal_fuzzy_duplicate_options_t options);

// Setup/teardown methods

@NoException public static native @Cast("bool") boolean libpostal_setup();
@NoException public static native @Cast("bool") boolean libpostal_setup_datadir(@Cast("char*") BytePointer datadir);
@NoException public static native @Cast("bool") boolean libpostal_setup_datadir(@Cast("char*") String datadir);
@NoException public static native void libpostal_teardown();

@NoException public static native @Cast("bool") boolean libpostal_setup_parser();
@NoException public static native @Cast("bool") boolean libpostal_setup_parser_datadir(@Cast("char*") BytePointer datadir);
@NoException public static native @Cast("bool") boolean libpostal_setup_parser_datadir(@Cast("char*") String datadir);
@NoException public static native void libpostal_teardown_parser();

@NoException public static native @Cast("bool") boolean libpostal_setup_language_classifier();
@NoException public static native @Cast("bool") boolean libpostal_setup_language_classifier_datadir(@Cast("char*") BytePointer datadir);
@NoException public static native @Cast("bool") boolean libpostal_setup_language_classifier_datadir(@Cast("char*") String datadir);
@NoException public static native void libpostal_teardown_language_classifier();

/* Tokenization and token normalization APIs */

public static class libpostal_token_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_token_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_token_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_token_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_token_t position(long position) {
        return (libpostal_token_t)super.position(position);
    }

    public native @Cast("size_t") long offset(); public native libpostal_token_t offset(long offset);
    public native @Cast("size_t") long len(); public native libpostal_token_t len(long len);
    public native @Cast("uint16_t") short type(); public native libpostal_token_t type(short type);
}

@NoException public static native libpostal_token_t libpostal_tokenize(@Cast("char*") BytePointer input, @Cast("bool") boolean whitespace, @Cast("size_t*") SizeTPointer n);
@NoException public static native libpostal_token_t libpostal_tokenize(@Cast("char*") String input, @Cast("bool") boolean whitespace, @Cast("size_t*") SizeTPointer n);

// Normalize string options
public static final int LIBPOSTAL_NORMALIZE_STRING_LATIN_ASCII = 1 << 0;
public static final int LIBPOSTAL_NORMALIZE_STRING_TRANSLITERATE = 1 << 1;
public static final int LIBPOSTAL_NORMALIZE_STRING_STRIP_ACCENTS = 1 << 2;
public static final int LIBPOSTAL_NORMALIZE_STRING_DECOMPOSE = 1 << 3;
public static final int LIBPOSTAL_NORMALIZE_STRING_LOWERCASE = 1 << 4;
public static final int LIBPOSTAL_NORMALIZE_STRING_TRIM = 1 << 5;
public static final int LIBPOSTAL_NORMALIZE_STRING_REPLACE_HYPHENS = 1 << 6;
public static final int LIBPOSTAL_NORMALIZE_STRING_COMPOSE = 1 << 7;
public static final int LIBPOSTAL_NORMALIZE_STRING_SIMPLE_LATIN_ASCII = 1 << 8;
public static final int LIBPOSTAL_NORMALIZE_STRING_REPLACE_NUMEX = 1 << 9;

// Normalize token options
public static final int LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_HYPHENS = 1 << 0;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_DELETE_HYPHENS = 1 << 1;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_DELETE_FINAL_PERIOD = 1 << 2;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_DELETE_ACRONYM_PERIODS = 1 << 3;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_DROP_ENGLISH_POSSESSIVES = 1 << 4;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_DELETE_OTHER_APOSTROPHE = 1 << 5;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_SPLIT_ALPHA_FROM_NUMERIC = 1 << 6;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_DIGITS = 1 << 7;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_NUMERIC_TOKEN_LETTERS = 1 << 8;
public static final int LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_NUMERIC_HYPHENS = 1 << 9;

public static final int LIBPOSTAL_NORMALIZE_DEFAULT_STRING_OPTIONS = (LIBPOSTAL_NORMALIZE_STRING_LATIN_ASCII | LIBPOSTAL_NORMALIZE_STRING_COMPOSE | LIBPOSTAL_NORMALIZE_STRING_TRIM | LIBPOSTAL_NORMALIZE_STRING_REPLACE_HYPHENS | LIBPOSTAL_NORMALIZE_STRING_STRIP_ACCENTS | LIBPOSTAL_NORMALIZE_STRING_LOWERCASE);

public static final int LIBPOSTAL_NORMALIZE_DEFAULT_TOKEN_OPTIONS = (LIBPOSTAL_NORMALIZE_TOKEN_REPLACE_HYPHENS | LIBPOSTAL_NORMALIZE_TOKEN_DELETE_FINAL_PERIOD | LIBPOSTAL_NORMALIZE_TOKEN_DELETE_ACRONYM_PERIODS | LIBPOSTAL_NORMALIZE_TOKEN_DROP_ENGLISH_POSSESSIVES | LIBPOSTAL_NORMALIZE_TOKEN_DELETE_OTHER_APOSTROPHE);

public static final int LIBPOSTAL_NORMALIZE_TOKEN_OPTIONS_DROP_PERIODS = (LIBPOSTAL_NORMALIZE_TOKEN_DELETE_FINAL_PERIOD | LIBPOSTAL_NORMALIZE_TOKEN_DELETE_ACRONYM_PERIODS);

public static final int LIBPOSTAL_NORMALIZE_DEFAULT_TOKEN_OPTIONS_NUMERIC = (LIBPOSTAL_NORMALIZE_DEFAULT_TOKEN_OPTIONS | LIBPOSTAL_NORMALIZE_TOKEN_SPLIT_ALPHA_FROM_NUMERIC);

@NoException public static native @Cast("char*") BytePointer libpostal_normalize_string(@Cast("char*") BytePointer input, @Cast("uint64_t") long options);
@NoException public static native @Cast("char*") String libpostal_normalize_string(@Cast("char*") String input, @Cast("uint64_t") long options);


public static class libpostal_normalized_token_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public libpostal_normalized_token_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public libpostal_normalized_token_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public libpostal_normalized_token_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public libpostal_normalized_token_t position(long position) {
        return (libpostal_normalized_token_t)super.position(position);
    }

    public native @Cast("char*") BytePointer str(); public native libpostal_normalized_token_t str(BytePointer str);
    public native @ByRef libpostal_token_t token(); public native libpostal_normalized_token_t token(libpostal_token_t token);
}



// #ifdef __cplusplus
// #endif

// #endif


}
