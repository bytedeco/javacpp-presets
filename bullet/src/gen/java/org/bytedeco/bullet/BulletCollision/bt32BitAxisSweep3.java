// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


/** The bt32BitAxisSweep3 allows higher precision quantization and more objects compared to the btAxisSweep3 sweep and prune.
 *  This comes at the cost of more memory per handle, and a bit slower performance.
 *  It uses arrays rather then lists for storage of the 3 axis. */
@Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class bt32BitAxisSweep3 extends btBroadphaseInterface {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public bt32BitAxisSweep3(Pointer p) { super(p); }

	public bt32BitAxisSweep3(@Const @ByRef btVector3 worldAabbMin, @Const @ByRef btVector3 worldAabbMax, @Cast("unsigned int") int maxHandles/*=1500000*/, btOverlappingPairCache pairCache/*=0*/, @Cast("bool") boolean disableRaycastAccelerator/*=false*/) { super((Pointer)null); allocate(worldAabbMin, worldAabbMax, maxHandles, pairCache, disableRaycastAccelerator); }
	private native void allocate(@Const @ByRef btVector3 worldAabbMin, @Const @ByRef btVector3 worldAabbMax, @Cast("unsigned int") int maxHandles/*=1500000*/, btOverlappingPairCache pairCache/*=0*/, @Cast("bool") boolean disableRaycastAccelerator/*=false*/);
	public bt32BitAxisSweep3(@Const @ByRef btVector3 worldAabbMin, @Const @ByRef btVector3 worldAabbMax) { super((Pointer)null); allocate(worldAabbMin, worldAabbMax); }
	private native void allocate(@Const @ByRef btVector3 worldAabbMin, @Const @ByRef btVector3 worldAabbMax);
}
