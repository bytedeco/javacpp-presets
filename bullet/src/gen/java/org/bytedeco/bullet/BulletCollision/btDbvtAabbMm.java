// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;

// #endif

// #ifndef DBVT_USE_TEMPLATE
// #endif

// #ifndef DBVT_USE_MEMMOVE
// #endif

// #ifndef DBVT_ENABLE_BENCHMARK
// #endif

// #ifndef DBVT_SELECT_IMPL
// #endif

// #ifndef DBVT_MERGE_IMPL
// #endif

// #ifndef DBVT_INT0_IMPL
// #endif

//
// Defaults volumes
//

/* btDbvtAabbMm			*/
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btDbvtAabbMm extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btDbvtAabbMm(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btDbvtAabbMm(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btDbvtAabbMm position(long position) {
        return (btDbvtAabbMm)super.position(position);
    }
    @Override public btDbvtAabbMm getPointer(long i) {
        return new btDbvtAabbMm((Pointer)this).offsetAddress(i);
    }

    public btDbvtAabbMm() { super((Pointer)null); allocate(); }
    private native void allocate();
	public native @ByVal btVector3 Center();
	public native @ByVal btVector3 Lengths();
	public native @ByVal btVector3 Extents();
	public native @Const @ByRef btVector3 Mins();
	public native @Const @ByRef btVector3 Maxs();
	public static native @ByVal btDbvtAabbMm FromCE(@Const @ByRef btVector3 c, @Const @ByRef btVector3 e);
	public static native @ByVal btDbvtAabbMm FromCR(@Const @ByRef btVector3 c, @Cast("btScalar") double r);
	public static native @ByVal btDbvtAabbMm FromMM(@Const @ByRef btVector3 mi, @Const @ByRef btVector3 mx);
	public static native @ByVal btDbvtAabbMm FromPoints(@Const btVector3 pts, int n);
	public static native @ByVal btDbvtAabbMm FromPoints(@Cast("const btVector3**") PointerPointer ppts, int n);
	public native void Expand(@Const @ByRef btVector3 e);
	public native void SignedExpand(@Const @ByRef btVector3 e);
	public native @Cast("bool") boolean Contain(@Const @ByRef btDbvtAabbMm a);
	public native int Classify(@Const @ByRef btVector3 n, @Cast("btScalar") double o, int s);
	public native @Cast("btScalar") double ProjectMinimum(@Const @ByRef btVector3 v, @Cast("unsigned") int signs);
	

	

	
	
	
	

	public native @ByRef btVector3 tMins();
	public native @ByRef btVector3 tMaxs();
}
