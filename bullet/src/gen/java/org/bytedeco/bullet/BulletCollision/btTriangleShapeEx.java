// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


/** Helper class for colliding Bullet Triangle Shapes
/**
This class implements a better getAabb method than the previous btTriangleShape class
*/
@Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btTriangleShapeEx extends btTriangleShape {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btTriangleShapeEx(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btTriangleShapeEx(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btTriangleShapeEx position(long position) {
        return (btTriangleShapeEx)super.position(position);
    }
    @Override public btTriangleShapeEx getPointer(long i) {
        return new btTriangleShapeEx((Pointer)this).offsetAddress(i);
    }

	public btTriangleShapeEx() { super((Pointer)null); allocate(); }
	private native void allocate();

	public btTriangleShapeEx(@Const @ByRef btVector3 p0, @Const @ByRef btVector3 p1, @Const @ByRef btVector3 p2) { super((Pointer)null); allocate(p0, p1, p2); }
	private native void allocate(@Const @ByRef btVector3 p0, @Const @ByRef btVector3 p1, @Const @ByRef btVector3 p2);

	public btTriangleShapeEx(@Const @ByRef btTriangleShapeEx other) { super((Pointer)null); allocate(other); }
	private native void allocate(@Const @ByRef btTriangleShapeEx other);

	public native void getAabb(@Const @ByRef btTransform t, @ByRef btVector3 aabbMin, @ByRef btVector3 aabbMax);

	public native void applyTransform(@Const @ByRef btTransform t);

	public native void buildTriPlane(@ByRef btVector4 plane);

	public native @Cast("bool") boolean overlap_test_conservative(@Const @ByRef btTriangleShapeEx other);
}
