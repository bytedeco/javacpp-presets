// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


// Material class to be used by btMultimaterialTriangleMeshShape to store triangle properties
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btMaterial extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btMaterial(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btMaterial(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btMaterial position(long position) {
        return (btMaterial)super.position(position);
    }
    @Override public btMaterial getPointer(long i) {
        return new btMaterial((Pointer)this).offsetAddress(i);
    }

	public native @Cast("btScalar") double m_friction(); public native btMaterial m_friction(double setter);
	public native @Cast("btScalar") double m_restitution(); public native btMaterial m_restitution(double setter);
	public native int pad(int i); public native btMaterial pad(int i, int setter);
	@MemberGetter public native IntPointer pad();

	public btMaterial() { super((Pointer)null); allocate(); }
	private native void allocate();
	public btMaterial(@Cast("btScalar") double fric, @Cast("btScalar") double rest) { super((Pointer)null); allocate(fric, rest); }
	private native void allocate(@Cast("btScalar") double fric, @Cast("btScalar") double rest);
}
