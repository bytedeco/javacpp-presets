// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btMiniSDF extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btMiniSDF(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btMiniSDF(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btMiniSDF position(long position) {
        return (btMiniSDF)super.position(position);
    }
    @Override public btMiniSDF getPointer(long i) {
        return new btMiniSDF((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btAlignedBox3d m_domain(); public native btMiniSDF m_domain(btAlignedBox3d setter);
	public native @Cast("unsigned int") int m_resolution(int i); public native btMiniSDF m_resolution(int i, int setter);
	@MemberGetter public native @Cast("unsigned int*") IntPointer m_resolution();
	public native @ByRef btVector3 m_cell_size(); public native btMiniSDF m_cell_size(btVector3 setter);
	public native @ByRef btVector3 m_inv_cell_size(); public native btMiniSDF m_inv_cell_size(btVector3 setter);
	public native @Cast("std::size_t") long m_n_cells(); public native btMiniSDF m_n_cells(long setter);
	public native @Cast("std::size_t") long m_n_fields(); public native btMiniSDF m_n_fields(long setter);
	public native @Cast("bool") boolean m_isValid(); public native btMiniSDF m_isValid(boolean setter);

	public native @ByRef btDoubleArrayArray m_nodes(); public native btMiniSDF m_nodes(btDoubleArrayArray setter);
	public native @ByRef btCell32ArrayArray m_cells(); public native btMiniSDF m_cells(btCell32ArrayArray setter);
	public native @ByRef btUnsignedIntArrayArray m_cell_map(); public native btMiniSDF m_cell_map(btUnsignedIntArrayArray setter);

	public btMiniSDF() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("bool") boolean load(@Cast("const char*") BytePointer data, int size);
	public native @Cast("bool") boolean load(String data, int size);
	public native @Cast("bool") boolean isValid();
	public native @Cast("unsigned int") int multiToSingleIndex(@Const @ByRef btMultiIndex ijk);

	public native @ByVal btAlignedBox3d subdomain(@Const @ByRef btMultiIndex ijk);

	public native @ByVal btMultiIndex singleToMultiIndex(@Cast("unsigned int") int l);

	public native @ByVal btAlignedBox3d subdomain(@Cast("unsigned int") int l);

	public native @ByVal btShapeMatrix shape_function_(@Const @ByRef btVector3 xi, btShapeGradients gradient/*=0*/);
	public native @ByVal btShapeMatrix shape_function_(@Const @ByRef btVector3 xi);

	public native @Cast("bool") boolean interpolate(@Cast("unsigned int") int field_id, @ByRef DoublePointer dist, @Const @ByRef btVector3 x, btVector3 gradient);
	public native @Cast("bool") boolean interpolate(@Cast("unsigned int") int field_id, @ByRef DoubleBuffer dist, @Const @ByRef btVector3 x, btVector3 gradient);
	public native @Cast("bool") boolean interpolate(@Cast("unsigned int") int field_id, @ByRef double[] dist, @Const @ByRef btVector3 x, btVector3 gradient);
}
