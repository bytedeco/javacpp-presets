// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


/**SimulationIslandManager creates and handles simulation islands, using btUnionFind */
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btSimulationIslandManager extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btSimulationIslandManager(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btSimulationIslandManager(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btSimulationIslandManager position(long position) {
        return (btSimulationIslandManager)super.position(position);
    }
    @Override public btSimulationIslandManager getPointer(long i) {
        return new btSimulationIslandManager((Pointer)this).offsetAddress(i);
    }

	public btSimulationIslandManager() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void initUnionFind(int n);

	public native @ByRef btUnionFind getUnionFind();

	public native void updateActivationState(btCollisionWorld colWorld, btDispatcher dispatcher);
	public native void storeIslandActivationState(btCollisionWorld world);

	public native void findUnions(btDispatcher dispatcher, btCollisionWorld colWorld);

	public static class IslandCallback extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public IslandCallback(Pointer p) { super(p); }
	

		public native void processIsland(@Cast("btCollisionObject**") PointerPointer bodies, int numBodies, @Cast("btPersistentManifold**") PointerPointer manifolds, int numManifolds, int islandId);
		public native void processIsland(@ByPtrPtr btCollisionObject bodies, int numBodies, @ByPtrPtr btPersistentManifold manifolds, int numManifolds, int islandId);
	}

	public native void buildAndProcessIslands(btDispatcher dispatcher, btCollisionWorld collisionWorld, IslandCallback callback);
    
	public native void buildIslands(btDispatcher dispatcher, btCollisionWorld colWorld);

    public native void processIslands(btDispatcher dispatcher, btCollisionWorld collisionWorld, IslandCallback callback);
    
	public native @Cast("bool") boolean getSplitIslands();
	public native void setSplitIslands(@Cast("bool") boolean doSplitIslands);
}
