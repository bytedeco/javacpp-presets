// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


// #ifdef BT_DEBUG_COLLISION_PAIRS
// #endif  //BT_DEBUG_COLLISION_PAIRS

@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btHashedSimplePairCache extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btHashedSimplePairCache(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btHashedSimplePairCache(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btHashedSimplePairCache position(long position) {
        return (btHashedSimplePairCache)super.position(position);
    }
    @Override public btHashedSimplePairCache getPointer(long i) {
        return new btHashedSimplePairCache((Pointer)this).offsetAddress(i);
    }

	public btHashedSimplePairCache() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void removeAllPairs();

	public native Pointer removeOverlappingPair(int indexA, int indexB);

	// Add a pair and return the new pair. If the pair already exists,
	// no new pair is created and the old one is returned.
	public native btSimplePair addOverlappingPair(int indexA, int indexB);

	public native btSimplePair getOverlappingPairArrayPtr();

	public native @Cast("btSimplePairArray*") @ByRef BT_QUANTIZED_BVH_NODE_Array getOverlappingPairArray();

	public native btSimplePair findPair(int indexA, int indexB);

	public native int GetCount();

	public native int getNumOverlappingPairs();
}
