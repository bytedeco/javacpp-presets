// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


/**btNullPairCache skips add/removal of overlapping pairs. Userful for benchmarking and unit testing. */
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btNullPairCache extends btOverlappingPairCache {
    static { Loader.load(); }
    /** Default native constructor. */
    public btNullPairCache() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btNullPairCache(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btNullPairCache(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btNullPairCache position(long position) {
        return (btNullPairCache)super.position(position);
    }
    @Override public btNullPairCache getPointer(long i) {
        return new btNullPairCache((Pointer)this).offsetAddress(i);
    }

	public native btBroadphasePair getOverlappingPairArrayPtr();
	public native @Cast("btBroadphasePairArray*") @ByRef BT_QUANTIZED_BVH_NODE_Array getOverlappingPairArray();

	public native void cleanOverlappingPair(@ByRef btBroadphasePair arg0, btDispatcher arg1);

	public native int getNumOverlappingPairs();

	public native void cleanProxyFromPairs(btBroadphaseProxy arg0, btDispatcher arg1);

	public native @Cast("bool") boolean needsBroadphaseCollision(btBroadphaseProxy arg0, btBroadphaseProxy arg1);
	public native btOverlapFilterCallback getOverlapFilterCallback();
	public native void setOverlapFilterCallback(btOverlapFilterCallback arg0);

	public native void processAllOverlappingPairs(btOverlapCallback arg0, btDispatcher arg1);

	public native btBroadphasePair findPair(btBroadphaseProxy arg0, btBroadphaseProxy arg1);

	public native @Cast("bool") boolean hasDeferredRemoval();

	public native void setInternalGhostPairCallback(btOverlappingPairCallback arg0);

	public native btBroadphasePair addOverlappingPair(btBroadphaseProxy arg0, btBroadphaseProxy arg1);

	public native Pointer removeOverlappingPair(btBroadphaseProxy arg0, btBroadphaseProxy arg1, btDispatcher arg2);

	public native void removeOverlappingPairsContainingProxy(btBroadphaseProxy arg0, btDispatcher arg1);

	public native void sortOverlappingPairs(btDispatcher dispatcher);
}
