// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btPairCachingGhostObject extends btGhostObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btPairCachingGhostObject(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btPairCachingGhostObject(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btPairCachingGhostObject position(long position) {
        return (btPairCachingGhostObject)super.position(position);
    }
    @Override public btPairCachingGhostObject getPointer(long i) {
        return new btPairCachingGhostObject((Pointer)this).offsetAddress(i);
    }

	public btPairCachingGhostObject() { super((Pointer)null); allocate(); }
	private native void allocate();

	/**this method is mainly for expert/internal use only. */
	public native void addOverlappingObjectInternal(btBroadphaseProxy otherProxy, btBroadphaseProxy thisProxy/*=0*/);
	public native void addOverlappingObjectInternal(btBroadphaseProxy otherProxy);

	public native void removeOverlappingObjectInternal(btBroadphaseProxy otherProxy, btDispatcher dispatcher, btBroadphaseProxy thisProxy/*=0*/);
	public native void removeOverlappingObjectInternal(btBroadphaseProxy otherProxy, btDispatcher dispatcher);

	public native btHashedOverlappingPairCache getOverlappingPairCache();
}
