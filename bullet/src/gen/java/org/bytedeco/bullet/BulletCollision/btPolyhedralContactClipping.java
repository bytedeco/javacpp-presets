// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


// Clips a face to the back of a plane
@Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btPolyhedralContactClipping extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public btPolyhedralContactClipping() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btPolyhedralContactClipping(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btPolyhedralContactClipping(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btPolyhedralContactClipping position(long position) {
        return (btPolyhedralContactClipping)super.position(position);
    }
    @Override public btPolyhedralContactClipping getPointer(long i) {
        return new btPolyhedralContactClipping((Pointer)this).offsetAddress(i);
    }

	public static native void clipHullAgainstHull(@Const @ByRef btVector3 separatingNormal1, @Const @ByRef btConvexPolyhedron hullA, @Const @ByRef btConvexPolyhedron hullB, @Const @ByRef btTransform transA, @Const @ByRef btTransform transB, @Cast("const btScalar") double minDist, @Cast("btScalar") double maxDist, @Cast("btVertexArray*") @ByRef btVector3Array worldVertsB1, @Cast("btVertexArray*") @ByRef btVector3Array worldVertsB2, @ByRef btDiscreteCollisionDetectorInterface.Result resultOut);

	public static native void clipFaceAgainstHull(@Const @ByRef btVector3 separatingNormal, @Const @ByRef btConvexPolyhedron hullA, @Const @ByRef btTransform transA, @Cast("btVertexArray*") @ByRef btVector3Array worldVertsB1, @Cast("btVertexArray*") @ByRef btVector3Array worldVertsB2, @Cast("const btScalar") double minDist, @Cast("btScalar") double maxDist, @ByRef btDiscreteCollisionDetectorInterface.Result resultOut);

	public static native @Cast("bool") boolean findSeparatingAxis(@Const @ByRef btConvexPolyhedron hullA, @Const @ByRef btConvexPolyhedron hullB, @Const @ByRef btTransform transA, @Const @ByRef btTransform transB, @ByRef btVector3 sep, @ByRef btDiscreteCollisionDetectorInterface.Result resultOut);

	/**the clipFace method is used internally */
	public static native void clipFace(@Cast("const btVertexArray*") @ByRef btVector3Array pVtxIn, @Cast("btVertexArray*") @ByRef btVector3Array ppVtxOut, @Const @ByRef btVector3 planeNormalWS, @Cast("btScalar") double planeEqWS);
}
