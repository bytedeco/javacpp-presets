// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btConvexPolyhedron extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btConvexPolyhedron(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btConvexPolyhedron(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btConvexPolyhedron position(long position) {
        return (btConvexPolyhedron)super.position(position);
    }
    @Override public btConvexPolyhedron getPointer(long i) {
        return new btConvexPolyhedron((Pointer)this).offsetAddress(i);
    }


	public btConvexPolyhedron() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @ByRef btVector3Array m_vertices(); public native btConvexPolyhedron m_vertices(btVector3Array setter);
	public native @ByRef btFaceArray m_faces(); public native btConvexPolyhedron m_faces(btFaceArray setter);
	public native @ByRef btVector3Array m_uniqueEdges(); public native btConvexPolyhedron m_uniqueEdges(btVector3Array setter);

	public native @ByRef btVector3 m_localCenter(); public native btConvexPolyhedron m_localCenter(btVector3 setter);
	public native @ByRef btVector3 m_extents(); public native btConvexPolyhedron m_extents(btVector3 setter);
	public native @Cast("btScalar") double m_radius(); public native btConvexPolyhedron m_radius(double setter);
	public native @ByRef btVector3 mC(); public native btConvexPolyhedron mC(btVector3 setter);
	public native @ByRef btVector3 mE(); public native btConvexPolyhedron mE(btVector3 setter);

	public native void initialize();
	public native void initialize2();
	public native @Cast("bool") boolean testContainment();

	public native void project(@Const @ByRef btTransform trans, @Const @ByRef btVector3 dir, @Cast("btScalar*") @ByRef DoublePointer minProj, @Cast("btScalar*") @ByRef DoublePointer maxProj, @ByRef btVector3 witnesPtMin, @ByRef btVector3 witnesPtMax);
	public native void project(@Const @ByRef btTransform trans, @Const @ByRef btVector3 dir, @Cast("btScalar*") @ByRef DoubleBuffer minProj, @Cast("btScalar*") @ByRef DoubleBuffer maxProj, @ByRef btVector3 witnesPtMin, @ByRef btVector3 witnesPtMax);
	public native void project(@Const @ByRef btTransform trans, @Const @ByRef btVector3 dir, @Cast("btScalar*") @ByRef double[] minProj, @Cast("btScalar*") @ByRef double[] maxProj, @ByRef btVector3 witnesPtMin, @ByRef btVector3 witnesPtMax);
}
