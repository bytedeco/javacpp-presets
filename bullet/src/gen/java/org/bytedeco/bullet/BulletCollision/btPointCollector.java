// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btPointCollector extends btDiscreteCollisionDetectorInterface.Result {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btPointCollector(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btPointCollector(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btPointCollector position(long position) {
        return (btPointCollector)super.position(position);
    }
    @Override public btPointCollector getPointer(long i) {
        return new btPointCollector((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btVector3 m_normalOnBInWorld(); public native btPointCollector m_normalOnBInWorld(btVector3 setter);
	public native @ByRef btVector3 m_pointInWorld(); public native btPointCollector m_pointInWorld(btVector3 setter);
	public native @Cast("btScalar") double m_distance(); public native btPointCollector m_distance(double setter);  //negative means penetration

	public native @Cast("bool") boolean m_hasResult(); public native btPointCollector m_hasResult(boolean setter);

	public btPointCollector() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void setShapeIdentifiersA(int partId0, int index0);
	public native void setShapeIdentifiersB(int partId1, int index1);

	public native void addContactPoint(@Const @ByRef btVector3 normalOnBInWorld, @Const @ByRef btVector3 pointInWorld, @Cast("btScalar") double depth);
}
