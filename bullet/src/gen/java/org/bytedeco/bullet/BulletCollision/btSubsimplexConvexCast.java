// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletCollision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.BulletCollision.*;


/** btSubsimplexConvexCast implements Gino van den Bergens' paper
 * "Ray Casting against bteral Convex Objects with Application to Continuous Collision Detection"
 *  GJK based Ray Cast, optimized version
 *  Objects should not start in overlap, otherwise results are not defined. */
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletCollision.class)
public class btSubsimplexConvexCast extends btConvexCast {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btSubsimplexConvexCast(Pointer p) { super(p); }

	public btSubsimplexConvexCast(@Const btConvexShape shapeA, @Const btConvexShape shapeB, btSimplexSolverInterface simplexSolver) { super((Pointer)null); allocate(shapeA, shapeB, simplexSolver); }
	private native void allocate(@Const btConvexShape shapeA, @Const btConvexShape shapeB, btSimplexSolverInterface simplexSolver);

	//virtual ~btSubsimplexConvexCast();
	/**SimsimplexConvexCast calculateTimeOfImpact calculates the time of impact+normal for the linear cast (sweep) between two moving objects.
	 * Precondition is that objects should not penetration/overlap at the start from the interval. Overlap can be tested using btGjkPairDetector. */
	public native @Cast("bool") boolean calcTimeOfImpact(
			@Const @ByRef btTransform fromA,
			@Const @ByRef btTransform toA,
			@Const @ByRef btTransform fromB,
			@Const @ByRef btTransform toB,
			@ByRef CastResult result);
}
