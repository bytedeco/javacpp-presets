// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3Common;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.Bullet3Common.*;


/** Utils related to temporal transforms */
@Properties(inherit = org.bytedeco.bullet.presets.Bullet3Common.class)
public class b3TransformUtil extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public b3TransformUtil() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3TransformUtil(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3TransformUtil(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public b3TransformUtil position(long position) {
        return (b3TransformUtil)super.position(position);
    }
    @Override public b3TransformUtil getPointer(long i) {
        return new b3TransformUtil((Pointer)this).offsetAddress(i);
    }

	public static native void integrateTransform(@Const @ByRef b3Transform curTrans, @Const @ByRef b3Vector3 linvel, @Const @ByRef b3Vector3 angvel, @Cast("b3Scalar") float timeStep, @ByRef b3Transform predictedTransform);

	public static native void calculateVelocityQuaternion(@Const @ByRef b3Vector3 pos0, @Const @ByRef b3Vector3 pos1, @Const @ByRef b3Quaternion orn0, @Const @ByRef b3Quaternion orn1, @Cast("b3Scalar") float timeStep, @ByRef b3Vector3 linVel, @ByRef b3Vector3 angVel);

	public static native void calculateDiffAxisAngleQuaternion(@Const @ByRef b3Quaternion orn0, @Const @ByRef b3Quaternion orn1a, @ByRef b3Vector3 axis, @Cast("b3Scalar*") @ByRef FloatPointer angle);
	public static native void calculateDiffAxisAngleQuaternion(@Const @ByRef b3Quaternion orn0, @Const @ByRef b3Quaternion orn1a, @ByRef b3Vector3 axis, @Cast("b3Scalar*") @ByRef FloatBuffer angle);
	public static native void calculateDiffAxisAngleQuaternion(@Const @ByRef b3Quaternion orn0, @Const @ByRef b3Quaternion orn1a, @ByRef b3Vector3 axis, @Cast("b3Scalar*") @ByRef float[] angle);

	public static native void calculateVelocity(@Const @ByRef b3Transform transform0, @Const @ByRef b3Transform transform1, @Cast("b3Scalar") float timeStep, @ByRef b3Vector3 linVel, @ByRef b3Vector3 angVel);

	public static native void calculateDiffAxisAngle(@Const @ByRef b3Transform transform0, @Const @ByRef b3Transform transform1, @ByRef b3Vector3 axis, @Cast("b3Scalar*") @ByRef FloatPointer angle);
	public static native void calculateDiffAxisAngle(@Const @ByRef b3Transform transform0, @Const @ByRef b3Transform transform1, @ByRef b3Vector3 axis, @Cast("b3Scalar*") @ByRef FloatBuffer angle);
	public static native void calculateDiffAxisAngle(@Const @ByRef b3Transform transform0, @Const @ByRef b3Transform transform1, @ByRef b3Vector3 axis, @Cast("b3Scalar*") @ByRef float[] angle);
}
