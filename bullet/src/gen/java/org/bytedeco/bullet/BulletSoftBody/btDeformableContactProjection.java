// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletSoftBody;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;
import org.bytedeco.bullet.BulletDynamics.*;
import static org.bytedeco.bullet.global.BulletDynamics.*;

import static org.bytedeco.bullet.global.BulletSoftBody.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletSoftBody.class)
public class btDeformableContactProjection extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btDeformableContactProjection(Pointer p) { super(p); }

	public native @ByRef btSoftBodyArray m_softBodies(); public native btDeformableContactProjection m_softBodies(btSoftBodyArray setter);

	// all constraints involving face
	public native @ByRef btDeformableContactConstraintArray m_allFaceConstraints(); public native btDeformableContactProjection m_allFaceConstraints(btDeformableContactConstraintArray setter);
// #ifndef USE_MGS
	// map from node index to projection directions
	public native @ByRef btHashMap_btHashInt_btVector3Array m_projectionsDict(); public native btDeformableContactProjection m_projectionsDict(btHashMap_btHashInt_btVector3Array setter);
// #else
// #endif

	public native @ByRef LagrangeMultiplierArray m_lagrangeMultipliers(); public native btDeformableContactProjection m_lagrangeMultipliers(LagrangeMultiplierArray setter);

	// map from node index to static constraint
	public native @ByRef btDeformableStaticConstraintArrayArray m_staticConstraints(); public native btDeformableContactProjection m_staticConstraints(btDeformableStaticConstraintArrayArray setter);
	// map from node index to node rigid constraint
	public native @ByRef btDeformableNodeRigidContactConstraintArrayArray m_nodeRigidConstraints(); public native btDeformableContactProjection m_nodeRigidConstraints(btDeformableNodeRigidContactConstraintArrayArray setter);
	// map from node index to face rigid constraint
	public native @ByRef btDeformableFaceRigidContactConstraintArrayArray m_faceRigidConstraints(); public native btDeformableContactProjection m_faceRigidConstraints(btDeformableFaceRigidContactConstraintArrayArray setter);
	// map from node index to deformable constraint
	public native @ByRef btDeformableFaceNodeContactConstraintArrayArray m_deformableConstraints(); public native btDeformableContactProjection m_deformableConstraints(btDeformableFaceNodeContactConstraintArrayArray setter);
	// map from node index to node anchor constraint
	public native @ByRef btDeformableNodeAnchorConstraintArrayArray m_nodeAnchorConstraints(); public native btDeformableContactProjection m_nodeAnchorConstraints(btDeformableNodeAnchorConstraintArrayArray setter);

	public native @Cast("bool") boolean m_useStrainLimiting(); public native btDeformableContactProjection m_useStrainLimiting(boolean setter);

	public btDeformableContactProjection(@ByRef btSoftBodyArray softBodies) { super((Pointer)null); allocate(softBodies); }
	private native void allocate(@ByRef btSoftBodyArray softBodies);

	// apply the constraints to the rhs of the linear solve
	public native void project(@Cast("btDeformableContactProjection::TVStack*") @ByRef btVector3Array x);

	// add friction force to the rhs of the linear solve
	public native void applyDynamicFriction(@Cast("btDeformableContactProjection::TVStack*") @ByRef btVector3Array f);

	// update and solve the constraints
	public native @Cast("btScalar") double update(@Cast("btCollisionObject**") PointerPointer deformableBodies, int numDeformableBodies, @Const @ByRef btContactSolverInfo infoGlobal);
	public native @Cast("btScalar") double update(@ByPtrPtr btCollisionObject deformableBodies, int numDeformableBodies, @Const @ByRef btContactSolverInfo infoGlobal);

	// Add constraints to m_constraints. In addition, the constraints that each vertex own are recorded in m_constraintsDict.
	public native void setConstraints(@Const @ByRef btContactSolverInfo infoGlobal);

	// Set up projections for each vertex by adding the projection direction to
	public native void setProjection();

	public native void reinitialize(@Cast("bool") boolean nodeUpdated);

	public native @Cast("btScalar") double solveSplitImpulse(@Cast("btCollisionObject**") PointerPointer deformableBodies, int numDeformableBodies, @Const @ByRef btContactSolverInfo infoGlobal);
	public native @Cast("btScalar") double solveSplitImpulse(@ByPtrPtr btCollisionObject deformableBodies, int numDeformableBodies, @Const @ByRef btContactSolverInfo infoGlobal);

	public native void setLagrangeMultiplier();

	public native void checkConstraints(@Cast("const btDeformableContactProjection::TVStack*") @ByRef btVector3Array x);
}
