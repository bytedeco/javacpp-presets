// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletSoftBody;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;
import org.bytedeco.bullet.BulletDynamics.*;
import static org.bytedeco.bullet.global.BulletDynamics.*;

import static org.bytedeco.bullet.global.BulletSoftBody.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletSoftBody.class)
public class btDeformableMassSpringForce extends btDeformableLagrangianForce {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btDeformableMassSpringForce(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btDeformableMassSpringForce(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btDeformableMassSpringForce position(long position) {
        return (btDeformableMassSpringForce)super.position(position);
    }
    @Override public btDeformableMassSpringForce getPointer(long i) {
        return new btDeformableMassSpringForce((Pointer)this).offsetAddress(i);
    }

	public btDeformableMassSpringForce() { super((Pointer)null); allocate(); }
	private native void allocate();
	public btDeformableMassSpringForce(@Cast("btScalar") double k, @Cast("btScalar") double d, @Cast("bool") boolean conserve_angular/*=true*/, double bending_k/*=-1*/) { super((Pointer)null); allocate(k, d, conserve_angular, bending_k); }
	private native void allocate(@Cast("btScalar") double k, @Cast("btScalar") double d, @Cast("bool") boolean conserve_angular/*=true*/, double bending_k/*=-1*/);
	public btDeformableMassSpringForce(@Cast("btScalar") double k, @Cast("btScalar") double d) { super((Pointer)null); allocate(k, d); }
	private native void allocate(@Cast("btScalar") double k, @Cast("btScalar") double d);

	public native void addScaledForces(@Cast("btScalar") double scale, @Cast("btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array force);

	public native void addScaledExplicitForce(@Cast("btScalar") double scale, @Cast("btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array force);

	public native void addScaledDampingForce(@Cast("btScalar") double scale, @Cast("btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array force);

	public native void addScaledElasticForce(@Cast("btScalar") double scale, @Cast("btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array force);

	public native void addScaledDampingForceDifferential(@Cast("btScalar") double scale, @Cast("const btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array dv, @Cast("btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array df);

	public native void buildDampingForceDifferentialDiagonal(@Cast("btScalar") double scale, @Cast("btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array diagA);

	public native double totalElasticEnergy(@Cast("btScalar") double dt);

	public native double totalDampingEnergy(@Cast("btScalar") double dt);

	public native void addScaledElasticForceDifferential(@Cast("btScalar") double scale, @Cast("const btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array dx, @Cast("btDeformableMassSpringForce::TVStack*") @ByRef btVector3Array df);

	public native @Cast("btDeformableLagrangianForceType") int getForceType();
}
