// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletSoftBody;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;
import org.bytedeco.bullet.BulletDynamics.*;
import static org.bytedeco.bullet.global.BulletDynamics.*;

import static org.bytedeco.bullet.global.BulletSoftBody.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletSoftBody.class)
public class btSoftBodySolver extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btSoftBodySolver(Pointer p) { super(p); }

	public enum SolverTypes {
		DEFAULT_SOLVER(0),
		CPU_SOLVER(1),
		CL_SOLVER(2),
		CL_SIMD_SOLVER(3),
		DX_SOLVER(4),
		DX_SIMD_SOLVER(5),
		DEFORMABLE_SOLVER(6),
		REDUCED_DEFORMABLE_SOLVER(7);

	    public final int value;
	    private SolverTypes(int v) { this.value = v; }
	    private SolverTypes(SolverTypes e) { this.value = e.value; }
	    public SolverTypes intern() { for (SolverTypes e : values()) if (e.value == value) return e; return this; }
	    @Override public String toString() { return intern().name(); }
	}

	/**
	 * Return the type of the solver.
	 */
	public native SolverTypes getSolverType();

	/** Ensure that this solver is initialized. */
	public native @Cast("bool") boolean checkInitialized();

	/** Optimize soft bodies in this solver. */
	public native void optimize(@ByRef btSoftBodyArray softBodies, @Cast("bool") boolean forceUpdate/*=false*/);
	public native void optimize(@ByRef btSoftBodyArray softBodies);

	/** Copy necessary data back to the original soft body source objects. */
	public native void copyBackToSoftBodies(@Cast("bool") boolean bMove/*=true*/);
	public native void copyBackToSoftBodies();

	/** Predict motion of soft bodies into next timestep */
	public native void predictMotion(@Cast("btScalar") double solverdt);

	/** Solve constraints for a set of soft bodies */
	public native void solveConstraints(@Cast("btScalar") double solverdt);

	/** Perform necessary per-step updates of soft bodies such as recomputing normals and bounding boxes */
	public native void updateSoftBodies();

	/** Process a collision between one of the world's soft bodies and another collision object */
	public native void processCollision(btSoftBody arg0, @Const btCollisionObjectWrapper arg1);

	/** Process a collision between two soft bodies */
	public native void processCollision(btSoftBody arg0, btSoftBody arg1);

	/** Set the number of velocity constraint solver iterations this solver uses. */
	public native void setNumberOfPositionIterations(int iterations);

	/** Get the number of velocity constraint solver iterations this solver uses. */
	public native int getNumberOfPositionIterations();

	/** Set the number of velocity constraint solver iterations this solver uses. */
	public native void setNumberOfVelocityIterations(int iterations);

	/** Get the number of velocity constraint solver iterations this solver uses. */
	public native int getNumberOfVelocityIterations();

	/** Return the timescale that the simulation is using */
	public native float getTimeScale();

// #if 0
// #endif
}
