// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class PHullResult extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PHullResult(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PHullResult(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PHullResult position(long position) {
        return (PHullResult)super.position(position);
    }
    @Override public PHullResult getPointer(long i) {
        return new PHullResult((Pointer)this).offsetAddress(i);
    }

	public PHullResult() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native @Cast("unsigned int") int mVcount(); public native PHullResult mVcount(int setter);
	public native @Cast("unsigned int") int mIndexCount(); public native PHullResult mIndexCount(int setter);
	public native @Cast("unsigned int") int mFaceCount(); public native PHullResult mFaceCount(int setter);
	public native btVector3 mVertices(); public native PHullResult mVertices(btVector3 setter);
	public native @ByRef @Cast("TUIntArray*") btUIntArray m_Indices(); public native PHullResult m_Indices(btUIntArray setter);
}
