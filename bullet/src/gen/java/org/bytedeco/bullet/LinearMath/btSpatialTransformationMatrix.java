// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


@Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class btSpatialTransformationMatrix extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public btSpatialTransformationMatrix() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btSpatialTransformationMatrix(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btSpatialTransformationMatrix(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btSpatialTransformationMatrix position(long position) {
        return (btSpatialTransformationMatrix)super.position(position);
    }
    @Override public btSpatialTransformationMatrix getPointer(long i) {
        return new btSpatialTransformationMatrix((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btMatrix3x3 m_rotMat(); public native btSpatialTransformationMatrix m_rotMat(btMatrix3x3 setter);  //btMatrix3x3 m_trnCrossMat;
	public native @ByRef btVector3 m_trnVec(); public native btSpatialTransformationMatrix m_trnVec(btVector3 setter);
	//
	/** enum btSpatialTransformationMatrix::eOutputOperation */
	public static final int
		None = 0,
		Add = 1,
		Subtract = 2;
	//

	public native void transformInverse(@Const @ByRef btSymmetricSpatialDyad inMat,
							  @ByRef btSymmetricSpatialDyad outMat,
							  @Cast("btSpatialTransformationMatrix::eOutputOperation") int outOp/*=btSpatialTransformationMatrix::None*/);
	public native void transformInverse(@Const @ByRef btSymmetricSpatialDyad inMat,
							  @ByRef btSymmetricSpatialDyad outMat);
}
