// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class btPlane extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btPlane(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btPlane(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btPlane position(long position) {
        return (btPlane)super.position(position);
    }
    @Override public btPlane getPointer(long i) {
        return new btPlane((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btVector3 normal(); public native btPlane normal(btVector3 setter);
	public native @Cast("btScalar") double dist(); public native btPlane dist(double setter);  // distance below origin - the D from plane equasion Ax+By+Cz+D=0
	public btPlane(@Const @ByRef btVector3 n, @Cast("btScalar") double d) { super((Pointer)null); allocate(n, d); }
	private native void allocate(@Const @ByRef btVector3 n, @Cast("btScalar") double d);
	public btPlane() { super((Pointer)null); allocate(); }
	private native void allocate();
}
