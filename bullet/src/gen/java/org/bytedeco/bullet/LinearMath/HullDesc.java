// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class HullDesc extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HullDesc(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HullDesc(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public HullDesc position(long position) {
        return (HullDesc)super.position(position);
    }
    @Override public HullDesc getPointer(long i) {
        return new HullDesc((Pointer)this).offsetAddress(i);
    }

	public HullDesc() { super((Pointer)null); allocate(); }
	private native void allocate();

	public HullDesc(@Cast("HullFlag") int flag,
				 @Cast("unsigned int") int vcount,
				 @Const btVector3 vertices,
				 @Cast("unsigned int") int stride/*=sizeof(btVector3)*/) { super((Pointer)null); allocate(flag, vcount, vertices, stride); }
	private native void allocate(@Cast("HullFlag") int flag,
				 @Cast("unsigned int") int vcount,
				 @Const btVector3 vertices,
				 @Cast("unsigned int") int stride/*=sizeof(btVector3)*/);
	public HullDesc(@Cast("HullFlag") int flag,
				 @Cast("unsigned int") int vcount,
				 @Const btVector3 vertices) { super((Pointer)null); allocate(flag, vcount, vertices); }
	private native void allocate(@Cast("HullFlag") int flag,
				 @Cast("unsigned int") int vcount,
				 @Const btVector3 vertices);

	public native @Cast("bool") boolean HasHullFlag(@Cast("HullFlag") int flag);

	public native void SetHullFlag(@Cast("HullFlag") int flag);

	public native void ClearHullFlag(@Cast("HullFlag") int flag);

	public native @Cast("unsigned int") int mFlags(); public native HullDesc mFlags(int setter);         // flags to use when generating the convex hull.
	public native @Cast("unsigned int") int mVcount(); public native HullDesc mVcount(int setter);        // number of vertices in the input point cloud
	public native @Const btVector3 mVertices(); public native HullDesc mVertices(btVector3 setter);  // the array of vertices.
	public native @Cast("unsigned int") int mVertexStride(); public native HullDesc mVertexStride(int setter);  // the stride of each vertex, in bytes.
	public native @Cast("btScalar") double mNormalEpsilon(); public native HullDesc mNormalEpsilon(double setter);     // the epsilon for removing duplicates.  This is a normalized value, if normalized bit is on.
	public native @Cast("unsigned int") int mMaxVertices(); public native HullDesc mMaxVertices(int setter);   // maximum number of vertices to be considered for the hull!
	public native @Cast("unsigned int") int mMaxFaces(); public native HullDesc mMaxFaces(int setter);
}
