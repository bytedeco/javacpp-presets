// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class btSymmetricSpatialDyad extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btSymmetricSpatialDyad(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btSymmetricSpatialDyad(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btSymmetricSpatialDyad position(long position) {
        return (btSymmetricSpatialDyad)super.position(position);
    }
    @Override public btSymmetricSpatialDyad getPointer(long i) {
        return new btSymmetricSpatialDyad((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btMatrix3x3 m_topLeftMat(); public native btSymmetricSpatialDyad m_topLeftMat(btMatrix3x3 setter);
	public native @ByRef btMatrix3x3 m_topRightMat(); public native btSymmetricSpatialDyad m_topRightMat(btMatrix3x3 setter);
	public native @ByRef btMatrix3x3 m_bottomLeftMat(); public native btSymmetricSpatialDyad m_bottomLeftMat(btMatrix3x3 setter);
	//
	public btSymmetricSpatialDyad() { super((Pointer)null); allocate(); }
	private native void allocate();
	public btSymmetricSpatialDyad(@Const @ByRef btMatrix3x3 topLeftMat, @Const @ByRef btMatrix3x3 topRightMat, @Const @ByRef btMatrix3x3 bottomLeftMat) { super((Pointer)null); allocate(topLeftMat, topRightMat, bottomLeftMat); }
	private native void allocate(@Const @ByRef btMatrix3x3 topLeftMat, @Const @ByRef btMatrix3x3 topRightMat, @Const @ByRef btMatrix3x3 bottomLeftMat);
	//
	public native void setMatrix(@Const @ByRef btMatrix3x3 topLeftMat, @Const @ByRef btMatrix3x3 topRightMat, @Const @ByRef btMatrix3x3 bottomLeftMat);
	//
	public native void addMatrix(@Const @ByRef btMatrix3x3 topLeftMat, @Const @ByRef btMatrix3x3 topRightMat, @Const @ByRef btMatrix3x3 bottomLeftMat);
	//
	public native void setIdentity();
	//
	public native @ByRef @Name("operator -=") btSymmetricSpatialDyad subtractPut(@Const @ByRef btSymmetricSpatialDyad mat);
	//
	public native @ByVal @Name("operator *") btSpatialForceVector multiply(@Const @ByRef btSpatialMotionVector vec);
}
