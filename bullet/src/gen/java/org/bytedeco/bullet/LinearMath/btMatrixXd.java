// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


@Name("btMatrixX<double>") @NoOffset @Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class btMatrixXd extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btMatrixXd(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btMatrixXd(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btMatrixXd position(long position) {
        return (btMatrixXd)super.position(position);
    }
    @Override public btMatrixXd getPointer(long i) {
        return new btMatrixXd((Pointer)this).offsetAddress(i);
    }

	public native int m_rows(); public native btMatrixXd m_rows(int setter);
	public native int m_cols(); public native btMatrixXd m_cols(int setter);
	public native int m_operations(); public native btMatrixXd m_operations(int setter);
	public native int m_resizeOperations(); public native btMatrixXd m_resizeOperations(int setter);
	public native int m_setElemOperations(); public native btMatrixXd m_setElemOperations(int setter);

	public native @ByRef btDoubleArray m_storage(); public native btMatrixXd m_storage(btDoubleArray setter);
	public native @ByRef btIntArrayArray m_rowNonZeroElements1(); public native btMatrixXd m_rowNonZeroElements1(btIntArrayArray setter);

	public native DoublePointer getBufferPointerWritable();

	public native @Const DoublePointer getBufferPointer();
	public btMatrixXd() { super((Pointer)null); allocate(); }
	private native void allocate();
	public btMatrixXd(int rows, int cols) { super((Pointer)null); allocate(rows, cols); }
	private native void allocate(int rows, int cols);
	public native void resize(int rows, int cols);
	public native int cols();
	public native int rows();
	/**we don't want this read/write operator(), because we cannot keep track of non-zero elements, use setElem instead */
	/*T& operator() (int row,int col)
	{
		return m_storage[col*m_rows+row];
	}
	*/

	public native void addElem(int row, int col, double val);

	public native void setElem(int row, int col, double val);

	public native void mulElem(int row, int col, double val);

	public native void copyLowerToUpperTriangle();

	public native @Name("operator ()") double apply(int row, int col);

	public native void setZero();

	public native void setIdentity();

	public native void printMatrix(@Cast("const char*") BytePointer msg);
	public native void printMatrix(String msg);

	public native void rowComputeNonZeroElements();
	public native @ByVal btMatrixXd transpose();

	public native @ByVal @Name("operator *") btMatrixXd multiply(@Const @ByRef btMatrixXd other);

	// this assumes the 4th and 8th rows of B and C are zero.
	public native void multiplyAdd2_p8r(@Cast("const btScalar*") DoublePointer B, @Cast("const btScalar*") DoublePointer C, int numRows, int numRowsOther, int row, int col);
	public native void multiplyAdd2_p8r(@Cast("const btScalar*") DoubleBuffer B, @Cast("const btScalar*") DoubleBuffer C, int numRows, int numRowsOther, int row, int col);
	public native void multiplyAdd2_p8r(@Cast("const btScalar*") double[] B, @Cast("const btScalar*") double[] C, int numRows, int numRowsOther, int row, int col);

	public native void multiply2_p8r(@Cast("const btScalar*") DoublePointer B, @Cast("const btScalar*") DoublePointer C, int numRows, int numRowsOther, int row, int col);
	public native void multiply2_p8r(@Cast("const btScalar*") DoubleBuffer B, @Cast("const btScalar*") DoubleBuffer C, int numRows, int numRowsOther, int row, int col);
	public native void multiply2_p8r(@Cast("const btScalar*") double[] B, @Cast("const btScalar*") double[] C, int numRows, int numRowsOther, int row, int col);

	public native void setSubMatrix(int rowstart, int colstart, int rowend, int colend, double value);

	public native void setSubMatrix(int rowstart, int colstart, int rowend, int colend, @Const @ByRef btMatrixXd block);
	public native void setSubMatrix(int rowstart, int colstart, int rowend, int colend, @Const @ByRef btVectorXd block);

	public native @ByVal btMatrixXd negative();
}
