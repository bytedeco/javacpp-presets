// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


/**very basic hashable string implementation, compatible with btHashMap */
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class btHashString extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btHashString(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btHashString(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btHashString position(long position) {
        return (btHashString)super.position(position);
    }
    @Override public btHashString getPointer(long i) {
        return new btHashString((Pointer)this).offsetAddress(i);
    }

	public native @StdString BytePointer m_string1(); public native btHashString m_string1(BytePointer setter);
	public native @Cast("unsigned int") int m_hash(); public native btHashString m_hash(int setter);

	public native @Cast("unsigned int") int getHash();

	public btHashString() { super((Pointer)null); allocate(); }
	private native void allocate();
	public btHashString(@Cast("const char*") BytePointer name) { super((Pointer)null); allocate(name); }
	private native void allocate(@Cast("const char*") BytePointer name);
	public btHashString(String name) { super((Pointer)null); allocate(name); }
	private native void allocate(String name);

	public native @Cast("bool") boolean equals(@Const @ByRef btHashString other);
}
