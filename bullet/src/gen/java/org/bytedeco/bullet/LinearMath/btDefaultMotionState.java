// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


/**The btDefaultMotionState provides a common implementation to synchronize world transforms with offsets. */
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class btDefaultMotionState extends btMotionState {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btDefaultMotionState(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btDefaultMotionState(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btDefaultMotionState position(long position) {
        return (btDefaultMotionState)super.position(position);
    }
    @Override public btDefaultMotionState getPointer(long i) {
        return new btDefaultMotionState((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btTransform m_graphicsWorldTrans(); public native btDefaultMotionState m_graphicsWorldTrans(btTransform setter);
	public native @ByRef btTransform m_centerOfMassOffset(); public native btDefaultMotionState m_centerOfMassOffset(btTransform setter);
	public native @ByRef btTransform m_startWorldTrans(); public native btDefaultMotionState m_startWorldTrans(btTransform setter);
	public native Pointer m_userPointer(); public native btDefaultMotionState m_userPointer(Pointer setter);

	public btDefaultMotionState(@Const @ByRef(nullValue = "btTransform::getIdentity()") btTransform startTrans, @Const @ByRef(nullValue = "btTransform::getIdentity()") btTransform centerOfMassOffset) { super((Pointer)null); allocate(startTrans, centerOfMassOffset); }
	private native void allocate(@Const @ByRef(nullValue = "btTransform::getIdentity()") btTransform startTrans, @Const @ByRef(nullValue = "btTransform::getIdentity()") btTransform centerOfMassOffset);
	public btDefaultMotionState() { super((Pointer)null); allocate(); }
	private native void allocate();

	/**synchronizes world transform from user to physics */
	@Virtual public native @Const({false, false, true}) void getWorldTransform(@ByRef btTransform centerOfMassWorldTrans);

	/**synchronizes world transform from physics to user
	 * Bullet only calls the update of worldtransform for active objects */
	@Virtual public native void setWorldTransform(@Const @ByRef btTransform centerOfMassWorldTrans);
}
