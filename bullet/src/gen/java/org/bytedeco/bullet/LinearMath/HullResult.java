// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.LinearMath;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.bullet.global.LinearMath.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.LinearMath.class)
public class HullResult extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HullResult(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HullResult(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public HullResult position(long position) {
        return (HullResult)super.position(position);
    }
    @Override public HullResult getPointer(long i) {
        return new HullResult((Pointer)this).offsetAddress(i);
    }

	public HullResult() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("bool") boolean mPolygons(); public native HullResult mPolygons(boolean setter);                                    // true if indices represents polygons, false indices are triangles
	public native @Cast("unsigned int") int mNumOutputVertices(); public native HullResult mNumOutputVertices(int setter);                   // number of vertices in the output hull
	public native @ByRef btVector3Array m_OutputVertices(); public native HullResult m_OutputVertices(btVector3Array setter);  // array of vertices
	public native @Cast("unsigned int") int mNumFaces(); public native HullResult mNumFaces(int setter);                            // the number of faces produced
	public native @Cast("unsigned int") int mNumIndices(); public native HullResult mNumIndices(int setter);                          // the total number of indices
	public native @ByRef btUIntArray m_Indices(); public native HullResult m_Indices(btUIntArray setter);      // pointer to indices.

	// If triangles, then indices are array indexes into the vertex list.
	// If polygons, indices are in the form (number of points in face) (p1, p2, p3, ..) etc..
}
