// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3OpenCL;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;
import org.bytedeco.bullet.Bullet3Collision.*;
import static org.bytedeco.bullet.global.Bullet3Collision.*;
import org.bytedeco.bullet.Bullet3Dynamics.*;
import static org.bytedeco.bullet.global.Bullet3Dynamics.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.Bullet3OpenCL.*;


@Properties(inherit = org.bytedeco.bullet.presets.Bullet3OpenCL.class)
public class b3SubSimplexClosestResult extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public b3SubSimplexClosestResult() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3SubSimplexClosestResult(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3SubSimplexClosestResult(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public b3SubSimplexClosestResult position(long position) {
        return (b3SubSimplexClosestResult)super.position(position);
    }
    @Override public b3SubSimplexClosestResult getPointer(long i) {
        return new b3SubSimplexClosestResult((Pointer)this).offsetAddress(i);
    }

	public native @ByRef b3Vector3 m_closestPointOnSimplex(); public native b3SubSimplexClosestResult m_closestPointOnSimplex(b3Vector3 setter);
	//MASK for m_usedVertices
	//stores the simplex vertex-usage, using the MASK,
	// if m_usedVertices & MASK then the related vertex is used
	public native @ByRef b3UsageBitfield m_usedVertices(); public native b3SubSimplexClosestResult m_usedVertices(b3UsageBitfield setter);
	public native @Cast("b3Scalar") float m_barycentricCoords(int i); public native b3SubSimplexClosestResult m_barycentricCoords(int i, float setter);
	@MemberGetter public native @Cast("b3Scalar*") FloatPointer m_barycentricCoords();
	public native @Cast("bool") boolean m_degenerate(); public native b3SubSimplexClosestResult m_degenerate(boolean setter);

	public native void reset();
	public native @Cast("bool") boolean isValid();
	public native void setBarycentricCoordinates(@Cast("b3Scalar") float a/*=b3Scalar(0.)*/, @Cast("b3Scalar") float b/*=b3Scalar(0.)*/, @Cast("b3Scalar") float c/*=b3Scalar(0.)*/, @Cast("b3Scalar") float d/*=b3Scalar(0.)*/);
	public native void setBarycentricCoordinates();
}
