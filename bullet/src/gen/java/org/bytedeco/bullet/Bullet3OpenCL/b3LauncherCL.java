// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3OpenCL;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;
import org.bytedeco.bullet.Bullet3Collision.*;
import static org.bytedeco.bullet.global.Bullet3Collision.*;
import org.bytedeco.bullet.Bullet3Dynamics.*;
import static org.bytedeco.bullet.global.Bullet3Dynamics.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.Bullet3OpenCL.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.Bullet3OpenCL.class)
public class b3LauncherCL extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3LauncherCL(Pointer p) { super(p); }

	public native @ByRef b3UnsignedCharOCLArrayArray m_arrays(); public native b3LauncherCL m_arrays(b3UnsignedCharOCLArrayArray setter);

	public b3LauncherCL(@Cast("cl_command_queue") Pointer queue, @Cast("cl_kernel") Pointer kernel, @Cast("const char*") BytePointer name) { super((Pointer)null); allocate(queue, kernel, name); }
	private native void allocate(@Cast("cl_command_queue") Pointer queue, @Cast("cl_kernel") Pointer kernel, @Cast("const char*") BytePointer name);
	public b3LauncherCL(@Cast("cl_command_queue") Pointer queue, @Cast("cl_kernel") Pointer kernel, String name) { super((Pointer)null); allocate(queue, kernel, name); }
	private native void allocate(@Cast("cl_command_queue") Pointer queue, @Cast("cl_kernel") Pointer kernel, String name);

	public native void setBuffer(@Cast("cl_mem") Pointer clBuffer);

	public native void setBuffers(b3BufferInfoCL buffInfo, int n);

	public native int getSerializationBufferSize();

	public native int deserializeArgs(@Cast("unsigned char*") BytePointer buf, int bufSize, @Cast("cl_context") Pointer ctx);
	public native int deserializeArgs(@Cast("unsigned char*") ByteBuffer buf, int bufSize, @Cast("cl_context") Pointer ctx);
	public native int deserializeArgs(@Cast("unsigned char*") byte[] buf, int bufSize, @Cast("cl_context") Pointer ctx);

	

	public native int serializeArguments(@Cast("unsigned char*") BytePointer destBuffer, int destBufferCapacity);
	public native int serializeArguments(@Cast("unsigned char*") ByteBuffer destBuffer, int destBufferCapacity);
	public native int serializeArguments(@Cast("unsigned char*") byte[] destBuffer, int destBufferCapacity);

	public native int getNumArguments();

	public native @ByVal b3KernelArgData getArgument(int index);

	public native void serializeToFile(@Cast("const char*") BytePointer fileName, int numWorkItems);
	public native void serializeToFile(String fileName, int numWorkItems);

	public native void launch1D(int numThreads, int localSize/*=64*/);
	public native void launch1D(int numThreads);

	public native void launch2D(int numThreadsX, int numThreadsY, int localSizeX, int localSizeY);

	public native void enableSerialization(@Cast("bool") boolean serialize);
}
