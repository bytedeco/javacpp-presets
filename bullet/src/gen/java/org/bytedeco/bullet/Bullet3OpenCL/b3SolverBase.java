// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3OpenCL;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;
import org.bytedeco.bullet.Bullet3Collision.*;
import static org.bytedeco.bullet.global.Bullet3Collision.*;
import org.bytedeco.bullet.Bullet3Dynamics.*;
import static org.bytedeco.bullet.global.Bullet3Dynamics.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.Bullet3OpenCL.*;


@Properties(inherit = org.bytedeco.bullet.presets.Bullet3OpenCL.class)
public class b3SolverBase extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public b3SolverBase() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3SolverBase(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3SolverBase(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public b3SolverBase position(long position) {
        return (b3SolverBase)super.position(position);
    }
    @Override public b3SolverBase getPointer(long i) {
        return new b3SolverBase((Pointer)this).offsetAddress(i);
    }

	@NoOffset public static class ConstraintCfg extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public ConstraintCfg(Pointer p) { super(p); }
	
		public ConstraintCfg(float dt/*=0.f*/) { super((Pointer)null); allocate(dt); }
		private native void allocate(float dt/*=0.f*/);
		public ConstraintCfg() { super((Pointer)null); allocate(); }
		private native void allocate();

		public native float m_positionDrift(); public native ConstraintCfg m_positionDrift(float setter);
		public native float m_positionConstraintCoeff(); public native ConstraintCfg m_positionConstraintCoeff(float setter);
		public native float m_dt(); public native ConstraintCfg m_dt(float setter);
		public native @Cast("bool") boolean m_enableParallelSolve(); public native ConstraintCfg m_enableParallelSolve(boolean setter);
		public native float m_batchCellSize(); public native ConstraintCfg m_batchCellSize(float setter);
		public native int m_staticIdx(); public native ConstraintCfg m_staticIdx(int setter);
	}
}
