// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3OpenCL;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;
import org.bytedeco.bullet.Bullet3Collision.*;
import static org.bytedeco.bullet.global.Bullet3Collision.*;
import org.bytedeco.bullet.Bullet3Dynamics.*;
import static org.bytedeco.bullet.global.Bullet3Dynamics.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.Bullet3OpenCL.*;


/**b3QuantizedBvhNode is a compressed aabb node, 16 bytes.
 * Node can be used for leafnode or internal node. Leafnodes can point to 32-bit triangle index (non-negative range). */
@Properties(inherit = org.bytedeco.bullet.presets.Bullet3OpenCL.class)
public class b3QuantizedBvhNode extends b3QuantizedBvhNodeData {
    static { Loader.load(); }
    /** Default native constructor. */
    public b3QuantizedBvhNode() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3QuantizedBvhNode(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3QuantizedBvhNode(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public b3QuantizedBvhNode position(long position) {
        return (b3QuantizedBvhNode)super.position(position);
    }
    @Override public b3QuantizedBvhNode getPointer(long i) {
        return new b3QuantizedBvhNode((Pointer)this).offsetAddress(i);
    }


	public native @Cast("bool") boolean isLeafNode();
	public native int getEscapeIndex();
	public native int getTriangleIndex();
	public native int getPartId();
}
