// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3OpenCL;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;
import org.bytedeco.bullet.Bullet3Collision.*;
import static org.bytedeco.bullet.global.Bullet3Collision.*;
import org.bytedeco.bullet.Bullet3Dynamics.*;
import static org.bytedeco.bullet.global.Bullet3Dynamics.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;

import static org.bytedeco.bullet.global.Bullet3OpenCL.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.Bullet3OpenCL.class)
public class b3Solver extends b3SolverBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3Solver(Pointer p) { super(p); }

	public native @Cast("cl_context") Pointer m_context(); public native b3Solver m_context(Pointer setter);
	public native @Cast("cl_device_id") Pointer m_device(); public native b3Solver m_device(Pointer setter);
	public native @Cast("cl_command_queue") Pointer m_queue(); public native b3Solver m_queue(Pointer setter);

	public native b3UnsignedIntOCLArray m_numConstraints(); public native b3Solver m_numConstraints(b3UnsignedIntOCLArray setter);
	public native b3UnsignedIntOCLArray m_offsets(); public native b3Solver m_offsets(b3UnsignedIntOCLArray setter);
	

	public native int m_nIterations(); public native b3Solver m_nIterations(int setter);
	public native @Cast("cl_kernel") Pointer m_batchingKernel(); public native b3Solver m_batchingKernel(Pointer setter);
	public native @Cast("cl_kernel") Pointer m_batchingKernelNew(); public native b3Solver m_batchingKernelNew(Pointer setter);
	public native @Cast("cl_kernel") Pointer m_solveContactKernel(); public native b3Solver m_solveContactKernel(Pointer setter);
	public native @Cast("cl_kernel") Pointer m_solveFrictionKernel(); public native b3Solver m_solveFrictionKernel(Pointer setter);
	public native @Cast("cl_kernel") Pointer m_contactToConstraintKernel(); public native b3Solver m_contactToConstraintKernel(Pointer setter);
	public native @Cast("cl_kernel") Pointer m_setSortDataKernel(); public native b3Solver m_setSortDataKernel(Pointer setter);
	public native @Cast("cl_kernel") Pointer m_reorderContactKernel(); public native b3Solver m_reorderContactKernel(Pointer setter);
	public native @Cast("cl_kernel") Pointer m_copyConstraintKernel(); public native b3Solver m_copyConstraintKernel(Pointer setter);

	public native b3RadixSort32CL m_sort32(); public native b3Solver m_sort32(b3RadixSort32CL setter);
	public native b3BoundSearchCL m_search(); public native b3Solver m_search(b3BoundSearchCL setter);
	

	public native b3SortDataOCLArray m_sortDataBuffer(); public native b3Solver m_sortDataBuffer(b3SortDataOCLArray setter);
	public native b3Contact4OCLArray m_contactBuffer2(); public native b3Solver m_contactBuffer2(b3Contact4OCLArray setter);

	/** enum b3Solver:: */
	public static final int
		DYNAMIC_CONTACT_ALLOCATION_THRESHOLD = 2000000;

	public b3Solver(@Cast("cl_context") Pointer ctx, @Cast("cl_device_id") Pointer device, @Cast("cl_command_queue") Pointer queue, int pairCapacity) { super((Pointer)null); allocate(ctx, device, queue, pairCapacity); }
	private native void allocate(@Cast("cl_context") Pointer ctx, @Cast("cl_device_id") Pointer device, @Cast("cl_command_queue") Pointer queue, int pairCapacity);

	public native void solveContactConstraint(@Const b3RigidBodyDataOCLArray bodyBuf, @Const b3InertiaDataOCLArray inertiaBuf,
									b3GpuConstraint4OCLArray constraint, Pointer additionalData, int n, int maxNumBatches);

	public native void solveContactConstraintHost(b3RigidBodyDataOCLArray bodyBuf, b3InertiaDataOCLArray shapeBuf,
										b3GpuConstraint4OCLArray constraint, Pointer additionalData, int n, int maxNumBatches, b3IntArray batchSizes);

	public native void convertToConstraints(@Const b3RigidBodyDataOCLArray bodyBuf,
								  @Const b3InertiaDataOCLArray shapeBuf,
								  b3Contact4OCLArray contactsIn, b3GpuConstraint4OCLArray contactCOut, Pointer additionalData,
								  int nContacts, @Const @ByRef ConstraintCfg cfg);

	public native void batchContacts(b3Contact4OCLArray contacts, int nContacts, b3UnsignedIntOCLArray n, b3UnsignedIntOCLArray offsets, int staticIdx);
}
