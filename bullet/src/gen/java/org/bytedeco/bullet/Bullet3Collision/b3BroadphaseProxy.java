// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3Collision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;

import static org.bytedeco.bullet.global.Bullet3Collision.*;


// #if B3_DBVT_BP_PROFILE

// #endif

@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.Bullet3Collision.class)
public class b3BroadphaseProxy extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3BroadphaseProxy(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3BroadphaseProxy(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public b3BroadphaseProxy position(long position) {
        return (b3BroadphaseProxy)super.position(position);
    }
    @Override public b3BroadphaseProxy getPointer(long i) {
        return new b3BroadphaseProxy((Pointer)this).offsetAddress(i);
    }


	/**optional filtering to cull potential collisions */
	/** enum b3BroadphaseProxy::CollisionFilterGroups */
	public static final int
		DefaultFilter = 1,
		StaticFilter = 2,
		KinematicFilter = 4,
		DebrisFilter = 8,
		SensorTrigger = 16,
		CharacterFilter = 32,
		AllFilter = -1;  //all bits sets: DefaultFilter | StaticFilter | KinematicFilter | DebrisFilter | SensorTrigger

	//Usually the client b3CollisionObject or Rigidbody class
	public native Pointer m_clientObject(); public native b3BroadphaseProxy m_clientObject(Pointer setter);
	public native int m_collisionFilterGroup(); public native b3BroadphaseProxy m_collisionFilterGroup(int setter);
	public native int m_collisionFilterMask(); public native b3BroadphaseProxy m_collisionFilterMask(int setter);
	public native int m_uniqueId(); public native b3BroadphaseProxy m_uniqueId(int setter);  //m_uniqueId is introduced for paircache. could get rid of this, by calculating the address offset etc.

	public native @ByRef b3Vector3 m_aabbMin(); public native b3BroadphaseProxy m_aabbMin(b3Vector3 setter);
	public native @ByRef b3Vector3 m_aabbMax(); public native b3BroadphaseProxy m_aabbMax(b3Vector3 setter);

	public native int getUid();

	//used for memory pools
	public b3BroadphaseProxy() { super((Pointer)null); allocate(); }
	private native void allocate();

	public b3BroadphaseProxy(@Const @ByRef b3Vector3 aabbMin, @Const @ByRef b3Vector3 aabbMax, Pointer userPtr, int collisionFilterGroup, int collisionFilterMask) { super((Pointer)null); allocate(aabbMin, aabbMax, userPtr, collisionFilterGroup, collisionFilterMask); }
	private native void allocate(@Const @ByRef b3Vector3 aabbMin, @Const @ByRef b3Vector3 aabbMax, Pointer userPtr, int collisionFilterGroup, int collisionFilterMask);
}
