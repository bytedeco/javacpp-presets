// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3Collision;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;

import static org.bytedeco.bullet.global.Bullet3Collision.*;


/** Hash-space based Pair Cache, thanks to Erin Catto, Box2D, http://www.box2d.org, and Pierre Terdiman, Codercorner, http://codercorner.com */
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.Bullet3Collision.class)
public class b3HashedOverlappingPairCache extends b3OverlappingPairCache {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3HashedOverlappingPairCache(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3HashedOverlappingPairCache(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public b3HashedOverlappingPairCache position(long position) {
        return (b3HashedOverlappingPairCache)super.position(position);
    }
    @Override public b3HashedOverlappingPairCache getPointer(long i) {
        return new b3HashedOverlappingPairCache((Pointer)this).offsetAddress(i);
    }

	public b3HashedOverlappingPairCache() { super((Pointer)null); allocate(); }
	private native void allocate();

	public native void removeOverlappingPairsContainingProxy(int proxy, b3Dispatcher dispatcher);

	public native Pointer removeOverlappingPair(int proxy0, int proxy1, b3Dispatcher dispatcher);

	public native @Cast("bool") boolean needsBroadphaseCollision(int proxy0, int proxy1);

	// Add a pair and return the new pair. If the pair already exists,
	// no new pair is created and the old one is returned.
	public native b3Int4 addOverlappingPair(int proxy0, int proxy1);

	public native void cleanProxyFromPairs(int proxy, b3Dispatcher dispatcher);

	public native void processAllOverlappingPairs(b3OverlapCallback arg0, b3Dispatcher dispatcher);

	public native b3Int4 getOverlappingPairArrayPtr();

	public native @Cast("b3BroadphasePairArray*") @ByRef b3Int4Array getOverlappingPairArray();

	public native void cleanOverlappingPair(@ByRef b3Int4 pair, b3Dispatcher dispatcher);

	public native b3Int4 findPair(int proxy0, int proxy1);

	public native int GetCount();
	//	b3BroadphasePair* GetPairs() { return m_pairs; }

	public native b3OverlapFilterCallback getOverlapFilterCallback();

	public native void setOverlapFilterCallback(b3OverlapFilterCallback callback);

	public native int getNumOverlappingPairs();
}
