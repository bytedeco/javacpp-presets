// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3Dynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;
import org.bytedeco.bullet.Bullet3Collision.*;
import static org.bytedeco.bullet.global.Bullet3Collision.*;

import static org.bytedeco.bullet.global.Bullet3Dynamics.*;


/** Rotation Limit structure for generic joints */
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.Bullet3Dynamics.class)
public class b3RotationalLimitMotor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3RotationalLimitMotor(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3RotationalLimitMotor(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public b3RotationalLimitMotor position(long position) {
        return (b3RotationalLimitMotor)super.position(position);
    }
    @Override public b3RotationalLimitMotor getPointer(long i) {
        return new b3RotationalLimitMotor((Pointer)this).offsetAddress(i);
    }

	/** limit_parameters
	 * \{ */
	/** joint limit */
	public native @Cast("b3Scalar") float m_loLimit(); public native b3RotationalLimitMotor m_loLimit(float setter);
	/** joint limit */
	public native @Cast("b3Scalar") float m_hiLimit(); public native b3RotationalLimitMotor m_hiLimit(float setter);
	/** target motor velocity */
	public native @Cast("b3Scalar") float m_targetVelocity(); public native b3RotationalLimitMotor m_targetVelocity(float setter);
	/** max force on motor */
	public native @Cast("b3Scalar") float m_maxMotorForce(); public native b3RotationalLimitMotor m_maxMotorForce(float setter);
	/** max force on limit */
	public native @Cast("b3Scalar") float m_maxLimitForce(); public native b3RotationalLimitMotor m_maxLimitForce(float setter);
	/** Damping. */
	public native @Cast("b3Scalar") float m_damping(); public native b3RotationalLimitMotor m_damping(float setter);
	public native @Cast("b3Scalar") float m_limitSoftness(); public native b3RotationalLimitMotor m_limitSoftness(float setter);   /** Relaxation factor */
	/** Constraint force mixing factor */
	public native @Cast("b3Scalar") float m_normalCFM(); public native b3RotationalLimitMotor m_normalCFM(float setter);
	/** Error tolerance factor when joint is at limit */
	public native @Cast("b3Scalar") float m_stopERP(); public native b3RotationalLimitMotor m_stopERP(float setter);
	/** Constraint force mixing factor when joint is at limit */
	public native @Cast("b3Scalar") float m_stopCFM(); public native b3RotationalLimitMotor m_stopCFM(float setter);
	/** restitution factor */
	public native @Cast("b3Scalar") float m_bounce(); public native b3RotationalLimitMotor m_bounce(float setter);
	public native @Cast("bool") boolean m_enableMotor(); public native b3RotationalLimitMotor m_enableMotor(boolean setter);

	/**\}
	 <p>
	 *  temp_variables
	 * \{ */
	public native @Cast("b3Scalar") float m_currentLimitError(); public native b3RotationalLimitMotor m_currentLimitError(float setter);  /**  How much is violated this limit */
	public native @Cast("b3Scalar") float m_currentPosition(); public native b3RotationalLimitMotor m_currentPosition(float setter);    /**  current value of angle */
	/** 0=free, 1=at lo limit, 2=at hi limit */
	public native int m_currentLimit(); public native b3RotationalLimitMotor m_currentLimit(int setter);
	public native @Cast("b3Scalar") float m_accumulatedImpulse(); public native b3RotationalLimitMotor m_accumulatedImpulse(float setter);
	/**\} */

	public b3RotationalLimitMotor() { super((Pointer)null); allocate(); }
	private native void allocate();

	public b3RotationalLimitMotor(@Const @ByRef b3RotationalLimitMotor limot) { super((Pointer)null); allocate(limot); }
	private native void allocate(@Const @ByRef b3RotationalLimitMotor limot);

	/** Is limited */
	public native @Cast("bool") boolean isLimited();

	/** Need apply correction */
	public native @Cast("bool") boolean needApplyTorques();

	/** calculates  error
	/**
	calculates m_currentLimit and m_currentLimitError.
	*/
	public native int testLimitValue(@Cast("b3Scalar") float test_value);

	/** apply the correction impulses for two bodies */
	
}
