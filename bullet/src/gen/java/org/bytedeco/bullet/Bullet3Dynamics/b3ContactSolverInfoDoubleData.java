// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3Dynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;
import org.bytedeco.bullet.Bullet3Collision.*;
import static org.bytedeco.bullet.global.Bullet3Collision.*;

import static org.bytedeco.bullet.global.Bullet3Dynamics.*;


/**do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64 */
@Properties(inherit = org.bytedeco.bullet.presets.Bullet3Dynamics.class)
public class b3ContactSolverInfoDoubleData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public b3ContactSolverInfoDoubleData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3ContactSolverInfoDoubleData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3ContactSolverInfoDoubleData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public b3ContactSolverInfoDoubleData position(long position) {
        return (b3ContactSolverInfoDoubleData)super.position(position);
    }
    @Override public b3ContactSolverInfoDoubleData getPointer(long i) {
        return new b3ContactSolverInfoDoubleData((Pointer)this).offsetAddress(i);
    }

	public native double m_tau(); public native b3ContactSolverInfoDoubleData m_tau(double setter);
	public native double m_damping(); public native b3ContactSolverInfoDoubleData m_damping(double setter);  //global non-contact constraint damping, can be locally overridden by constraints during 'getInfo2'.
	public native double m_friction(); public native b3ContactSolverInfoDoubleData m_friction(double setter);
	public native double m_timeStep(); public native b3ContactSolverInfoDoubleData m_timeStep(double setter);
	public native double m_restitution(); public native b3ContactSolverInfoDoubleData m_restitution(double setter);
	public native double m_maxErrorReduction(); public native b3ContactSolverInfoDoubleData m_maxErrorReduction(double setter);
	public native double m_sor(); public native b3ContactSolverInfoDoubleData m_sor(double setter);
	public native double m_erp(); public native b3ContactSolverInfoDoubleData m_erp(double setter);        //used as Baumgarte factor
	public native double m_erp2(); public native b3ContactSolverInfoDoubleData m_erp2(double setter);       //used in Split Impulse
	public native double m_globalCfm(); public native b3ContactSolverInfoDoubleData m_globalCfm(double setter);  //constraint force mixing
	public native double m_splitImpulsePenetrationThreshold(); public native b3ContactSolverInfoDoubleData m_splitImpulsePenetrationThreshold(double setter);
	public native double m_splitImpulseTurnErp(); public native b3ContactSolverInfoDoubleData m_splitImpulseTurnErp(double setter);
	public native double m_linearSlop(); public native b3ContactSolverInfoDoubleData m_linearSlop(double setter);
	public native double m_warmstartingFactor(); public native b3ContactSolverInfoDoubleData m_warmstartingFactor(double setter);
	public native double m_maxGyroscopicForce(); public native b3ContactSolverInfoDoubleData m_maxGyroscopicForce(double setter);
	public native double m_singleAxisRollingFrictionThreshold(); public native b3ContactSolverInfoDoubleData m_singleAxisRollingFrictionThreshold(double setter);

	public native int m_numIterations(); public native b3ContactSolverInfoDoubleData m_numIterations(int setter);
	public native int m_solverMode(); public native b3ContactSolverInfoDoubleData m_solverMode(int setter);
	public native int m_restingContactRestitutionThreshold(); public native b3ContactSolverInfoDoubleData m_restingContactRestitutionThreshold(int setter);
	public native int m_minimumSolverBatchSize(); public native b3ContactSolverInfoDoubleData m_minimumSolverBatchSize(int setter);
	public native int m_splitImpulse(); public native b3ContactSolverInfoDoubleData m_splitImpulse(int setter);
	public native @Cast("char") byte m_padding(int i); public native b3ContactSolverInfoDoubleData m_padding(int i, byte setter);
	@MemberGetter public native @Cast("char*") BytePointer m_padding();
}
