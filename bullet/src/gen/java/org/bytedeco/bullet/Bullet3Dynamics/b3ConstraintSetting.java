// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.Bullet3Dynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.Bullet3Common.*;
import static org.bytedeco.bullet.global.Bullet3Common.*;
import org.bytedeco.bullet.Bullet3Collision.*;
import static org.bytedeco.bullet.global.Bullet3Collision.*;

import static org.bytedeco.bullet.global.Bullet3Dynamics.*;

// #endif  //B3_USE_DOUBLE_PRECISION

@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.Bullet3Dynamics.class)
public class b3ConstraintSetting extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public b3ConstraintSetting(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public b3ConstraintSetting(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public b3ConstraintSetting position(long position) {
        return (b3ConstraintSetting)super.position(position);
    }
    @Override public b3ConstraintSetting getPointer(long i) {
        return new b3ConstraintSetting((Pointer)this).offsetAddress(i);
    }

	public b3ConstraintSetting() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("b3Scalar") float m_tau(); public native b3ConstraintSetting m_tau(float setter);
	public native @Cast("b3Scalar") float m_damping(); public native b3ConstraintSetting m_damping(float setter);
	public native @Cast("b3Scalar") float m_impulseClamp(); public native b3ConstraintSetting m_impulseClamp(float setter);
}
