// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;


//class btVehicleTuning;

/**rayCast vehicle, very special constraint that turn a rigidbody into a vehicle. */
@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btRaycastVehicle extends btActionInterface {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btRaycastVehicle(Pointer p) { super(p); }

	@NoOffset public static class btVehicleTuning extends Pointer {
	    static { Loader.load(); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public btVehicleTuning(Pointer p) { super(p); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public btVehicleTuning(long size) { super((Pointer)null); allocateArray(size); }
	    private native void allocateArray(long size);
	    @Override public btVehicleTuning position(long position) {
	        return (btVehicleTuning)super.position(position);
	    }
	    @Override public btVehicleTuning getPointer(long i) {
	        return new btVehicleTuning((Pointer)this).offsetAddress(i);
	    }
	
		public btVehicleTuning() { super((Pointer)null); allocate(); }
		private native void allocate();
		public native @Cast("btScalar") float m_suspensionStiffness(); public native btVehicleTuning m_suspensionStiffness(float setter);
		public native @Cast("btScalar") float m_suspensionCompression(); public native btVehicleTuning m_suspensionCompression(float setter);
		public native @Cast("btScalar") float m_suspensionDamping(); public native btVehicleTuning m_suspensionDamping(float setter);
		public native @Cast("btScalar") float m_maxSuspensionTravelCm(); public native btVehicleTuning m_maxSuspensionTravelCm(float setter);
		public native @Cast("btScalar") float m_frictionSlip(); public native btVehicleTuning m_frictionSlip(float setter);
		public native @Cast("btScalar") float m_maxSuspensionForce(); public native btVehicleTuning m_maxSuspensionForce(float setter);
	}
	//constructor to create a car from an existing rigidbody
	public btRaycastVehicle(@Const @ByRef btVehicleTuning tuning, btRigidBody chassis, btVehicleRaycaster raycaster) { super((Pointer)null); allocate(tuning, chassis, raycaster); }
	private native void allocate(@Const @ByRef btVehicleTuning tuning, btRigidBody chassis, btVehicleRaycaster raycaster);

	/**btActionInterface interface */
	public native void updateAction(btCollisionWorld collisionWorld, @Cast("btScalar") float step);

	/**btActionInterface interface */
	public native void debugDraw(btIDebugDraw debugDrawer);

	public native @Const @ByRef btTransform getChassisWorldTransform();

	public native @Cast("btScalar") float rayCast(@ByRef btWheelInfo wheel);

	public native void updateVehicle(@Cast("btScalar") float step);

	public native void resetSuspension();

	public native @Cast("btScalar") float getSteeringValue(int wheel);

	public native void setSteeringValue(@Cast("btScalar") float steering, int wheel);

	public native void applyEngineForce(@Cast("btScalar") float force, int wheel);

	public native @Const @ByRef btTransform getWheelTransformWS(int wheelIndex);

	public native void updateWheelTransform(int wheelIndex, @Cast("bool") boolean interpolatedTransform/*=true*/);
	public native void updateWheelTransform(int wheelIndex);

	//	void	setRaycastWheelInfo( int wheelIndex , bool isInContact, const btVector3& hitPoint, const btVector3& hitNormal,btScalar depth);

	public native @ByRef btWheelInfo addWheel(@Const @ByRef btVector3 connectionPointCS0, @Const @ByRef btVector3 wheelDirectionCS0, @Const @ByRef btVector3 wheelAxleCS, @Cast("btScalar") float suspensionRestLength, @Cast("btScalar") float wheelRadius, @Const @ByRef btVehicleTuning tuning, @Cast("bool") boolean isFrontWheel);

	public native int getNumWheels();

	public native @ByRef btWheelInfoArray m_wheelInfo(); public native btRaycastVehicle m_wheelInfo(btWheelInfoArray setter);

	public native @ByRef btWheelInfo getWheelInfo(int index);

	public native void updateWheelTransformsWS(@ByRef btWheelInfo wheel, @Cast("bool") boolean interpolatedTransform/*=true*/);
	public native void updateWheelTransformsWS(@ByRef btWheelInfo wheel);

	public native void setBrake(@Cast("btScalar") float brake, int wheelIndex);

	public native void setPitchControl(@Cast("btScalar") float pitch);

	public native void updateSuspension(@Cast("btScalar") float deltaTime);

	public native void updateFriction(@Cast("btScalar") float timeStep);

	public native btRigidBody getRigidBody();

	public native int getRightAxis();
	public native int getUpAxis();

	public native int getForwardAxis();

	/**Worldspace forward vector */
	public native @ByVal btVector3 getForwardVector();

	/**Velocity of vehicle (positive if velocity vector has same direction as foward vector) */
	public native @Cast("btScalar") float getCurrentSpeedKmHour();

	public native void setCoordinateSystem(int rightIndex, int upIndex, int forwardIndex);

	/**backwards compatibility */
	public native int getUserConstraintType();

	public native void setUserConstraintType(int userConstraintType);

	public native void setUserConstraintId(int uid);

	public native int getUserConstraintId();
}
