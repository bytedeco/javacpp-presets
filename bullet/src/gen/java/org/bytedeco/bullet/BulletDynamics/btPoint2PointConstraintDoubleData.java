// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;


// #ifdef BT_BACKWARDS_COMPATIBLE_SERIALIZATION
/**do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64
 * this structure is not used, except for loading pre-2.82 .bullet files
 * do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64 */
@Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btPoint2PointConstraintDoubleData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public btPoint2PointConstraintDoubleData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btPoint2PointConstraintDoubleData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btPoint2PointConstraintDoubleData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btPoint2PointConstraintDoubleData position(long position) {
        return (btPoint2PointConstraintDoubleData)super.position(position);
    }
    @Override public btPoint2PointConstraintDoubleData getPointer(long i) {
        return new btPoint2PointConstraintDoubleData((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btTypedConstraintData m_typeConstraintData(); public native btPoint2PointConstraintDoubleData m_typeConstraintData(btTypedConstraintData setter);
	public native @ByRef btVector3DoubleData m_pivotInA(); public native btPoint2PointConstraintDoubleData m_pivotInA(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_pivotInB(); public native btPoint2PointConstraintDoubleData m_pivotInB(btVector3DoubleData setter);
}
