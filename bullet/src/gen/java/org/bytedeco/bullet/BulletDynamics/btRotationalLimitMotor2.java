// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;


@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btRotationalLimitMotor2 extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btRotationalLimitMotor2(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btRotationalLimitMotor2(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btRotationalLimitMotor2 position(long position) {
        return (btRotationalLimitMotor2)super.position(position);
    }
    @Override public btRotationalLimitMotor2 getPointer(long i) {
        return new btRotationalLimitMotor2((Pointer)this).offsetAddress(i);
    }

	// upper < lower means free
	// upper == lower means locked
	// upper > lower means limited
	public native @Cast("btScalar") double m_loLimit(); public native btRotationalLimitMotor2 m_loLimit(double setter);
	public native @Cast("btScalar") double m_hiLimit(); public native btRotationalLimitMotor2 m_hiLimit(double setter);
	public native @Cast("btScalar") double m_bounce(); public native btRotationalLimitMotor2 m_bounce(double setter);
	public native @Cast("btScalar") double m_stopERP(); public native btRotationalLimitMotor2 m_stopERP(double setter);
	public native @Cast("btScalar") double m_stopCFM(); public native btRotationalLimitMotor2 m_stopCFM(double setter);
	public native @Cast("btScalar") double m_motorERP(); public native btRotationalLimitMotor2 m_motorERP(double setter);
	public native @Cast("btScalar") double m_motorCFM(); public native btRotationalLimitMotor2 m_motorCFM(double setter);
	public native @Cast("bool") boolean m_enableMotor(); public native btRotationalLimitMotor2 m_enableMotor(boolean setter);
	public native @Cast("btScalar") double m_targetVelocity(); public native btRotationalLimitMotor2 m_targetVelocity(double setter);
	public native @Cast("btScalar") double m_maxMotorForce(); public native btRotationalLimitMotor2 m_maxMotorForce(double setter);
	public native @Cast("bool") boolean m_servoMotor(); public native btRotationalLimitMotor2 m_servoMotor(boolean setter);
	public native @Cast("btScalar") double m_servoTarget(); public native btRotationalLimitMotor2 m_servoTarget(double setter);
	public native @Cast("bool") boolean m_enableSpring(); public native btRotationalLimitMotor2 m_enableSpring(boolean setter);
	public native @Cast("btScalar") double m_springStiffness(); public native btRotationalLimitMotor2 m_springStiffness(double setter);
	public native @Cast("bool") boolean m_springStiffnessLimited(); public native btRotationalLimitMotor2 m_springStiffnessLimited(boolean setter);
	public native @Cast("btScalar") double m_springDamping(); public native btRotationalLimitMotor2 m_springDamping(double setter);
	public native @Cast("bool") boolean m_springDampingLimited(); public native btRotationalLimitMotor2 m_springDampingLimited(boolean setter);
	public native @Cast("btScalar") double m_equilibriumPoint(); public native btRotationalLimitMotor2 m_equilibriumPoint(double setter);

	public native @Cast("btScalar") double m_currentLimitError(); public native btRotationalLimitMotor2 m_currentLimitError(double setter);
	public native @Cast("btScalar") double m_currentLimitErrorHi(); public native btRotationalLimitMotor2 m_currentLimitErrorHi(double setter);
	public native @Cast("btScalar") double m_currentPosition(); public native btRotationalLimitMotor2 m_currentPosition(double setter);
	public native int m_currentLimit(); public native btRotationalLimitMotor2 m_currentLimit(int setter);

	public btRotationalLimitMotor2() { super((Pointer)null); allocate(); }
	private native void allocate();

	public btRotationalLimitMotor2(@Const @ByRef btRotationalLimitMotor2 limot) { super((Pointer)null); allocate(limot); }
	private native void allocate(@Const @ByRef btRotationalLimitMotor2 limot);

	public native @Cast("bool") boolean isLimited();

	public native void testLimitValue(@Cast("btScalar") double test_value);
}
