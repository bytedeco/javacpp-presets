// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;


/**do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64 */
@Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btRigidBodyDoubleData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public btRigidBodyDoubleData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btRigidBodyDoubleData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btRigidBodyDoubleData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btRigidBodyDoubleData position(long position) {
        return (btRigidBodyDoubleData)super.position(position);
    }
    @Override public btRigidBodyDoubleData getPointer(long i) {
        return new btRigidBodyDoubleData((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btCollisionObjectDoubleData m_collisionObjectData(); public native btRigidBodyDoubleData m_collisionObjectData(btCollisionObjectDoubleData setter);
	public native @ByRef btMatrix3x3DoubleData m_invInertiaTensorWorld(); public native btRigidBodyDoubleData m_invInertiaTensorWorld(btMatrix3x3DoubleData setter);
	public native @ByRef btVector3DoubleData m_linearVelocity(); public native btRigidBodyDoubleData m_linearVelocity(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_angularVelocity(); public native btRigidBodyDoubleData m_angularVelocity(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_angularFactor(); public native btRigidBodyDoubleData m_angularFactor(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_linearFactor(); public native btRigidBodyDoubleData m_linearFactor(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_gravity(); public native btRigidBodyDoubleData m_gravity(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_gravity_acceleration(); public native btRigidBodyDoubleData m_gravity_acceleration(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_invInertiaLocal(); public native btRigidBodyDoubleData m_invInertiaLocal(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_totalForce(); public native btRigidBodyDoubleData m_totalForce(btVector3DoubleData setter);
	public native @ByRef btVector3DoubleData m_totalTorque(); public native btRigidBodyDoubleData m_totalTorque(btVector3DoubleData setter);
	public native double m_inverseMass(); public native btRigidBodyDoubleData m_inverseMass(double setter);
	public native double m_linearDamping(); public native btRigidBodyDoubleData m_linearDamping(double setter);
	public native double m_angularDamping(); public native btRigidBodyDoubleData m_angularDamping(double setter);
	public native double m_additionalDampingFactor(); public native btRigidBodyDoubleData m_additionalDampingFactor(double setter);
	public native double m_additionalLinearDampingThresholdSqr(); public native btRigidBodyDoubleData m_additionalLinearDampingThresholdSqr(double setter);
	public native double m_additionalAngularDampingThresholdSqr(); public native btRigidBodyDoubleData m_additionalAngularDampingThresholdSqr(double setter);
	public native double m_additionalAngularDampingFactor(); public native btRigidBodyDoubleData m_additionalAngularDampingFactor(double setter);
	public native double m_linearSleepingThreshold(); public native btRigidBodyDoubleData m_linearSleepingThreshold(double setter);
	public native double m_angularSleepingThreshold(); public native btRigidBodyDoubleData m_angularSleepingThreshold(double setter);
	public native int m_additionalDamping(); public native btRigidBodyDoubleData m_additionalDamping(int setter);
	public native @Cast("char") byte m_padding(int i); public native btRigidBodyDoubleData m_padding(int i, byte setter);
	@MemberGetter public native @Cast("char*") BytePointer m_padding();
}
