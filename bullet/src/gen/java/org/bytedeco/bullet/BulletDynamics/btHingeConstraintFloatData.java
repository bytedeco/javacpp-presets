// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;


@Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btHingeConstraintFloatData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public btHingeConstraintFloatData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btHingeConstraintFloatData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btHingeConstraintFloatData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btHingeConstraintFloatData position(long position) {
        return (btHingeConstraintFloatData)super.position(position);
    }
    @Override public btHingeConstraintFloatData getPointer(long i) {
        return new btHingeConstraintFloatData((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btTypedConstraintData m_typeConstraintData(); public native btHingeConstraintFloatData m_typeConstraintData(btTypedConstraintData setter);
	public native @ByRef btTransformFloatData m_rbAFrame(); public native btHingeConstraintFloatData m_rbAFrame(btTransformFloatData setter);  // constraint axii. Assumes z is hinge axis.
	public native @ByRef btTransformFloatData m_rbBFrame(); public native btHingeConstraintFloatData m_rbBFrame(btTransformFloatData setter);
	public native int m_useReferenceFrameA(); public native btHingeConstraintFloatData m_useReferenceFrameA(int setter);
	public native int m_angularOnly(); public native btHingeConstraintFloatData m_angularOnly(int setter);

	public native int m_enableAngularMotor(); public native btHingeConstraintFloatData m_enableAngularMotor(int setter);
	public native float m_motorTargetVelocity(); public native btHingeConstraintFloatData m_motorTargetVelocity(float setter);
	public native float m_maxMotorImpulse(); public native btHingeConstraintFloatData m_maxMotorImpulse(float setter);

	public native float m_lowerLimit(); public native btHingeConstraintFloatData m_lowerLimit(float setter);
	public native float m_upperLimit(); public native btHingeConstraintFloatData m_upperLimit(float setter);
	public native float m_limitSoftness(); public native btHingeConstraintFloatData m_limitSoftness(float setter);
	public native float m_biasFactor(); public native btHingeConstraintFloatData m_biasFactor(float setter);
	public native float m_relaxationFactor(); public native btHingeConstraintFloatData m_relaxationFactor(float setter);
}
