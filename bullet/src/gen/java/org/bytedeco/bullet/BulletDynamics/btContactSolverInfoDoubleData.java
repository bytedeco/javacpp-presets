// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;


/**do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64 */
@Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btContactSolverInfoDoubleData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public btContactSolverInfoDoubleData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btContactSolverInfoDoubleData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btContactSolverInfoDoubleData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btContactSolverInfoDoubleData position(long position) {
        return (btContactSolverInfoDoubleData)super.position(position);
    }
    @Override public btContactSolverInfoDoubleData getPointer(long i) {
        return new btContactSolverInfoDoubleData((Pointer)this).offsetAddress(i);
    }

	public native double m_tau(); public native btContactSolverInfoDoubleData m_tau(double setter);
	public native double m_damping(); public native btContactSolverInfoDoubleData m_damping(double setter);  //global non-contact constraint damping, can be locally overridden by constraints during 'getInfo2'.
	public native double m_friction(); public native btContactSolverInfoDoubleData m_friction(double setter);
	public native double m_timeStep(); public native btContactSolverInfoDoubleData m_timeStep(double setter);
	public native double m_restitution(); public native btContactSolverInfoDoubleData m_restitution(double setter);
	public native double m_maxErrorReduction(); public native btContactSolverInfoDoubleData m_maxErrorReduction(double setter);
	public native double m_sor(); public native btContactSolverInfoDoubleData m_sor(double setter);
	public native double m_erp(); public native btContactSolverInfoDoubleData m_erp(double setter);        //used as Baumgarte factor
	public native double m_erp2(); public native btContactSolverInfoDoubleData m_erp2(double setter);       //used in Split Impulse
	public native double m_globalCfm(); public native btContactSolverInfoDoubleData m_globalCfm(double setter);  //constraint force mixing
	public native double m_splitImpulsePenetrationThreshold(); public native btContactSolverInfoDoubleData m_splitImpulsePenetrationThreshold(double setter);
	public native double m_splitImpulseTurnErp(); public native btContactSolverInfoDoubleData m_splitImpulseTurnErp(double setter);
	public native double m_linearSlop(); public native btContactSolverInfoDoubleData m_linearSlop(double setter);
	public native double m_warmstartingFactor(); public native btContactSolverInfoDoubleData m_warmstartingFactor(double setter);
	public native double m_articulatedWarmstartingFactor(); public native btContactSolverInfoDoubleData m_articulatedWarmstartingFactor(double setter);
	public native double m_maxGyroscopicForce(); public native btContactSolverInfoDoubleData m_maxGyroscopicForce(double setter);  /**it is only used for 'explicit' version of gyroscopic force */
	public native double m_singleAxisRollingFrictionThreshold(); public native btContactSolverInfoDoubleData m_singleAxisRollingFrictionThreshold(double setter);

	public native int m_numIterations(); public native btContactSolverInfoDoubleData m_numIterations(int setter);
	public native int m_solverMode(); public native btContactSolverInfoDoubleData m_solverMode(int setter);
	public native int m_restingContactRestitutionThreshold(); public native btContactSolverInfoDoubleData m_restingContactRestitutionThreshold(int setter);
	public native int m_minimumSolverBatchSize(); public native btContactSolverInfoDoubleData m_minimumSolverBatchSize(int setter);
	public native int m_splitImpulse(); public native btContactSolverInfoDoubleData m_splitImpulse(int setter);
	public native @Cast("char") byte m_padding(int i); public native btContactSolverInfoDoubleData m_padding(int i, byte setter);
	@MemberGetter public native @Cast("char*") BytePointer m_padding();
}
