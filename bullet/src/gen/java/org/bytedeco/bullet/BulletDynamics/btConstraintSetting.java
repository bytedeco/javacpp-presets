// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;

// #else
// #endif  //BT_USE_DOUBLE_PRECISION

@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btConstraintSetting extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btConstraintSetting(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btConstraintSetting(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public btConstraintSetting position(long position) {
        return (btConstraintSetting)super.position(position);
    }
    @Override public btConstraintSetting getPointer(long i) {
        return new btConstraintSetting((Pointer)this).offsetAddress(i);
    }

	public btConstraintSetting() { super((Pointer)null); allocate(); }
	private native void allocate();
	public native @Cast("btScalar") double m_tau(); public native btConstraintSetting m_tau(double setter);
	public native @Cast("btScalar") double m_damping(); public native btConstraintSetting m_damping(double setter);
	public native @Cast("btScalar") double m_impulseClamp(); public native btConstraintSetting m_impulseClamp(double setter);
}
