// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;


@Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btContactSolverInfoData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public btContactSolverInfoData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btContactSolverInfoData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btContactSolverInfoData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btContactSolverInfoData position(long position) {
        return (btContactSolverInfoData)super.position(position);
    }
    @Override public btContactSolverInfoData getPointer(long i) {
        return new btContactSolverInfoData((Pointer)this).offsetAddress(i);
    }

	public native @Cast("btScalar") double m_tau(); public native btContactSolverInfoData m_tau(double setter);
	public native @Cast("btScalar") double m_damping(); public native btContactSolverInfoData m_damping(double setter);  //global non-contact constraint damping, can be locally overridden by constraints during 'getInfo2'.
	public native @Cast("btScalar") double m_friction(); public native btContactSolverInfoData m_friction(double setter);
	public native @Cast("btScalar") double m_timeStep(); public native btContactSolverInfoData m_timeStep(double setter);
	public native @Cast("btScalar") double m_restitution(); public native btContactSolverInfoData m_restitution(double setter);
	public native int m_numIterations(); public native btContactSolverInfoData m_numIterations(int setter);
	public native @Cast("btScalar") double m_maxErrorReduction(); public native btContactSolverInfoData m_maxErrorReduction(double setter);
	public native @Cast("btScalar") double m_sor(); public native btContactSolverInfoData m_sor(double setter);          //successive over-relaxation term
	public native @Cast("btScalar") double m_erp(); public native btContactSolverInfoData m_erp(double setter);          //error reduction for non-contact constraints
	public native @Cast("btScalar") double m_erp2(); public native btContactSolverInfoData m_erp2(double setter);         //error reduction for contact constraints
	public native @Cast("btScalar") double m_deformable_erp(); public native btContactSolverInfoData m_deformable_erp(double setter);          //error reduction for deformable constraints
	public native @Cast("btScalar") double m_deformable_cfm(); public native btContactSolverInfoData m_deformable_cfm(double setter);          //constraint force mixing for deformable constraints
	public native @Cast("btScalar") double m_deformable_maxErrorReduction(); public native btContactSolverInfoData m_deformable_maxErrorReduction(double setter); // maxErrorReduction for deformable contact
	public native @Cast("btScalar") double m_globalCfm(); public native btContactSolverInfoData m_globalCfm(double setter);    //constraint force mixing for contacts and non-contacts
	public native @Cast("btScalar") double m_frictionERP(); public native btContactSolverInfoData m_frictionERP(double setter);  //error reduction for friction constraints
	public native @Cast("btScalar") double m_frictionCFM(); public native btContactSolverInfoData m_frictionCFM(double setter);  //constraint force mixing for friction constraints

	public native int m_splitImpulse(); public native btContactSolverInfoData m_splitImpulse(int setter);
	public native @Cast("btScalar") double m_splitImpulsePenetrationThreshold(); public native btContactSolverInfoData m_splitImpulsePenetrationThreshold(double setter);
	public native @Cast("btScalar") double m_splitImpulseTurnErp(); public native btContactSolverInfoData m_splitImpulseTurnErp(double setter);
	public native @Cast("btScalar") double m_linearSlop(); public native btContactSolverInfoData m_linearSlop(double setter);
	public native @Cast("btScalar") double m_warmstartingFactor(); public native btContactSolverInfoData m_warmstartingFactor(double setter);
	public native @Cast("btScalar") double m_articulatedWarmstartingFactor(); public native btContactSolverInfoData m_articulatedWarmstartingFactor(double setter);
	public native int m_solverMode(); public native btContactSolverInfoData m_solverMode(int setter);
	public native int m_restingContactRestitutionThreshold(); public native btContactSolverInfoData m_restingContactRestitutionThreshold(int setter);
	public native int m_minimumSolverBatchSize(); public native btContactSolverInfoData m_minimumSolverBatchSize(int setter);
	public native @Cast("btScalar") double m_maxGyroscopicForce(); public native btContactSolverInfoData m_maxGyroscopicForce(double setter);
	public native @Cast("btScalar") double m_singleAxisRollingFrictionThreshold(); public native btContactSolverInfoData m_singleAxisRollingFrictionThreshold(double setter);
	public native @Cast("btScalar") double m_leastSquaresResidualThreshold(); public native btContactSolverInfoData m_leastSquaresResidualThreshold(double setter);
	public native @Cast("btScalar") double m_restitutionVelocityThreshold(); public native btContactSolverInfoData m_restitutionVelocityThreshold(double setter);
	public native @Cast("bool") boolean m_jointFeedbackInWorldSpace(); public native btContactSolverInfoData m_jointFeedbackInWorldSpace(boolean setter);
	public native @Cast("bool") boolean m_jointFeedbackInJointFrame(); public native btContactSolverInfoData m_jointFeedbackInJointFrame(boolean setter);
	public native int m_reportSolverAnalytics(); public native btContactSolverInfoData m_reportSolverAnalytics(int setter);
	public native int m_numNonContactInnerIterations(); public native btContactSolverInfoData m_numNonContactInnerIterations(int setter);
}
