// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;


/**do not change those serialization structures, it requires an updated sBulletDNAstr/sBulletDNAstr64 */
@Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btHingeConstraintDoubleData2 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public btHingeConstraintDoubleData2() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public btHingeConstraintDoubleData2(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btHingeConstraintDoubleData2(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public btHingeConstraintDoubleData2 position(long position) {
        return (btHingeConstraintDoubleData2)super.position(position);
    }
    @Override public btHingeConstraintDoubleData2 getPointer(long i) {
        return new btHingeConstraintDoubleData2((Pointer)this).offsetAddress(i);
    }

	public native @ByRef btTypedConstraintDoubleData m_typeConstraintData(); public native btHingeConstraintDoubleData2 m_typeConstraintData(btTypedConstraintDoubleData setter);
	public native @ByRef btTransformDoubleData m_rbAFrame(); public native btHingeConstraintDoubleData2 m_rbAFrame(btTransformDoubleData setter);  // constraint axii. Assumes z is hinge axis.
	public native @ByRef btTransformDoubleData m_rbBFrame(); public native btHingeConstraintDoubleData2 m_rbBFrame(btTransformDoubleData setter);
	public native int m_useReferenceFrameA(); public native btHingeConstraintDoubleData2 m_useReferenceFrameA(int setter);
	public native int m_angularOnly(); public native btHingeConstraintDoubleData2 m_angularOnly(int setter);
	public native int m_enableAngularMotor(); public native btHingeConstraintDoubleData2 m_enableAngularMotor(int setter);
	public native double m_motorTargetVelocity(); public native btHingeConstraintDoubleData2 m_motorTargetVelocity(double setter);
	public native double m_maxMotorImpulse(); public native btHingeConstraintDoubleData2 m_maxMotorImpulse(double setter);

	public native double m_lowerLimit(); public native btHingeConstraintDoubleData2 m_lowerLimit(double setter);
	public native double m_upperLimit(); public native btHingeConstraintDoubleData2 m_upperLimit(double setter);
	public native double m_limitSoftness(); public native btHingeConstraintDoubleData2 m_limitSoftness(double setter);
	public native double m_biasFactor(); public native btHingeConstraintDoubleData2 m_biasFactor(double setter);
	public native double m_relaxationFactor(); public native btHingeConstraintDoubleData2 m_relaxationFactor(double setter);
	public native @Cast("char") byte m_padding1(int i); public native btHingeConstraintDoubleData2 m_padding1(int i, byte setter);
	@MemberGetter public native @Cast("char*") BytePointer m_padding1();
}
