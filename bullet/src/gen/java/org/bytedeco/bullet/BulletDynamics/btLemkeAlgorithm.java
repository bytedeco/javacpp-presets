// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.bullet.BulletDynamics;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.bullet.LinearMath.*;
import static org.bytedeco.bullet.global.LinearMath.*;
import org.bytedeco.bullet.BulletCollision.*;
import static org.bytedeco.bullet.global.BulletCollision.*;

import static org.bytedeco.bullet.global.BulletDynamics.*;
  //todo: replace by btAlignedObjectArray

@NoOffset @Properties(inherit = org.bytedeco.bullet.presets.BulletDynamics.class)
public class btLemkeAlgorithm extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public btLemkeAlgorithm(Pointer p) { super(p); }

	public btLemkeAlgorithm(@Const @ByRef btMatrixXd M_, @Const @ByRef btVectorXd q_, int DEBUGLEVEL_/*=0*/) { super((Pointer)null); allocate(M_, q_, DEBUGLEVEL_); }
	private native void allocate(@Const @ByRef btMatrixXd M_, @Const @ByRef btVectorXd q_, int DEBUGLEVEL_/*=0*/);
	public btLemkeAlgorithm(@Const @ByRef btMatrixXd M_, @Const @ByRef btVectorXd q_) { super((Pointer)null); allocate(M_, q_); }
	private native void allocate(@Const @ByRef btMatrixXd M_, @Const @ByRef btVectorXd q_);

	/* GETTER / SETTER */
	/**
   * \brief return info of solution process
   */
	public native int getInfo();

	/**
   * \brief get the number of steps until the solution was found
   */
	public native int getSteps();

	/**
   * \brief set system with Matrix M and vector q
   */
	public native void setSystem(@Const @ByRef btMatrixXd M_, @Const @ByRef btVectorXd q_);
	/***************************************************/

	/**
   * \brief solve algorithm adapted from : Fast Implementation of Lemkeâ€™s Algorithm for Rigid Body Contact Simulation (John E. Lloyd)
   */
	public native @ByVal btVectorXd solve(@Cast("unsigned int") int maxloops/*=0*/);
	public native @ByVal btVectorXd solve();
}
