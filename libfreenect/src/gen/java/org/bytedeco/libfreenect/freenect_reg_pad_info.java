// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.libfreenect;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.libfreenect.global.freenect.*;


/** registration padding info (?) */
@Properties(inherit = org.bytedeco.libfreenect.presets.freenect.class)
public class freenect_reg_pad_info extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public freenect_reg_pad_info() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public freenect_reg_pad_info(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public freenect_reg_pad_info(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public freenect_reg_pad_info position(long position) {
        return (freenect_reg_pad_info)super.position(position);
    }
    @Override public freenect_reg_pad_info getPointer(long i) {
        return new freenect_reg_pad_info((Pointer)this).position(position + i);
    }

	public native @Cast("uint16_t") short start_lines(); public native freenect_reg_pad_info start_lines(short setter);
	public native @Cast("uint16_t") short end_lines(); public native freenect_reg_pad_info end_lines(short setter);
	public native @Cast("uint16_t") short cropping_lines(); public native freenect_reg_pad_info cropping_lines(short setter);
}
