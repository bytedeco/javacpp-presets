name: Deploy on Windows
runs:
  using: composite
  steps:
    - name: Install environment
      shell: cmd
      env:
        GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        cd /d %USERPROFILE%

 
        set GRADLE_TASK=publishToMavenLocal
        set MAVEN_PHASE=install
        set "MESSAGE=%GITHUB_EVENT_HEAD_COMMIT_MESSAGE%"
        if "%MESSAGE:~0,7%"=="Release" set DEPLOY=RELEASE
        if "%GITHUB_REF:~11%"=="release" set DEPLOY=RELEASE
        if not "%CI_DEPLOY_USERNAME%"=="" if not "%GITHUB_EVENT_NAME%"=="pull_request" (
          set GRADLE_TASK=publish
          set MAVEN_PHASE=deploy
          if "%DEPLOY%"=="RELEASE" (
            python -m gdown.cli -q -O settings.tar.gz https://drive.google.com/uc?id=%CI_DEPLOY_SETTINGS%
            bash -c "tar -xzf settings.tar.gz -C $HOME"
            set "MAVEN_OPTIONS=%MAVEN_OPTIONS% -DperformRelease -DstagingRepositoryId=%STAGING_REPOSITORY%"
          )
        )
        echo GPG_PASSPHRASE=*** >> %GITHUB_ENV%
        echo GRADLE_TASK=%GRADLE_TASK% >> %GITHUB_ENV%
        echo MAVEN_PHASE=%MAVEN_PHASE% >> %GITHUB_ENV%
        echo MAVEN_OPTIONS=%MAVEN_OPTIONS% >> %GITHUB_ENV%

    - name: Build project
      shell: cmd
      run: |
          echo set Visual Studio
          if exist "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
          set MSYSTEM=MINGW64

        
        set "PATH=C:\hostedtoolcache\windows\Python\3.9.13\x64;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\Hostx64\x64;C:\msys64\mingw64\bin;C:\msys64\usr\bin;%PATH%"

        where bash
        where curl
        where git

        echo Check CL
        where cl
        where gcc
        where cmake
        where gradle
        where mvn
        where gpg
        where python
        where python3
        where clang-cl
        where ccache

        bash --version
        git --version

        echo Check CL
        C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.33.31629\bin\HostX86\x64\cl.exe
        cl
        gcc --version
        cmake --version
        gradle --version
        call mvn -version
        gpg --version
        python --version
        clang-cl --version
        ccache --version -sv
        df -h
        wmic pagefile list /format:list

        set MAKEJ=%NUMBER_OF_PROCESSORS%
        echo Fetching %GITHUB_REPOSITORY%@%GITHUB_SHA%
        git init
        git fetch --depth 1 https://github.com/%GITHUB_REPOSITORY% %GITHUB_SHA%
        git checkout %GITHUB_SHA%
        git submodule update --init --recursive
        git submodule foreach --recursive "git reset --hard"

        if not "%CI_DEPLOY_NEED_GRADLE%"=="" (goto :gradle) else (goto :maven)

        :gradle
        echo Executing Gradle %GRADLE_TASK% ${{ matrix.options }} %CI_DEPLOY_OPTIONS% on %MAKEJ% processors
        set "GRADLE_OPTIONS=-Dorg.gradle.jvmargs=-Xmx2048m -PjavacppPlatform=%CI_DEPLOY_PLATFORM% -PjavacppPlatformExtension=${{ matrix.ext }} ${{ matrix.options }} %CI_DEPLOY_OPTIONS% --info"
        gradle clean build %GRADLE_OPTIONS% -b %CI_DEPLOY_MODULE%/build.gradle
        if ERRORLEVEL 1 exit /b
        echo Publishing only now to help avoid race conditions with Gradle
        gradle %GRADLE_TASK% %GRADLE_OPTIONS% -b %CI_DEPLOY_MODULE%/build.gradle --refresh-dependencies
        if ERRORLEVEL 1 exit /b
        goto :done3

        :maven
        mkdir %USERPROFILE%\.m2
        echo ^<settings^> > %USERPROFILE%\.m2\settings.xml
        echo ^<mirrors^>^<mirror^>^<id^>google-maven-central^</id^>^<name^>GCS Maven Central mirror^</name^>^<url^>https://maven-central.storage-download.googleapis.com/maven2/^</url^>^<mirrorOf^>central^</mirrorOf^>^</mirror^>^</mirrors^> >> %USERPROFILE%\.m2\settings.xml
        echo ^<servers^>^<server^>^<id^>sonatype-nexus-snapshots^</id^>^<username^>%CI_DEPLOY_USERNAME%^</username^>^<password^>%CI_DEPLOY_PASSWORD%^</password^>^</server^>^<server^>^<id^>sonatype-nexus-staging^</id^>^<username^>%CI_DEPLOY_USERNAME%^</username^>^<password^>%CI_DEPLOY_PASSWORD%^</password^>^</server^>^</servers^> >> %USERPROFILE%\.m2\settings.xml
        echo ^</settings^> >> %USERPROFILE%\.m2\settings.xml

        set /a "SECONDS=%RANDOM% %% 25"

        echo Executing Maven %MAVEN_PHASE% %CI_DEPLOY_OPTIONS% on %MAKEJ% processors
        set EXT=${{ matrix.ext }}
        if "%EXT%" == "" (set EXT2=) else (set EXT2=%EXT:~1%)
        set "MAVEN_OPTS=-Xss2m -Xmx4g"
        set "MAVEN_OPTIONS=clean %MAVEN_PHASE% clean -B -U -e -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Djavacpp.platform=%CI_DEPLOY_PLATFORM% -Djavacpp.platform.extension=%EXT% %MAVEN_OPTIONS% %CI_DEPLOY_OPTIONS%"

        setlocal enabledelayedexpansion
        for /l %%i in (1,1,5) do (set STATUS=0 & call mvn %MAVEN_OPTIONS% -pl .,%CI_DEPLOY_MODULE% && goto :done || set STATUS=!ERRORLEVEL! && timeout 60 > nul)
        exit /b !STATUS!
        :done
        for /l %%i in (1,1,5) do (set STATUS=0 & call mvn %MAVEN_OPTIONS% -f %CI_DEPLOY_MODULE%/platform/%EXT2%/pom.xml && goto :done2 || set STATUS=!ERRORLEVEL! && timeout 60 > nul)
        exit /b !STATUS!
        :done2
        if exist %CI_DEPLOY_MODULE%/platform/redist/pom.xml (
          for /l %%i in (1,1,5) do (set STATUS=0 & call mvn %MAVEN_OPTIONS% -f %CI_DEPLOY_MODULE%/platform/redist/pom.xml && goto :done3 || set STATUS=!ERRORLEVEL! && timeout 60 > nul)
          exit /b !STATUS!
        )
        :done3
        df -h
        wmic pagefile list /format:list

    - name: Clean up
      shell: cmd
      run: |
        cd /d %USERPROFILE%
        set "PATH=C:\hostedtoolcache\windows\Python\3.9.13\x64;C:\msys64\usr\bin;%PATH%"
        bash -c "rm -Rf $(find .m2/repository/ -name '*SNAPSHOT*')"
