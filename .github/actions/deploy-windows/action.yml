name: Deploy on Windows
runs:
  using: composite
  steps:
    - name: Install environment
      shell: cmd
      run: |
        cd /d %USERPROFILE%

        echo Installing MSYS2
        C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm pkg-config"
        C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm base-devel git tar unzip p7zip zip autoconf autoconf-archive automake libtool make patch gnupg"
        C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-nasm mingw-w64-x86_64-toolchain mingw-w64-x86_64-libtool mingw-w64-x86_64-gcc mingw-w64-i686-gcc mingw-w64-x86_64-gcc-fortran mingw-w64-i686-gcc-fortran mingw-w64-x86_64-libwinpthread-git mingw-w64-i686-libwinpthread-git mingw-w64-x86_64-SDL2 mingw-w64-i686-SDL2 mingw-w64-x86_64-ragel"
        set "PATH=C:\msys64\usr\bin;%PATH%"

        echo Installing Windows SDK 8.1
        curl -Lo sdksetup.exe https://go.microsoft.com/fwlink/p/?LinkId=323507
        sdksetup.exe /features OptionId.WindowsDesktopSoftwareDevelopmentKit OptionId.NetFxSoftwareDevelopmentKit /quiet

        echo Removing broken stuff from WSL and MSYS2
        rm "C:/WINDOWS/system32/bash.EXE" "C:/msys64/usr/bin/link.exe" "C:/msys64/usr/bin/python.exe" "C:/msys64/usr/bin/python3.exe"
        rm "C:/ProgramData/chocolatey/bin/gfortran.exe" "C:/msys64/mingw32/bin/gfortran.exe" "C:/msys64/mingw32/bin/python.exe" "C:/msys64/mingw32/bin/python3.exe"
        rm "C:/Strawberry/c/bin/gfortran.exe" "C:/msys64/mingw64/bin/gfortran.exe" "C:/msys64/mingw64/bin/python.exe" "C:/msys64/mingw64/bin/python3.exe"
        rm "C:/msys64/mingw32/bin/clang-cl.exe" "C:/msys64/mingw64/bin/clang-cl.exe" "C:/msys64/mingw32/bin/cmake.exe" "C:/msys64/mingw64/bin/cmake.exe"

        python -m pip install gdown || python -m pip install gdown

        if not "%CI_DEPLOY_NEED_BAZEL%"=="" (
          echo Installing Bazel
          curl -L https://github.com/bazelbuild/bazel/releases/download/0.25.3/bazel-0.25.3-windows-x86_64.exe -o C:/msys64/mingw64/bin/bazel.exe

          echo Removing old versions of MSVC that interfere with Bazel
          bash -c "find 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/' \( -name '14.1*' -or -name '14.2[01234567]*' \) -prune -exec rm -Rf {} \;"
          dir /s /a "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\14.*"
        )

        if not "%CI_DEPLOY_NEED_GCC%"=="" (
          echo Installing an older less buggy version of GCC
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-gdb-10.1-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-gcc-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-gcc-ada-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-gcc-objc-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-gcc-libs-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-gcc-fortran-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-gcc-libgfortran-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-binutils-2.35.1-3-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-crt-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-headers-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-libmangle-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-libwinpthread-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-tools-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-winpthreads-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/i686/mingw-w64-i686-winstorecompat-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gdb-10.1-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-ada-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-objc-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-libs-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-fortran-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-libgfortran-10.2.0-5-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-binutils-2.35.1-3-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-crt-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-headers-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-libmangle-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-libwinpthread-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-tools-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-winpthreads-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          curl -LO http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-winstorecompat-git-9.0.0.6029.ecb4ff54-1-any.pkg.tar.zst
          bash -c "pacman -Rc --noconfirm mingw-w64-i686-libgccjit mingw-w64-x86_64-libgccjit"
          bash -c "pacman -U --noconfirm *.pkg.tar.zst"
        )

        if "%CI_DEPLOY_PLATFORM%"=="windows-x86_64" if not "%CI_DEPLOY_NEED_CUDA%"=="" (
          echo Installing CUDA, cuDNN, etc
          curl -LO https://developer.download.nvidia.com/compute/cuda/11.6.0/local_installers/cuda_11.6.0_511.23_windows.exe
          curl -LO https://developer.download.nvidia.com/compute/redist/cudnn/v8.3.2/local_installers/11.5/cudnn-windows-x86_64-8.3.2.44_cuda11.5-archive.zip
          cuda_11.6.0_511.23_windows.exe -s
          unzip cudnn-windows-x86_64-8.3.2.44_cuda11.5-archive.zip
          move cudnn-windows-x86_64-8.3.2.44_cuda11.5-archive\bin\*.dll "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.6\bin"
          move cudnn-windows-x86_64-8.3.2.44_cuda11.5-archive\include\*.h "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.6\include"
          move cudnn-windows-x86_64-8.3.2.44_cuda11.5-archive\lib\*.lib "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.6\lib\x64"

          echo Applying hotfix to Visual Studio 2019 for CUDA
          curl -LO https://raw.githubusercontent.com/microsoft/STL/main/stl/inc/cmath
          bash -c "find 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/' -name cmath -exec cp -v cmath {} \;"
          bash -c "sed -i '/device_segmented_sort.cuh/d' 'C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.6/include/cub/cub.cuh'"
        )

        if "%CI_DEPLOY_MODULE%"=="nvcodec" (
          echo Installing NVIDIA Video Codec SDK
          python -m gdown.cli https://drive.google.com/uc?id=1dh3P5JLUUe9EXE0GSJj6VDWYlr7W89dO
          unzip Video_Codec_SDK_11.1.5.zip
          move Video_Codec_SDK_11.1.5 "%ProgramFiles%\NVIDIA GPU Computing Toolkit\VideoCodecSDK"
        )

        if "%CI_DEPLOY_MODULE%"=="tensorrt" (
          echo Installing TensorRT
          python -m gdown.cli https://drive.google.com/uc?id=1jR6H6Vc1jvziLKMrCEIGfbtpaJlge4GC
          unzip TensorRT-8.2.3.0.Windows10.x86_64.cuda-11.4.cudnn8.2.zip
          move TensorRT-8.2.3.0 "%ProgramFiles%\NVIDIA GPU Computing Toolkit\TensorRT"
        )

        if "%CI_DEPLOY_MODULE%"=="mkl" (
          echo Installing MKL
          curl -LO https://registrationcenter-download.intel.com/akdlm/irc_nas/18414/w_onemkl_p_2022.0.0.115_offline.exe
          curl -LO https://registrationcenter-download.intel.com/akdlm/irc_nas/18418/w_BaseKit_32bit_p_2022.1.0.37_offline.exe
          w_onemkl_p_2022.0.0.115_offline.exe -s -a -s --eula accept
          w_BaseKit_32bit_p_2022.1.0.37_offline.exe -s -a -s --eula accept
        )

        if "%CI_DEPLOY_PLATFORM%"=="windows-x86" if "%CI_DEPLOY_MODULE%"=="flycapture" (
          echo Installing FlyCapture x86
          python -m gdown.cli https://drive.google.com/uc?id=1ctSSAMF5IkxTKWiiLtID-ltmm27pHFdr
          rem We can get this msi file by starting the installation from the exe file
          cmd.exe /c "msiexec /quiet /i FlyCapture_2.13.3.31_x86.msi ADDLOCAL=ALL"
        )

        if "%CI_DEPLOY_PLATFORM%"=="windows-x86_64" if "%CI_DEPLOY_MODULE%"=="flycapture" (
          echo Installing FlyCapture x64
          python -m gdown.cli https://drive.google.com/uc?id=14QM7W5RHhvZanF1UBobgEIvwdy6VwTht
          rem We can get this msi file by starting the installation from the exe file
          cmd.exe /c "msiexec /quiet /i FlyCapture_2.13.3.31_x64.msi ADDLOCAL=ALL"
        )

        if "%CI_DEPLOY_PLATFORM%"=="windows-x86" if "%CI_DEPLOY_MODULE%"=="spinnaker" (
          echo Installing Spinnaker x86
          python -m gdown.cli https://drive.google.com/uc?id=15i6tV-vahgm_uNWT96c_KX7tFdZxmev-
          python -m gdown.cli https://drive.google.com/uc?id=1ikOyG-gVettvjoJGQWkHxOcBWuTrGyfz
          rem We can get these msi files by starting the installation from the exe file
          cmd.exe /c "msiexec /quiet /i Spinnaker-2.4.0.143_Binaries_v140_x86.msi ADDLOCAL=ALL"
          cmd.exe /c "msiexec /quiet /i Spinnaker-2.4.0.143_SourceCode_v140_x86.msi ADDLOCAL=ALL"
        )

        if "%CI_DEPLOY_PLATFORM%"=="windows-x86_64" if "%CI_DEPLOY_MODULE%"=="spinnaker" (
          echo Installing Spinnaker x64
          python -m gdown.cli https://drive.google.com/uc?id=1NiMxxDflip1F5rJuf73xhfoI9vWUeUkQ
          python -m gdown.cli https://drive.google.com/uc?id=1FKatuVsLIQLbDb9R9W2ax_tav8_7--HI
          rem We can get these msi files by starting the installation from the exe file
          cmd.exe /c "msiexec /quiet /i Spinnaker-2.4.0.143_Binaries_v140_x64.msi ADDLOCAL=ALL"
          cmd.exe /c "msiexec /quiet /i Spinnaker-2.4.0.143_SourceCode_v140_x64.msi ADDLOCAL=ALL"
        )

        set GRADLE_TASK=publishToMavenLocal
        set MAVEN_PHASE=install
        set "MESSAGE=${{ github.event.head_commit.message }}"
        if "%MESSAGE:~0,7%"=="Release" set DEPLOY=RELEASE
        if "%GITHUB_REF:~11%"=="release" set DEPLOY=RELEASE
        if not "%CI_DEPLOY_USERNAME%"=="" if not "%GITHUB_EVENT_NAME%"=="pull_request" (
          set GRADLE_TASK=publish
          set MAVEN_PHASE=deploy
          if "%DEPLOY%"=="RELEASE" (
            python -m gdown.cli -q -O settings.tar.gz https://drive.google.com/uc?id=%CI_DEPLOY_SETTINGS%
            bash -c "tar -xzf settings.tar.gz -C $HOME"
            set "MAVEN_OPTIONS=%MAVEN_OPTIONS% -DperformRelease -DstagingRepositoryId=%STAGING_REPOSITORY%"
          )
        )
        echo GPG_PASSPHRASE=*** >> %GITHUB_ENV%
        echo GRADLE_TASK=%GRADLE_TASK% >> %GITHUB_ENV%
        echo MAVEN_PHASE=%MAVEN_PHASE% >> %GITHUB_ENV%
        echo MAVEN_OPTIONS=%MAVEN_OPTIONS% >> %GITHUB_ENV%

    - name: Build project
      shell: cmd
      run: |
        if "%CI_DEPLOY_PLATFORM%"=="windows-x86_64" (
          call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
          set MSYSTEM=MINGW64
        )
        if "%CI_DEPLOY_PLATFORM%"=="windows-x86" (
          call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86
          set MSYSTEM=MINGW32
        )
        if not "%CI_DEPLOY_NEED_BAZEL%"=="" (
          echo Shorten work paths to prevent Bazel from reaching MAX_PATH limit
          set "TEST_TMPDIR=C:\tmp"
          set "TMPDIR=C:\tmp"
          set "TEMP=C:\tmp"
          set "TMP=C:\tmp"
          mkdir C:\tmp
          C:/msys64/mingw64/bin/bazel.exe version
        )
        if exist "%ProgramFiles%\NVIDIA GPU Computing Toolkit" (
          set "CUDA_PATH=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.6"
          set "CUDA_PATH_V11_6=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.6"
          set "PATH=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.6\bin;%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.6\libnvvp;%PATH%"
          echo CUDA Version 11.6.0>"%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.6\version.txt"
        )
        set "PATH=C:\msys64\%MSYSTEM%\bin;C:\msys64\usr\bin;%PATH%"

        where bash
        where git
        where cl
        where gcc
        where cmake
        where gradle
        where mvn
        where gpg
        where python
        where python3
        where clang-cl

        bash --version
        git --version
        cl
        gcc --version
        cmake --version
        gradle --version
        call mvn -version
        gpg --version
        python --version
        clang-cl --version
        df -h
        wmic pagefile list /format:list

        set MAKEJ=%NUMBER_OF_PROCESSORS%
        echo Fetching %GITHUB_REPOSITORY%@%GITHUB_SHA%
        git init
        git fetch --depth 1 https://github.com/%GITHUB_REPOSITORY% %GITHUB_SHA%
        git checkout %GITHUB_SHA%
        git submodule update --init --recursive
        git submodule foreach --recursive "git reset --hard"

        if not "%CI_DEPLOY_NEED_GRADLE%"=="" (goto :gradle) else (goto :maven)

        :gradle
        echo Executing Gradle %GRADLE_TASK% ${{ matrix.options }} %CI_DEPLOY_OPTIONS% on %MAKEJ% processors
        set "GRADLE_OPTIONS=-Dorg.gradle.jvmargs=-Xmx2048m -PjavacppPlatform=%CI_DEPLOY_PLATFORM% -PjavacppPlatformExtension=${{ matrix.ext }} ${{ matrix.options }} %CI_DEPLOY_OPTIONS% --info"
        gradle clean build %GRADLE_OPTIONS% -b %CI_DEPLOY_MODULE%/build.gradle
        if ERRORLEVEL 1 exit /b
        echo Publishing only now to help avoid race conditions with Gradle
        gradle %GRADLE_TASK% %GRADLE_OPTIONS% -b %CI_DEPLOY_MODULE%/build.gradle --refresh-dependencies
        if ERRORLEVEL 1 exit /b
        goto :done3

        :maven
        mkdir %USERPROFILE%\.m2
        echo ^<settings^> > %USERPROFILE%\.m2\settings.xml
        echo ^<mirrors^>^<mirror^>^<id^>google-maven-central^</id^>^<name^>GCS Maven Central mirror^</name^>^<url^>https://maven-central.storage-download.googleapis.com/maven2/^</url^>^<mirrorOf^>central^</mirrorOf^>^</mirror^>^</mirrors^> >> %USERPROFILE%\.m2\settings.xml
        echo ^<servers^>^<server^>^<id^>sonatype-nexus-snapshots^</id^>^<username^>%CI_DEPLOY_USERNAME%^</username^>^<password^>%CI_DEPLOY_PASSWORD%^</password^>^</server^>^<server^>^<id^>sonatype-nexus-staging^</id^>^<username^>%CI_DEPLOY_USERNAME%^</username^>^<password^>%CI_DEPLOY_PASSWORD%^</password^>^</server^>^</servers^> >> %USERPROFILE%\.m2\settings.xml
        echo ^</settings^> >> %USERPROFILE%\.m2\settings.xml

        set /a "SECONDS=%RANDOM% %% 300"
        if "%CI_DEPLOY_NEED_CUDA%"=="" (
            echo Sleeping %SECONDS% seconds to help avoid race conditions with Maven
            timeout %SECONDS% > nul
        )

        echo Executing Maven %MAVEN_PHASE% %CI_DEPLOY_OPTIONS% on %MAKEJ% processors
        set EXT=${{ matrix.ext }}
        if "%EXT%" == "" (set EXT2=) else (set EXT2=%EXT:~1%)
        set "MAVEN_OPTS=-Xss2m -Xmx4g"
        set "MAVEN_OPTIONS=clean %MAVEN_PHASE% -B -U -e -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Djavacpp.platform=%CI_DEPLOY_PLATFORM% -Djavacpp.platform.extension=%EXT% %MAVEN_OPTIONS% %CI_DEPLOY_OPTIONS%"

        setlocal enabledelayedexpansion
        for /l %%i in (1,1,5) do (set STATUS=0 & call mvn %MAVEN_OPTIONS% -pl .,%CI_DEPLOY_MODULE% && goto :done || set STATUS=!ERRORLEVEL! && timeout 60 > nul)
        exit /b !STATUS!
        :done
        for /l %%i in (1,1,5) do (set STATUS=0 & call mvn %MAVEN_OPTIONS% -f %CI_DEPLOY_MODULE%/platform/%EXT2%/pom.xml && goto :done2 || set STATUS=!ERRORLEVEL! && timeout 60 > nul)
        exit /b !STATUS!
        :done2
        if exist %CI_DEPLOY_MODULE%/platform/redist/pom.xml (
          for /l %%i in (1,1,5) do (set STATUS=0 & call mvn %MAVEN_OPTIONS% -f %CI_DEPLOY_MODULE%/platform/redist/pom.xml && goto :done3 || set STATUS=!ERRORLEVEL! && timeout 60 > nul)
          exit /b !STATUS!
        )
        :done3
        df -h
        wmic pagefile list /format:list

    - name: Clean up
      shell: cmd
      run: |
        cd /d %USERPROFILE%
        set "PATH=C:\msys64\usr\bin;%PATH%"
        bash -c "rm -Rf $(find .m2/repository/ -name '*SNAPSHOT*')"
