name: Deploy on Ubuntu
runs:
  using: composite
  steps:
    - name: Install environment
      shell: bash
      env:
        GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        export SUDO=$(which sudo)
        echo "SUDO=$SUDO" >> $GITHUB_ENV
        if [[ -z "$SUDO" ]]; then
          echo "Fixing HOME to /root (was '$HOME')"
          export HOME=/root
          echo "HOME=$HOME" >> $GITHUB_ENV
        fi
        cd $HOME

        # Free disk space by removing some unused system components
        $SUDO rm -rf /usr/local/lib/android
        $SUDO rm -rf /usr/share/dotnet

        # Make sure no busy /swapfile is hanging around
        # First disable any existing swapfile with swapoff
        if $SUDO swapon --summary | grep -q '^/swapfile'; then
          $SUDO swapoff /swapfile
        fi
        $SUDO rm -f /swapfile

        # Allocate a swapfile on Linux as it's not enabled by default. Needed for pytorch and mkl.
        $SUDO fallocate -l 4GB /swapfile
        $SUDO chmod 600 /swapfile
        $SUDO mkswap /swapfile
        if ! $SUDO swapon /swapfile; then
          $SUDO rm /swapfile
        fi

        mkdir -p .ccache
        echo "max_size = 2.0G"                                                                        > .ccache/ccache.conf
        echo "hash_dir = false"                                                                      >> .ccache/ccache.conf
        echo "sloppiness = file_macro,include_file_ctime,include_file_mtime,pch_defines,time_macros" >> .ccache/ccache.conf

        export ARCH=amd64
        export PREFIX=x86_64-linux-gnu
        if [[ "$CI_DEPLOY_PLATFORM" == "linux-armhf" ]]; then
          export ARCH=armhf
          export PREFIX=arm-linux-gnueabihf
          export USERLAND_BUILDME="buildme"
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-arm64" ]]; then
          export ARCH=arm64
          export ARCH_CUDA=sbsa
          export PREFIX=aarch64-linux-gnu
          export CUDA=cuda-repo-rhel8-12-9-local-12.9.1_575.57.08-1.aarch64.rpm
          export CUDNN=cuda-12-9.10.2.21-1.aarch64
          export NCCL=2.27.5-1+cuda12.9.aarch64
          export NVCOMP=nvcomp-linux-sbsa-4.2.0.11_cuda12-archive
          export USERLAND_BUILDME="buildme --aarch64"
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-ppc64le" ]]; then
          export ARCH=ppc64el
          export ARCH_CUDA=ppc64le
          export PREFIX=powerpc64le-linux-gnu
          export CUDA=cuda-repo-rhel8-12-6-local-12.6.2_560.35.03-1.ppc64le.rpm
          export CUDNN=cuda-12-9.5.1.17-1.ppc64le
          export NCCL=2.23.4-1+cuda12.6.ppc64le
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-riscv64" ]]; then
          export ARCH=riscv64
          export PREFIX=riscv64-linux-gnu
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-x86" ]]; then
          export ARCH=i386
          export PREFIX=i686-linux-gnu
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]]; then
          export ARCH=amd64
          export ARCH_CUDA=x86_64
          export PREFIX=x86_64-linux-gnu
          export CUDA=cuda-repo-rhel8-12-9-local-12.9.1_575.57.08-1.x86_64.rpm
          export CUDNN=cuda-12-9.10.2.21-1.x86_64
          export NCCL=2.27.5-1+cuda12.9.x86_64
          export NVCOMP=nvcomp-linux-x86_64-4.2.0.11_cuda12-archive
        fi
        echo "ARCH=$ARCH" >> $GITHUB_ENV
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV

        $SUDO dpkg --list
        $SUDO du -cd2 /* || true

        $SUDO apt-get update
        $SUDO apt-get -y install gnupg
        source /etc/os-release
        export CODENAME=$UBUNTU_CODENAME

        HOST_ARCH=$(dpkg --print-architecture)   # amd64 or arm64
        if [[ "$ARCH" != "$HOST_ARCH" ]]; then
          # https://github.com/actions/runner-images/issues/675
          $SUDO gem install apt-spy2
          $SUDO apt-spy2 check
          $SUDO apt-spy2 fix --commit
          $SUDO sed -i 's/azure\.//' /etc/apt/apt-mirrors.txt /etc/apt/sources.list
          $SUDO cat /etc/apt/apt-mirrors.txt /etc/apt/sources.list
          $SUDO apt-get update

          # https://github.com/actions/runner-images/issues/4589
          $SUDO apt-add-repository -y ppa:ondrej/php
          $SUDO apt-get -y install ppa-purge
          $SUDO ppa-purge -y ppa:ondrej/php

          # we are cross-compiling
          $SUDO dpkg --add-architecture $ARCH
          TOOLCHAIN="gcc-$PREFIX g++-$PREFIX gfortran-$PREFIX"

          if [[ "$ARCH" != "i386" ]]; then
            $SUDO sed -i 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
            $SUDO echo deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $CODENAME main restricted universe multiverse | $SUDO tee -a /etc/apt/sources.list
            $SUDO echo deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $CODENAME-updates main restricted universe multiverse | $SUDO tee -a /etc/apt/sources.list
            $SUDO echo deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $CODENAME-backports main restricted universe multiverse | $SUDO tee -a /etc/apt/sources.list
            $SUDO echo deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $CODENAME-security main restricted universe multiverse | $SUDO tee -a /etc/apt/sources.list
            TOOLCHAIN="$TOOLCHAIN linux-libc-dev-$ARCH-cross binutils-multiarch"
          fi
        fi
        # $SUDO echo deb [arch=amd64] http://ppa.launchpad.net/openjdk-r/ppa/ubuntu $CODENAME main | $SUDO tee -a /etc/apt/sources.list
        # $SUDO echo deb [arch=amd64] http://ppa.launchpad.net/deadsnakes/ppa/ubuntu $CODENAME main | $SUDO tee -a /etc/apt/sources.list
        # $SUDO apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EB9B1D8886F44E2A
        # $SUDO apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA6932366A755776
        $SUDO apt-get update
        $SUDO apt-get -y install python3 python3-minimal rpm libasound2-dev:$ARCH freeglut3-dev:$ARCH libfontconfig-dev:$ARCH libgtk2.0-dev:$ARCH libusb-dev:$ARCH libusb-1.0-0-dev:$ARCH libffi-dev:$ARCH libbz2-dev:$ARCH zlib1g-dev:$ARCH libxcb1-dev:$ARCH libpulse-dev:$ARCH libva-dev:$ARCH libdrm-dev:$ARCH
        $SUDO apt-get -y install pkg-config ccache clang $TOOLCHAIN openjdk-8-jdk ant python3-pip swig git file wget zstd unzip tar bzip2 gzip patch autoconf-archive autogen automake cmake make libtool bison flex perl nasm ragel curl libcurl4-openssl-dev libssl-dev libffi-dev libbz2-dev zlib1g-dev rapidjson-dev libdrm-dev

        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-$HOST_ARCH/
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        ln -sf $JAVA_HOME /usr/lib/jvm/default-java
        find /usr/lib/jvm/default-java/
        # curl -LO https://github.com/Kitware/CMake/releases/download/v3.24.2/cmake-3.24.2-linux-x86_64.tar.gz
        curl -LO https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz || curl -LO https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
        curl -LO https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.18.3.tar.gz
        curl -LO https://services.gradle.org/distributions/gradle-7.1.1-bin.zip
        # $SUDO tar -xzf cmake-3.24.2-linux-x86_64.tar.gz -C /opt/
        $SUDO tar -xzf apache-maven-3.6.3-bin.tar.gz -C /opt/
        $SUDO tar -xzf git-2.18.3.tar.gz
        $SUDO unzip gradle-7.1.1-bin.zip -d /opt/
        # pushd git-2.18.3; make -j2 prefix=/usr/local/; $SUDO make -j2 prefix=/usr/local/ install; popd
        # $SUDO ln -sf /opt/cmake-3.24.2-linux-x86_64/bin/* /usr/bin/
        $SUDO ln -sf /opt/apache-maven-3.6.3/bin/mvn /usr/bin/mvn
        $SUDO ln -sf /opt/gradle-7.1.1/bin/gradle /usr/bin/gradle

        $SUDO python3 -m pip install gdown || $SUDO python3 -m pip install --break-system-packages gdown

        # install vulkan sdk
        echo Installing Vulkan-SDK
        if [[ "$CODENAME" == "jammy" ]]; then
          curl -s https://packages.lunarg.com/lunarg-signing-key-pub.asc | $SUDO tee /etc/apt/trusted.gpg.d/lunarg.asc >/dev/null
          $SUDO curl -s -o /etc/apt/sources.list.d/lunarg-vulkan-1.3.280-jammy.list https://packages.lunarg.com/vulkan/1.3.280/lunarg-vulkan-1.3.280-jammy.list
          $SUDO apt-get update && $SUDO apt-get install -y libvulkan1 libvulkan-dev vulkan-sdk && $SUDO apt-get clean
        elif [[ "$CODENAME" == "focal" ]]; then
          curl -s https://packages.lunarg.com/lunarg-signing-key-pub.asc | $SUDO apt-key add -
          $SUDO curl -s -o /etc/apt/sources.list.d/lunarg-vulkan-1.3.280-focal.list https://packages.lunarg.com/vulkan/1.3.280/lunarg-vulkan-1.3.280-focal.list
          $SUDO apt-get update && $SUDO apt-get install -y libvulkan1 libvulkan-dev vulkan-sdk && $SUDO apt-get clean
        fi

        if [[ -n ${USERLAND_BUILDME:-} ]]; then
          curl -LOJ https://github.com/raspberrypi/userland/archive/master.tar.gz
          tar -xzf userland-master.tar.gz
          pushd userland-master
          bash $USERLAND_BUILDME
          popd
          export USERLAND_PATH=$(pwd)/userland-master/
          echo "USERLAND_PATH=$USERLAND_PATH" >> $GITHUB_ENV
        fi

        if [[ $CI_DEPLOY_PLATFORM == android-* ]]; then
          curl -LO https://dl.google.com/android/repository/android-ndk-r27c-linux.zip
          unzip -qq android-ndk-r27c-linux.zip
          ln -sf android-ndk-r27c android-ndk
          export MAVEN_OPTIONS="-Djavacpp.platform.root=$(pwd)/android-ndk/ -Djava.library.path="
        else
          export MAVEN_OPTIONS="-Djavacpp.platform.compiler=$PREFIX-g++ -Djava.library.path=/usr/$PREFIX/lib/:/usr/lib/$PREFIX/:$USERLAND_PATH/build/lib/"
        fi

        if [[ -n ${ARCH_CUDA:-} ]] && [[ -n ${CI_DEPLOY_NEED_CUDA:-} ]]; then
          echo Installing CUDA, cuDNN, nvCOMP, etc
          curl -LO https://developer.download.nvidia.com/compute/cuda/12.9.1/local_installers/$CUDA
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH_CUDA/libcudnn9-$CUDNN.rpm
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH_CUDA/libcudnn9-devel-$CUDNN.rpm
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH_CUDA/libcudnn9-headers-$CUDNN.rpm
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH_CUDA/libnccl-$NCCL.rpm
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH_CUDA/libnccl-devel-$NCCL.rpm

          $SUDO rpm -i --force --ignorearch --nodeps $CUDA libcudnn*.rpm libnccl*.rpm
          rm -f *.rpm *.tgz *.txz *.tar.*
          pushd /var/cuda-repo-rhel8-12-9-local/; $SUDO rpm -i --force --ignorearch --nodeps cuda*.rpm libc*.rpm libn*.rpm; $SUDO rm *.rpm; popd
          $SUDO ln -snf /usr/local/cuda/targets/*/include /usr/local/cuda/include
          $SUDO ln -snf /usr/local/cuda/targets/*/lib /usr/local/cuda/lib64
          $SUDO ln -sf /usr/local/cuda/lib64/ /usr/local/cuda/lib
          $SUDO ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/libcuda.so
          $SUDO ln -sf /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/libnvidia-ml.so
          $SUDO mv /usr/include/cudnn* /usr/include/nccl* /usr/local/cuda/include/
          $SUDO mv /usr/lib64/libcudnn* /usr/lib64/libnccl* /usr/local/cuda/lib64/
          for f in /usr/local/cuda/include/*_v9.h; do $SUDO ln -sf $f ${f:0:${#f}-5}.h; done
          for f in /usr/local/cuda/lib64/libcudnn*so.9.*; do $SUDO ln -sf $f ${f:0:${#f}-4}; $SUDO ln -sf $f ${f:0:${#f}-6}; done

          if [[ -n ${NVCOMP:-} ]]; then
            curl -LO https://developer.download.nvidia.com/compute/nvcomp/redist/nvcomp/linux-$ARCH_CUDA/$NVCOMP.tar.xz
            $SUDO tar --wildcards -xvf $NVCOMP.tar.xz -C /usr/local/cuda/lib64/ --strip-components=2 */lib/
            $SUDO tar --wildcards -xvf $NVCOMP.tar.xz -C /usr/local/cuda/include/ --strip-components=2 */include/
            rm -f $NVCOMP.tar.gz
          fi

          $SUDO cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so
          $SUDO cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so.1
          $SUDO cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so
          $SUDO cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so.1
          $SUDO sed -i s/cublas_v2.h/cublas_api.h/g /usr/local/cuda/include/cublasXt.h /usr/local/cuda/include/cusolverDn.h /usr/local/cuda/include/cusolverSp.h
          $SUDO sed -i /block_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          $SUDO sed -i /device_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          $SUDO sed -i /device_segmented_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          $SUDO sed -i /warp_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh

          # Remove downloaded archives and unused libraries to avoid running out of disk space
          $SUDO rm -f $(find /usr/local/cuda/ -name '*.a' -and -not -name libcudart_static.a -and -not -name libcudadevrt.a -and -not -name libnvcomp_device.a)
        fi

        if [[ "$CI_DEPLOY_MODULE" == "nvcodec" ]]; then
          echo Installing NVIDIA Video Codec SDK
          python3 -m gdown 1-vFYF2u1M8xjk9LXn-fLkPcPm-dfNxoh
          $SUDO unzip Video_Codec_SDK_13.0.19.zip -d /usr/local
          $SUDO ln -sf /usr/local/Video_Codec_SDK_* /usr/local/videocodecsdk
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-arm64" ]] && [[ "$CI_DEPLOY_MODULE" == "tensorrt" ]]; then
          echo Installing TensorRT
          # python3 -m gdown 1LZRCv4ZAGiDQAu4pvADJIGntq4cGl5tU
          curl -LO https://developer.nvidia.com/downloads/compute/machine-learning/tensorrt/10.12.0/tars/TensorRT-10.12.0.36.Linux.aarch64-gnu.cuda-12.9.tar.gz
          $SUDO tar -hxvf TensorRT-10.12.0.36.Linux.aarch64-gnu.cuda-12.9.tar.gz -C /usr/local/
          $SUDO ln -sf /usr/local/TensorRT* /usr/local/tensorrt
          # Remove downloaded archives and unused libraries to avoid running out of disk space
          $SUDO rm -f *.tar.gz $(find /usr/local/tensorrt/ -name '*.a')
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]] && [[ "$CI_DEPLOY_MODULE" == "tensorrt" ]]; then
          echo Installing TensorRT
          # python3 -m gdown 1dVhD-DEYY42QbZe1GXl-vxe3k6KqWGsL
          curl -LO https://developer.nvidia.com/downloads/compute/machine-learning/tensorrt/10.12.0/tars/TensorRT-10.12.0.36.Linux.x86_64-gnu.cuda-12.9.tar.gz
          $SUDO tar -hxvf TensorRT-10.12.0.36.Linux.x86_64-gnu.cuda-12.9.tar.gz -C /usr/local/
          $SUDO ln -sf /usr/local/TensorRT* /usr/local/tensorrt
          # Remove downloaded archives and unused libraries to avoid running out of disk space
          $SUDO rm -f *.tar.gz $(find /usr/local/tensorrt/ -name '*.a')
        fi

        if [[ "$CI_DEPLOY_MODULE" == "mkl" ]]; then
          echo Installing MKL
          curl -LO https://registrationcenter-download.intel.com/akdlm/IRC_NAS/47c7d946-fca1-441a-b0df-b094e3f045ea/intel-onemkl-2025.2.0.629_offline.sh
          $SUDO bash intel-onemkl-2025.2.0.629_offline.sh -s -a -s --eula accept
          export MAVEN_OPTIONS="-Djavacpp.platform.compiler=clang++"
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-armhf" ]] && [[ "$CI_DEPLOY_MODULE" == "flycapture" ]]; then
          echo Installing FlyCapture amdhf
          python3 -m gdown 16NuUBs2MXQpVYqzDCEr9KdMng-6rHuDI
          mkdir -p $GITHUB_WORKSPACE/downloads
          ln -s $(pwd)/flycapture.2.13.3.31_armhf_xenial.tar.gz $GITHUB_WORKSPACE/downloads/flycapture.2.13.3.31_armhf.tar.gz
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-arm64" ]] && [[ "$CI_DEPLOY_MODULE" == "flycapture" ]]; then
          echo Installing FlyCapture amd64
          python3 -m gdown 1LhnuRMT3urYsApCcuBEcaotGRK8h4kJv
          mkdir -p $GITHUB_WORKSPACE/downloads
          ln -s $(pwd)/flycapture.2.13.3.31_arm64_xenial.tar.gz $GITHUB_WORKSPACE/downloads/flycapture.2.13.3.31_arm64.tar.gz
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-x86" ]] && [[ "$CI_DEPLOY_MODULE" == "flycapture" ]]; then
          echo Installing FlyCapture i386
          python3 -m gdown 1BOpSik1Fndagzjf4ykwzermt2qlTzsWI
          tar -xzvf flycapture2-2.13.3.31-i386-pkg_xenial.tgz
          find -name *.deb | while read f; do ar -xv $f; $SUDO tar --totals -xf data.tar.xz -C /; done;
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]] && [[ "$CI_DEPLOY_MODULE" == "flycapture" ]]; then
          echo Installing FlyCapture amd64
          python3 -m gdown 1YtVjdnbQLZHX_ocQ6xAmiq6pjftuPOPd
          tar -xzvf flycapture2-2.13.3.31-amd64-pkg_xenial.tgz
          find -name *.deb | while read f; do ar -xv $f; $SUDO tar --totals -xf data.tar.xz -C /; done;
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]] && [[ "$CI_DEPLOY_MODULE" == "spinnaker" ]]; then
          echo Installing Spinnaker amd64
          python3 -m gdown 1Xapzvxrgx1w3RCbAOFILaNCZwpusB_VA
          tar -xzvf spinnaker-4.0.0.116-amd64-pkg-22.04.tar.gz
          find -name *.deb | while read f; do ar -xv $f; $SUDO tar --totals --use-compress-program=unzstd -xvf data.tar.zst -C /; done;
        fi

        GRADLE_TASK=publishToMavenLocal
        MAVEN_PHASE=install
        if [[ -n ${CI_DEPLOY_USERNAME:-} ]] && [[ ! "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          GRADLE_TASK=publish
          MAVEN_PHASE=deploy
          if [[ "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" == Release* ]] || [[ "${GITHUB_REF#refs/heads/}" == "release" ]]; then
            python3 -m gdown -q -O settings.tar.gz $CI_DEPLOY_SETTINGS
            tar -xzf settings.tar.gz
            MAVEN_OPTIONS="$MAVEN_OPTIONS -Dgpg.homedir=$(pwd)/.gnupg/ -DperformRelease -DstagingRepositoryId=$STAGING_REPOSITORY"
          fi
        fi
        echo "GPG_PASSPHRASE=***" >> $GITHUB_ENV
        echo "GRADLE_TASK=$GRADLE_TASK" >> $GITHUB_ENV
        echo "MAVEN_PHASE=$MAVEN_PHASE" >> $GITHUB_ENV
        echo "MAVEN_OPTIONS=$MAVEN_OPTIONS" >> $GITHUB_ENV

    - name: Build project
      shell: bash
      run: |
        git --version
        $PREFIX-gcc --version
        cmake --version
        gradle --version
        mvn -version
        gpg --version
        python3 --version
        ccache -s --version
        df -h

        export MAKEJ=$(getconf _NPROCESSORS_ONLN)
        echo Fetching $GITHUB_REPOSITORY@$GITHUB_SHA
        git config --global --add safe.directory '*'
        git init
        git fetch --depth 1 https://github.com/$GITHUB_REPOSITORY $GITHUB_SHA
        git checkout $GITHUB_SHA
        git submodule update --init --recursive
        git submodule foreach --recursive 'git reset --hard'

        if [[ -n ${CI_DEPLOY_NEED_GRADLE:-} ]]; then
          echo Executing Gradle $GRADLE_TASK ${{ matrix.options }} $CI_DEPLOY_OPTIONS on $MAKEJ processors
          export GRADLE_OPTIONS="-Dorg.gradle.jvmargs=-Xmx2048m -PjavacppPlatform=$CI_DEPLOY_PLATFORM -PjavacppPlatformExtension=${{ matrix.ext }} ${{ matrix.options }} $CI_DEPLOY_OPTIONS --info"
          gradle clean build $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle
          echo Publishing only now to help avoid race conditions with Gradle
          gradle $GRADLE_TASK $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle --refresh-dependencies
        else
          mkdir -p $HOME/.m2
          echo "<settings><servers>" > $HOME/.m2/settings.xml
          echo "<server><id>central</id><username>$CI_DEPLOY_USERNAME</username><password>$CI_DEPLOY_PASSWORD</password></server>" >> $HOME/.m2/settings.xml
          echo "<server><id>central-portal-staging</id><configuration><httpHeaders><property><name>Authorization</name>" >> $HOME/.m2/settings.xml
          echo "<value>Bearer $(echo $CI_DEPLOY_USERNAME:$CI_DEPLOY_PASSWORD | base64)</value></property></httpHeaders></configuration></server>" >> $HOME/.m2/settings.xml
          echo "</servers></settings>" >> $HOME/.m2/settings.xml

          SECONDS=$(( RANDOM % 300 ))
          echo Sleeping $SECONDS seconds to help avoid race conditions with Maven
          sleep $SECONDS

          echo Executing Maven $MAVEN_PHASE $CI_DEPLOY_OPTIONS on $MAKEJ processors
          export EXT=${{ matrix.ext }}
          export MAVEN_OPTS="-Xss2m -Xmx4g"
          export MAVEN_OPTIONS="clean $MAVEN_PHASE clean -B -U -e -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Djavacpp.platform=$CI_DEPLOY_PLATFORM -Djavacpp.platform.extension=$EXT $MAVEN_OPTIONS $CI_DEPLOY_OPTIONS"
          for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -pl .,$CI_DEPLOY_MODULE && break || STATUS=$? && sleep 60; done; (exit $STATUS)
        fi
        df -h

    - name: Clean up
      shell: bash
      run: |
        cd $HOME
        rm -Rf $(find .m2/repository/ -name '*SNAPSHOT*')
