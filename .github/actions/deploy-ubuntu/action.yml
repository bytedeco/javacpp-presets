name: Deploy on Ubuntu
runs:
  using: composite
  steps:
    - name: Install environment
      shell: bash
      env:
        GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        export SUDO=$(which sudo)
        echo "SUDO=$SUDO" >> $GITHUB_ENV
        if [[ -z "$SUDO" ]]; then
          echo "Fixing HOME to /root (was '$HOME')"
          export HOME=/root
          echo "HOME=$HOME" >> $GITHUB_ENV
        fi
        cd $HOME

        # Free disk space by removing some unused system components
        $SUDO rm -rf /usr/local/lib/android
        $SUDO rm -rf /usr/share/dotnet

        # Allocate a swapfile on Linux as it's not enabled by default. Needed for pytorch and mkl.
        $SUDO fallocate -l 4GB /swapfile
        $SUDO chmod 600 /swapfile
        $SUDO mkswap /swapfile
        $SUDO swapon /swapfile

        mkdir -p .ccache
        echo "max_size = 2.0G"                                                                        > .ccache/ccache.conf
        echo "hash_dir = false"                                                                      >> .ccache/ccache.conf
        echo "sloppiness = file_macro,include_file_ctime,include_file_mtime,pch_defines,time_macros" >> .ccache/ccache.conf

        export ARCH=amd64
        export PREFIX=x86_64-linux-gnu
        if [[ "$CI_DEPLOY_PLATFORM" == "linux-armhf" ]]; then
          export ARCH=armhf
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-arm64" ]]; then
          export ARCH=arm64
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-ppc64le" ]]; then
          export ARCH=ppc64el
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-x86" ]]; then
          export ARCH=i386
          export PREFIX=i686-linux-gnu
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]]; then
          export ARCH=amd64
        fi
        echo "ARCH=$ARCH" >> $GITHUB_ENV
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV

        $SUDO dpkg --list

        $SUDO apt-get update
        $SUDO apt-get -y install  curl maven gnupg build-essential cmake git ninja-build python3 python3-pip openjdk-8-jdk ant python2 python3-pip swig file wget unzip tar bzip2 gzip patch autoconf-archive autogen automake cmake libtool bison flex perl nasm

        $SUDO python3 -m pip install gdown

        source /etc/os-release
        export CODENAME=$UBUNTU_CODENAME

        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        ln -sf $JAVA_HOME /usr/lib/jvm/default-java
        find /usr/lib/jvm/default-java/
        curl -LO https://services.gradle.org/distributions/gradle-7.1.1-bin.zip
        $SUDO unzip gradle-7.1.1-bin.zip -d /opt/
        $SUDO ln -sf /opt/gradle-7.1.1/bin/gradle /usr/bin/gradle

        $SUDO python3 -m pip install gdown || $SUDO python3 -m pip install gdown

        GRADLE_TASK=publishToMavenLocal
        MAVEN_PHASE=install
        if [[ -n ${CI_DEPLOY_USERNAME:-} ]] && [[ ! "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          GRADLE_TASK=publish
          MAVEN_PHASE=deploy
          if [[ "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" == Release* ]] || [[ "${GITHUB_REF#refs/heads/}" == "release" ]]; then
            python3 -m gdown.cli -q -O settings.tar.gz https://drive.google.com/uc?id=$CI_DEPLOY_SETTINGS
            tar -xzf settings.tar.gz
            MAVEN_OPTIONS="$MAVEN_OPTIONS -Dgpg.homedir=$(pwd)/.gnupg/ -DperformRelease -DstagingRepositoryId=$STAGING_REPOSITORY"
          fi
        fi
        echo "GPG_PASSPHRASE=***" >> $GITHUB_ENV
        echo "GRADLE_TASK=$GRADLE_TASK" >> $GITHUB_ENV
        echo "MAVEN_PHASE=$MAVEN_PHASE" >> $GITHUB_ENV
        echo "MAVEN_OPTIONS=$MAVEN_OPTIONS" >> $GITHUB_ENV

    - name: Build project
      shell: bash
      run: |
        git --version
        $PREFIX-gcc --version
        cmake --version
        gradle --version
        mvn -version
        gpg --version
        python3 --version
        ccache -s --version
        df -h

        export MAKEJ=$(getconf _NPROCESSORS_ONLN)
        echo Fetching $GITHUB_REPOSITORY@$GITHUB_SHA
        git config --global --add safe.directory '*'
        git init
        git fetch --depth 1 https://github.com/$GITHUB_REPOSITORY $GITHUB_SHA
        git checkout $GITHUB_SHA
        git submodule update --init --recursive
        git submodule foreach --recursive 'git reset --hard'

        if [[ -n ${CI_DEPLOY_NEED_GRADLE:-} ]]; then
          echo Executing Gradle $GRADLE_TASK ${{ matrix.options }} $CI_DEPLOY_OPTIONS on $MAKEJ processors
          export GRADLE_OPTIONS="-Dorg.gradle.jvmargs=-Xmx2048m -PjavacppPlatform=$CI_DEPLOY_PLATFORM -PjavacppPlatformExtension=${{ matrix.ext }} ${{ matrix.options }} $CI_DEPLOY_OPTIONS --info"
          gradle clean build $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle
          echo Publishing only now to help avoid race conditions with Gradle
          gradle $GRADLE_TASK $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle --refresh-dependencies
        else
          mkdir -p $HOME/.m2
          echo "<settings>" > $HOME/.m2/settings.xml
          echo "<mirrors><mirror><id>google-maven-central</id><name>GCS Maven Central mirror</name><url>https://maven-central.storage-download.googleapis.com/maven2/</url><mirrorOf>central</mirrorOf></mirror></mirrors>" >> $HOME/.m2/settings.xml
          echo "<servers><server><id>sonatype-nexus-snapshots</id><username>$CI_DEPLOY_USERNAME</username><password>$CI_DEPLOY_PASSWORD</password></server><server><id>sonatype-nexus-staging</id><username>$CI_DEPLOY_USERNAME</username><password>$CI_DEPLOY_PASSWORD</password></server></servers>" >> $HOME/.m2/settings.xml
          echo "</settings>" >> $HOME/.m2/settings.xml

          SECONDS=$(( RANDOM % 300 ))
          echo Sleeping $SECONDS seconds to help avoid race conditions with Maven
          sleep $SECONDS

          echo Executing Maven $MAVEN_PHASE $CI_DEPLOY_OPTIONS on $MAKEJ processors
          export EXT=${{ matrix.ext }}
          export EXT2=${EXT:1}
          export MAVEN_OPTS="-Xss2m -Xmx4g"
          export MAVEN_OPTIONS="clean $MAVEN_PHASE clean -B -U -e -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Djavacpp.platform=$CI_DEPLOY_PLATFORM -Djavacpp.platform.extension=$EXT $MAVEN_OPTIONS $CI_DEPLOY_OPTIONS"
          for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -pl .,$CI_DEPLOY_MODULE && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -f $CI_DEPLOY_MODULE/platform/$EXT2/pom.xml && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          if [[ -e $CI_DEPLOY_MODULE/platform/redist/pom.xml ]]; then
            for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -f $CI_DEPLOY_MODULE/platform/redist/pom.xml && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          fi
        fi
        df -h

    - name: Clean up
      shell: bash
      run: |
        cd $HOME
        rm -Rf $(find .m2/repository/ -name '*SNAPSHOT*')
