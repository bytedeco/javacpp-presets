name: Deploy on Ubuntu
runs:
  using: composite
  steps:
    - name: Install environment
      shell: bash
      run: |
        cd /root
        mkdir -p .ccache
        echo "max_size = 2.0G"                                                                        > .ccache/ccache.conf
        echo "hash_dir = false"                                                                      >> .ccache/ccache.conf
        echo "sloppiness = file_macro,include_file_ctime,include_file_mtime,pch_defines,time_macros" >> .ccache/ccache.conf

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-armhf" ]]; then
          export ARCH=armhf
          export PREFIX=arm-linux-gnueabihf
          export USERLAND_BUILDME="buildme"
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-arm64" ]]; then
          export ARCH=arm64
          export ARCH2=sbsa
          export PREFIX=aarch64-linux-gnu
          export CUDA=cuda-repo-rhel8-11-8-local-11.8.0_520.61.05-1.aarch64.rpm
          export CUDNN=8.6.0.163-1.cuda11.8.aarch64
          export NCCL=2.15.5-1+cuda11.8.aarch64
          export USERLAND_BUILDME="buildme --aarch64"
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-ppc64le" ]]; then
          export ARCH=ppc64el
          export ARCH2=ppc64le
          export PREFIX=powerpc64le-linux-gnu
          export CUDA=cuda-repo-rhel8-11-8-local-11.8.0_520.61.05-1.ppc64le.rpm
          export CUDNN=8.6.0.163-1.cuda11.8.ppc64le
          export NCCL=2.15.5-1+cuda11.8.ppc64le
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-x86" ]]; then
          export ARCH=i386
          export PREFIX=i686-linux-gnu
        elif [[ "$CI_DEPLOY_PLATFORM" == "linux-x86_64" ]]; then
          export ARCH=amd64
          export ARCH2=x86_64
          export PREFIX=x86_64-linux-gnu
          export CUDA=cuda-repo-rhel7-11-8-local-11.8.0_520.61.05-1.x86_64.rpm
          export CUDNN=8.6.0.163-1.cuda11.8.x86_64
          export NCCL=2.15.5-1+cuda11.8.x86_64
        fi
        echo "ARCH=$ARCH" >> $GITHUB_ENV
        echo "ARCH2=$ARCH2" >> $GITHUB_ENV
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV

        apt-get update
        apt-get -y install gnupg
        source /etc/os-release
        export CODENAME=$UBUNTU_CODENAME

        if [[ "$ARCH" == "i386" ]]; then
          dpkg --add-architecture $ARCH
          TOOLCHAIN="gcc-$PREFIX g++-$PREFIX gfortran-$PREFIX"
        elif [[ ! "$ARCH" == "amd64" ]]; then
          dpkg --add-architecture $ARCH
          echo deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $CODENAME main restricted universe multiverse >> /etc/apt/sources.list
          echo deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $CODENAME-updates main restricted universe multiverse >> /etc/apt/sources.list
          echo deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $CODENAME-backports main restricted universe multiverse >> /etc/apt/sources.list
          echo deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $CODENAME-security main restricted universe multiverse >> /etc/apt/sources.list
          TOOLCHAIN="gcc-$PREFIX g++-$PREFIX gfortran-$PREFIX linux-libc-dev-$ARCH-cross binutils-multiarch"
        fi
        echo deb [arch=amd64] http://ppa.launchpad.net/openjdk-r/ppa/ubuntu $CODENAME main >> /etc/apt/sources.list
        echo deb [arch=amd64] http://ppa.launchpad.net/deadsnakes/ppa/ubuntu $CODENAME main >> /etc/apt/sources.list
        sed -i 's/deb http/deb [arch=i386,amd64] http/g' /etc/apt/sources.list
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EB9B1D8886F44E2A
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA6932366A755776
        apt-get update
        apt-get -y install gcc-multilib g++-multilib python3 python2.7 python3-minimal python2.7-minimal rpm libasound2-dev:$ARCH freeglut3-dev:$ARCH libfontconfig-dev:$ARCH libgtk2.0-dev:$ARCH libusb-dev:$ARCH libusb-1.0-0-dev:$ARCH libffi-dev:$ARCH libbz2-dev:$ARCH zlib1g-dev:$ARCH libxcb1-dev:$ARCH
        apt-get -y install pkg-config ccache clang $TOOLCHAIN openjdk-8-jdk-headless ant python python3-pip swig git file wget unzip tar bzip2 gzip patch autoconf-archive autogen automake make libtool bison flex perl nasm curl libcurl4-openssl-dev libssl-dev libffi-dev libbz2-dev zlib1g-dev

        find /usr/lib/jvm/default-java/
        curl -LO https://github.com/Kitware/CMake/releases/download/v3.18.6/cmake-3.18.6-Linux-x86_64.tar.gz
        curl -LO https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
        curl -LO https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.18.3.tar.gz
        curl -LO https://services.gradle.org/distributions/gradle-7.1.1-bin.zip
        tar -xzf cmake-3.18.6-Linux-x86_64.tar.gz -C /opt/
        tar -xzf apache-maven-3.6.3-bin.tar.gz -C /opt/
        tar -xzf git-2.18.3.tar.gz
        unzip gradle-7.1.1-bin.zip -d /opt/
        pushd git-2.18.3; make -j2 prefix=/usr/local/; make -j2 prefix=/usr/local/ install; popd
        ln -sf /opt/cmake-3.18.6-Linux-x86_64/bin/* /usr/bin/
        ln -sf /opt/apache-maven-3.6.3/bin/mvn /usr/bin/mvn
        ln -sf /opt/gradle-7.1.1/bin/gradle /usr/bin/gradle

        python3 -m pip install gdown || python3 -m pip install gdown

        if [[ -n ${USERLAND_BUILDME:-} ]]; then
          curl -LOJ https://github.com/raspberrypi/userland/archive/master.tar.gz
          tar -xzf userland-master.tar.gz
          pushd userland-master
          bash $USERLAND_BUILDME
          popd
          export USERLAND_PATH=$(pwd)/userland-master/
          echo "USERLAND_PATH=$USERLAND_PATH" >> $GITHUB_ENV
        fi
        export MAVEN_OPTIONS="-Djavacpp.platform.compiler=$PREFIX-g++ -Djava.library.path=/usr/$PREFIX/lib/:/usr/lib/$PREFIX/:$USERLAND_PATH/build/lib/"

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-arm64" ]] || [[ "$CI_DEPLOY_PLATFORM" == "linux-ppc64le" ]] && [[ -n ${CI_DEPLOY_NEED_CUDA:-} ]]; then
          echo Installing CUDA, cuDNN, etc
          curl -LO https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/$CUDA
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH2/libcudnn8-$CUDNN.rpm
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH2/libcudnn8-devel-$CUDNN.rpm
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH2/libnccl-$NCCL.rpm
          curl -LO https://developer.download.nvidia.com/compute/cuda/repos/rhel8/$ARCH2/libnccl-devel-$NCCL.rpm

          rpm -i --force --ignorearch --nodeps $CUDA libcudnn*.rpm libnccl*.rpm
          pushd /var/cuda-repo-rhel8-11-8-local/; rpm -i --force --ignorearch --nodeps cuda*.rpm libc*.rpm libn*.rpm; rm *.rpm; popd
          ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/libcuda.so
          ln -sf /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/libnvidia-ml.so
          mv /usr/include/cudnn* /usr/include/nccl* /usr/local/cuda/include/
          mv /usr/lib64/libcudnn* /usr/lib64/libnccl* /usr/local/cuda/lib64/

          # Work around issues with CUDA 10.2/11.x
          mv /usr/include/cublas* /usr/include/nvblas* /usr/local/cuda/include/ || true
          mv /usr/lib64/libcublas* /usr/lib64/libnvblas* /usr/local/cuda/lib64/ || true
          for f in /usr/local/cuda/include/*_v8.h; do ln -sf $f ${f:0:${#f}-5}.h; done
          for f in /usr/local/cuda/lib64/libcudnn*so.8.*; do ln -sf $f ${f:0:${#f}-4}; ln -sf $f ${f:0:${#f}-6}; done
          for f in /usr/local/cuda/lib64/*.so.10; do ln -s $f $f.2; done
          for f in /usr/local/cuda/lib64/*.so.10; do ln -s $f ${f:0:${#f}-1}1; done
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.1
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.2
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.3
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.4
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.5
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.6
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.7
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.8
          cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so
          cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so.1
          cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so
          cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so.1
          sed -i s/cublas_v2.h/cublas_api.h/g /usr/local/cuda/include/cublasXt.h
          sed -i /block_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          sed -i /device_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          sed -i /device_segmented_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh
          sed -i /warp_merge_sort.cuh/d /usr/local/cuda/include/cub/cub.cuh

          # Remove downloaded archives and unused libraries to avoid running out of disk space
          rm -f *.rpm *.tgz *.txz *.tar.*
          rm -f $(find /usr/local/cuda/ -name '*.a' -and -not -name libcudart_static.a -and -not -name libcudadevrt.a)
        fi

        if [[ "$CI_DEPLOY_MODULE" == "nvcodec" ]]; then
          echo Installing NVIDIA Video Codec SDK
          python3 -m gdown.cli https://drive.google.com/uc?id=1dh3P5JLUUe9EXE0GSJj6VDWYlr7W89dO
          unzip Video_Codec_SDK_11.1.5.zip -d /usr/local
          ln -sf /usr/local/Video_Codec_SDK_* /usr/local/videocodecsdk
        fi

        if [[ "$CI_DEPLOY_MODULE" == "tensorrt" ]]; then
          echo Installing TensorRT
          python3 -m gdown.cli https://drive.google.com/uc?id=1uU-O7nF6Bc1lXKVTZfZz3xBTjr6RISHT
          tar -hxvf TensorRT-8.4.3.1.Ubuntu-20.04.aarch64-gnu.cuda-11.6.cudnn8.4.tar.gz -C /usr/local/
          ln -sf /usr/local/TensorRT* /usr/local/tensorrt
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-armhf" ]] && [[ "$CI_DEPLOY_MODULE" == "flycapture" ]]; then
          echo Installing FlyCapture amdhf
          python3 -m gdown.cli https://drive.google.com/uc?id=16NuUBs2MXQpVYqzDCEr9KdMng-6rHuDI
          mkdir -p $GITHUB_WORKSPACE/downloads
          ln -s $(pwd)/flycapture.2.13.3.31_armhf_xenial.tar.gz $GITHUB_WORKSPACE/downloads/flycapture.2.13.3.31_armhf.tar.gz
        fi

        if [[ "$CI_DEPLOY_PLATFORM" == "linux-arm64" ]] && [[ "$CI_DEPLOY_MODULE" == "flycapture" ]]; then
          echo Installing FlyCapture amd64
          python3 -m gdown.cli https://drive.google.com/uc?id=1LhnuRMT3urYsApCcuBEcaotGRK8h4kJv
          mkdir -p $GITHUB_WORKSPACE/downloads
          ln -s $(pwd)/flycapture.2.13.3.31_arm64_xenial.tar.gz $GITHUB_WORKSPACE/downloads/flycapture.2.13.3.31_arm64.tar.gz
        fi

        GRADLE_TASK=publishToMavenLocal
        MAVEN_PHASE=install
        if [[ -n ${CI_DEPLOY_USERNAME:-} ]] && [[ ! "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          GRADLE_TASK=publish
          MAVEN_PHASE=deploy
          if [[ "${{ github.event.head_commit.message }}" == Release* ]] || [[ "${GITHUB_REF#refs/heads/}" == "release" ]]; then
            python3 -m gdown.cli -q -O settings.tar.gz https://drive.google.com/uc?id=$CI_DEPLOY_SETTINGS
            tar -xzf settings.tar.gz
            MAVEN_OPTIONS="$MAVEN_OPTIONS -Dgpg.homedir=$(pwd)/.gnupg/ -DperformRelease -DstagingRepositoryId=$STAGING_REPOSITORY"
          fi
        fi
        echo "GPG_PASSPHRASE=***" >> $GITHUB_ENV
        echo "GRADLE_TASK=$GRADLE_TASK" >> $GITHUB_ENV
        echo "MAVEN_PHASE=$MAVEN_PHASE" >> $GITHUB_ENV
        echo "MAVEN_OPTIONS=$MAVEN_OPTIONS" >> $GITHUB_ENV

    - name: Build project
      shell: bash
      run: |
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/

        git --version
        $PREFIX-gcc --version
        cmake --version
        gradle --version
        mvn -version
        gpg --version
        python3 --version
        ccache -s --version
        df -h

        export MAKEJ=$(getconf _NPROCESSORS_ONLN)
        echo Fetching $GITHUB_REPOSITORY@$GITHUB_SHA
        git init
        git fetch --depth 1 https://github.com/$GITHUB_REPOSITORY $GITHUB_SHA
        git checkout $GITHUB_SHA
        git submodule update --init --recursive
        git submodule foreach --recursive 'git reset --hard'

        echo "Fixing HOME to /root (was '$HOME')"
        export HOME=/root

        if [[ -n ${CI_DEPLOY_NEED_GRADLE:-} ]]; then
          echo Executing Gradle $GRADLE_TASK ${{ matrix.options }} $CI_DEPLOY_OPTIONS on $MAKEJ processors
          export GRADLE_OPTIONS="-Dorg.gradle.jvmargs=-Xmx2048m -PjavacppPlatform=$CI_DEPLOY_PLATFORM -PjavacppPlatformExtension=${{ matrix.ext }} ${{ matrix.options }} $CI_DEPLOY_OPTIONS --info"
          gradle clean build $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle
          echo Publishing only now to help avoid race conditions with Gradle
          gradle $GRADLE_TASK $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle --refresh-dependencies
        else
          mkdir -p $HOME/.m2
          echo "<settings>" > $HOME/.m2/settings.xml
          echo "<mirrors><mirror><id>google-maven-central</id><name>GCS Maven Central mirror</name><url>https://maven-central.storage-download.googleapis.com/maven2/</url><mirrorOf>central</mirrorOf></mirror></mirrors>" >> $HOME/.m2/settings.xml
          echo "<servers><server><id>sonatype-nexus-snapshots</id><username>$CI_DEPLOY_USERNAME</username><password>$CI_DEPLOY_PASSWORD</password></server><server><id>sonatype-nexus-staging</id><username>$CI_DEPLOY_USERNAME</username><password>$CI_DEPLOY_PASSWORD</password></server></servers>" >> $HOME/.m2/settings.xml
          echo "</settings>" >> $HOME/.m2/settings.xml

          SECONDS=$(( RANDOM % 300 ))
          echo Sleeping $SECONDS seconds to help avoid race conditions with Maven
          sleep $SECONDS

          echo Executing Maven $MAVEN_PHASE $CI_DEPLOY_OPTIONS on $MAKEJ processors
          export EXT=${{ matrix.ext }}
          export EXT2=${EXT:1}
          export MAVEN_OPTS="-Xss2m -Xmx4g"
          export MAVEN_OPTIONS="clean $MAVEN_PHASE -B -U -e -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3 -Djavacpp.platform=$CI_DEPLOY_PLATFORM -Djavacpp.platform.extension=$EXT $MAVEN_OPTIONS $CI_DEPLOY_OPTIONS"
          for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -pl .,$CI_DEPLOY_MODULE && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -f $CI_DEPLOY_MODULE/platform/$EXT2/pom.xml && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          if [[ -e $CI_DEPLOY_MODULE/platform/redist/pom.xml ]]; then
            for i in {1..5}; do STATUS=0; mvn $MAVEN_OPTIONS -f $CI_DEPLOY_MODULE/platform/redist/pom.xml && break || STATUS=$? && sleep 60; done; (exit $STATUS)
          fi
        fi
        df -h

    - name: Clean up
      shell: bash
      run: |
        cd /root
        rm -Rf $(find .m2/repository/ -name '*SNAPSHOT*')
