cache:
  directories:
      - $HOME/downloads
      - $HOME/.m2
addons:
  artifacts:
    s3_region: "us-east-1"
    paths:
     - $(ls ./buildlogs/*| tr "\n" ":") 
    debug: true

language: java
sudo: required
dist: trusty
services:
      - docker
matrix:
   include:
      - jdk: oraclejdk8
        os: android
        env: PROJ=opencv OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=ffmpeg OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=flycapture OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=libdc1394 OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=libfreenect OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=libfreenect2 OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=librealsense OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=videoinput OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=artoolkitplus OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=chilitags OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=flandmark OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=hdf5 OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=mkl OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=openblas OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=fftw OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=gsl OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=llvm OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=leptonica OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=tesseract OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=caffe OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=cuda OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=mxnet OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=tensorflow OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=liquidfun OS=android-x86
      - jdk: oraclejdk8
        os: android
        env: PROJ=opencv OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=ffmpeg OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=flycapture OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=libdc1394 OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=libfreenect OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=libfreenect2 OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=librealsense OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=videoinput OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=artoolkitplus OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=chilitags OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=flandmark OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=hdf5 OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=mkl OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=openblas OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=fftw OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=gsl OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=llvm OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=leptonica OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=tesseract OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=caffe OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=cuda OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=mxnet OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=tensorflow OS=android-arm
      - jdk: oraclejdk8
        os: android
        env: PROJ=liquidfun OS=android-arm
      - jdk: oraclejdk8
        os: linux
        env: PROJ=opencv OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=ffmpeg OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=flycapture OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=libdc1394 OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=libfreenect OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=libfreenect2 OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=librealsense OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=videoinput OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=artoolkitplus OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=chilitags OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=flandmark OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=hdf5 OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=mkl OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=openblas OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=fftw OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=gsl OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=llvm OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=leptonica OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=tesseract OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=caffe OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=cuda OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=mxnet OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=tensorflow OS=linux-x86_64
      - jdk: oraclejdk8
        os: linux
        env: PROJ=liquidfun OS=linux-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=opencv OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=ffmpeg OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=flycapture OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=libdc1394 OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=libfreenect OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=libfreenect2 OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=librealsense OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=videoinput OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=artoolkitplus OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=chilitags OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=flandmark OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=hdf5 OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=mkl OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=openblas OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=fftw OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=gsl OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=llvm OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=leptonica OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=tesseract OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=caffe OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=cuda OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=mxnet OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=tensorflow OS=macosx-x86_64
      - jdk: oraclejdk8
        os: osx
        env: PROJ=liquidfun OS=macosx-x86_64

before_install:
   - mkdir ./buildlogs
   - ls -ltr $HOME/downloads
   - pip install requests
   - git clone https://github.com/bytedeco/javacpp.git
   - cd javacpp
   - mvn install -l javacppBuild.log -Dmaven.test.skip=true -Dmaven.javadoc.skip=true
   - cd ..
   - export PYTHON_BIN_PATH=$(which python) # For tensorflow
   - if [ "$TRAVIS_OS_NAME" == "osx" ]; then export JAVA_HOME=$(/usr/libexec/java_home); fi
   - |
      if [ "$TRAVIS_OS_NAME" == "linux" ]; then
        if [ "$OS" == "linux-x86_64" ]; then
          echo "starting docker"
          docker run -d -ti -e CI_DEPLOY_USERNAME -e CI_DEPLOY_PASSWORD -e "container=docker" -v $HOME/.m2:/root/.m2 -v $HOME/downloads:/root/downloads -v $HOME/.m2/:/root/.m2/ -v $TRAVIS_BUILD_DIR/../:/root/build -v /sys/fs/cgroup:/sys/fs/cgroup nvidia/cuda:8.0-cudnn6-devel-centos7 /usr/sbin/init > /dev/null
          DOCKER_CONTAINER_ID=$(docker ps | grep centos | awk '{print $1}')
          echo "container id is $DOCKER_CONTAINER_ID please wait while updates applied"
          docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "yum -y install epel-release" > /dev/null
          docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "yum -y install clang gcc-c++ gcc-gfortran java-devel maven python numpy swig git file which wget unzip tar bzip2 gzip xz patch make cmake3 libtool perl nasm yasm alsa-lib-devel freeglut-devel glfw-devel gtk2-devel libusb-devel libusb1-devel zlib-devel openblas-devel" > /dev/null
          if [ "$PROJ" == "flycapture" ]; then
            if [[ $(find $HOME/downloads/flycap.tar.gz -type f -size +1000000c 2>/dev/null) ]]; then
              echo "Found flycap in cache and size seems ok" 
            else
              echo "Downloading flycap as not found in cache or too small" 
              python $TRAVIS_BUILD_DIR/ci/gDownload.py 0B2xpvMUzviShS1I1MzN0SmQ1MHc $HOME/downloads/flycap.tar.gz 
            fi
            tar xzvf $HOME/downloads/flycap.tar.gz -C $TRAVIS_BUILD_DIR/../
            docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "cp -R /root/build/include/* /usr/include; cp -R /root/build/lib/* /usr/lib" 
          fi 
          if [ "$PROJ" == "tensorflow" ]; then
           echo "adding bazel for tensorflow"
           curl -L https://github.com/bazelbuild/bazel/releases/download/0.4.4/bazel-0.4.4-installer-linux-x86_64.sh -o $HOME/downloads/bazel.sh; export CURL_STATUS=$?
           if [ "$CURL_STATUS" != "0" ]; then
             echo "Download failed here, so can't proceed with the build.. Failing.."
             return 1
           fi
           docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "bash /root/downloads/bazel.sh"
          fi 
        fi
      fi
      if [ "$TRAVIS_OS_NAME" == "osx" ]; then
        echo "performing brew update and install of dependencies, please wait.."
        brew update > /dev/null
        brew install gcc5 swig bazel libtool libusb nasm yasm xz 
        ln -s /usr/local/opt/gcc\@5 /usr/local/opt/gcc5
      fi
      if [ "$TRAVIS_OS_NAME" == "android" ]; then
        echo "Install android requirements.."
        sudo apt-get install yasm nasm
        pip install numpy
        curl -L https://dl.google.com/android/repository/android-ndk-r14b-linux-x86_64.zip -o $HOME/ndk.zip; export CURL_STATUS=$?
        if [ "$CURL_STATUS" != "0" ]; then
         echo "Download failed here, so can't proceed with the build.. Failing.."
         return 1
        fi

        unzip -qq $HOME/ndk.zip -d $HOME/
        ln -s $HOME/android-ndk-r14b $HOME/android-ndk
        echo "Android NDK setup done"
        if [ "$OS" == "android-arm" ]; then
           echo "Setting build for android-arm"
           export ANDROID_NDK=$HOME/android-ndk
           export PATH=$PATH:$HOME/android-ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin
           export ANDROID_FLAGS="-Djavacpp.platform.root=$HOME/android-ndk/ -Djavacpp.platform.compiler=$HOME/android-ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++"
        fi
        if [ "$OS" == "android-x86" ]; then
           echo "Setting build for android-x86"
           export ANDROID_NDK=$HOME/android-ndk
           export ANDROID_FLAGS="-Djavacpp.platform.root=$HOME/android-ndk/ -Djavacpp.platform.compiler=$HOME/android-ndk/toolchains/x86-4.9/prebuilt/linux-x86_64/bin/i686-linux-android-g++"
        fi
        if [ "$PROJ" == "tensorflow" ]; then
           echo "adding bazel for tensorflow"
           curl -L  https://github.com/bazelbuild/bazel/releases/download/0.4.4/bazel-0.4.4-installer-linux-x86_64.sh -o bazel.sh; export CURL_STATUS=$?
           if [ "$CURL_STATUS" != "0" ]; then
            echo "Download failed here, so can't proceed with the build.. Failing.."
            return 1
           fi
           sudo bash bazel.sh
        fi

      fi

install:
   - echo "install"

script:
   - |
    echo "download dependencies" 
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      if [[ "$PROJ" =~ mxnet ]]; then 
        export PKG_CONFIG_PATH=$TRAVIS_BUILD_DIR/opencv/cppbuild/macosx-x86_64/lib/pkgconfig
      fi 
      if [[ "$PROJ" =~ cuda ]] || [[ "$PROJ" =~ tensorflow ]] || [[ "$PROJ" =~ caffe ]]; then 
        echo "installing cuda.."
        while true; do echo .; sleep 60; done &
        export CHILDPID=$!
        echo "Child PID $CHILDPID"
        python $TRAVIS_BUILD_DIR/ci/gDownload.py 0B2xpvMUzviShUzFIUHhkQnBQWWM cuda.dmg
        echo "Mount dmg"
        hdiutil mount cuda.dmg
        sleep 5
        ls -ltr /Volumes/CUDAMacOSXInstaller/CUDAMacOSXInstaller.app/Contents/MacOS 
        sudo /Volumes/CUDAMacOSXInstaller/CUDAMacOSXInstaller.app/Contents/MacOS/CUDAMacOSXInstaller --accept-eula --no-window; export BREW_STATUS=$? 
        echo "Brew status $BREW_STATUS"
        if [ $BREW_STATUS -ne 0 ]; then
          echo "Brew Failed"
          return $BREW_STATUS
        fi
        kill $CHILDPID

        if [[ $(find $HOME/downloads/cudnn-8.0-osx-x64-v6.0.tgz -type f -size +1000000c 2>/dev/null) ]]; then
          echo "Found cudnn in cache and size seems ok" 
        else
          echo "Downloading cudnn as not found in cache" 
          python $TRAVIS_BUILD_DIR/ci/gDownload.py 0B2xpvMUzviShc2JlWXNjNTlIVnc $HOME/downloads/cudnn-8.0-osx-x64-v6.0.tgz
        fi
        tar xvf $HOME/downloads/cudnn-8.0-osx-x64-v6.0.tgz
        sudo cp ./cuda/include/cudnn.h /usr/local/cuda/include/cudnn.h
        sudo cp ./cuda/lib/libcudnn.6.dylib /usr/local/cuda/lib/libcudnn.6.dylib
        sudo cp ./cuda/lib/libcudnn.dylib /usr/local/cuda/lib/libcudnn.dylib
        sudo cp ./cuda/lib/libcudnn_static.a /usr/local/cuda/lib/libcudnn_static.a
      fi  
    fi  
    echo "starting script"
    echo "running for $PROJ"
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      DOCKER_CONTAINER_ID=$(docker ps | grep centos | awk '{print $1}')
      echo "container id is $DOCKER_CONTAINER_ID"
      if [[ "$PROJ" =~ tensorflow ]] || [[ "$PROJ" =~ openblas ]]; then
        echo "redirecting log output, tailing log every 5 mins to prevent timeout.."
        while true; do echo .; docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "tail -10 /root/build/javacpp-presets/buildlogs/$PROJ.log"; sleep 300; done &
        if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then 
          echo "Not a pull request so attempting to deploy"
          docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "cd /root/build/javacpp-presets;mvn deploy -Djavacpp.copyResources --settings ./ci/settings.xml -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Djavacpp.platform=$OS -l /root/build/javacpp-presets/buildlogs/$PROJ.log -pl $PROJ"; export BUILD_STATUS=$?
        else
          echo "Pull request so install only"
          docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "cd /root/build/javacpp-presets;mvn install -Djavacpp.copyResources -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Djavacpp.platform=$OS -l /root/build/javacpp-presets/buildlogs/$PROJ.log -pl $PROJ"; export BUILD_STATUS=$?
        fi
      else
        if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then 
          echo "Not a pull request so attempting to deploy"
          docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "cd /root/build/javacpp-presets;mvn deploy -Djavacpp.copyResources --settings ./ci/settings.xml -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Djavacpp.platform=$OS -pl $PROJ"; export BUILD_STATUS=$?
        else
          echo "Pull request so install only"
          docker exec -ti $DOCKER_CONTAINER_ID /bin/bash -xec "cd /root/build/javacpp-presets;mvn install -Djavacpp.copyResources -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Djavacpp.platform=$OS -pl $PROJ"; export BUILD_STATUS=$?
        fi
      fi
      echo "Build status $BUILD_STATUS"
      if [ $BUILD_STATUS -ne 0 ]; then  
        echo "Build Failed"
        return $BUILD_STATUS
      fi
    else	
     if [[ "$PROJ" =~ tensorflow ]] || [[ "$PROJ" =~ openblas ]]; then
       echo "redirecting log output, tailing log every 5 mins to prevent timeout.."
       while true; do echo .; tail -10 $TRAVIS_BUILD_DIR/buildlogs/$PROJ.log; sleep 300; done &
       if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then 
         echo "Not a pull request so attempting to deploy"
         mvn deploy -Djavacpp.copyResources --settings ./ci/settings.xml -Dmaven.javadoc.skip=true -Djavacpp.platform=$OS $ANDROID_FLAGS -l $TRAVIS_BUILD_DIR/buildlogs/$PROJ.log -pl $PROJ; export BUILD_STATUS=$?
       else
         echo "Pull request so install only"
         mvn install -Dmaven.javadoc.skip=true -Djavacpp.copyResources -Djavacpp.platform=$OS $ANDROID_FLAGS -l $TRAVIS_BUILD_DIR/buildlogs/$PROJ.log -pl $PROJ; export BUILD_STATUS=$?
       fi
     else
       echo "Building $PROJ"
       echo $ANDROID_FLAGS
       if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then
         echo "Not a pull request so attempting to deploy"
         mvn deploy --settings ./ci/settings.xml -Djavacpp.copyResources -Dmaven.javadoc.skip=true -Djavacpp.platform=$OS $ANDROID_FLAGS -pl $PROJ; export BUILD_STATUS=$?
       else
         echo "Pull request so install only"
         mvn install -Dmaven.javadoc.skip=true -Djavacpp.copyResources -Djavacpp.platform=$OS $ANDROID_FLAGS -pl $PROJ; export BUILD_STATUS=$?
       fi
     fi
      echo "Build status $BUILD_STATUS"
      if [ $BUILD_STATUS -ne 0 ]; then
        echo "Build Failed"
        return $BUILD_STATUS
      fi
    fi
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      DOCKER_CONTAINER_ID=$(docker ps | grep centos | awk '{print $1}')
      docker stop $DOCKER_CONTAINER_ID
      docker rm -v $DOCKER_CONTAINER_ID
    fi

