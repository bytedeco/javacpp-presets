// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.numpy;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.cpython.*;
import static org.bytedeco.cpython.global.python.*;

import static org.bytedeco.numpy.global.numpy.*;



/*
 * Simplified get_loop function specific to dtype traversal
 *
 * It should set the flags needed for the traversal loop and set out_loop to the
 * loop function, which must be a valid PyArrayMethod_TraverseLoop
 * pointer. Currently this is used for zero-filling and clearing arrays storing
 * embedded references.
 *
 */
@Properties(inherit = org.bytedeco.numpy.presets.numpy.class)
public class PyArrayMethod_GetTraverseLoop extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    PyArrayMethod_GetTraverseLoop(Pointer p) { super(p); }
    protected PyArrayMethod_GetTraverseLoop() { allocate(); }
    private native void allocate();
    public native int call(
        Pointer traverse_context, @Const PyArray_Descr descr,
        int aligned, @Cast("npy_intp") long fixed_stride,
        @Cast("PyArrayMethod_TraverseLoop**") PointerPointer out_loop, @Cast("NpyAuxData**") PointerPointer out_auxdata,
        @Cast("NPY_ARRAYMETHOD_FLAGS*") IntPointer flags);
}
