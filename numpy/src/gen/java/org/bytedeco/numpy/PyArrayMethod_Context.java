// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.numpy;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.cpython.*;
import static org.bytedeco.cpython.global.python.*;

import static org.bytedeco.numpy.global.numpy.*;



@Properties(inherit = org.bytedeco.numpy.presets.numpy.class)
public class PyArrayMethod_Context extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyArrayMethod_Context() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyArrayMethod_Context(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyArrayMethod_Context(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyArrayMethod_Context position(long position) {
        return (PyArrayMethod_Context)super.position(position);
    }
    @Override public PyArrayMethod_Context getPointer(long i) {
        return new PyArrayMethod_Context((Pointer)this).offsetAddress(i);
    }

    /* The caller, which is typically the original ufunc.  May be NULL */
    public native PyObject caller(); public native PyArrayMethod_Context caller(PyObject setter);
    /* The method "self".  Currently an opaque object. */
    public native PyArrayMethodObject_tag method(); public native PyArrayMethod_Context method(PyArrayMethodObject_tag setter);

    /* Operand descriptors, filled in by resolve_descriptors */
    @MemberGetter public native PyArray_Descr descriptors(int i);
    @MemberGetter public native @Cast("PyArray_Descr*const*") PointerPointer descriptors();
    /* Structure may grow (this is harmless for DType authors) */
}
