// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.numpy;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.cpython.*;
import static org.bytedeco.cpython.global.python.*;

import static org.bytedeco.numpy.global.numpy.*;



/*
 * The resolve descriptors function, must be able to handle NULL values for
 * all output (but not input) `given_descrs` and fill `loop_descrs`.
 * Return -1 on error or 0 if the operation is not possible without an error
 * set.  (This may still be in flux.)
 * Otherwise must return the "casting safety", for normal functions, this is
 * almost always "safe" (or even "equivalent"?).
 *
 * `resolve_descriptors` is optional if all output DTypes are non-parametric.
 */
@Properties(inherit = org.bytedeco.numpy.presets.numpy.class)
public class PyArrayMethod_ResolveDescriptors extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    PyArrayMethod_ResolveDescriptors(Pointer p) { super(p); }
    protected PyArrayMethod_ResolveDescriptors() { allocate(); }
    private native void allocate();
    public native @Cast("NPY_CASTING") int call(
        PyArrayMethodObject_tag method,
        @Cast("PyArray_DTypeMeta*const*") PointerPointer dtypes,
        @Cast("PyArray_Descr*const*") PointerPointer given_descrs,
        @Cast("PyArray_Descr**") PointerPointer loop_descrs,
        @Cast("npy_intp*") SizeTPointer view_offset);
}
