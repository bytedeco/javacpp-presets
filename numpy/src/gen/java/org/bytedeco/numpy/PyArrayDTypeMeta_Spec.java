// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.numpy;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.cpython.*;
import static org.bytedeco.cpython.global.python.*;

import static org.bytedeco.numpy.global.numpy.*;



// TODO: These slots probably still need some thought, and/or a way to "grow"?
@Properties(inherit = org.bytedeco.numpy.presets.numpy.class)
public class PyArrayDTypeMeta_Spec extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyArrayDTypeMeta_Spec() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyArrayDTypeMeta_Spec(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyArrayDTypeMeta_Spec(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyArrayDTypeMeta_Spec position(long position) {
        return (PyArrayDTypeMeta_Spec)super.position(position);
    }
    @Override public PyArrayDTypeMeta_Spec getPointer(long i) {
        return new PyArrayDTypeMeta_Spec((Pointer)this).offsetAddress(i);
    }

    public native PyTypeObject typeobj(); public native PyArrayDTypeMeta_Spec typeobj(PyTypeObject setter);    /* type of python scalar or NULL */
    public native int flags(); public native PyArrayDTypeMeta_Spec flags(int setter);                /* flags, including parametric and abstract */
    /* NULL terminated cast definitions. Use NULL for the newly created DType */
    public native PyArrayMethod_Spec casts(int i); public native PyArrayDTypeMeta_Spec casts(int i, PyArrayMethod_Spec setter);
    public native @Cast("PyArrayMethod_Spec**") PointerPointer casts(); public native PyArrayDTypeMeta_Spec casts(PointerPointer setter);
    public native PyType_Slot slots(); public native PyArrayDTypeMeta_Spec slots(PyType_Slot setter);
    /* Baseclass or NULL (will always subclass `np.dtype`) */
    public native PyTypeObject baseclass(); public native PyArrayDTypeMeta_Spec baseclass(PyTypeObject setter);
}
