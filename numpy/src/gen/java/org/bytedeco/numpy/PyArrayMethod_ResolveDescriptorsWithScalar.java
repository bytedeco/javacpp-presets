// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.numpy;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.cpython.*;
import static org.bytedeco.cpython.global.python.*;

import static org.bytedeco.numpy.global.numpy.*;



/*
 * Rarely needed, slightly more powerful version of `resolve_descriptors`.
 * See also `PyArrayMethod_ResolveDescriptors` for details on shared arguments.
 *
 * NOTE: This function is private now as it is unclear how and what to pass
 *       exactly as additional information to allow dealing with the scalars.
 *       See also gh-24915.
 */
@Properties(inherit = org.bytedeco.numpy.presets.numpy.class)
public class PyArrayMethod_ResolveDescriptorsWithScalar extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    PyArrayMethod_ResolveDescriptorsWithScalar(Pointer p) { super(p); }
    protected PyArrayMethod_ResolveDescriptorsWithScalar() { allocate(); }
    private native void allocate();
    public native @Cast("NPY_CASTING") int call(
        PyArrayMethodObject_tag method,
        @Cast("PyArray_DTypeMeta*const*") PointerPointer dtypes,
        @Cast("PyArray_Descr*const*") PointerPointer given_descrs,
        @Cast("PyObject*const*") PointerPointer input_scalars,
        @Cast("PyArray_Descr**") PointerPointer loop_descrs,
        @Cast("npy_intp*") SizeTPointer view_offset);
}
