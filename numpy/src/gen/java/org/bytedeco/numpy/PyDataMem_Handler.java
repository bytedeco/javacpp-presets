// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.numpy;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.cpython.*;
import static org.bytedeco.cpython.global.python.*;

import static org.bytedeco.numpy.global.numpy.*;


@Properties(inherit = org.bytedeco.numpy.presets.numpy.class)
public class PyDataMem_Handler extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyDataMem_Handler() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyDataMem_Handler(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyDataMem_Handler(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyDataMem_Handler position(long position) {
        return (PyDataMem_Handler)super.position(position);
    }
    @Override public PyDataMem_Handler getPointer(long i) {
        return new PyDataMem_Handler((Pointer)this).offsetAddress(i);
    }

    public native @Cast("char") byte name(int i); public native PyDataMem_Handler name(int i, byte setter);
    @MemberGetter public native @Cast("char*") BytePointer name();  /* multiple of 64 to keep the struct aligned */
    public native @Cast("uint8_t") byte version(); public native PyDataMem_Handler version(byte setter); /* currently 1 */
    public native @ByRef PyDataMemAllocator allocator(); public native PyDataMem_Handler allocator(PyDataMemAllocator setter);
}
