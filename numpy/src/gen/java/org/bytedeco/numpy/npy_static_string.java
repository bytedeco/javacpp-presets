// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.numpy;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.cpython.*;
import static org.bytedeco.cpython.global.python.*;

import static org.bytedeco.numpy.global.numpy.*;


/*
 * An unpacked read-only view onto the data in a packed string
 */
@Properties(inherit = org.bytedeco.numpy.presets.numpy.class)
public class npy_static_string extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public npy_static_string() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public npy_static_string(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public npy_static_string(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public npy_static_string position(long position) {
        return (npy_static_string)super.position(position);
    }
    @Override public npy_static_string getPointer(long i) {
        return new npy_static_string((Pointer)this).offsetAddress(i);
    }

    public native @Cast("size_t") long size(); public native npy_static_string size(long setter);
    public native @Cast("const char*") BytePointer buf(); public native npy_static_string buf(BytePointer setter);
}
