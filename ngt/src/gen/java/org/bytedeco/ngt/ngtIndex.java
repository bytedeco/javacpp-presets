// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngt;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.ngt.global.ngt.*;


  @Name("NGT::Index") @Properties(inherit = org.bytedeco.ngt.presets.ngt.class)
public class ngtIndex extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public ngtIndex() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public ngtIndex(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public ngtIndex(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public ngtIndex position(long position) {
          return (ngtIndex)super.position(position);
      }
      @Override public ngtIndex getPointer(long i) {
          return new ngtIndex((Pointer)this).offsetAddress(i);
      }
  

    @NoOffset public static class InsertionResult extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public InsertionResult(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public InsertionResult(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public InsertionResult position(long position) {
            return (InsertionResult)super.position(position);
        }
        @Override public InsertionResult getPointer(long i) {
            return new InsertionResult((Pointer)this).offsetAddress(i);
        }
    
      public InsertionResult() { super((Pointer)null); allocate(); }
      private native void allocate();
      public InsertionResult(@Cast("size_t") long i, @Cast("bool") boolean tf, @Cast("NGT::Distance") float d) { super((Pointer)null); allocate(i, tf, d); }
      private native void allocate(@Cast("size_t") long i, @Cast("bool") boolean tf, @Cast("NGT::Distance") float d);
      public native @Cast("size_t") long id(); public native InsertionResult id(long setter);
      public native @Cast("bool") boolean identical(); public native InsertionResult identical(boolean setter);
      public native @Cast("NGT::Distance") float distance(); public native InsertionResult distance(float setter); // the distance between the centroid and the inserted object.
    }

    @NoOffset public static class AccuracyTable extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public AccuracyTable(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public AccuracyTable(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public AccuracyTable position(long position) {
            return (AccuracyTable)super.position(position);
        }
        @Override public AccuracyTable getPointer(long i) {
            return new AccuracyTable((Pointer)this).offsetAddress(i);
        }
    
      public AccuracyTable() { super((Pointer)null); allocate(); }
      private native void allocate();
      public AccuracyTable(@StdVector pairFloatDouble t) { super((Pointer)null); allocate(t); }
      private native void allocate(@StdVector pairFloatDouble t);
      public AccuracyTable(@StdString BytePointer str) { super((Pointer)null); allocate(str); }
      private native void allocate(@StdString BytePointer str);
      public AccuracyTable(@StdString String str) { super((Pointer)null); allocate(str); }
      private native void allocate(@StdString String str);
      public native void set(@StdVector pairFloatDouble t);
      public native void set(@StdString BytePointer str);
      public native void set(@StdString String str);

      public native float getEpsilon(double accuracy);

      public native @StdString BytePointer getString();
      public native @StdVector pairFloatDouble table(); public native AccuracyTable table(pairFloatDouble setter);
    }

    
// #ifdef NGT_SHARED_MEMORY_ALLOCATOR
    
// #else
    
// #endif
    
    

    public native void open(@StdString BytePointer database, @ByRef Property prop);
    public native void open(@StdString String database, @ByRef Property prop);
    public native void open(@StdString BytePointer database, @Cast("bool") boolean rdOnly/*=false*/);
    public native void open(@StdString BytePointer database);
    public native void open(@StdString String database, @Cast("bool") boolean rdOnly/*=false*/);
    public native void open(@StdString String database);

    public native @Name("close") void _close();
    
// #ifndef NGT_SHARED_MEMORY_ALLOCATOR
    
// #endif
    public static native void mkdir(@StdString BytePointer dir);
    public static native void mkdir(@StdString String dir);
    public static native void create(@StdString BytePointer database, @ByRef Property prop, @Cast("bool") boolean redirect/*=false*/);
    public static native void create(@StdString BytePointer database, @ByRef Property prop);
    public static native void create(@StdString String database, @ByRef Property prop, @Cast("bool") boolean redirect/*=false*/);
    public static native void create(@StdString String database, @ByRef Property prop);
    public static native void createGraphAndTree(@StdString BytePointer database, @ByRef Property prop, @StdString BytePointer dataFile, @Cast("size_t") long dataSize/*=0*/, @Cast("bool") boolean redirect/*=false*/);
    public static native void createGraphAndTree(@StdString BytePointer database, @ByRef Property prop, @StdString BytePointer dataFile);
    public static native void createGraphAndTree(@StdString String database, @ByRef Property prop, @StdString String dataFile, @Cast("size_t") long dataSize/*=0*/, @Cast("bool") boolean redirect/*=false*/);
    public static native void createGraphAndTree(@StdString String database, @ByRef Property prop, @StdString String dataFile);
    public static native void createGraphAndTree(@StdString BytePointer database, @ByRef Property prop, @Cast("bool") boolean redirect/*=false*/);
    public static native void createGraphAndTree(@StdString BytePointer database, @ByRef Property prop);
    public static native void createGraphAndTree(@StdString String database, @ByRef Property prop, @Cast("bool") boolean redirect/*=false*/);
    public static native void createGraphAndTree(@StdString String database, @ByRef Property prop);
    public static native void createGraph(@StdString BytePointer database, @ByRef Property prop, @StdString BytePointer dataFile, @Cast("size_t") long dataSize/*=0*/, @Cast("bool") boolean redirect/*=false*/);
    public static native void createGraph(@StdString BytePointer database, @ByRef Property prop, @StdString BytePointer dataFile);
    public static native void createGraph(@StdString String database, @ByRef Property prop, @StdString String dataFile, @Cast("size_t") long dataSize/*=0*/, @Cast("bool") boolean redirect/*=false*/);
    public static native void createGraph(@StdString String database, @ByRef Property prop, @StdString String dataFile);
    public static native void append(@StdString BytePointer database, @StdString BytePointer dataFile, @Cast("size_t") long threadSize, @Cast("size_t") long dataSize);
    public static native void append(@StdString String database, @StdString String dataFile, @Cast("size_t") long threadSize, @Cast("size_t") long dataSize); 
    public static native void append(@StdString BytePointer database, @Const FloatPointer data, @Cast("size_t") long dataSize, @Cast("size_t") long threadSize);
    public static native void append(@StdString String database, @Const FloatBuffer data, @Cast("size_t") long dataSize, @Cast("size_t") long threadSize);
    public static native void append(@StdString BytePointer database, @Const float[] data, @Cast("size_t") long dataSize, @Cast("size_t") long threadSize);
    public static native void append(@StdString String database, @Const FloatPointer data, @Cast("size_t") long dataSize, @Cast("size_t") long threadSize);
    public static native void append(@StdString BytePointer database, @Const FloatBuffer data, @Cast("size_t") long dataSize, @Cast("size_t") long threadSize);
    public static native void append(@StdString String database, @Const float[] data, @Cast("size_t") long dataSize, @Cast("size_t") long threadSize);
    
    public static native void exportIndex(@StdString BytePointer database, @StdString BytePointer file);
    public static native void exportIndex(@StdString String database, @StdString String file);
    public static native void importIndex(@StdString BytePointer database, @StdString BytePointer file);
    public static native void importIndex(@StdString String database, @StdString String file);
    public native void load(@StdString BytePointer ifile, @Cast("size_t") long dataSize);
    public native void load(@StdString String ifile, @Cast("size_t") long dataSize);
    public native void append(@StdString BytePointer ifile, @Cast("size_t") long dataSize);
    public native void append(@StdString String ifile, @Cast("size_t") long dataSize);
    public native void append(@Const FloatPointer data, @Cast("size_t") long dataSize);
    public native void append(@Const FloatBuffer data, @Cast("size_t") long dataSize);
    public native void append(@Const float[] data, @Cast("size_t") long dataSize);
    public native void append(@Const DoublePointer data, @Cast("size_t") long dataSize);
    public native void append(@Const DoubleBuffer data, @Cast("size_t") long dataSize);
    public native void append(@Const double[] data, @Cast("size_t") long dataSize);
    public native @Cast("size_t") long getObjectRepositorySize();
    public native void createIndex(@Cast("size_t") long threadNumber, @Cast("size_t") long sizeOfRepository/*=0*/);
    public native void createIndex(@Cast("size_t") long threadNumber);
    public native void saveIndex(@StdString BytePointer ofile);
    public native void saveIndex(@StdString String ofile);
    public native void loadIndex(@StdString BytePointer ofile);
    public native void loadIndex(@StdString String ofile);
    public native Object allocateObject(@StdString BytePointer textLine, @StdString BytePointer sep);
    public native Object allocateObject(@StdString String textLine, @StdString String sep);
    public native Object allocateObject(@StdVector DoublePointer obj);
    public native Object allocateObject(@StdVector DoubleBuffer obj);
    public native Object allocateObject(@StdVector double[] obj);
    public native Object allocateObject(@Const @ByRef vecfloat obj);
    public native Object allocateObject(@Cast("uint8_t*") @StdVector BytePointer obj);
    public native Object allocateObject(@Cast("uint8_t*") @StdVector ByteBuffer obj);
    public native Object allocateObject(@Cast("uint8_t*") @StdVector byte[] obj);
    public native Object allocateObject(@Const FloatPointer obj, @Cast("size_t") long size);
    public native Object allocateObject(@Const FloatBuffer obj, @Cast("size_t") long size);
    public native Object allocateObject(@Const float[] obj, @Cast("size_t") long size);
    public native @Cast("size_t") long getSizeOfElement();
    public native void setProperty(@ByRef Property prop);
    public native void getProperty(@ByRef Property prop);
    public native void deleteObject(Object po);
    public native void linearSearch(@ByRef SearchContainer sc);
    public native void search(@ByRef SearchContainer sc);
    public native void search(@ByRef SearchContainer sc, @ByRef ObjectDistances seeds);
    
    public native void exportIndex(@StdString BytePointer file);
    public native void exportIndex(@StdString String file);
    public native void importIndex(@StdString BytePointer file);
    public native void importIndex(@StdString String file);
    public native @Cast("bool") boolean verify(@Cast("uint8_t*") @StdVector BytePointer status, @Cast("bool") boolean info/*=false*/, @Cast("char") byte mode/*='-'*/);
    public native @Cast("bool") boolean verify(@Cast("uint8_t*") @StdVector BytePointer status);
    public native @Cast("bool") boolean verify(@Cast("uint8_t*") @StdVector ByteBuffer status, @Cast("bool") boolean info/*=false*/, @Cast("char") byte mode/*='-'*/);
    public native @Cast("bool") boolean verify(@Cast("uint8_t*") @StdVector ByteBuffer status);
    public native @Cast("bool") boolean verify(@Cast("uint8_t*") @StdVector byte[] status, @Cast("bool") boolean info/*=false*/, @Cast("char") byte mode/*='-'*/);
    public native @Cast("bool") boolean verify(@Cast("uint8_t*") @StdVector byte[] status);
    public native @Cast("size_t") long getSharedMemorySize(@Cast("std::ostream*") @ByRef Pointer os);
    public native float getEpsilonFromExpectedAccuracy(double accuracy);
    public native void searchUsingOnlyGraph(@ByRef SearchContainer sc);
    public native @ByVal vecfloat makeSparseObject(@Cast("uint32_t*") @StdVector IntPointer object);
    public native @ByVal vecfloat makeSparseObject(@Cast("uint32_t*") @StdVector IntBuffer object);
    public native @ByVal vecfloat makeSparseObject(@Cast("uint32_t*") @StdVector int[] object);
    public native @ByRef ngtIndex getIndex();
    public native void enableLog();
    public native void disableLog();

    public static native void destroy(@StdString BytePointer path);
    public static native void destroy(@StdString String path);
    
    public static native void version(@Cast("std::ostream*") @ByRef Pointer os);
    public static native @StdString BytePointer getVersion();
    public native @StdString BytePointer getPath();
  }
