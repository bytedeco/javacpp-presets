// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngt;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.ngt.global.ngt.*;



  @Namespace("NGT") @Properties(inherit = org.bytedeco.ngt.presets.ngt.class)
public class PropertySet extends mapStringString {
      static { Loader.load(); }
      /** Default native constructor. */
      public PropertySet() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public PropertySet(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public PropertySet(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public PropertySet position(long position) {
          return (PropertySet)super.position(position);
      }
      @Override public PropertySet getPointer(long i) {
          return new PropertySet((Pointer)this).offsetAddress(i);
      }
  
    public native void set(@StdString BytePointer key, @StdString BytePointer value);
    public native void set(@StdString String key, @StdString String value);

    public native @StdString BytePointer get(@StdString BytePointer key);
    public native @StdString String get(@StdString String key);
    public native float getf(@StdString BytePointer key, float defvalue);
    public native float getf(@StdString String key, float defvalue);
    public native void updateAndInsert(@ByRef PropertySet prop);
    public native long getl(@StdString BytePointer key, long defvalue);
    public native long getl(@StdString String key, long defvalue);
    public native void load(@StdString BytePointer f);
    public native void load(@StdString String f);
    public native void save(@StdString BytePointer f);
    public native void save(@StdString String f);    
    public native void save(@Cast("std::ofstream*") @ByRef Pointer os);
    public native void load(@Cast("std::ifstream*") @ByRef Pointer is);
  }
