// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngt;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.ngt.global.ngt.*;


  @Namespace("NGT") @NoOffset @Properties(inherit = org.bytedeco.ngt.presets.ngt.class)
public class SearchContainer extends Container {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public SearchContainer(Pointer p) { super(p); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public SearchContainer(long size) { super((Pointer)null); allocateArray(size); }
      private native void allocateArray(long size);
      @Override public SearchContainer position(long position) {
          return (SearchContainer)super.position(position);
      }
      @Override public SearchContainer getPointer(long i) {
          return new SearchContainer((Pointer)this).offsetAddress(i);
      }
  
    public SearchContainer(@ByRef Object f, @Cast("NGT::ObjectID") int i) { super((Pointer)null); allocate(f, i); }
    private native void allocate(@ByRef Object f, @Cast("NGT::ObjectID") int i);
    public SearchContainer(@ByRef Object f) { super((Pointer)null); allocate(f); }
    private native void allocate(@ByRef Object f);
    public SearchContainer(@ByRef SearchContainer sc) { super((Pointer)null); allocate(sc); }
    private native void allocate(@ByRef SearchContainer sc);
    public SearchContainer(@ByRef SearchContainer sc, @ByRef Object f) { super((Pointer)null); allocate(sc, f); }
    private native void allocate(@ByRef SearchContainer sc, @ByRef Object f);
    public SearchContainer() { super((Pointer)null); allocate(); }
    private native void allocate();

    public native @ByRef @Name("operator =") SearchContainer put(@ByRef SearchContainer sc);
    public native void initialize();
    public native void setSize(@Cast("size_t") long s);
    public native void setResults(ObjectDistances r);
    public native void setRadius(@Cast("NGT::Distance") float r);
    public native void setEpsilon(float e);
    public native void setEdgeSize(int e);
    public native void setExpectedAccuracy(float a);

    public native @Cast("bool") boolean resultIsAvailable();
    public native @ByRef ObjectDistances getResult();


    public native @Cast("size_t") long size(); public native SearchContainer size(long setter);
    public native @Cast("NGT::Distance") float radius(); public native SearchContainer radius(float setter);
    public native float explorationCoefficient(); public native SearchContainer explorationCoefficient(float setter);
    public native int edgeSize(); public native SearchContainer edgeSize(int setter);
    public native @Cast("size_t") long distanceComputationCount(); public native SearchContainer distanceComputationCount(long setter);
    public native @Cast("bool") boolean useAllNodesInLeaf(); public native SearchContainer useAllNodesInLeaf(boolean setter);
    public native @Cast("size_t") long visitCount(); public native SearchContainer visitCount(long setter);
    public native float expectedAccuracy(); public native SearchContainer expectedAccuracy(float setter);
  }
