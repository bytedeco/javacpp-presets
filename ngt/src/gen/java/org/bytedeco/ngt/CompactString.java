// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngt;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.ngt.global.ngt.*;


  @Namespace("NGT") @NoOffset @Properties(inherit = org.bytedeco.ngt.presets.ngt.class)
public class CompactString extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public CompactString(Pointer p) { super(p); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public CompactString(long size) { super((Pointer)null); allocateArray(size); }
      private native void allocateArray(long size);
      @Override public CompactString position(long position) {
          return (CompactString)super.position(position);
      }
      @Override public CompactString getPointer(long i) {
          return new CompactString((Pointer)this).offsetAddress(i);
      }
  
    public CompactString() { super((Pointer)null); allocate(); }
    private native void allocate();

    public CompactString(@Const @ByRef CompactString v) { super((Pointer)null); allocate(v); }
    private native void allocate(@Const @ByRef CompactString v);

    public native void clear();

    public native @ByRef @Name("operator =") CompactString put(@StdString BytePointer v);
    public native @ByRef @Name("operator =") CompactString put(@StdString String v);

    public native @ByRef @Name("operator =") CompactString put(@Const @ByRef CompactString v);

    public native @Cast("char*") @ByRef BytePointer at(@Cast("size_t") long idx);

    public native @Cast("char*") BytePointer c_str();
    public native @Cast("size_t") long size();

    public native @Cast("char*") BytePointer vector(); public native CompactString vector(BytePointer setter);
  }
