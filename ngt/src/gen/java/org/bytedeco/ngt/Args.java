// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngt;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.ngt.global.ngt.*;


  @Namespace("NGT") @NoOffset @Properties(inherit = org.bytedeco.ngt.presets.ngt.class)
public class Args extends mapStringString {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Args(Pointer p) { super(p); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public Args(long size) { super((Pointer)null); allocateArray(size); }
      private native void allocateArray(long size);
      @Override public Args position(long position) {
          return (Args)super.position(position);
      }
      @Override public Args getPointer(long i) {
          return new Args((Pointer)this).offsetAddress(i);
      }
  
    public Args() { super((Pointer)null); allocate(); }
    private native void allocate();
    public Args(int argc, @Cast("char**") PointerPointer argv) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(int argc, @Cast("char**") PointerPointer argv);
    public Args(int argc, @Cast("char**") @ByPtrPtr BytePointer argv) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(int argc, @Cast("char**") @ByPtrPtr BytePointer argv);
    public Args(int argc, @Cast("char**") @ByPtrPtr ByteBuffer argv) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(int argc, @Cast("char**") @ByPtrPtr ByteBuffer argv);
    public Args(int argc, @Cast("char**") @ByPtrPtr byte[] argv) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(int argc, @Cast("char**") @ByPtrPtr byte[] argv);
    public native @ByVal setString getUnusedOptions();
    public native @StdString BytePointer checkUnusedOptions();
    public native @StdString @ByRef BytePointer find(@Cast("const char*") BytePointer s);
    public native @StdString @ByRef BytePointer find(String s);
    public native @Cast("char") byte getChar(@Cast("const char*") BytePointer s, @Cast("char") byte v);
    public native @Cast("char") byte getChar(String s, @Cast("char") byte v);
    public native @StdString BytePointer getString(@Cast("const char*") BytePointer s, @Cast("const char*") BytePointer v);
    public native @StdString String getString(String s, String v);
    public native @StdString @ByRef BytePointer get(@Cast("const char*") BytePointer s);
    public native @StdString @ByRef BytePointer get(String s);
    public native long getl(@Cast("const char*") BytePointer s, long v);
    public native long getl(String s, long v);
    public native float getf(@Cast("const char*") BytePointer s, float v);
    public native float getf(String s, float v);
    public native @ByRef setString usedOptions(); public native Args usedOptions(setString setter);
  }
