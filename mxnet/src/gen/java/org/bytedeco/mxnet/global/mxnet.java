// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.mxnet.global;

import org.bytedeco.mxnet.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import org.bytedeco.opencv.opencv_videoio.*;
import static org.bytedeco.opencv.global.opencv_videoio.*;
import org.bytedeco.opencv.opencv_highgui.*;
import static org.bytedeco.opencv.global.opencv_highgui.*;

public class mxnet extends org.bytedeco.mxnet.presets.mxnet {
    static { Loader.load(); }

// Parsed from mxnet/c_api.h

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 *  Copyright (c) 2015 by Contributors
 * \file c_api.h
 * \brief C API of mxnet
 */
// #ifndef MXNET_C_API_H_
// #define MXNET_C_API_H_

/** \brief Inhibit C++ name-mangling for MXNet functions. */
// #ifdef __cplusplus
// #endif  // __cplusplus

/** \brief Keep the default value in C++ */
// #ifdef __cplusplus
// #define DEFAULT(x) = x
// #else
// #endif  // __cplusplus

// #include <stdint.h>

// #include <stdint.h>
// #include <stddef.h>
// #include <stdbool.h>

/** \brief MXNET_DLL prefix for windows */
// #ifdef _WIN32
// #ifdef MXNET_EXPORTS
// #define MXNET_DLL __declspec(dllexport)
// #else
// #define MXNET_DLL __declspec(dllimport)
// #endif
// #else
// #define MXNET_DLL
// #endif

/** \brief manually define unsigned int */
/** \brief manually define float */
/** \brief data type to store dim size */
// Targeting ../NDArrayHandle.java


// Targeting ../FunctionHandle.java


// Targeting ../AtomicSymbolCreator.java


// Targeting ../CachedOpHandle.java


// Targeting ../SymbolHandle.java


// Targeting ../AtomicSymbolHandle.java


// Targeting ../ExecutorHandle.java


// Targeting ../DataIterCreator.java


// Targeting ../DataIterHandle.java


// Targeting ../KVStoreHandle.java


// Targeting ../RecordIOHandle.java


// Targeting ../RtcHandle.java


// Targeting ../CudaModuleHandle.java


// Targeting ../CudaKernelHandle.java


// Targeting ../ProfileHandle.java


// Targeting ../DLManagedTensorHandle.java


// Targeting ../ExecutorMonitorCallback.java


// Targeting ../NativeOpInfo.java


// Targeting ../NDArrayOpInfo.java


// Targeting ../MXGenericCallback.java


// Targeting ../MXCallbackList.java



/** enum CustomOpCallbacks */
public static final int
  kCustomOpDelete = 0,
  kCustomOpForward = 1,
  kCustomOpBackward = 2;

/** enum CustomOpPropCallbacks */
public static final int
  kCustomOpPropDelete = 0,
  kCustomOpPropListArguments = 1,
  kCustomOpPropListOutputs = 2,
  kCustomOpPropListAuxiliaryStates = 3,
  kCustomOpPropInferShape = 4,
  kCustomOpPropDeclareBackwardDependency = 5,
  kCustomOpPropCreateOperator = 6,
  kCustomOpPropInferType = 7,
  kCustomOpPropInferStorageType = 8,
  kCustomOpPropBackwardInferStorageType = 9;
// Targeting ../CustomOpFBFunc.java


// Targeting ../CustomOpDelFunc.java


// Targeting ../CustomOpListFunc.java


// Targeting ../CustomOpInferShapeFunc.java


// Targeting ../CustomOpInferStorageTypeFunc.java


// Targeting ../CustomOpBackwardInferStorageTypeFunc.java


// Targeting ../CustomOpInferTypeFunc.java


// Targeting ../CustomOpBwdDepFunc.java


// Targeting ../CustomOpCreateFunc.java


// Targeting ../CustomOpPropCreator.java




/** enum CustomFunctionCallbacks */
public static final int
  kCustomFunctionBackward = 0,
  kCustomFunctionDelete = 1;
// Targeting ../CustomFunctionBwdFunc.java


// Targeting ../CustomFunctionDelFunc.java



/**
 * \brief return str message of the last error
 *  all function in this file will return 0 when success
 *  and -1 when an error occured,
 *  MXGetLastError can be called to retrieve the error
 *
 *  this function is threadsafe and can be called by different thread
 *  @return error info
 */
public static native @Cast("const char*") BytePointer MXGetLastError();

//-------------------------------------
// Part 0: Global State setups
//-------------------------------------
/**
 * \brief Seed all global random number generators in mxnet.
 * @param seed the random number seed.
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXRandomSeed(int seed);

/**
 * \brief Seed the global random number generator of the given device.
 * @param seed the random number seed.
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXRandomSeedContext(int seed, int dev_type, int dev_id);

/**
 * \brief Notify the engine about a shutdown,
 *  This can help engine to print less messages into display.
 *
 *  User do not have to call this function.
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXNotifyShutdown();

/**
 * \brief Set up configuration of profiler for the process passed as profile_process in keys
 * @param num_params Number of parameters
 * @param keys array of parameter keys
 * @param vals array of parameter values
 * @param kvstoreHandle handle to kvstore
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXSetProcessProfilerConfig(int num_params, @Cast("const char*const*") PointerPointer keys,
                                         @Cast("const char*const*") PointerPointer vals,
                                         KVStoreHandle kvstoreHandle);
public static native int MXSetProcessProfilerConfig(int num_params, @Cast("const char*const*") @ByPtrPtr BytePointer keys,
                                         @Cast("const char*const*") @ByPtrPtr BytePointer vals,
                                         KVStoreHandle kvstoreHandle);
public static native int MXSetProcessProfilerConfig(int num_params, @Cast("const char*const*") @ByPtrPtr ByteBuffer keys,
                                         @Cast("const char*const*") @ByPtrPtr ByteBuffer vals,
                                         KVStoreHandle kvstoreHandle);
public static native int MXSetProcessProfilerConfig(int num_params, @Cast("const char*const*") @ByPtrPtr byte[] keys,
                                         @Cast("const char*const*") @ByPtrPtr byte[] vals,
                                         KVStoreHandle kvstoreHandle);

/**
 * \brief Set up configuration of profiler for worker/current process
 * @param num_params Number of parameters
 * @param keys array of parameter keys
 * @param vals array of parameter values
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXSetProfilerConfig(int num_params, @Cast("const char*const*") PointerPointer keys, @Cast("const char*const*") PointerPointer vals);
public static native int MXSetProfilerConfig(int num_params, @Cast("const char*const*") @ByPtrPtr BytePointer keys, @Cast("const char*const*") @ByPtrPtr BytePointer vals);
public static native int MXSetProfilerConfig(int num_params, @Cast("const char*const*") @ByPtrPtr ByteBuffer keys, @Cast("const char*const*") @ByPtrPtr ByteBuffer vals);
public static native int MXSetProfilerConfig(int num_params, @Cast("const char*const*") @ByPtrPtr byte[] keys, @Cast("const char*const*") @ByPtrPtr byte[] vals);

/**
 * \brief Set up state of profiler for either worker or server process
 * @param state indicate the working state of profiler,
 *  profiler not running when state == 0,
 *  profiler running when state == 1
 * @param profile_process an int,
 * when 0 command is for worker/current process,
 * when 1 command is for server process
 * @param kvstoreHandle handle to kvstore, needed for server process profiling
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXSetProcessProfilerState(int state, int profile_process,
                                        KVStoreHandle kvStoreHandle);

/**
 * \brief Set up state of profiler for current process
 * @param state indicate the working state of profiler,
 *  profiler not running when state == 0,
 *  profiler running when state == 1
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXSetProfilerState(int state);

/**
 * \brief Save profile and stop profiler
 * @param finished true if stat output should stop after this point
 * @param profile_process an int,
 * when 0 command is for worker/current process,
 * when 1 command is for server process
 * @param kvstoreHandle handle to kvstore
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXDumpProcessProfile(int finished, int profile_process, KVStoreHandle kvStoreHandle);


/**
 * \brief Save profile and stop profiler for worker/current process
 * @param finished true if stat output should stop after this point
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXDumpProfile(int finished);

/**
 * \brief Print aggregate stats to the a string
 * @param out_str Will receive a pointer to the output string
 * @param reset Clear the aggregate stats after printing
 * @return 0 when success, -1 when failure happens.
 * \note
 */
public static native int MXAggregateProfileStatsPrint(@Cast("const char**") PointerPointer out_str, int reset);
public static native int MXAggregateProfileStatsPrint(@Cast("const char**") @ByPtrPtr BytePointer out_str, int reset);
public static native int MXAggregateProfileStatsPrint(@Cast("const char**") @ByPtrPtr ByteBuffer out_str, int reset);
public static native int MXAggregateProfileStatsPrint(@Cast("const char**") @ByPtrPtr byte[] out_str, int reset);

/**
 * \brief Pause profiler tuning collection
 * @param paused If nonzero, profiling pauses. Otherwise, profiling resumes/continues
 * @param profile_process integer which denotes whether to process worker or server process
 * @param kvstoreHandle handle to kvstore
 * @return 0 when success, -1 when failure happens.
 * \note pausing and resuming is global and not recursive
 */
public static native int MXProcessProfilePause(int paused, int profile_process, KVStoreHandle kvStoreHandle);

/**
 * \brief Pause profiler tuning collection for worker/current process
 * @param paused If nonzero, profiling pauses. Otherwise, profiling resumes/continues
 * @return 0 when success, -1 when failure happens.
 * \note pausing and resuming is global and not recursive
 */
public static native int MXProfilePause(int paused);

/**
 * \brief Create profiling domain
 * @param domain String representing the domain name to create
 * @param out Return domain object
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileCreateDomain(@Cast("const char*") BytePointer domain, @ByPtrPtr ProfileHandle out);
public static native int MXProfileCreateDomain(String domain, @ByPtrPtr ProfileHandle out);

/**
 * \brief Create profile task
 * @param name Name of the task
 * @param domain Domain of the task
 * @param out Output handle
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileCreateTask(ProfileHandle domain,
                                  @Cast("const char*") BytePointer task_name,
                                  @ByPtrPtr ProfileHandle out);
public static native int MXProfileCreateTask(ProfileHandle domain,
                                  String task_name,
                                  @ByPtrPtr ProfileHandle out);

/**
 * \brief Create profile frame
 * @param name Name of the frame
 * @param domain Domain of the frame
 * @param out Output handle
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileCreateFrame(ProfileHandle domain,
                                   @Cast("const char*") BytePointer frame_name,
                                   @ByPtrPtr ProfileHandle out);
public static native int MXProfileCreateFrame(ProfileHandle domain,
                                   String frame_name,
                                   @ByPtrPtr ProfileHandle out);

/**
 * \brief Create profile event
 * @param name Name of the event
 * @param out Output handle
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileCreateEvent(@Cast("const char*") BytePointer event_name, @ByPtrPtr ProfileHandle out);
public static native int MXProfileCreateEvent(String event_name, @ByPtrPtr ProfileHandle out);

/**
 * \brief Create profile counter
 * @param name Name of the counter
 * @param domain Domain of the counter
 * @param out Output handle
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileCreateCounter(ProfileHandle domain,
                                     @Cast("const char*") BytePointer counter_name,
                                     @ByPtrPtr ProfileHandle out);
public static native int MXProfileCreateCounter(ProfileHandle domain,
                                     String counter_name,
                                     @ByPtrPtr ProfileHandle out);

/**
 * \brief Destroy a frame
 * @param frame_handle Handle to frame to destroy
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileDestroyHandle(ProfileHandle frame_handle);

/**
 * \brief Start timing the duration of a profile duration object such as an event, task or frame
 * @param duration_handle handle to the duration object
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileDurationStart(ProfileHandle duration_handle);

/**
 * \brief Stop timing the duration of a profile duration object such as an event, task or frame
 * @param duration_handle handle to the duration object
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileDurationStop(ProfileHandle duration_handle);

/**
 * \brief Set a counter, given its handle
 * @param counter_handle Handle to counter to set
 * @param value Value to set the counter to (64-bit unsigned integer)
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileSetCounter(ProfileHandle counter_handle, @Cast("uint64_t") long value);

/**
 * \brief Adjust a counter by the given amount, given its handle
 * @param counter_handle Handle to counter to adjust
 * @param value Value to adjust the counter by (64-bit signed integer)
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileAdjustCounter(ProfileHandle counter_handle, @Cast("int64_t") long value);

/**
 * \brief Mark a single instant in time
 * @param domain Domain of the marker
 * @param instant_marker_name Name of the marker
 * @param scope Scope of marker ('global', 'process', 'thread', 'task', 'marker')
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXProfileSetMarker(ProfileHandle domain,
                                 @Cast("const char*") BytePointer instant_marker_name,
                                 @Cast("const char*") BytePointer scope);
public static native int MXProfileSetMarker(ProfileHandle domain,
                                 String instant_marker_name,
                                 String scope);

/**
 * \brief Set the number of OMP threads to use
 * @param thread_num Number of OMP threads desired
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXSetNumOMPThreads(int thread_num);

/**
 * \brief set bulk execution limit
 * @param bulk_size new bulk_size
 * @param prev_bulk_size previous bulk_size
 */
public static native int MXEngineSetBulkSize(int bulk_size, IntPointer prev_bulk_size);
public static native int MXEngineSetBulkSize(int bulk_size, IntBuffer prev_bulk_size);
public static native int MXEngineSetBulkSize(int bulk_size, int[] prev_bulk_size);

/**
 * \brief Get the number of GPUs.
 * @param pointer to int that will hold the number of GPUs available.
 * @return 0 when success, -1 when failure happens.
 */
public static native int MXGetGPUCount(IntPointer out);
public static native int MXGetGPUCount(IntBuffer out);
public static native int MXGetGPUCount(int[] out);

/**
 * \brief get the free and total available memory on a GPU
 *  Note: Deprecated, use MXGetGPUMemoryInformation64 instead.
 * @param dev the GPU number to query
 * @param free_mem pointer to the integer holding free GPU memory
 * @param total_mem pointer to the integer holding total GPU memory
 * @return 0 when success, -1 when failure happens
 */
public static native int MXGetGPUMemoryInformation(int dev, IntPointer free_mem, IntPointer total_mem);
public static native int MXGetGPUMemoryInformation(int dev, IntBuffer free_mem, IntBuffer total_mem);
public static native int MXGetGPUMemoryInformation(int dev, int[] free_mem, int[] total_mem);

/**
 * \brief get the free and total available memory on a GPU
 * @param dev the GPU number to query
 * @param free_mem pointer to the uint64_t holding free GPU memory
 * @param total_mem pointer to the uint64_t holding total GPU memory
 * @return 0 when success, -1 when failure happens
 */
public static native int MXGetGPUMemoryInformation64(int dev, @Cast("uint64_t*") LongPointer free_mem, @Cast("uint64_t*") LongPointer total_mem);
public static native int MXGetGPUMemoryInformation64(int dev, @Cast("uint64_t*") LongBuffer free_mem, @Cast("uint64_t*") LongBuffer total_mem);
public static native int MXGetGPUMemoryInformation64(int dev, @Cast("uint64_t*") long[] free_mem, @Cast("uint64_t*") long[] total_mem);

/**
 * \brief get the MXNet library version as an integer
 * @param pointer to the integer holding the version number
 * @return 0 when success, -1 when failure happens
 */
public static native int MXGetVersion(IntPointer out);
public static native int MXGetVersion(IntBuffer out);
public static native int MXGetVersion(int[] out);

//-------------------------------------
// Part 1: NDArray creation and deletion
//-------------------------------------
/**
 * \brief create a NDArray handle that is not initialized
 *  can be used to pass in as mutate variables
 *  to hold the result of NDArray
 * @param out the returning handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayCreateNone(PointerPointer out);
public static native int MXNDArrayCreateNone(@Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
/**
 * \brief create a NDArray with specified shape
 * @param shape the pointer to the shape
 * @param ndim the dimension of the shape
 * @param dev_type device type, specify device we want to take
 * @param dev_id the device id of the specific device
 * @param delay_alloc whether to delay allocation until
 *    the narray is first mutated
 * @param out the returning handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayCreate(@Cast("const mx_uint*") IntPointer shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              PointerPointer out);
public static native int MXNDArrayCreate(@Cast("const mx_uint*") IntBuffer shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayCreate(@Cast("const mx_uint*") int[] shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              PointerPointer out);
public static native int MXNDArrayCreate(@Cast("const mx_uint*") IntPointer shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayCreate(@Cast("const mx_uint*") IntBuffer shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              PointerPointer out);
public static native int MXNDArrayCreate(@Cast("const mx_uint*") int[] shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);

/**
 * \brief create a NDArray with specified shape and data type
 * @param shape the pointer to the shape
 * @param ndim the dimension of the shape
 * @param dev_type device type, specify device we want to take
 * @param dev_id the device id of the specific device
 * @param delay_alloc whether to delay allocation until
 *    the narray is first mutated
 * @param dtype data type of created array
 * @param out the returning handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayCreateEx(@Cast("const mx_uint*") IntPointer shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              int dtype,
                              PointerPointer out);
public static native int MXNDArrayCreateEx(@Cast("const mx_uint*") IntBuffer shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              int dtype,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayCreateEx(@Cast("const mx_uint*") int[] shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              int dtype,
                              PointerPointer out);
public static native int MXNDArrayCreateEx(@Cast("const mx_uint*") IntPointer shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              int dtype,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayCreateEx(@Cast("const mx_uint*") IntBuffer shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              int dtype,
                              PointerPointer out);
public static native int MXNDArrayCreateEx(@Cast("const mx_uint*") int[] shape,
                              @Cast("mx_uint") int ndim,
                              int dev_type,
                              int dev_id,
                              int delay_alloc,
                              int dtype,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);


/**
 * \brief create an empty sparse NDArray with specified shape and data type
 * @param storage_type the storage type of the ndarray
 * @param shape the pointer to the shape
 * @param ndim the dimension of the shape
 * @param dev_type device type, specify device we want to take
 * @param dev_id the device id of the specific device
 * @param delay_alloc whether to delay allocation until
 *        the narray is first mutated
 * @param dtype data type of created array
 * @param num_aux the number of aux data to support this ndarray
 * @param aux_type data type of the aux data for the created array
 * @param aux_ndims the dimension of the shapes of aux data
 * @param aux_shape the shapes of aux data
 * @param out the returning handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayCreateSparseEx(int storage_type,
                                      @Cast("const mx_uint*") IntPointer shape,
                                      @Cast("mx_uint") int ndim,
                                      int dev_type,
                                      int dev_id,
                                      int delay_alloc,
                                      int dtype,
                                      @Cast("mx_uint") int num_aux,
                                      IntPointer aux_type,
                                      @Cast("mx_uint*") IntPointer aux_ndims,
                                      @Cast("const mx_uint*") IntPointer aux_shape,
                                      PointerPointer out);
public static native int MXNDArrayCreateSparseEx(int storage_type,
                                      @Cast("const mx_uint*") IntBuffer shape,
                                      @Cast("mx_uint") int ndim,
                                      int dev_type,
                                      int dev_id,
                                      int delay_alloc,
                                      int dtype,
                                      @Cast("mx_uint") int num_aux,
                                      IntBuffer aux_type,
                                      @Cast("mx_uint*") IntBuffer aux_ndims,
                                      @Cast("const mx_uint*") IntBuffer aux_shape,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayCreateSparseEx(int storage_type,
                                      @Cast("const mx_uint*") int[] shape,
                                      @Cast("mx_uint") int ndim,
                                      int dev_type,
                                      int dev_id,
                                      int delay_alloc,
                                      int dtype,
                                      @Cast("mx_uint") int num_aux,
                                      int[] aux_type,
                                      @Cast("mx_uint*") int[] aux_ndims,
                                      @Cast("const mx_uint*") int[] aux_shape,
                                      PointerPointer out);
public static native int MXNDArrayCreateSparseEx(int storage_type,
                                      @Cast("const mx_uint*") IntPointer shape,
                                      @Cast("mx_uint") int ndim,
                                      int dev_type,
                                      int dev_id,
                                      int delay_alloc,
                                      int dtype,
                                      @Cast("mx_uint") int num_aux,
                                      IntPointer aux_type,
                                      @Cast("mx_uint*") IntPointer aux_ndims,
                                      @Cast("const mx_uint*") IntPointer aux_shape,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayCreateSparseEx(int storage_type,
                                      @Cast("const mx_uint*") IntBuffer shape,
                                      @Cast("mx_uint") int ndim,
                                      int dev_type,
                                      int dev_id,
                                      int delay_alloc,
                                      int dtype,
                                      @Cast("mx_uint") int num_aux,
                                      IntBuffer aux_type,
                                      @Cast("mx_uint*") IntBuffer aux_ndims,
                                      @Cast("const mx_uint*") IntBuffer aux_shape,
                                      PointerPointer out);
public static native int MXNDArrayCreateSparseEx(int storage_type,
                                      @Cast("const mx_uint*") int[] shape,
                                      @Cast("mx_uint") int ndim,
                                      int dev_type,
                                      int dev_id,
                                      int delay_alloc,
                                      int dtype,
                                      @Cast("mx_uint") int num_aux,
                                      int[] aux_type,
                                      @Cast("mx_uint*") int[] aux_ndims,
                                      @Cast("const mx_uint*") int[] aux_shape,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);

/**
 * \brief create a NDArray handle that is loaded from raw bytes.
 * @param buf the head of the raw bytes
 * @param size size of the raw bytes
 * @param out the returning handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayLoadFromRawBytes(@Const Pointer buf,
                                        @Cast("size_t") long size,
                                        PointerPointer out);
public static native int MXNDArrayLoadFromRawBytes(@Const Pointer buf,
                                        @Cast("size_t") long size,
                                        @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
/**
 * \brief save the NDArray into raw bytes.
 * @param handle the NDArray handle
 * @param out_size size of the raw bytes
 * @param out_buf the head of returning memory bytes.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArraySaveRawBytes(NDArrayHandle handle,
                                    @Cast("size_t*") SizeTPointer out_size,
                                    @Cast("const char**") PointerPointer out_buf);
public static native int MXNDArraySaveRawBytes(NDArrayHandle handle,
                                    @Cast("size_t*") SizeTPointer out_size,
                                    @Cast("const char**") @ByPtrPtr BytePointer out_buf);
public static native int MXNDArraySaveRawBytes(NDArrayHandle handle,
                                    @Cast("size_t*") SizeTPointer out_size,
                                    @Cast("const char**") @ByPtrPtr ByteBuffer out_buf);
public static native int MXNDArraySaveRawBytes(NDArrayHandle handle,
                                    @Cast("size_t*") SizeTPointer out_size,
                                    @Cast("const char**") @ByPtrPtr byte[] out_buf);
/**
 * \brief Save list of narray into the file.
 * @param fname name of the file.
 * @param num_args number of arguments to save.
 * @param args the array of NDArrayHandles to be saved.
 * @param keys the name of the NDArray, optional, can be NULL
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArraySave(@Cast("const char*") BytePointer fname,
                            @Cast("mx_uint") int num_args,
                            PointerPointer args,
                            @Cast("const char**") PointerPointer keys);
public static native int MXNDArraySave(@Cast("const char*") BytePointer fname,
                            @Cast("mx_uint") int num_args,
                            PointerPointer args,
                            @Cast("const char**") @ByPtrPtr BytePointer keys);
public static native int MXNDArraySave(String fname,
                            @Cast("mx_uint") int num_args,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle args,
                            @Cast("const char**") @ByPtrPtr ByteBuffer keys);
public static native int MXNDArraySave(@Cast("const char*") BytePointer fname,
                            @Cast("mx_uint") int num_args,
                            PointerPointer args,
                            @Cast("const char**") @ByPtrPtr byte[] keys);
public static native int MXNDArraySave(String fname,
                            @Cast("mx_uint") int num_args,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle args,
                            @Cast("const char**") @ByPtrPtr BytePointer keys);
public static native int MXNDArraySave(@Cast("const char*") BytePointer fname,
                            @Cast("mx_uint") int num_args,
                            PointerPointer args,
                            @Cast("const char**") @ByPtrPtr ByteBuffer keys);
public static native int MXNDArraySave(String fname,
                            @Cast("mx_uint") int num_args,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle args,
                            @Cast("const char**") @ByPtrPtr byte[] keys);
/**
 * \brief Load list of narray from the file.
 * @param fname name of the file.
 * @param out_size number of narray loaded.
 * @param out_arr head of the returning narray handles.
 * @param out_name_size size of output name arrray.
 * @param out_names the names of returning NDArrays, can be NULL
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayLoad(@Cast("const char*") BytePointer fname,
                            @Cast("mx_uint*") IntPointer out_size,
                            @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") IntPointer out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);
public static native int MXNDArrayLoad(String fname,
                            @Cast("mx_uint*") IntBuffer out_size,
                            @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") IntBuffer out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);
public static native int MXNDArrayLoad(@Cast("const char*") BytePointer fname,
                            @Cast("mx_uint*") int[] out_size,
                            @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") int[] out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);
public static native int MXNDArrayLoad(String fname,
                            @Cast("mx_uint*") IntPointer out_size,
                            @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") IntPointer out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);
public static native int MXNDArrayLoad(@Cast("const char*") BytePointer fname,
                            @Cast("mx_uint*") IntBuffer out_size,
                            @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") IntBuffer out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);
public static native int MXNDArrayLoad(String fname,
                            @Cast("mx_uint*") int[] out_size,
                            @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") int[] out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);

/**
 * \brief Load list / dictionary of narrays from file content loaded into memory.
 * This will load a list of ndarrays in a similar
 * manner to MXNDArrayLoad, however, it loads from
 * buffer containing the contents of a file, rather than
 * from a specified file.
 * @param ndarray_buffer pointer to the start of the ndarray file content
 * @param size size of the file
 * @param out_size number of narray loaded.
 * @param out_arr head of the returning narray handles.
 * @param out_name_size size of output name arrray.
 * @param out_names the names of returning NDArrays, can be NULL
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayLoadFromBuffer(@Const Pointer ndarray_buffer,
                            @Cast("size_t") long size,
                            @Cast("mx_uint*") IntPointer out_size,
                            @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") IntPointer out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);
public static native int MXNDArrayLoadFromBuffer(@Const Pointer ndarray_buffer,
                            @Cast("size_t") long size,
                            @Cast("mx_uint*") IntBuffer out_size,
                            @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") IntBuffer out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);
public static native int MXNDArrayLoadFromBuffer(@Const Pointer ndarray_buffer,
                            @Cast("size_t") long size,
                            @Cast("mx_uint*") int[] out_size,
                            @ByPtrPtr PointerPointer out_arr,
                            @Cast("mx_uint*") int[] out_name_size,
                            @Cast("const char***") @ByPtrPtr PointerPointer out_names);

/**
 * \brief Perform a synchronize copy from a continugous CPU memory region.
 *
 *  This function will call WaitToWrite before the copy is performed.
 *  This is useful to copy data from existing memory region that are
 *  not wrapped by NDArray(thus dependency not being tracked).
 *
 * @param handle the NDArray handle
 * @param data the data source to copy from.
 * @param size the memory size we want to copy from.
 */
public static native int MXNDArraySyncCopyFromCPU(NDArrayHandle handle,
                                       @Const Pointer data,
                                       @Cast("size_t") long size);
/**
 * \brief Perform a synchronize copyto a continugous CPU memory region.
 *
 *  This function will call WaitToRead before the copy is performed.
 *  This is useful to copy data from existing memory region that are
 *  not wrapped by NDArray(thus dependency not being tracked).
 *
 * @param handle the NDArray handle
 * @param data the data source to copy into.
 * @param size the memory size we want to copy into.
 */
public static native int MXNDArraySyncCopyToCPU(NDArrayHandle handle,
                                     Pointer data,
                                     @Cast("size_t") long size);
/**
 * \brief Copy src.data() to dst.data() if i = -1, else dst.aux_data(i) if i >= 0
 * This function blocks. Do not use it in performance critical code.
 * @param handle_dst handle of a dst ndarray whose data/aux_data has been allocated
 * @param handle_src handle of a src ndarray which has default storage type
 * @param i dst data blob indicator
 */
public static native int MXNDArraySyncCopyFromNDArray(NDArrayHandle handle_dst,
                                           NDArrayHandle handle_src,
                                           int i);

/**
 * \brief check whether the NDArray format is valid
 * @param full_check if {@code True}, rigorous check, O(N) operations
 *    Otherwise basic check, O(1) operations
 */
public static native int MXNDArraySyncCheckFormat(NDArrayHandle handle, @Cast("const bool") boolean full_check);
/**
 * \brief Wait until all the pending writes with respect NDArray are finished.
 *  Always call this before read data out synchronizely.
 * @param handle the NDArray handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayWaitToRead(NDArrayHandle handle);
/**
 * \brief Wait until all the pending read/write with respect NDArray are finished.
 *  Always call this before write data into NDArray synchronizely.
 * @param handle the NDArray handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayWaitToWrite(NDArrayHandle handle);
/**
 * \brief wait until all delayed operations in
 *   the system is completed
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayWaitAll();
/**
 * \brief free the narray handle
 * @param handle the handle to be freed
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayFree(NDArrayHandle handle);
/**
 * \brief Slice the NDArray along axis 0.
 * @param handle the handle to the NDArray
 * @param slice_begin The beginning index of slice
 * @param slice_end The ending index of slice
 * @param out The NDArrayHandle of sliced NDArray
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArraySlice(NDArrayHandle handle,
                             @Cast("mx_uint") int slice_begin,
                             @Cast("mx_uint") int slice_end,
                             PointerPointer out);
public static native int MXNDArraySlice(NDArrayHandle handle,
                             @Cast("mx_uint") int slice_begin,
                             @Cast("mx_uint") int slice_end,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);

/**
 * \brief Index the NDArray along axis 0.
 * @param handle the handle to the NDArray
 * @param idx the index
 * @param out The NDArrayHandle of output NDArray
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayAt(NDArrayHandle handle,
                          @Cast("mx_uint") int idx,
                          PointerPointer out);
public static native int MXNDArrayAt(NDArrayHandle handle,
                          @Cast("mx_uint") int idx,
                          @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);

/**
 * \brief get the storage type of the array
 */
public static native int MXNDArrayGetStorageType(NDArrayHandle handle,
                                      IntPointer out_storage_type);
public static native int MXNDArrayGetStorageType(NDArrayHandle handle,
                                      IntBuffer out_storage_type);
public static native int MXNDArrayGetStorageType(NDArrayHandle handle,
                                      int[] out_storage_type);

/**
 * \brief Reshape the NDArray.
 * @param handle the handle to the narray
 * @param ndim number of dimensions of new shape
 * @param dims new shape
 * @param out the NDArrayHandle of reshaped NDArray
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayReshape(NDArrayHandle handle,
                               int ndim,
                               IntPointer dims,
                               PointerPointer out);
public static native int MXNDArrayReshape(NDArrayHandle handle,
                               int ndim,
                               IntBuffer dims,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayReshape(NDArrayHandle handle,
                               int ndim,
                               int[] dims,
                               PointerPointer out);
public static native int MXNDArrayReshape(NDArrayHandle handle,
                               int ndim,
                               IntPointer dims,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayReshape(NDArrayHandle handle,
                               int ndim,
                               IntBuffer dims,
                               PointerPointer out);
public static native int MXNDArrayReshape(NDArrayHandle handle,
                               int ndim,
                               int[] dims,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);

/**
 * \brief Reshape the NDArray.
 * @param handle the handle to the narray
 * @param ndim number of dimensions of new shape
 * @param dims new shape
 * @param out the NDArrayHandle of reshaped NDArray
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayReshape64(NDArrayHandle handle,
                                 int ndim,
                                 @Cast("dim_t*") LongPointer dims,
                                 @Cast("bool") boolean reverse,
                                 PointerPointer out);
public static native int MXNDArrayReshape64(NDArrayHandle handle,
                                 int ndim,
                                 @Cast("dim_t*") LongBuffer dims,
                                 @Cast("bool") boolean reverse,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayReshape64(NDArrayHandle handle,
                                 int ndim,
                                 @Cast("dim_t*") long[] dims,
                                 @Cast("bool") boolean reverse,
                                 PointerPointer out);
public static native int MXNDArrayReshape64(NDArrayHandle handle,
                                 int ndim,
                                 @Cast("dim_t*") LongPointer dims,
                                 @Cast("bool") boolean reverse,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayReshape64(NDArrayHandle handle,
                                 int ndim,
                                 @Cast("dim_t*") LongBuffer dims,
                                 @Cast("bool") boolean reverse,
                                 PointerPointer out);
public static native int MXNDArrayReshape64(NDArrayHandle handle,
                                 int ndim,
                                 @Cast("dim_t*") long[] dims,
                                 @Cast("bool") boolean reverse,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
/**
 * \brief get the shape of the array
 * @param handle the handle to the narray
 * @param out_dim the output dimension
 * @param out_pdata pointer holder to get data pointer of the shape
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayGetShape(NDArrayHandle handle,
                                @Cast("mx_uint*") IntPointer out_dim,
                                @Cast("const mx_uint**") PointerPointer out_pdata);
public static native int MXNDArrayGetShape(NDArrayHandle handle,
                                @Cast("mx_uint*") IntPointer out_dim,
                                @Cast("const mx_uint**") @ByPtrPtr IntPointer out_pdata);
public static native int MXNDArrayGetShape(NDArrayHandle handle,
                                @Cast("mx_uint*") IntBuffer out_dim,
                                @Cast("const mx_uint**") @ByPtrPtr IntBuffer out_pdata);
public static native int MXNDArrayGetShape(NDArrayHandle handle,
                                @Cast("mx_uint*") int[] out_dim,
                                @Cast("const mx_uint**") @ByPtrPtr int[] out_pdata);
/**
 * \brief get the content of the data in NDArray
 * @param handle the handle to the ndarray
 * @param out_pdata pointer holder to get pointer of data
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayGetData(NDArrayHandle handle,
                               @Cast("void**") PointerPointer out_pdata);
public static native int MXNDArrayGetData(NDArrayHandle handle,
                               @Cast("void**") @ByPtrPtr Pointer out_pdata);
/**
* \brief Create a reference view of NDArray that
*  represents as DLManagedTensor
*  Notice: MXNet uses asynchronous execution. Please call MXNDArrayWaitToRead or
*          MXNDArrayWaitToWrite before calling MXNDArrayToDLPack.
* @param handle the handle to the ndarray
* @param out_dlpack pointer holder to get pointer of DLManagedTensor
* @return 0 when success, -1 when failure happens
*/
public static native int MXNDArrayToDLPack(NDArrayHandle handle,
                                       @ByPtrPtr DLManagedTensorHandle out_dlpack);

/**
* \brief Create a NDArray backed by a dlpack tensor.
*
* This allows us to create a NDArray using the memory
* allocated by an external deep learning framework
* that is DLPack compatible.
*
* The memory is retained until the NDArray went out of scope.
*
* @param dlpack the pointer of the input DLManagedTensor
* @param out_handle pointer holder to get pointer of NDArray
* @return 0 when success, -1 when failure happens
*/
public static native int MXNDArrayFromDLPack(DLManagedTensorHandle dlpack,
                                  PointerPointer out_handle);
public static native int MXNDArrayFromDLPack(DLManagedTensorHandle dlpack,
                                  @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out_handle);
/**
 * \brief Delete a dlpack tensor
 * @param dlpack the pointer of the input DLManagedTensor
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayCallDLPackDeleter(DLManagedTensorHandle dlpack);

/**
 * \brief get the type of the data in NDArray
 * @param handle the handle to the narray
 * @param out_dtype pointer holder to get type of data
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayGetDType(NDArrayHandle handle,
                               IntPointer out_dtype);
public static native int MXNDArrayGetDType(NDArrayHandle handle,
                               IntBuffer out_dtype);
public static native int MXNDArrayGetDType(NDArrayHandle handle,
                               int[] out_dtype);

/**
 * \brief get the type of the ith aux data in NDArray
 * @param handle the handle to the narray
 * @param i the index of the aux data
 * @param out_type pointer holder to get type of aux data
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayGetAuxType(NDArrayHandle handle,
                                  @Cast("mx_uint") int i,
                                  IntPointer out_type);
public static native int MXNDArrayGetAuxType(NDArrayHandle handle,
                                  @Cast("mx_uint") int i,
                                  IntBuffer out_type);
public static native int MXNDArrayGetAuxType(NDArrayHandle handle,
                                  @Cast("mx_uint") int i,
                                  int[] out_type);

/**
 * \brief Get a deep copy of the ith aux data blob
 * in the form of an NDArray of default storage type.
 * This function blocks. Do not use it in performance critical code.
 */
public static native int MXNDArrayGetAuxNDArray(NDArrayHandle handle,
                                     @Cast("mx_uint") int i,
                                     PointerPointer out);
public static native int MXNDArrayGetAuxNDArray(NDArrayHandle handle,
                                     @Cast("mx_uint") int i,
                                     @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);

/**
 * \brief Get a deep copy of the data blob
 * in the form of an NDArray of default storage type.
 * This function blocks. Do not use it in performance critical code.
 */
public static native int MXNDArrayGetDataNDArray(NDArrayHandle handle,
                                      PointerPointer out);
public static native int MXNDArrayGetDataNDArray(NDArrayHandle handle,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
/**
 * \brief get the context of the NDArray
 * @param handle the handle to the narray
 * @param out_dev_type the output device type
 * @param out_dev_id the output device id
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayGetContext(NDArrayHandle handle,
                                  IntPointer out_dev_type,
                                  IntPointer out_dev_id);
public static native int MXNDArrayGetContext(NDArrayHandle handle,
                                  IntBuffer out_dev_type,
                                  IntBuffer out_dev_id);
public static native int MXNDArrayGetContext(NDArrayHandle handle,
                                  int[] out_dev_type,
                                  int[] out_dev_id);
/**
 * \brief return gradient buffer attached to this NDArray
 * @param handle NDArray handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayGetGrad(NDArrayHandle handle, PointerPointer out);
public static native int MXNDArrayGetGrad(NDArrayHandle handle, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
/**
 * \brief detach and ndarray from computation graph by clearing entry_
 * @param handle NDArray handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayDetach(NDArrayHandle handle, PointerPointer out);
public static native int MXNDArrayDetach(NDArrayHandle handle, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
/**
 * \brief set the flag for gradient array state.
 * @param handle NDArray handle
 * @param state the new state.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArraySetGradState(NDArrayHandle handle, int state);
/**
 * \brief set the flag for gradient array state.
 * @param handle NDArray handle
 * @param state the new state.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXNDArrayGetGradState(NDArrayHandle handle, IntPointer out);
public static native int MXNDArrayGetGradState(NDArrayHandle handle, IntBuffer out);
public static native int MXNDArrayGetGradState(NDArrayHandle handle, int[] out);
//--------------------------------
// Part 2: functions on NDArray
//--------------------------------
/**
 * \brief list all the available functions handles
 *   most user can use it to list all the needed functions
 * @param out_size the size of returned array
 * @param out_array the output function array
 * @return 0 when success, -1 when failure happens
 */
public static native int MXListFunctions(@Cast("mx_uint*") IntPointer out_size,
                              @Const @ByPtrPtr PointerPointer out_array);
public static native int MXListFunctions(@Cast("mx_uint*") IntBuffer out_size,
                              @Cast("FunctionHandle**") @Const @ByPtrPtr PointerPointer out_array);
public static native int MXListFunctions(@Cast("mx_uint*") int[] out_size,
                              @Const @ByPtrPtr PointerPointer out_array);
/**
 * \brief get the function handle by name
 * @param name the name of the function
 * @param out the corresponding function handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXGetFunction(@Cast("const char*") BytePointer name,
                            @Const PointerPointer out);
public static native int MXGetFunction(String name,
                            @Const @Cast("FunctionHandle*") @ByPtrPtr FunctionHandle out);
/**
 * \brief Get the information of the function handle.
 * @param fun The function handle.
 * @param name The returned name of the function.
 * @param description The returned description of the function.
 * @param num_args Number of arguments.
 * @param arg_names Name of the arguments.
 * @param arg_type_infos Type information about the arguments.
 * @param arg_descriptions Description information about the arguments.
 * @param return_type Return type of the function.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXFuncGetInfo(@Const FunctionHandle fun,
                            @Cast("const char**") PointerPointer name,
                            @Cast("const char**") PointerPointer description,
                            @Cast("mx_uint*") IntPointer num_args,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                            @Cast("const char**") PointerPointer return_type/*=NULL*/);
public static native int MXFuncGetInfo(@Const FunctionHandle fun,
                            @Cast("const char**") @ByPtrPtr BytePointer name,
                            @Cast("const char**") @ByPtrPtr BytePointer description,
                            @Cast("mx_uint*") IntPointer num_args,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions);
public static native int MXFuncGetInfo(@Const FunctionHandle fun,
                            @Cast("const char**") @ByPtrPtr BytePointer name,
                            @Cast("const char**") @ByPtrPtr BytePointer description,
                            @Cast("mx_uint*") IntPointer num_args,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                            @Cast("const char**") @ByPtrPtr BytePointer return_type/*=NULL*/);
public static native int MXFuncGetInfo(@Const FunctionHandle fun,
                            @Cast("const char**") @ByPtrPtr ByteBuffer name,
                            @Cast("const char**") @ByPtrPtr ByteBuffer description,
                            @Cast("mx_uint*") IntBuffer num_args,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                            @Cast("const char**") @ByPtrPtr ByteBuffer return_type/*=NULL*/);
public static native int MXFuncGetInfo(@Const FunctionHandle fun,
                            @Cast("const char**") @ByPtrPtr ByteBuffer name,
                            @Cast("const char**") @ByPtrPtr ByteBuffer description,
                            @Cast("mx_uint*") IntBuffer num_args,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions);
public static native int MXFuncGetInfo(@Const FunctionHandle fun,
                            @Cast("const char**") @ByPtrPtr byte[] name,
                            @Cast("const char**") @ByPtrPtr byte[] description,
                            @Cast("mx_uint*") int[] num_args,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                            @Cast("const char**") @ByPtrPtr byte[] return_type/*=NULL*/);
public static native int MXFuncGetInfo(@Const FunctionHandle fun,
                            @Cast("const char**") @ByPtrPtr byte[] name,
                            @Cast("const char**") @ByPtrPtr byte[] description,
                            @Cast("mx_uint*") int[] num_args,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                            @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions);
/**
 * \brief get the argument requirements of the function
 * @param fun input function handle
 * @param num_use_vars how many NDArrays to be passed in as used_vars
 * @param num_scalars scalar variable is needed
 * @param num_mutate_vars how many NDArrays to be passed in as mutate_vars
 * @param type_mask the type mask of this function
 * @return 0 when success, -1 when failure happens
 * @see MXFuncInvoke
 */
public static native int MXFuncDescribe(@Const FunctionHandle fun,
                             @Cast("mx_uint*") IntPointer num_use_vars,
                             @Cast("mx_uint*") IntPointer num_scalars,
                             @Cast("mx_uint*") IntPointer num_mutate_vars,
                             IntPointer type_mask);
public static native int MXFuncDescribe(@Const FunctionHandle fun,
                             @Cast("mx_uint*") IntBuffer num_use_vars,
                             @Cast("mx_uint*") IntBuffer num_scalars,
                             @Cast("mx_uint*") IntBuffer num_mutate_vars,
                             IntBuffer type_mask);
public static native int MXFuncDescribe(@Const FunctionHandle fun,
                             @Cast("mx_uint*") int[] num_use_vars,
                             @Cast("mx_uint*") int[] num_scalars,
                             @Cast("mx_uint*") int[] num_mutate_vars,
                             int[] type_mask);
/**
 * \brief invoke a function, the array size of passed in arguments
 *   must match the values in the
 * @param fun the function
 * @param use_vars the normal arguments passed to function
 * @param scalar_args the scalar qarguments
 * @param mutate_vars the mutate arguments
 * @return 0 when success, -1 when failure happens
 * @see MXFuncDescribeArgs
 */
public static native int MXFuncInvoke(@Const FunctionHandle fun,
                           PointerPointer use_vars,
                           @Cast("mx_float*") FloatPointer scalar_args,
                           PointerPointer mutate_vars);
public static native int MXFuncInvoke(@Const FunctionHandle fun,
                           @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle use_vars,
                           @Cast("mx_float*") FloatBuffer scalar_args,
                           @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle mutate_vars);
public static native int MXFuncInvoke(@Const FunctionHandle fun,
                           PointerPointer use_vars,
                           @Cast("mx_float*") float[] scalar_args,
                           PointerPointer mutate_vars);
public static native int MXFuncInvoke(@Const FunctionHandle fun,
                           @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle use_vars,
                           @Cast("mx_float*") FloatPointer scalar_args,
                           @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle mutate_vars);
public static native int MXFuncInvoke(@Const FunctionHandle fun,
                           PointerPointer use_vars,
                           @Cast("mx_float*") FloatBuffer scalar_args,
                           PointerPointer mutate_vars);
public static native int MXFuncInvoke(@Const FunctionHandle fun,
                           @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle use_vars,
                           @Cast("mx_float*") float[] scalar_args,
                           @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle mutate_vars);
/**
 * \brief invoke a function, the array size of passed in arguments
 *   must match the values in the
 * @param fun the function
 * @param use_vars the normal arguments passed to function
 * @param scalar_args the scalar qarguments
 * @param mutate_vars the mutate arguments
 * @param num_params number of keyword parameters
 * @param param_keys keys for keyword parameters
 * @param param_vals values for keyword parameters
 * @return 0 when success, -1 when failure happens
 * @see MXFuncDescribeArgs
 */
public static native int MXFuncInvokeEx(@Const FunctionHandle fun,
                             PointerPointer use_vars,
                             @Cast("mx_float*") FloatPointer scalar_args,
                             PointerPointer mutate_vars,
                             int num_params,
                             @Cast("char**") PointerPointer param_keys,
                             @Cast("char**") PointerPointer param_vals);
public static native int MXFuncInvokeEx(@Const FunctionHandle fun,
                             PointerPointer use_vars,
                             @Cast("mx_float*") FloatPointer scalar_args,
                             PointerPointer mutate_vars,
                             int num_params,
                             @Cast("char**") @ByPtrPtr BytePointer param_keys,
                             @Cast("char**") @ByPtrPtr BytePointer param_vals);
public static native int MXFuncInvokeEx(@Const FunctionHandle fun,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle use_vars,
                             @Cast("mx_float*") FloatBuffer scalar_args,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle mutate_vars,
                             int num_params,
                             @Cast("char**") @ByPtrPtr ByteBuffer param_keys,
                             @Cast("char**") @ByPtrPtr ByteBuffer param_vals);
public static native int MXFuncInvokeEx(@Const FunctionHandle fun,
                             PointerPointer use_vars,
                             @Cast("mx_float*") float[] scalar_args,
                             PointerPointer mutate_vars,
                             int num_params,
                             @Cast("char**") @ByPtrPtr byte[] param_keys,
                             @Cast("char**") @ByPtrPtr byte[] param_vals);
public static native int MXFuncInvokeEx(@Const FunctionHandle fun,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle use_vars,
                             @Cast("mx_float*") FloatPointer scalar_args,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle mutate_vars,
                             int num_params,
                             @Cast("char**") @ByPtrPtr BytePointer param_keys,
                             @Cast("char**") @ByPtrPtr BytePointer param_vals);
public static native int MXFuncInvokeEx(@Const FunctionHandle fun,
                             PointerPointer use_vars,
                             @Cast("mx_float*") FloatBuffer scalar_args,
                             PointerPointer mutate_vars,
                             int num_params,
                             @Cast("char**") @ByPtrPtr ByteBuffer param_keys,
                             @Cast("char**") @ByPtrPtr ByteBuffer param_vals);
public static native int MXFuncInvokeEx(@Const FunctionHandle fun,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle use_vars,
                             @Cast("mx_float*") float[] scalar_args,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle mutate_vars,
                             int num_params,
                             @Cast("char**") @ByPtrPtr byte[] param_keys,
                             @Cast("char**") @ByPtrPtr byte[] param_vals);
/**
 * \brief invoke a nnvm op and imperative function
 * @param creator the op
 * @param num_inputs number of input NDArrays
 * @param inputs input NDArrays
 * @param num_outputs number of output NDArrays
 * @param outputs output NDArrays
 * @param num_params number of keyword parameters
 * @param param_keys keys for keyword parameters
 * @param param_vals values for keyword parameters
 * @return 0 when success, -1 when failure happens
 */
public static native int MXImperativeInvoke(AtomicSymbolCreator creator,
                                 int num_inputs,
                                 PointerPointer inputs,
                                 IntPointer num_outputs,
                                 @ByPtrPtr PointerPointer outputs,
                                 int num_params,
                                 @Cast("const char**") PointerPointer param_keys,
                                 @Cast("const char**") PointerPointer param_vals);
public static native int MXImperativeInvoke(AtomicSymbolCreator creator,
                                 int num_inputs,
                                 PointerPointer inputs,
                                 IntPointer num_outputs,
                                 @ByPtrPtr PointerPointer outputs,
                                 int num_params,
                                 @Cast("const char**") @ByPtrPtr BytePointer param_keys,
                                 @Cast("const char**") @ByPtrPtr BytePointer param_vals);
public static native int MXImperativeInvoke(AtomicSymbolCreator creator,
                                 int num_inputs,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                 IntBuffer num_outputs,
                                 @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                 int num_params,
                                 @Cast("const char**") @ByPtrPtr ByteBuffer param_keys,
                                 @Cast("const char**") @ByPtrPtr ByteBuffer param_vals);
public static native int MXImperativeInvoke(AtomicSymbolCreator creator,
                                 int num_inputs,
                                 PointerPointer inputs,
                                 int[] num_outputs,
                                 @ByPtrPtr PointerPointer outputs,
                                 int num_params,
                                 @Cast("const char**") @ByPtrPtr byte[] param_keys,
                                 @Cast("const char**") @ByPtrPtr byte[] param_vals);
public static native int MXImperativeInvoke(AtomicSymbolCreator creator,
                                 int num_inputs,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                 IntPointer num_outputs,
                                 @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                 int num_params,
                                 @Cast("const char**") @ByPtrPtr BytePointer param_keys,
                                 @Cast("const char**") @ByPtrPtr BytePointer param_vals);
public static native int MXImperativeInvoke(AtomicSymbolCreator creator,
                                 int num_inputs,
                                 PointerPointer inputs,
                                 IntBuffer num_outputs,
                                 @ByPtrPtr PointerPointer outputs,
                                 int num_params,
                                 @Cast("const char**") @ByPtrPtr ByteBuffer param_keys,
                                 @Cast("const char**") @ByPtrPtr ByteBuffer param_vals);
public static native int MXImperativeInvoke(AtomicSymbolCreator creator,
                                 int num_inputs,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                 int[] num_outputs,
                                 @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                 int num_params,
                                 @Cast("const char**") @ByPtrPtr byte[] param_keys,
                                 @Cast("const char**") @ByPtrPtr byte[] param_vals);
/**
 * \brief invoke a nnvm op and imperative function
 * @param creator the op
 * @param num_inputs number of input NDArrays
 * @param inputs input NDArrays
 * @param num_outputs number of output NDArrays
 * @param outputs output NDArrays
 * @param num_params number of keyword parameters
 * @param param_keys keys for keyword parameters
 * @param param_vals values for keyword parameters
 * @param out_stypes output ndarrays' stypes
 * @return 0 when success, -1 when failure happens
 */
public static native int MXImperativeInvokeEx(AtomicSymbolCreator creator,
                                   int num_inputs,
                                   PointerPointer inputs,
                                   IntPointer num_outputs,
                                   @ByPtrPtr PointerPointer outputs,
                                   int num_params,
                                   @Cast("const char**") PointerPointer param_keys,
                                   @Cast("const char**") PointerPointer param_vals,
                                   @Cast("const int**") PointerPointer out_stypes);
public static native int MXImperativeInvokeEx(AtomicSymbolCreator creator,
                                   int num_inputs,
                                   PointerPointer inputs,
                                   IntPointer num_outputs,
                                   @ByPtrPtr PointerPointer outputs,
                                   int num_params,
                                   @Cast("const char**") @ByPtrPtr BytePointer param_keys,
                                   @Cast("const char**") @ByPtrPtr BytePointer param_vals,
                                   @Const @ByPtrPtr IntPointer out_stypes);
public static native int MXImperativeInvokeEx(AtomicSymbolCreator creator,
                                   int num_inputs,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                   IntBuffer num_outputs,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                   int num_params,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer param_keys,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer param_vals,
                                   @Const @ByPtrPtr IntBuffer out_stypes);
public static native int MXImperativeInvokeEx(AtomicSymbolCreator creator,
                                   int num_inputs,
                                   PointerPointer inputs,
                                   int[] num_outputs,
                                   @ByPtrPtr PointerPointer outputs,
                                   int num_params,
                                   @Cast("const char**") @ByPtrPtr byte[] param_keys,
                                   @Cast("const char**") @ByPtrPtr byte[] param_vals,
                                   @Const @ByPtrPtr int[] out_stypes);
public static native int MXImperativeInvokeEx(AtomicSymbolCreator creator,
                                   int num_inputs,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                   IntPointer num_outputs,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                   int num_params,
                                   @Cast("const char**") @ByPtrPtr BytePointer param_keys,
                                   @Cast("const char**") @ByPtrPtr BytePointer param_vals,
                                   @Const @ByPtrPtr IntPointer out_stypes);
public static native int MXImperativeInvokeEx(AtomicSymbolCreator creator,
                                   int num_inputs,
                                   PointerPointer inputs,
                                   IntBuffer num_outputs,
                                   @ByPtrPtr PointerPointer outputs,
                                   int num_params,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer param_keys,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer param_vals,
                                   @Const @ByPtrPtr IntBuffer out_stypes);
public static native int MXImperativeInvokeEx(AtomicSymbolCreator creator,
                                   int num_inputs,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                   int[] num_outputs,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                   int num_params,
                                   @Cast("const char**") @ByPtrPtr byte[] param_keys,
                                   @Cast("const char**") @ByPtrPtr byte[] param_vals,
                                   @Const @ByPtrPtr int[] out_stypes);
/**
 * \brief set whether to record operator for autograd
 * @param is_recording 1 when recording, 0 when not recording.
 * @param prev returns the previous status before this set.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXAutogradSetIsRecording(int is_recording, IntPointer prev);
public static native int MXAutogradSetIsRecording(int is_recording, IntBuffer prev);
public static native int MXAutogradSetIsRecording(int is_recording, int[] prev);
/**
 * \brief set whether to record operator for autograd
 * @param is_training 1 when training, 0 when testing
 * @param prev returns the previous status before this set.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXAutogradSetIsTraining(int is_training, IntPointer prev);
public static native int MXAutogradSetIsTraining(int is_training, IntBuffer prev);
public static native int MXAutogradSetIsTraining(int is_training, int[] prev);
/**
 * \brief get whether autograd recording is on
 * @param curr returns the current status.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXAutogradIsRecording(@Cast("bool*") BoolPointer curr);
public static native int MXAutogradIsRecording(@Cast("bool*") boolean[] curr);
/**
 * \brief get whether training mode is on
 * @param curr returns the current status.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXAutogradIsTraining(@Cast("bool*") BoolPointer curr);
public static native int MXAutogradIsTraining(@Cast("bool*") boolean[] curr);
/**
 * \brief mark NDArrays as variables to compute gradient for autograd
 * @param num_var number of variable NDArrays
 * @param var_handles variable NDArrays
 * @return 0 when success, -1 when failure happens
 */
public static native int MXAutogradMarkVariables(@Cast("mx_uint") int num_var,
                                      PointerPointer var_handles,
                                      @Cast("mx_uint*") IntPointer reqs_array,
                                      PointerPointer grad_handles);
public static native int MXAutogradMarkVariables(@Cast("mx_uint") int num_var,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle var_handles,
                                      @Cast("mx_uint*") IntBuffer reqs_array,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle grad_handles);
public static native int MXAutogradMarkVariables(@Cast("mx_uint") int num_var,
                                      PointerPointer var_handles,
                                      @Cast("mx_uint*") int[] reqs_array,
                                      PointerPointer grad_handles);
public static native int MXAutogradMarkVariables(@Cast("mx_uint") int num_var,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle var_handles,
                                      @Cast("mx_uint*") IntPointer reqs_array,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle grad_handles);
public static native int MXAutogradMarkVariables(@Cast("mx_uint") int num_var,
                                      PointerPointer var_handles,
                                      @Cast("mx_uint*") IntBuffer reqs_array,
                                      PointerPointer grad_handles);
public static native int MXAutogradMarkVariables(@Cast("mx_uint") int num_var,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle var_handles,
                                      @Cast("mx_uint*") int[] reqs_array,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle grad_handles);
/**
 * \brief compute the gradient of outputs w.r.t variabels
 * @param num_output number of output NDArray
 * @param output_handles output NDArrays
 * @return 0 when success, -1 when failure happens
 */
public static native int MXAutogradComputeGradient(@Cast("mx_uint") int num_output,
                                        PointerPointer output_handles);
public static native int MXAutogradComputeGradient(@Cast("mx_uint") int num_output,
                                        @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle output_handles);
/**
 * \brief compute the gradient of outputs w.r.t variabels
 * @param num_output number of output NDArray
 * @param output_handles output NDArrays
 * @param ograd_handles head gradient for NDArrays
 * @param retain_graph whether to keep the graph after backward
 * @return 0 when success, -1 when failure happens
 */
public static native int MXAutogradBackward(@Cast("mx_uint") int num_output,
                                 PointerPointer output_handles,
                                 PointerPointer ograd_handles,
                                 int retain_graph);
public static native int MXAutogradBackward(@Cast("mx_uint") int num_output,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle output_handles,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle ograd_handles,
                                 int retain_graph);
/**
 * \brief compute the gradient of outputs w.r.t variabels
 * @param num_output number of output NDArray
 * @param output_handles output NDArrays
 * @param ograd_handles head gradient for NDArrays
 * @param num_variables number of variables
 * @param
 * @param retain_graph whether to keep the graph after backward
 * @param is_train whether to do backward for training or inference
 * @return 0 when success, -1 when failure happens
 */
public static native int MXAutogradBackwardEx(@Cast("mx_uint") int num_output,
                                   PointerPointer output_handles,
                                   PointerPointer ograd_handles,
                                   @Cast("mx_uint") int num_variables,
                                   PointerPointer var_handles,
                                   int retain_graph,
                                   int create_graph,
                                   int is_train,
                                   @ByPtrPtr PointerPointer grad_handles,
                                   @Cast("int**") PointerPointer grad_stypes);
public static native int MXAutogradBackwardEx(@Cast("mx_uint") int num_output,
                                   PointerPointer output_handles,
                                   PointerPointer ograd_handles,
                                   @Cast("mx_uint") int num_variables,
                                   PointerPointer var_handles,
                                   int retain_graph,
                                   int create_graph,
                                   int is_train,
                                   @ByPtrPtr PointerPointer grad_handles,
                                   @ByPtrPtr IntPointer grad_stypes);
public static native int MXAutogradBackwardEx(@Cast("mx_uint") int num_output,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle output_handles,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle ograd_handles,
                                   @Cast("mx_uint") int num_variables,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle var_handles,
                                   int retain_graph,
                                   int create_graph,
                                   int is_train,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer grad_handles,
                                   @ByPtrPtr IntBuffer grad_stypes);
public static native int MXAutogradBackwardEx(@Cast("mx_uint") int num_output,
                                   PointerPointer output_handles,
                                   PointerPointer ograd_handles,
                                   @Cast("mx_uint") int num_variables,
                                   PointerPointer var_handles,
                                   int retain_graph,
                                   int create_graph,
                                   int is_train,
                                   @ByPtrPtr PointerPointer grad_handles,
                                   @ByPtrPtr int[] grad_stypes);
public static native int MXAutogradBackwardEx(@Cast("mx_uint") int num_output,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle output_handles,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle ograd_handles,
                                   @Cast("mx_uint") int num_variables,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle var_handles,
                                   int retain_graph,
                                   int create_graph,
                                   int is_train,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer grad_handles,
                                   @ByPtrPtr IntPointer grad_stypes);
public static native int MXAutogradBackwardEx(@Cast("mx_uint") int num_output,
                                   PointerPointer output_handles,
                                   PointerPointer ograd_handles,
                                   @Cast("mx_uint") int num_variables,
                                   PointerPointer var_handles,
                                   int retain_graph,
                                   int create_graph,
                                   int is_train,
                                   @ByPtrPtr PointerPointer grad_handles,
                                   @ByPtrPtr IntBuffer grad_stypes);
public static native int MXAutogradBackwardEx(@Cast("mx_uint") int num_output,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle output_handles,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle ograd_handles,
                                   @Cast("mx_uint") int num_variables,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle var_handles,
                                   int retain_graph,
                                   int create_graph,
                                   int is_train,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer grad_handles,
                                   @ByPtrPtr int[] grad_stypes);
/*
 * \brief get the graph constructed by autograd.
 * \param handle ndarray handle
 * \param out output symbol handle
 */
public static native int MXAutogradGetSymbol(NDArrayHandle handle, PointerPointer out);
public static native int MXAutogradGetSymbol(NDArrayHandle handle, @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief create cached operator
 */
public static native int MXCreateCachedOp(SymbolHandle handle, @ByPtrPtr CachedOpHandle out);
/**
 * \brief create cached operator
 */
public static native int MXCreateCachedOpEx(SymbolHandle handle,
                                 int num_flags,
                                 @Cast("const char**") PointerPointer keys,
                                 @Cast("const char**") PointerPointer vals,
                                 @ByPtrPtr CachedOpHandle out);
public static native int MXCreateCachedOpEx(SymbolHandle handle,
                                 int num_flags,
                                 @Cast("const char**") @ByPtrPtr BytePointer keys,
                                 @Cast("const char**") @ByPtrPtr BytePointer vals,
                                 @ByPtrPtr CachedOpHandle out);
public static native int MXCreateCachedOpEx(SymbolHandle handle,
                                 int num_flags,
                                 @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                 @Cast("const char**") @ByPtrPtr ByteBuffer vals,
                                 @ByPtrPtr CachedOpHandle out);
public static native int MXCreateCachedOpEx(SymbolHandle handle,
                                 int num_flags,
                                 @Cast("const char**") @ByPtrPtr byte[] keys,
                                 @Cast("const char**") @ByPtrPtr byte[] vals,
                                 @ByPtrPtr CachedOpHandle out);
/**
 * \brief free cached operator
 */
public static native int MXFreeCachedOp(CachedOpHandle handle);
/**
 * \brief invoke cached operator
 */
public static native int MXInvokeCachedOp(CachedOpHandle handle,
                               int num_inputs,
                               PointerPointer inputs,
                               IntPointer num_outputs,
                               @ByPtrPtr PointerPointer outputs);
public static native int MXInvokeCachedOp(CachedOpHandle handle,
                               int num_inputs,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                               IntBuffer num_outputs,
                               @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs);
public static native int MXInvokeCachedOp(CachedOpHandle handle,
                               int num_inputs,
                               PointerPointer inputs,
                               int[] num_outputs,
                               @ByPtrPtr PointerPointer outputs);
public static native int MXInvokeCachedOp(CachedOpHandle handle,
                               int num_inputs,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                               IntPointer num_outputs,
                               @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs);
public static native int MXInvokeCachedOp(CachedOpHandle handle,
                               int num_inputs,
                               PointerPointer inputs,
                               IntBuffer num_outputs,
                               @ByPtrPtr PointerPointer outputs);
public static native int MXInvokeCachedOp(CachedOpHandle handle,
                               int num_inputs,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                               int[] num_outputs,
                               @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs);
/**
 * \brief invoke a cached op
 * @param handle the handle to the cached op
 * @param num_inputs number of input NDArrays
 * @param inputs input NDArrays
 * @param num_outputs number of output NDArrays
 * @param outputs output NDArrays
 * @param out_stypes output ndarrays' stypes
 * @return 0 when success, -1 when failure happens
 */
public static native int MXInvokeCachedOpEx(CachedOpHandle handle,
                                 int num_inputs,
                                 PointerPointer inputs,
                                 IntPointer num_outputs,
                                 @ByPtrPtr PointerPointer outputs,
                                 @Cast("const int**") PointerPointer out_stypes);
public static native int MXInvokeCachedOpEx(CachedOpHandle handle,
                                 int num_inputs,
                                 PointerPointer inputs,
                                 IntPointer num_outputs,
                                 @ByPtrPtr PointerPointer outputs,
                                 @Const @ByPtrPtr IntPointer out_stypes);
public static native int MXInvokeCachedOpEx(CachedOpHandle handle,
                                 int num_inputs,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                 IntBuffer num_outputs,
                                 @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                 @Const @ByPtrPtr IntBuffer out_stypes);
public static native int MXInvokeCachedOpEx(CachedOpHandle handle,
                                 int num_inputs,
                                 PointerPointer inputs,
                                 int[] num_outputs,
                                 @ByPtrPtr PointerPointer outputs,
                                 @Const @ByPtrPtr int[] out_stypes);
public static native int MXInvokeCachedOpEx(CachedOpHandle handle,
                                 int num_inputs,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                 IntPointer num_outputs,
                                 @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                 @Const @ByPtrPtr IntPointer out_stypes);
public static native int MXInvokeCachedOpEx(CachedOpHandle handle,
                                 int num_inputs,
                                 PointerPointer inputs,
                                 IntBuffer num_outputs,
                                 @ByPtrPtr PointerPointer outputs,
                                 @Const @ByPtrPtr IntBuffer out_stypes);
public static native int MXInvokeCachedOpEx(CachedOpHandle handle,
                                 int num_inputs,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                 int[] num_outputs,
                                 @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer outputs,
                                 @Const @ByPtrPtr int[] out_stypes);
/**
 * \brief invoke cached operator
 */
//--------------------------------------------
// Part 3: symbolic configuration generation
//--------------------------------------------
/**
 * \brief list all the available operator names, include entries.
 * @param out_size the size of returned array
 * @param out_array the output operator name array.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXListAllOpNames(@Cast("mx_uint*") IntPointer out_size,
                               @Cast("const char***") @ByPtrPtr PointerPointer out_array);
public static native int MXListAllOpNames(@Cast("mx_uint*") IntBuffer out_size,
                               @Cast("const char***") @ByPtrPtr PointerPointer out_array);
public static native int MXListAllOpNames(@Cast("mx_uint*") int[] out_size,
                               @Cast("const char***") @ByPtrPtr PointerPointer out_array);
/**
 * \brief list all the available AtomicSymbolEntry
 * @param out_size the size of returned array
 * @param out_array the output AtomicSymbolCreator array
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolListAtomicSymbolCreators(@Cast("mx_uint*") IntPointer out_size,
                                               @ByPtrPtr PointerPointer out_array);
public static native int MXSymbolListAtomicSymbolCreators(@Cast("mx_uint*") IntBuffer out_size,
                                               @Cast("AtomicSymbolCreator**") @ByPtrPtr PointerPointer out_array);
public static native int MXSymbolListAtomicSymbolCreators(@Cast("mx_uint*") int[] out_size,
                                               @ByPtrPtr PointerPointer out_array);

/**
 * \brief Get the name of an atomic symbol.
 * @param creator the AtomicSymbolCreator.
 * @param name The returned name of the creator.
 */
public static native int MXSymbolGetAtomicSymbolName(AtomicSymbolCreator creator,
                                          @Cast("const char**") PointerPointer name);
public static native int MXSymbolGetAtomicSymbolName(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr BytePointer name);
public static native int MXSymbolGetAtomicSymbolName(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr ByteBuffer name);
public static native int MXSymbolGetAtomicSymbolName(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr byte[] name);

/**
 * \brief Get the input symbols of the graph.
 * @param sym The graph.
 * @param inputs The input symbols of the graph.
 * @param input_size the number of input symbols returned.
 */
public static native int MXSymbolGetInputSymbols(SymbolHandle sym, @ByPtrPtr PointerPointer inputs,
                                      IntPointer input_size);
public static native int MXSymbolGetInputSymbols(SymbolHandle sym, @Cast("SymbolHandle**") @ByPtrPtr PointerPointer inputs,
                                      IntBuffer input_size);
public static native int MXSymbolGetInputSymbols(SymbolHandle sym, @ByPtrPtr PointerPointer inputs,
                                      int[] input_size);

/**
 * \brief Cut a subgraph whose nodes are marked with a subgraph attribute.
 * The input graph will be modified. A variable node will be created for each
 * edge that connects to nodes outside the subgraph. The outside nodes that
 * connect to the subgraph will be returned.
 * @param sym The graph.
 * @param inputs The nodes that connect to the subgraph.
 * @param input_size The number of such nodes.
 */
public static native int MXSymbolCutSubgraph(SymbolHandle sym, @ByPtrPtr PointerPointer inputs,
                                  IntPointer input_size);
public static native int MXSymbolCutSubgraph(SymbolHandle sym, @Cast("SymbolHandle**") @ByPtrPtr PointerPointer inputs,
                                  IntBuffer input_size);
public static native int MXSymbolCutSubgraph(SymbolHandle sym, @ByPtrPtr PointerPointer inputs,
                                  int[] input_size);

/**
 * \brief Get the detailed information about atomic symbol.
 * @param creator the AtomicSymbolCreator.
 * @param name The returned name of the creator.
 * @param description The returned description of the symbol.
 * @param num_args Number of arguments.
 * @param arg_names Name of the arguments.
 * @param arg_type_infos Type informations about the arguments.
 * @param arg_descriptions Description information about the arguments.
 * @param key_var_num_args The keyword argument for specifying variable number of arguments.
 *            When this parameter has non-zero length, the function allows variable number
 *            of positional arguments, and will need the caller to pass it in in
 *            MXSymbolCreateAtomicSymbol,
 *            With key = key_var_num_args, and value = number of positional arguments.
 * @param return_type Return type of the function, can be Symbol or Symbol[]
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolGetAtomicSymbolInfo(AtomicSymbolCreator creator,
                                          @Cast("const char**") PointerPointer name,
                                          @Cast("const char**") PointerPointer description,
                                          @Cast("mx_uint*") IntPointer num_args,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                                          @Cast("const char**") PointerPointer key_var_num_args,
                                          @Cast("const char**") PointerPointer return_type/*=NULL*/);
public static native int MXSymbolGetAtomicSymbolInfo(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr BytePointer name,
                                          @Cast("const char**") @ByPtrPtr BytePointer description,
                                          @Cast("mx_uint*") IntPointer num_args,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                                          @Cast("const char**") @ByPtrPtr BytePointer key_var_num_args);
public static native int MXSymbolGetAtomicSymbolInfo(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr BytePointer name,
                                          @Cast("const char**") @ByPtrPtr BytePointer description,
                                          @Cast("mx_uint*") IntPointer num_args,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                                          @Cast("const char**") @ByPtrPtr BytePointer key_var_num_args,
                                          @Cast("const char**") @ByPtrPtr BytePointer return_type/*=NULL*/);
public static native int MXSymbolGetAtomicSymbolInfo(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr ByteBuffer name,
                                          @Cast("const char**") @ByPtrPtr ByteBuffer description,
                                          @Cast("mx_uint*") IntBuffer num_args,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                                          @Cast("const char**") @ByPtrPtr ByteBuffer key_var_num_args,
                                          @Cast("const char**") @ByPtrPtr ByteBuffer return_type/*=NULL*/);
public static native int MXSymbolGetAtomicSymbolInfo(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr ByteBuffer name,
                                          @Cast("const char**") @ByPtrPtr ByteBuffer description,
                                          @Cast("mx_uint*") IntBuffer num_args,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                                          @Cast("const char**") @ByPtrPtr ByteBuffer key_var_num_args);
public static native int MXSymbolGetAtomicSymbolInfo(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr byte[] name,
                                          @Cast("const char**") @ByPtrPtr byte[] description,
                                          @Cast("mx_uint*") int[] num_args,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                                          @Cast("const char**") @ByPtrPtr byte[] key_var_num_args,
                                          @Cast("const char**") @ByPtrPtr byte[] return_type/*=NULL*/);
public static native int MXSymbolGetAtomicSymbolInfo(AtomicSymbolCreator creator,
                                          @Cast("const char**") @ByPtrPtr byte[] name,
                                          @Cast("const char**") @ByPtrPtr byte[] description,
                                          @Cast("mx_uint*") int[] num_args,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                          @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions,
                                          @Cast("const char**") @ByPtrPtr byte[] key_var_num_args);
/**
 * \brief Create an AtomicSymbol.
 * @param creator the AtomicSymbolCreator
 * @param num_param the number of parameters
 * @param keys the keys to the params
 * @param vals the vals of the params
 * @param out pointer to the created symbol handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolCreateAtomicSymbol(AtomicSymbolCreator creator,
                                         @Cast("mx_uint") int num_param,
                                         @Cast("const char**") PointerPointer keys,
                                         @Cast("const char**") PointerPointer vals,
                                         PointerPointer out);
public static native int MXSymbolCreateAtomicSymbol(AtomicSymbolCreator creator,
                                         @Cast("mx_uint") int num_param,
                                         @Cast("const char**") @ByPtrPtr BytePointer keys,
                                         @Cast("const char**") @ByPtrPtr BytePointer vals,
                                         PointerPointer out);
public static native int MXSymbolCreateAtomicSymbol(AtomicSymbolCreator creator,
                                         @Cast("mx_uint") int num_param,
                                         @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                         @Cast("const char**") @ByPtrPtr ByteBuffer vals,
                                         @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
public static native int MXSymbolCreateAtomicSymbol(AtomicSymbolCreator creator,
                                         @Cast("mx_uint") int num_param,
                                         @Cast("const char**") @ByPtrPtr byte[] keys,
                                         @Cast("const char**") @ByPtrPtr byte[] vals,
                                         PointerPointer out);
public static native int MXSymbolCreateAtomicSymbol(AtomicSymbolCreator creator,
                                         @Cast("mx_uint") int num_param,
                                         @Cast("const char**") @ByPtrPtr BytePointer keys,
                                         @Cast("const char**") @ByPtrPtr BytePointer vals,
                                         @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
public static native int MXSymbolCreateAtomicSymbol(AtomicSymbolCreator creator,
                                         @Cast("mx_uint") int num_param,
                                         @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                         @Cast("const char**") @ByPtrPtr ByteBuffer vals,
                                         PointerPointer out);
public static native int MXSymbolCreateAtomicSymbol(AtomicSymbolCreator creator,
                                         @Cast("mx_uint") int num_param,
                                         @Cast("const char**") @ByPtrPtr byte[] keys,
                                         @Cast("const char**") @ByPtrPtr byte[] vals,
                                         @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief Create a Variable Symbol.
 * @param name name of the variable
 * @param out pointer to the created symbol handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolCreateVariable(@Cast("const char*") BytePointer name, PointerPointer out);
public static native int MXSymbolCreateVariable(String name, @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief Create a Symbol by grouping list of symbols together
 * @param num_symbols number of symbols to be grouped
 * @param symbols array of symbol handles
 * @param out pointer to the created symbol handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolCreateGroup(@Cast("mx_uint") int num_symbols,
                                  PointerPointer symbols,
                                  PointerPointer out);
public static native int MXSymbolCreateGroup(@Cast("mx_uint") int num_symbols,
                                  @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle symbols,
                                  @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief Load a symbol from a json file.
 * @param fname the file name.
 * @param out the output symbol.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolCreateFromFile(@Cast("const char*") BytePointer fname, PointerPointer out);
public static native int MXSymbolCreateFromFile(String fname, @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief Load a symbol from a json string.
 * @param json the json string.
 * @param out the output symbol.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolCreateFromJSON(@Cast("const char*") BytePointer json, PointerPointer out);
public static native int MXSymbolCreateFromJSON(String json, @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief Save a symbol into a json file.
 * @param symbol the input symbol.
 * @param fname the file name.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolSaveToFile(SymbolHandle symbol, @Cast("const char*") BytePointer fname);
public static native int MXSymbolSaveToFile(SymbolHandle symbol, String fname);
/**
 * \brief Save a symbol into a json string
 * @param symbol the input symbol.
 * @param out_json output json string.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolSaveToJSON(SymbolHandle symbol, @Cast("const char**") PointerPointer out_json);
public static native int MXSymbolSaveToJSON(SymbolHandle symbol, @Cast("const char**") @ByPtrPtr BytePointer out_json);
public static native int MXSymbolSaveToJSON(SymbolHandle symbol, @Cast("const char**") @ByPtrPtr ByteBuffer out_json);
public static native int MXSymbolSaveToJSON(SymbolHandle symbol, @Cast("const char**") @ByPtrPtr byte[] out_json);
/**
 * \brief Free the symbol handle.
 * @param symbol the symbol
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolFree(SymbolHandle symbol);
/**
 * \brief Copy the symbol to another handle
 * @param symbol the source symbol
 * @param out used to hold the result of copy
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolCopy(SymbolHandle symbol, PointerPointer out);
public static native int MXSymbolCopy(SymbolHandle symbol, @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief Print the content of symbol, used for debug.
 * @param symbol the symbol
 * @param out_str pointer to hold the output string of the printing.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolPrint(SymbolHandle symbol, @Cast("const char**") PointerPointer out_str);
public static native int MXSymbolPrint(SymbolHandle symbol, @Cast("const char**") @ByPtrPtr BytePointer out_str);
public static native int MXSymbolPrint(SymbolHandle symbol, @Cast("const char**") @ByPtrPtr ByteBuffer out_str);
public static native int MXSymbolPrint(SymbolHandle symbol, @Cast("const char**") @ByPtrPtr byte[] out_str);
/**
 * \brief Get string name from symbol
 * @param symbol the source symbol
 * @param out The result name.
 * @param success Whether the result is contained in out.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolGetName(SymbolHandle symbol,
                              @Cast("const char**") PointerPointer out,
                              IntPointer success);
public static native int MXSymbolGetName(SymbolHandle symbol,
                              @Cast("const char**") @ByPtrPtr BytePointer out,
                              IntPointer success);
public static native int MXSymbolGetName(SymbolHandle symbol,
                              @Cast("const char**") @ByPtrPtr ByteBuffer out,
                              IntBuffer success);
public static native int MXSymbolGetName(SymbolHandle symbol,
                              @Cast("const char**") @ByPtrPtr byte[] out,
                              int[] success);
/**
 * \brief Get string attribute from symbol
 * @param symbol the source symbol
 * @param key The key of the symbol.
 * @param out The result attribute, can be NULL if the attribute do not exist.
 * @param success Whether the result is contained in out.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolGetAttr(SymbolHandle symbol,
                              @Cast("const char*") BytePointer key,
                              @Cast("const char**") PointerPointer out,
                              IntPointer success);
public static native int MXSymbolGetAttr(SymbolHandle symbol,
                              @Cast("const char*") BytePointer key,
                              @Cast("const char**") @ByPtrPtr BytePointer out,
                              IntPointer success);
public static native int MXSymbolGetAttr(SymbolHandle symbol,
                              String key,
                              @Cast("const char**") @ByPtrPtr ByteBuffer out,
                              IntBuffer success);
public static native int MXSymbolGetAttr(SymbolHandle symbol,
                              @Cast("const char*") BytePointer key,
                              @Cast("const char**") @ByPtrPtr byte[] out,
                              int[] success);
public static native int MXSymbolGetAttr(SymbolHandle symbol,
                              String key,
                              @Cast("const char**") @ByPtrPtr BytePointer out,
                              IntPointer success);
public static native int MXSymbolGetAttr(SymbolHandle symbol,
                              @Cast("const char*") BytePointer key,
                              @Cast("const char**") @ByPtrPtr ByteBuffer out,
                              IntBuffer success);
public static native int MXSymbolGetAttr(SymbolHandle symbol,
                              String key,
                              @Cast("const char**") @ByPtrPtr byte[] out,
                              int[] success);
/**
 * \brief Set string attribute from symbol.
 *  NOTE: Setting attribute to a symbol can affect the semantics(mutable/immutable) of symbolic graph.
 *
 *  Safe recommendaton: use  immutable graph
 *  - Only allow set attributes during creation of new symbol as optional parameter
 *
 *  Mutable graph (be careful about the semantics):
 *  - Allow set attr at any point.
 *  - Mutating an attribute of some common node of two graphs can cause confusion from user.
 *
 * @param symbol the source symbol
 * @param key The key of the symbol.
 * @param value The value to be saved.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolSetAttr(SymbolHandle symbol,
                              @Cast("const char*") BytePointer key,
                              @Cast("const char*") BytePointer value);
public static native int MXSymbolSetAttr(SymbolHandle symbol,
                              String key,
                              String value);
/**
 * \brief Get all attributes from symbol, including all descendents.
 * @param symbol the source symbol
 * @param out_size The number of output attributes
 * @param out 2*out_size strings representing key value pairs.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolListAttr(SymbolHandle symbol,
                               @Cast("mx_uint*") IntPointer out_size,
                               @Cast("const char***") @ByPtrPtr PointerPointer out);
public static native int MXSymbolListAttr(SymbolHandle symbol,
                               @Cast("mx_uint*") IntBuffer out_size,
                               @Cast("const char***") @ByPtrPtr PointerPointer out);
public static native int MXSymbolListAttr(SymbolHandle symbol,
                               @Cast("mx_uint*") int[] out_size,
                               @Cast("const char***") @ByPtrPtr PointerPointer out);
/**
 * \brief Get all attributes from symbol, excluding descendents.
 * @param symbol the source symbol
 * @param out_size The number of output attributes
 * @param out 2*out_size strings representing key value pairs.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolListAttrShallow(SymbolHandle symbol,
                                      @Cast("mx_uint*") IntPointer out_size,
                                      @Cast("const char***") @ByPtrPtr PointerPointer out);
public static native int MXSymbolListAttrShallow(SymbolHandle symbol,
                                      @Cast("mx_uint*") IntBuffer out_size,
                                      @Cast("const char***") @ByPtrPtr PointerPointer out);
public static native int MXSymbolListAttrShallow(SymbolHandle symbol,
                                      @Cast("mx_uint*") int[] out_size,
                                      @Cast("const char***") @ByPtrPtr PointerPointer out);
/**
 * \brief List arguments in the symbol.
 * @param symbol the symbol
 * @param out_size output size
 * @param out_str_array pointer to hold the output string array
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolListArguments(SymbolHandle symbol,
                                    @Cast("mx_uint*") IntPointer out_size,
                                    @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);
public static native int MXSymbolListArguments(SymbolHandle symbol,
                                    @Cast("mx_uint*") IntBuffer out_size,
                                    @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);
public static native int MXSymbolListArguments(SymbolHandle symbol,
                                    @Cast("mx_uint*") int[] out_size,
                                    @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);
/**
 * \brief List returns in the symbol.
 * @param symbol the symbol
 * @param out_size output size
 * @param out_str_array pointer to hold the output string array
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolListOutputs(SymbolHandle symbol,
                                  @Cast("mx_uint*") IntPointer out_size,
                                  @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);
public static native int MXSymbolListOutputs(SymbolHandle symbol,
                                  @Cast("mx_uint*") IntBuffer out_size,
                                  @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);
public static native int MXSymbolListOutputs(SymbolHandle symbol,
                                  @Cast("mx_uint*") int[] out_size,
                                  @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);

/**
 * \brief Get number of outputs of the symbol.
 * @param symbol The symbol
 * @param out_size number of outputs
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolGetNumOutputs(SymbolHandle symbol,
                                     @Cast("mx_uint*") IntPointer output_count);
public static native int MXSymbolGetNumOutputs(SymbolHandle symbol,
                                     @Cast("mx_uint*") IntBuffer output_count);
public static native int MXSymbolGetNumOutputs(SymbolHandle symbol,
                                     @Cast("mx_uint*") int[] output_count);

/**
 * \brief Get a symbol that contains all the internals.
 * @param symbol The symbol
 * @param out The output symbol whose outputs are all the internals.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolGetInternals(SymbolHandle symbol,
                                   PointerPointer out);
public static native int MXSymbolGetInternals(SymbolHandle symbol,
                                   @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief Get a symbol that contains only direct children.
 * @param symbol The symbol
 * @param out The output symbol whose outputs are the direct children.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolGetChildren(SymbolHandle symbol,
                                  PointerPointer out);
public static native int MXSymbolGetChildren(SymbolHandle symbol,
                                  @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief Get index-th outputs of the symbol.
 * @param symbol The symbol
 * @param index the Index of the output.
 * @param out The output symbol whose outputs are the index-th symbol.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolGetOutput(SymbolHandle symbol,
                                @Cast("mx_uint") int index,
                                PointerPointer out);
public static native int MXSymbolGetOutput(SymbolHandle symbol,
                                @Cast("mx_uint") int index,
                                @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);

/**
 * \brief List auxiliary states in the symbol.
 * @param symbol the symbol
 * @param out_size output size
 * @param out_str_array pointer to hold the output string array
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolListAuxiliaryStates(SymbolHandle symbol,
                                          @Cast("mx_uint*") IntPointer out_size,
                                          @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);
public static native int MXSymbolListAuxiliaryStates(SymbolHandle symbol,
                                          @Cast("mx_uint*") IntBuffer out_size,
                                          @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);
public static native int MXSymbolListAuxiliaryStates(SymbolHandle symbol,
                                          @Cast("mx_uint*") int[] out_size,
                                          @Cast("const char***") @ByPtrPtr PointerPointer out_str_array);
/**
 * \brief Compose the symbol on other symbols.
 *
 *  This function will change the sym hanlde.
 *  To achieve function apply behavior, copy the symbol first
 *  before apply.
 *
 * @param sym the symbol to apply
 * @param name the name of symbol
 * @param num_args number of arguments
 * @param keys the key of keyword args (optional)
 * @param args arguments to sym
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolCompose(SymbolHandle sym,
                              @Cast("const char*") BytePointer name,
                              @Cast("mx_uint") int num_args,
                              @Cast("const char**") PointerPointer keys,
                              PointerPointer args);
public static native int MXSymbolCompose(SymbolHandle sym,
                              @Cast("const char*") BytePointer name,
                              @Cast("mx_uint") int num_args,
                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                              PointerPointer args);
public static native int MXSymbolCompose(SymbolHandle sym,
                              String name,
                              @Cast("mx_uint") int num_args,
                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                              @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle args);
public static native int MXSymbolCompose(SymbolHandle sym,
                              @Cast("const char*") BytePointer name,
                              @Cast("mx_uint") int num_args,
                              @Cast("const char**") @ByPtrPtr byte[] keys,
                              PointerPointer args);
public static native int MXSymbolCompose(SymbolHandle sym,
                              String name,
                              @Cast("mx_uint") int num_args,
                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                              @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle args);
public static native int MXSymbolCompose(SymbolHandle sym,
                              @Cast("const char*") BytePointer name,
                              @Cast("mx_uint") int num_args,
                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                              PointerPointer args);
public static native int MXSymbolCompose(SymbolHandle sym,
                              String name,
                              @Cast("mx_uint") int num_args,
                              @Cast("const char**") @ByPtrPtr byte[] keys,
                              @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle args);
/**
 * \brief Get the gradient graph of the symbol
 *
 * @param sym the symbol to get gradient
 * @param num_wrt number of arguments to get gradient
 * @param wrt the name of the arguments to get gradient
 * @param out the returned symbol that has gradient
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolGrad(SymbolHandle sym,
                           @Cast("mx_uint") int num_wrt,
                           @Cast("const char**") PointerPointer wrt,
                           PointerPointer out);
public static native int MXSymbolGrad(SymbolHandle sym,
                           @Cast("mx_uint") int num_wrt,
                           @Cast("const char**") @ByPtrPtr BytePointer wrt,
                           PointerPointer out);
public static native int MXSymbolGrad(SymbolHandle sym,
                           @Cast("mx_uint") int num_wrt,
                           @Cast("const char**") @ByPtrPtr ByteBuffer wrt,
                           @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
public static native int MXSymbolGrad(SymbolHandle sym,
                           @Cast("mx_uint") int num_wrt,
                           @Cast("const char**") @ByPtrPtr byte[] wrt,
                           PointerPointer out);
public static native int MXSymbolGrad(SymbolHandle sym,
                           @Cast("mx_uint") int num_wrt,
                           @Cast("const char**") @ByPtrPtr BytePointer wrt,
                           @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
public static native int MXSymbolGrad(SymbolHandle sym,
                           @Cast("mx_uint") int num_wrt,
                           @Cast("const char**") @ByPtrPtr ByteBuffer wrt,
                           PointerPointer out);
public static native int MXSymbolGrad(SymbolHandle sym,
                           @Cast("mx_uint") int num_wrt,
                           @Cast("const char**") @ByPtrPtr byte[] wrt,
                           @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);
/**
 * \brief infer shape of unknown input shapes given the known one.
 *  The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data
 *  The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.
 *
 * @param sym symbol handle
 * @param num_args numbe of input arguments.
 * @param keys the key of keyword args (optional)
 * @param arg_ind_ptr the head pointer of the rows in CSR
 * @param arg_shape_data the content of the CSR
 * @param in_shape_size sizeof the returning array of in_shapes
 * @param in_shape_ndim returning array of shape dimensions of eachs input shape.
 * @param in_shape_data returning array of pointers to head of the input shape.
 * @param out_shape_size sizeof the returning array of out_shapes
 * @param out_shape_ndim returning array of shape dimensions of eachs input shape.
 * @param out_shape_data returning array of pointers to head of the input shape.
 * @param aux_shape_size sizeof the returning array of aux_shapes
 * @param aux_shape_ndim returning array of shape dimensions of eachs auxiliary shape.
 * @param aux_shape_data returning array of pointers to head of the auxiliary shape.
 * @param complete whether infer shape completes or more information is needed.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolInferShape(SymbolHandle sym,
                                 @Cast("mx_uint") int num_args,
                                 @Cast("const char**") PointerPointer keys,
                                 @Cast("const mx_uint*") IntPointer arg_ind_ptr,
                                 @Cast("const mx_uint*") IntPointer arg_shape_data,
                                 @Cast("mx_uint*") IntPointer in_shape_size,
                                 @Cast("const mx_uint**") PointerPointer in_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer in_shape_data,
                                 @Cast("mx_uint*") IntPointer out_shape_size,
                                 @Cast("const mx_uint**") PointerPointer out_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer out_shape_data,
                                 @Cast("mx_uint*") IntPointer aux_shape_size,
                                 @Cast("const mx_uint**") PointerPointer aux_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer aux_shape_data,
                                 IntPointer complete);
public static native int MXSymbolInferShape(SymbolHandle sym,
                                 @Cast("mx_uint") int num_args,
                                 @Cast("const char**") @ByPtrPtr BytePointer keys,
                                 @Cast("const mx_uint*") IntPointer arg_ind_ptr,
                                 @Cast("const mx_uint*") IntPointer arg_shape_data,
                                 @Cast("mx_uint*") IntPointer in_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr IntPointer in_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer in_shape_data,
                                 @Cast("mx_uint*") IntPointer out_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr IntPointer out_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer out_shape_data,
                                 @Cast("mx_uint*") IntPointer aux_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr IntPointer aux_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer aux_shape_data,
                                 IntPointer complete);
public static native int MXSymbolInferShape(SymbolHandle sym,
                                 @Cast("mx_uint") int num_args,
                                 @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                 @Cast("const mx_uint*") IntBuffer arg_ind_ptr,
                                 @Cast("const mx_uint*") IntBuffer arg_shape_data,
                                 @Cast("mx_uint*") IntBuffer in_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr IntBuffer in_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer in_shape_data,
                                 @Cast("mx_uint*") IntBuffer out_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr IntBuffer out_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer out_shape_data,
                                 @Cast("mx_uint*") IntBuffer aux_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr IntBuffer aux_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer aux_shape_data,
                                 IntBuffer complete);
public static native int MXSymbolInferShape(SymbolHandle sym,
                                 @Cast("mx_uint") int num_args,
                                 @Cast("const char**") @ByPtrPtr byte[] keys,
                                 @Cast("const mx_uint*") int[] arg_ind_ptr,
                                 @Cast("const mx_uint*") int[] arg_shape_data,
                                 @Cast("mx_uint*") int[] in_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr int[] in_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer in_shape_data,
                                 @Cast("mx_uint*") int[] out_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr int[] out_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer out_shape_data,
                                 @Cast("mx_uint*") int[] aux_shape_size,
                                 @Cast("const mx_uint**") @ByPtrPtr int[] aux_shape_ndim,
                                 @Cast("const mx_uint***") @ByPtrPtr PointerPointer aux_shape_data,
                                 int[] complete);
/**
 * \brief partially infer shape of unknown input shapes given the known one.
 *
 *  Return partially inferred results if not all shapes could be inferred.
 *  The shapes are packed into a CSR matrix represented by arg_ind_ptr and arg_shape_data
 *  The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.
 *
 * @param sym symbol handle
 * @param num_args numbe of input arguments.
 * @param keys the key of keyword args (optional)
 * @param arg_ind_ptr the head pointer of the rows in CSR
 * @param arg_shape_data the content of the CSR
 * @param in_shape_size sizeof the returning array of in_shapes
 * @param in_shape_ndim returning array of shape dimensions of eachs input shape.
 * @param in_shape_data returning array of pointers to head of the input shape.
 * @param out_shape_size sizeof the returning array of out_shapes
 * @param out_shape_ndim returning array of shape dimensions of eachs input shape.
 * @param out_shape_data returning array of pointers to head of the input shape.
 * @param aux_shape_size sizeof the returning array of aux_shapes
 * @param aux_shape_ndim returning array of shape dimensions of eachs auxiliary shape.
 * @param aux_shape_data returning array of pointers to head of the auxiliary shape.
 * @param complete whether infer shape completes or more information is needed.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolInferShapePartial(SymbolHandle sym,
                                        @Cast("mx_uint") int num_args,
                                        @Cast("const char**") PointerPointer keys,
                                        @Cast("const mx_uint*") IntPointer arg_ind_ptr,
                                        @Cast("const mx_uint*") IntPointer arg_shape_data,
                                        @Cast("mx_uint*") IntPointer in_shape_size,
                                        @Cast("const mx_uint**") PointerPointer in_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer in_shape_data,
                                        @Cast("mx_uint*") IntPointer out_shape_size,
                                        @Cast("const mx_uint**") PointerPointer out_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer out_shape_data,
                                        @Cast("mx_uint*") IntPointer aux_shape_size,
                                        @Cast("const mx_uint**") PointerPointer aux_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer aux_shape_data,
                                        IntPointer complete);
public static native int MXSymbolInferShapePartial(SymbolHandle sym,
                                        @Cast("mx_uint") int num_args,
                                        @Cast("const char**") @ByPtrPtr BytePointer keys,
                                        @Cast("const mx_uint*") IntPointer arg_ind_ptr,
                                        @Cast("const mx_uint*") IntPointer arg_shape_data,
                                        @Cast("mx_uint*") IntPointer in_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr IntPointer in_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer in_shape_data,
                                        @Cast("mx_uint*") IntPointer out_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr IntPointer out_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer out_shape_data,
                                        @Cast("mx_uint*") IntPointer aux_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr IntPointer aux_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer aux_shape_data,
                                        IntPointer complete);
public static native int MXSymbolInferShapePartial(SymbolHandle sym,
                                        @Cast("mx_uint") int num_args,
                                        @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                        @Cast("const mx_uint*") IntBuffer arg_ind_ptr,
                                        @Cast("const mx_uint*") IntBuffer arg_shape_data,
                                        @Cast("mx_uint*") IntBuffer in_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr IntBuffer in_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer in_shape_data,
                                        @Cast("mx_uint*") IntBuffer out_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr IntBuffer out_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer out_shape_data,
                                        @Cast("mx_uint*") IntBuffer aux_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr IntBuffer aux_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer aux_shape_data,
                                        IntBuffer complete);
public static native int MXSymbolInferShapePartial(SymbolHandle sym,
                                        @Cast("mx_uint") int num_args,
                                        @Cast("const char**") @ByPtrPtr byte[] keys,
                                        @Cast("const mx_uint*") int[] arg_ind_ptr,
                                        @Cast("const mx_uint*") int[] arg_shape_data,
                                        @Cast("mx_uint*") int[] in_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr int[] in_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer in_shape_data,
                                        @Cast("mx_uint*") int[] out_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr int[] out_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer out_shape_data,
                                        @Cast("mx_uint*") int[] aux_shape_size,
                                        @Cast("const mx_uint**") @ByPtrPtr int[] aux_shape_ndim,
                                        @Cast("const mx_uint***") @ByPtrPtr PointerPointer aux_shape_data,
                                        int[] complete);

/**
 * \brief infer type of unknown input types given the known one.
 *  The types are packed into a CSR matrix represented by arg_ind_ptr and arg_type_data
 *  The call will be treated as a kwargs call if key != nullptr or num_args==0, otherwise it is positional.
 *
 * @param sym symbol handle
 * @param num_args numbe of input arguments.
 * @param keys the key of keyword args (optional)
 * @param arg_type_data the content of the CSR
 * @param in_type_size sizeof the returning array of in_types
 * @param in_type_data returning array of pointers to head of the input type.
 * @param out_type_size sizeof the returning array of out_types
 * @param out_type_data returning array of pointers to head of the input type.
 * @param aux_type_size sizeof the returning array of aux_types
 * @param aux_type_data returning array of pointers to head of the auxiliary type.
 * @param complete whether infer type completes or more information is needed.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXSymbolInferType(SymbolHandle sym,
                                @Cast("mx_uint") int num_args,
                                @Cast("const char**") PointerPointer keys,
                                @Const IntPointer arg_type_data,
                                @Cast("mx_uint*") IntPointer in_type_size,
                                @Cast("const int**") PointerPointer in_type_data,
                                @Cast("mx_uint*") IntPointer out_type_size,
                                @Cast("const int**") PointerPointer out_type_data,
                                @Cast("mx_uint*") IntPointer aux_type_size,
                                @Cast("const int**") PointerPointer aux_type_data,
                                IntPointer complete);
public static native int MXSymbolInferType(SymbolHandle sym,
                                @Cast("mx_uint") int num_args,
                                @Cast("const char**") @ByPtrPtr BytePointer keys,
                                @Const IntPointer arg_type_data,
                                @Cast("mx_uint*") IntPointer in_type_size,
                                @Const @ByPtrPtr IntPointer in_type_data,
                                @Cast("mx_uint*") IntPointer out_type_size,
                                @Const @ByPtrPtr IntPointer out_type_data,
                                @Cast("mx_uint*") IntPointer aux_type_size,
                                @Const @ByPtrPtr IntPointer aux_type_data,
                                IntPointer complete);
public static native int MXSymbolInferType(SymbolHandle sym,
                                @Cast("mx_uint") int num_args,
                                @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                @Const IntBuffer arg_type_data,
                                @Cast("mx_uint*") IntBuffer in_type_size,
                                @Const @ByPtrPtr IntBuffer in_type_data,
                                @Cast("mx_uint*") IntBuffer out_type_size,
                                @Const @ByPtrPtr IntBuffer out_type_data,
                                @Cast("mx_uint*") IntBuffer aux_type_size,
                                @Const @ByPtrPtr IntBuffer aux_type_data,
                                IntBuffer complete);
public static native int MXSymbolInferType(SymbolHandle sym,
                                @Cast("mx_uint") int num_args,
                                @Cast("const char**") @ByPtrPtr byte[] keys,
                                @Const int[] arg_type_data,
                                @Cast("mx_uint*") int[] in_type_size,
                                @Const @ByPtrPtr int[] in_type_data,
                                @Cast("mx_uint*") int[] out_type_size,
                                @Const @ByPtrPtr int[] out_type_data,
                                @Cast("mx_uint*") int[] aux_type_size,
                                @Const @ByPtrPtr int[] aux_type_data,
                                int[] complete);

/**
 * \brief Convert a symbol into a quantized symbol where FP32 operators are replaced with INT8
 * @param sym_handle symbol to be converted
 * @param ret_sym_handle quantized symbol result
 * @param num_excluded_symbols number of layers excluded from being quantized in the input symbol
 * @param excluded_symbols op names to be excluded from being quantized
 * @param num_offline number of parameters that are quantized offline
 * @param offline_params array of c strings representing the names of params quantized offline
 * @param quantized_dtype the quantized destination type for input data.
 * @param calib_quantize whether calibrate quantize op with offline calibration data.
 */
public static native int MXQuantizeSymbol(SymbolHandle sym_handle, PointerPointer ret_sym_handle,
                               @Cast("const mx_uint") int num_excluded_symbols,
                               @Cast("const char**") PointerPointer excluded_symbols,
                               @Cast("const mx_uint") int num_offline, @Cast("const char**") PointerPointer offline_params,
                               @Cast("const char*") BytePointer quantized_dtype, @Cast("const bool") boolean calib_quantize);
public static native int MXQuantizeSymbol(SymbolHandle sym_handle, PointerPointer ret_sym_handle,
                               @Cast("const mx_uint") int num_excluded_symbols,
                               @Cast("const char**") @ByPtrPtr BytePointer excluded_symbols,
                               @Cast("const mx_uint") int num_offline, @Cast("const char**") @ByPtrPtr BytePointer offline_params,
                               @Cast("const char*") BytePointer quantized_dtype, @Cast("const bool") boolean calib_quantize);
public static native int MXQuantizeSymbol(SymbolHandle sym_handle, @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle ret_sym_handle,
                               @Cast("const mx_uint") int num_excluded_symbols,
                               @Cast("const char**") @ByPtrPtr ByteBuffer excluded_symbols,
                               @Cast("const mx_uint") int num_offline, @Cast("const char**") @ByPtrPtr ByteBuffer offline_params,
                               String quantized_dtype, @Cast("const bool") boolean calib_quantize);
public static native int MXQuantizeSymbol(SymbolHandle sym_handle, PointerPointer ret_sym_handle,
                               @Cast("const mx_uint") int num_excluded_symbols,
                               @Cast("const char**") @ByPtrPtr byte[] excluded_symbols,
                               @Cast("const mx_uint") int num_offline, @Cast("const char**") @ByPtrPtr byte[] offline_params,
                               @Cast("const char*") BytePointer quantized_dtype, @Cast("const bool") boolean calib_quantize);
public static native int MXQuantizeSymbol(SymbolHandle sym_handle, @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle ret_sym_handle,
                               @Cast("const mx_uint") int num_excluded_symbols,
                               @Cast("const char**") @ByPtrPtr BytePointer excluded_symbols,
                               @Cast("const mx_uint") int num_offline, @Cast("const char**") @ByPtrPtr BytePointer offline_params,
                               String quantized_dtype, @Cast("const bool") boolean calib_quantize);
public static native int MXQuantizeSymbol(SymbolHandle sym_handle, PointerPointer ret_sym_handle,
                               @Cast("const mx_uint") int num_excluded_symbols,
                               @Cast("const char**") @ByPtrPtr ByteBuffer excluded_symbols,
                               @Cast("const mx_uint") int num_offline, @Cast("const char**") @ByPtrPtr ByteBuffer offline_params,
                               @Cast("const char*") BytePointer quantized_dtype, @Cast("const bool") boolean calib_quantize);
public static native int MXQuantizeSymbol(SymbolHandle sym_handle, @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle ret_sym_handle,
                               @Cast("const mx_uint") int num_excluded_symbols,
                               @Cast("const char**") @ByPtrPtr byte[] excluded_symbols,
                               @Cast("const mx_uint") int num_offline, @Cast("const char**") @ByPtrPtr byte[] offline_params,
                               String quantized_dtype, @Cast("const bool") boolean calib_quantize);

/**
 * \brief Set calibration table to node attributes in the sym
 * @param sym_handle symbol whose node attributes are to be set by calibration table
 * @param num_layers number of layers in the calibration table
 * @param layer names stored as keys in the calibration table
 * @param low_quantiles low quantiles of layers stored in the calibration table
 * @param high_quantiles high quantiles of layers stored in the calibration table
 * @param ret_sym_handle returned symbol
 */
public static native int MXSetCalibTableToQuantizedSymbol(SymbolHandle qsym_handle,
                                               @Cast("const mx_uint") int num_layers,
                                               @Cast("const char**") PointerPointer layer_names,
                                               @Const FloatPointer low_quantiles,
                                               @Const FloatPointer high_quantiles,
                                               PointerPointer ret_sym_handle);
public static native int MXSetCalibTableToQuantizedSymbol(SymbolHandle qsym_handle,
                                               @Cast("const mx_uint") int num_layers,
                                               @Cast("const char**") @ByPtrPtr BytePointer layer_names,
                                               @Const FloatPointer low_quantiles,
                                               @Const FloatPointer high_quantiles,
                                               PointerPointer ret_sym_handle);
public static native int MXSetCalibTableToQuantizedSymbol(SymbolHandle qsym_handle,
                                               @Cast("const mx_uint") int num_layers,
                                               @Cast("const char**") @ByPtrPtr ByteBuffer layer_names,
                                               @Const FloatBuffer low_quantiles,
                                               @Const FloatBuffer high_quantiles,
                                               @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle ret_sym_handle);
public static native int MXSetCalibTableToQuantizedSymbol(SymbolHandle qsym_handle,
                                               @Cast("const mx_uint") int num_layers,
                                               @Cast("const char**") @ByPtrPtr byte[] layer_names,
                                               @Const float[] low_quantiles,
                                               @Const float[] high_quantiles,
                                               PointerPointer ret_sym_handle);
public static native int MXSetCalibTableToQuantizedSymbol(SymbolHandle qsym_handle,
                                               @Cast("const mx_uint") int num_layers,
                                               @Cast("const char**") @ByPtrPtr BytePointer layer_names,
                                               @Const FloatPointer low_quantiles,
                                               @Const FloatPointer high_quantiles,
                                               @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle ret_sym_handle);
public static native int MXSetCalibTableToQuantizedSymbol(SymbolHandle qsym_handle,
                                               @Cast("const mx_uint") int num_layers,
                                               @Cast("const char**") @ByPtrPtr ByteBuffer layer_names,
                                               @Const FloatBuffer low_quantiles,
                                               @Const FloatBuffer high_quantiles,
                                               PointerPointer ret_sym_handle);
public static native int MXSetCalibTableToQuantizedSymbol(SymbolHandle qsym_handle,
                                               @Cast("const mx_uint") int num_layers,
                                               @Cast("const char**") @ByPtrPtr byte[] layer_names,
                                               @Const float[] low_quantiles,
                                               @Const float[] high_quantiles,
                                               @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle ret_sym_handle);

/**
 * \brief Run subgraph pass based on the backend provided
 * @param sym_handle symbol to be converted
 * @param backend backend names for subgraph pass
 * @param ret_sym_handle returned symbol
 */
public static native int MXGenBackendSubgraph(SymbolHandle sym_handle, @Cast("const char*") BytePointer backend,
                                   PointerPointer ret_sym_handle);
public static native int MXGenBackendSubgraph(SymbolHandle sym_handle, String backend,
                                   @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle ret_sym_handle);

//--------------------------------------------
// Part 4: Executor interface
//--------------------------------------------
/**
 * \brief Delete the executor
 * @param handle the executor.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorFree(ExecutorHandle handle);
/**
 * \brief Print the content of execution plan, used for debug.
 * @param handle the executor.
 * @param out_str pointer to hold the output string of the printing.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorPrint(ExecutorHandle handle, @Cast("const char**") PointerPointer out_str);
public static native int MXExecutorPrint(ExecutorHandle handle, @Cast("const char**") @ByPtrPtr BytePointer out_str);
public static native int MXExecutorPrint(ExecutorHandle handle, @Cast("const char**") @ByPtrPtr ByteBuffer out_str);
public static native int MXExecutorPrint(ExecutorHandle handle, @Cast("const char**") @ByPtrPtr byte[] out_str);
/**
 * \brief Executor forward method
 *
 * @param handle executor handle
 * @param is_train int value to indicate whether the forward pass is for evaluation
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorForward(ExecutorHandle handle, int is_train);
/**
 * \brief Excecutor run backward
 *
 * @param handle execute handle
 * @param len lenth
 * @param head_grads NDArray handle for heads' gradient
 *
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorBackward(ExecutorHandle handle,
                                 @Cast("mx_uint") int len,
                                 PointerPointer head_grads);
public static native int MXExecutorBackward(ExecutorHandle handle,
                                 @Cast("mx_uint") int len,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle head_grads);
/**
 * \brief Excecutor run backward
 *
 * @param handle execute handle
 * @param len lenth
 * @param head_grads NDArray handle for heads' gradient
 * @param is_train int value to indicate whether the backward pass is for evaluation
 *
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorBackwardEx(ExecutorHandle handle,
                                   @Cast("mx_uint") int len,
                                   PointerPointer head_grads,
                                   int is_train);
public static native int MXExecutorBackwardEx(ExecutorHandle handle,
                                   @Cast("mx_uint") int len,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle head_grads,
                                   int is_train);
/**
 * \brief Get executor's head NDArray
 *
 * @param handle executor handle
 * @param out_size output narray vector size
 * @param out out put narray handles
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorOutputs(ExecutorHandle handle,
                                @Cast("mx_uint*") IntPointer out_size,
                                @ByPtrPtr PointerPointer out);
public static native int MXExecutorOutputs(ExecutorHandle handle,
                                @Cast("mx_uint*") IntBuffer out_size,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer out);
public static native int MXExecutorOutputs(ExecutorHandle handle,
                                @Cast("mx_uint*") int[] out_size,
                                @ByPtrPtr PointerPointer out);

/**
 * \brief Generate Executor from symbol
 *
 * @param symbol_handle symbol handle
 * @param dev_type device type
 * @param dev_id device id
 * @param len length
 * @param in_args in args array
 * @param arg_grad_store arg grads handle array
 * @param grad_req_type grad req array
 * @param aux_states_len length of auxiliary states
 * @param aux_states auxiliary states array
 * @param out output executor handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorBind(SymbolHandle symbol_handle,
                             int dev_type,
                             int dev_id,
                             @Cast("mx_uint") int len,
                             PointerPointer in_args,
                             PointerPointer arg_grad_store,
                             @Cast("mx_uint*") IntPointer grad_req_type,
                             @Cast("mx_uint") int aux_states_len,
                             PointerPointer aux_states,
                             PointerPointer out);
public static native int MXExecutorBind(SymbolHandle symbol_handle,
                             int dev_type,
                             int dev_id,
                             @Cast("mx_uint") int len,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                             @Cast("mx_uint*") IntBuffer grad_req_type,
                             @Cast("mx_uint") int aux_states_len,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                             @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorBind(SymbolHandle symbol_handle,
                             int dev_type,
                             int dev_id,
                             @Cast("mx_uint") int len,
                             PointerPointer in_args,
                             PointerPointer arg_grad_store,
                             @Cast("mx_uint*") int[] grad_req_type,
                             @Cast("mx_uint") int aux_states_len,
                             PointerPointer aux_states,
                             PointerPointer out);
public static native int MXExecutorBind(SymbolHandle symbol_handle,
                             int dev_type,
                             int dev_id,
                             @Cast("mx_uint") int len,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                             @Cast("mx_uint*") IntPointer grad_req_type,
                             @Cast("mx_uint") int aux_states_len,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                             @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorBind(SymbolHandle symbol_handle,
                             int dev_type,
                             int dev_id,
                             @Cast("mx_uint") int len,
                             PointerPointer in_args,
                             PointerPointer arg_grad_store,
                             @Cast("mx_uint*") IntBuffer grad_req_type,
                             @Cast("mx_uint") int aux_states_len,
                             PointerPointer aux_states,
                             PointerPointer out);
public static native int MXExecutorBind(SymbolHandle symbol_handle,
                             int dev_type,
                             int dev_id,
                             @Cast("mx_uint") int len,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                             @Cast("mx_uint*") int[] grad_req_type,
                             @Cast("mx_uint") int aux_states_len,
                             @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                             @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
/**
 * \brief Generate Executor from symbol,
 *  This is advanced function, allow specify group2ctx map.
 *  The user can annotate "ctx_group" attribute to name each group.
 *
 * @param symbol_handle symbol handle
 * @param dev_type device type of default context
 * @param dev_id device id of default context
 * @param num_map_keys size of group2ctx map
 * @param map_keys keys of group2ctx map
 * @param map_dev_types device type of group2ctx map
 * @param map_dev_ids device id of group2ctx map
 * @param len length
 * @param in_args in args array
 * @param arg_grad_store arg grads handle array
 * @param grad_req_type grad req array
 * @param aux_states_len length of auxiliary states
 * @param aux_states auxiliary states array
 * @param out output executor handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorBindX(SymbolHandle symbol_handle,
                              int dev_type,
                              int dev_id,
                              @Cast("mx_uint") int num_map_keys,
                              @Cast("const char**") PointerPointer map_keys,
                              @Const IntPointer map_dev_types,
                              @Const IntPointer map_dev_ids,
                              @Cast("mx_uint") int len,
                              PointerPointer in_args,
                              PointerPointer arg_grad_store,
                              @Cast("mx_uint*") IntPointer grad_req_type,
                              @Cast("mx_uint") int aux_states_len,
                              PointerPointer aux_states,
                              PointerPointer out);
public static native int MXExecutorBindX(SymbolHandle symbol_handle,
                              int dev_type,
                              int dev_id,
                              @Cast("mx_uint") int num_map_keys,
                              @Cast("const char**") @ByPtrPtr BytePointer map_keys,
                              @Const IntPointer map_dev_types,
                              @Const IntPointer map_dev_ids,
                              @Cast("mx_uint") int len,
                              PointerPointer in_args,
                              PointerPointer arg_grad_store,
                              @Cast("mx_uint*") IntPointer grad_req_type,
                              @Cast("mx_uint") int aux_states_len,
                              PointerPointer aux_states,
                              PointerPointer out);
public static native int MXExecutorBindX(SymbolHandle symbol_handle,
                              int dev_type,
                              int dev_id,
                              @Cast("mx_uint") int num_map_keys,
                              @Cast("const char**") @ByPtrPtr ByteBuffer map_keys,
                              @Const IntBuffer map_dev_types,
                              @Const IntBuffer map_dev_ids,
                              @Cast("mx_uint") int len,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                              @Cast("mx_uint*") IntBuffer grad_req_type,
                              @Cast("mx_uint") int aux_states_len,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                              @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorBindX(SymbolHandle symbol_handle,
                              int dev_type,
                              int dev_id,
                              @Cast("mx_uint") int num_map_keys,
                              @Cast("const char**") @ByPtrPtr byte[] map_keys,
                              @Const int[] map_dev_types,
                              @Const int[] map_dev_ids,
                              @Cast("mx_uint") int len,
                              PointerPointer in_args,
                              PointerPointer arg_grad_store,
                              @Cast("mx_uint*") int[] grad_req_type,
                              @Cast("mx_uint") int aux_states_len,
                              PointerPointer aux_states,
                              PointerPointer out);
public static native int MXExecutorBindX(SymbolHandle symbol_handle,
                              int dev_type,
                              int dev_id,
                              @Cast("mx_uint") int num_map_keys,
                              @Cast("const char**") @ByPtrPtr BytePointer map_keys,
                              @Const IntPointer map_dev_types,
                              @Const IntPointer map_dev_ids,
                              @Cast("mx_uint") int len,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                              @Cast("mx_uint*") IntPointer grad_req_type,
                              @Cast("mx_uint") int aux_states_len,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                              @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorBindX(SymbolHandle symbol_handle,
                              int dev_type,
                              int dev_id,
                              @Cast("mx_uint") int num_map_keys,
                              @Cast("const char**") @ByPtrPtr ByteBuffer map_keys,
                              @Const IntBuffer map_dev_types,
                              @Const IntBuffer map_dev_ids,
                              @Cast("mx_uint") int len,
                              PointerPointer in_args,
                              PointerPointer arg_grad_store,
                              @Cast("mx_uint*") IntBuffer grad_req_type,
                              @Cast("mx_uint") int aux_states_len,
                              PointerPointer aux_states,
                              PointerPointer out);
public static native int MXExecutorBindX(SymbolHandle symbol_handle,
                              int dev_type,
                              int dev_id,
                              @Cast("mx_uint") int num_map_keys,
                              @Cast("const char**") @ByPtrPtr byte[] map_keys,
                              @Const int[] map_dev_types,
                              @Const int[] map_dev_ids,
                              @Cast("mx_uint") int len,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                              @Cast("mx_uint*") int[] grad_req_type,
                              @Cast("mx_uint") int aux_states_len,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                              @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
/**
 * \brief Generate Executor from symbol,
 *  This is advanced function, allow specify group2ctx map.
 *  The user can annotate "ctx_group" attribute to name each group.
 *
 * @param symbol_handle symbol handle
 * @param dev_type device type of default context
 * @param dev_id device id of default context
 * @param num_map_keys size of group2ctx map
 * @param map_keys keys of group2ctx map
 * @param map_dev_types device type of group2ctx map
 * @param map_dev_ids device id of group2ctx map
 * @param len length
 * @param in_args in args array
 * @param arg_grad_store arg grads handle array
 * @param grad_req_type grad req array
 * @param aux_states_len length of auxiliary states
 * @param aux_states auxiliary states array
 * @param shared_exec input executor handle for memory sharing
 * @param out output executor handle
 * @return 0 when success, -1 when failure happens
 */
public static native int MXExecutorBindEX(SymbolHandle symbol_handle,
                               int dev_type,
                               int dev_id,
                               @Cast("mx_uint") int num_map_keys,
                               @Cast("const char**") PointerPointer map_keys,
                               @Const IntPointer map_dev_types,
                               @Const IntPointer map_dev_ids,
                               @Cast("mx_uint") int len,
                               PointerPointer in_args,
                               PointerPointer arg_grad_store,
                               @Cast("mx_uint*") IntPointer grad_req_type,
                               @Cast("mx_uint") int aux_states_len,
                               PointerPointer aux_states,
                               ExecutorHandle shared_exec,
                               PointerPointer out);
public static native int MXExecutorBindEX(SymbolHandle symbol_handle,
                               int dev_type,
                               int dev_id,
                               @Cast("mx_uint") int num_map_keys,
                               @Cast("const char**") @ByPtrPtr BytePointer map_keys,
                               @Const IntPointer map_dev_types,
                               @Const IntPointer map_dev_ids,
                               @Cast("mx_uint") int len,
                               PointerPointer in_args,
                               PointerPointer arg_grad_store,
                               @Cast("mx_uint*") IntPointer grad_req_type,
                               @Cast("mx_uint") int aux_states_len,
                               PointerPointer aux_states,
                               ExecutorHandle shared_exec,
                               PointerPointer out);
public static native int MXExecutorBindEX(SymbolHandle symbol_handle,
                               int dev_type,
                               int dev_id,
                               @Cast("mx_uint") int num_map_keys,
                               @Cast("const char**") @ByPtrPtr ByteBuffer map_keys,
                               @Const IntBuffer map_dev_types,
                               @Const IntBuffer map_dev_ids,
                               @Cast("mx_uint") int len,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                               @Cast("mx_uint*") IntBuffer grad_req_type,
                               @Cast("mx_uint") int aux_states_len,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                               ExecutorHandle shared_exec,
                               @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorBindEX(SymbolHandle symbol_handle,
                               int dev_type,
                               int dev_id,
                               @Cast("mx_uint") int num_map_keys,
                               @Cast("const char**") @ByPtrPtr byte[] map_keys,
                               @Const int[] map_dev_types,
                               @Const int[] map_dev_ids,
                               @Cast("mx_uint") int len,
                               PointerPointer in_args,
                               PointerPointer arg_grad_store,
                               @Cast("mx_uint*") int[] grad_req_type,
                               @Cast("mx_uint") int aux_states_len,
                               PointerPointer aux_states,
                               ExecutorHandle shared_exec,
                               PointerPointer out);
public static native int MXExecutorBindEX(SymbolHandle symbol_handle,
                               int dev_type,
                               int dev_id,
                               @Cast("mx_uint") int num_map_keys,
                               @Cast("const char**") @ByPtrPtr BytePointer map_keys,
                               @Const IntPointer map_dev_types,
                               @Const IntPointer map_dev_ids,
                               @Cast("mx_uint") int len,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                               @Cast("mx_uint*") IntPointer grad_req_type,
                               @Cast("mx_uint") int aux_states_len,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                               ExecutorHandle shared_exec,
                               @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorBindEX(SymbolHandle symbol_handle,
                               int dev_type,
                               int dev_id,
                               @Cast("mx_uint") int num_map_keys,
                               @Cast("const char**") @ByPtrPtr ByteBuffer map_keys,
                               @Const IntBuffer map_dev_types,
                               @Const IntBuffer map_dev_ids,
                               @Cast("mx_uint") int len,
                               PointerPointer in_args,
                               PointerPointer arg_grad_store,
                               @Cast("mx_uint*") IntBuffer grad_req_type,
                               @Cast("mx_uint") int aux_states_len,
                               PointerPointer aux_states,
                               ExecutorHandle shared_exec,
                               PointerPointer out);
public static native int MXExecutorBindEX(SymbolHandle symbol_handle,
                               int dev_type,
                               int dev_id,
                               @Cast("mx_uint") int num_map_keys,
                               @Cast("const char**") @ByPtrPtr byte[] map_keys,
                               @Const int[] map_dev_types,
                               @Const int[] map_dev_ids,
                               @Cast("mx_uint") int len,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle in_args,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle arg_grad_store,
                               @Cast("mx_uint*") int[] grad_req_type,
                               @Cast("mx_uint") int aux_states_len,
                               @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle aux_states,
                               ExecutorHandle shared_exec,
                               @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);

public static native int MXExecutorSimpleBind(SymbolHandle symbol_handle,
                                   int dev_type,
                                   int dev_id,
                                   @Cast("const mx_uint") int num_g2c_keys,
                                   @Cast("const char**") PointerPointer g2c_keys,
                                   @Const IntPointer g2c_dev_types,
                                   @Const IntPointer g2c_dev_ids,
                                   @Cast("const mx_uint") int provided_grad_req_list_len,
                                   @Cast("const char**") PointerPointer provided_grad_req_names,
                                   @Cast("const char**") PointerPointer provided_grad_req_types,
                                   @Cast("const mx_uint") int num_provided_arg_shapes,
                                   @Cast("const char**") PointerPointer provided_arg_shape_names,
                                   @Cast("const mx_uint*") IntPointer provided_arg_shape_data,
                                   @Cast("const mx_uint*") IntPointer provided_arg_shape_idx,
                                   @Cast("const mx_uint") int num_provided_arg_dtypes,
                                   @Cast("const char**") PointerPointer provided_arg_dtype_names,
                                   @Const IntPointer provided_arg_dtypes,
                                   @Cast("const mx_uint") int num_provided_arg_stypes,
                                   @Cast("const char**") PointerPointer provided_arg_stype_names,
                                   @Const IntPointer provided_arg_stypes,
                                   @Cast("const mx_uint") int num_shared_arg_names,
                                   @Cast("const char**") PointerPointer shared_arg_name_list,
                                   IntPointer shared_buffer_len,
                                   @Cast("const char**") PointerPointer shared_buffer_name_list,
                                   PointerPointer shared_buffer_handle_list,
                                   @Cast("const char***") @ByPtrPtr PointerPointer updated_shared_buffer_name_list,
                                   @ByPtrPtr PointerPointer updated_shared_buffer_handle_list,
                                   @Cast("mx_uint*") IntPointer num_in_args,
                                   @ByPtrPtr PointerPointer in_args,
                                   @ByPtrPtr PointerPointer arg_grads,
                                   @Cast("mx_uint*") IntPointer num_aux_states,
                                   @ByPtrPtr PointerPointer aux_states,
                                   ExecutorHandle shared_exec_handle,
                                   PointerPointer out);
public static native int MXExecutorSimpleBind(SymbolHandle symbol_handle,
                                   int dev_type,
                                   int dev_id,
                                   @Cast("const mx_uint") int num_g2c_keys,
                                   @Cast("const char**") @ByPtrPtr BytePointer g2c_keys,
                                   @Const IntPointer g2c_dev_types,
                                   @Const IntPointer g2c_dev_ids,
                                   @Cast("const mx_uint") int provided_grad_req_list_len,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_grad_req_names,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_grad_req_types,
                                   @Cast("const mx_uint") int num_provided_arg_shapes,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_arg_shape_names,
                                   @Cast("const mx_uint*") IntPointer provided_arg_shape_data,
                                   @Cast("const mx_uint*") IntPointer provided_arg_shape_idx,
                                   @Cast("const mx_uint") int num_provided_arg_dtypes,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_arg_dtype_names,
                                   @Const IntPointer provided_arg_dtypes,
                                   @Cast("const mx_uint") int num_provided_arg_stypes,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_arg_stype_names,
                                   @Const IntPointer provided_arg_stypes,
                                   @Cast("const mx_uint") int num_shared_arg_names,
                                   @Cast("const char**") @ByPtrPtr BytePointer shared_arg_name_list,
                                   IntPointer shared_buffer_len,
                                   @Cast("const char**") @ByPtrPtr BytePointer shared_buffer_name_list,
                                   PointerPointer shared_buffer_handle_list,
                                   @Cast("const char***") @ByPtrPtr PointerPointer updated_shared_buffer_name_list,
                                   @ByPtrPtr PointerPointer updated_shared_buffer_handle_list,
                                   @Cast("mx_uint*") IntPointer num_in_args,
                                   @ByPtrPtr PointerPointer in_args,
                                   @ByPtrPtr PointerPointer arg_grads,
                                   @Cast("mx_uint*") IntPointer num_aux_states,
                                   @ByPtrPtr PointerPointer aux_states,
                                   ExecutorHandle shared_exec_handle,
                                   PointerPointer out);
public static native int MXExecutorSimpleBind(SymbolHandle symbol_handle,
                                   int dev_type,
                                   int dev_id,
                                   @Cast("const mx_uint") int num_g2c_keys,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer g2c_keys,
                                   @Const IntBuffer g2c_dev_types,
                                   @Const IntBuffer g2c_dev_ids,
                                   @Cast("const mx_uint") int provided_grad_req_list_len,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_grad_req_names,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_grad_req_types,
                                   @Cast("const mx_uint") int num_provided_arg_shapes,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_arg_shape_names,
                                   @Cast("const mx_uint*") IntBuffer provided_arg_shape_data,
                                   @Cast("const mx_uint*") IntBuffer provided_arg_shape_idx,
                                   @Cast("const mx_uint") int num_provided_arg_dtypes,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_arg_dtype_names,
                                   @Const IntBuffer provided_arg_dtypes,
                                   @Cast("const mx_uint") int num_provided_arg_stypes,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_arg_stype_names,
                                   @Const IntBuffer provided_arg_stypes,
                                   @Cast("const mx_uint") int num_shared_arg_names,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer shared_arg_name_list,
                                   IntBuffer shared_buffer_len,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer shared_buffer_name_list,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle shared_buffer_handle_list,
                                   @Cast("const char***") @ByPtrPtr PointerPointer updated_shared_buffer_name_list,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer updated_shared_buffer_handle_list,
                                   @Cast("mx_uint*") IntBuffer num_in_args,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer in_args,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer arg_grads,
                                   @Cast("mx_uint*") IntBuffer num_aux_states,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer aux_states,
                                   ExecutorHandle shared_exec_handle,
                                   @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorSimpleBind(SymbolHandle symbol_handle,
                                   int dev_type,
                                   int dev_id,
                                   @Cast("const mx_uint") int num_g2c_keys,
                                   @Cast("const char**") @ByPtrPtr byte[] g2c_keys,
                                   @Const int[] g2c_dev_types,
                                   @Const int[] g2c_dev_ids,
                                   @Cast("const mx_uint") int provided_grad_req_list_len,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_grad_req_names,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_grad_req_types,
                                   @Cast("const mx_uint") int num_provided_arg_shapes,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_arg_shape_names,
                                   @Cast("const mx_uint*") int[] provided_arg_shape_data,
                                   @Cast("const mx_uint*") int[] provided_arg_shape_idx,
                                   @Cast("const mx_uint") int num_provided_arg_dtypes,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_arg_dtype_names,
                                   @Const int[] provided_arg_dtypes,
                                   @Cast("const mx_uint") int num_provided_arg_stypes,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_arg_stype_names,
                                   @Const int[] provided_arg_stypes,
                                   @Cast("const mx_uint") int num_shared_arg_names,
                                   @Cast("const char**") @ByPtrPtr byte[] shared_arg_name_list,
                                   int[] shared_buffer_len,
                                   @Cast("const char**") @ByPtrPtr byte[] shared_buffer_name_list,
                                   PointerPointer shared_buffer_handle_list,
                                   @Cast("const char***") @ByPtrPtr PointerPointer updated_shared_buffer_name_list,
                                   @ByPtrPtr PointerPointer updated_shared_buffer_handle_list,
                                   @Cast("mx_uint*") int[] num_in_args,
                                   @ByPtrPtr PointerPointer in_args,
                                   @ByPtrPtr PointerPointer arg_grads,
                                   @Cast("mx_uint*") int[] num_aux_states,
                                   @ByPtrPtr PointerPointer aux_states,
                                   ExecutorHandle shared_exec_handle,
                                   PointerPointer out);
public static native int MXExecutorSimpleBind(SymbolHandle symbol_handle,
                                   int dev_type,
                                   int dev_id,
                                   @Cast("const mx_uint") int num_g2c_keys,
                                   @Cast("const char**") @ByPtrPtr BytePointer g2c_keys,
                                   @Const IntPointer g2c_dev_types,
                                   @Const IntPointer g2c_dev_ids,
                                   @Cast("const mx_uint") int provided_grad_req_list_len,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_grad_req_names,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_grad_req_types,
                                   @Cast("const mx_uint") int num_provided_arg_shapes,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_arg_shape_names,
                                   @Cast("const mx_uint*") IntPointer provided_arg_shape_data,
                                   @Cast("const mx_uint*") IntPointer provided_arg_shape_idx,
                                   @Cast("const mx_uint") int num_provided_arg_dtypes,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_arg_dtype_names,
                                   @Const IntPointer provided_arg_dtypes,
                                   @Cast("const mx_uint") int num_provided_arg_stypes,
                                   @Cast("const char**") @ByPtrPtr BytePointer provided_arg_stype_names,
                                   @Const IntPointer provided_arg_stypes,
                                   @Cast("const mx_uint") int num_shared_arg_names,
                                   @Cast("const char**") @ByPtrPtr BytePointer shared_arg_name_list,
                                   IntPointer shared_buffer_len,
                                   @Cast("const char**") @ByPtrPtr BytePointer shared_buffer_name_list,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle shared_buffer_handle_list,
                                   @Cast("const char***") @ByPtrPtr PointerPointer updated_shared_buffer_name_list,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer updated_shared_buffer_handle_list,
                                   @Cast("mx_uint*") IntPointer num_in_args,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer in_args,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer arg_grads,
                                   @Cast("mx_uint*") IntPointer num_aux_states,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer aux_states,
                                   ExecutorHandle shared_exec_handle,
                                   @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorSimpleBind(SymbolHandle symbol_handle,
                                   int dev_type,
                                   int dev_id,
                                   @Cast("const mx_uint") int num_g2c_keys,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer g2c_keys,
                                   @Const IntBuffer g2c_dev_types,
                                   @Const IntBuffer g2c_dev_ids,
                                   @Cast("const mx_uint") int provided_grad_req_list_len,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_grad_req_names,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_grad_req_types,
                                   @Cast("const mx_uint") int num_provided_arg_shapes,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_arg_shape_names,
                                   @Cast("const mx_uint*") IntBuffer provided_arg_shape_data,
                                   @Cast("const mx_uint*") IntBuffer provided_arg_shape_idx,
                                   @Cast("const mx_uint") int num_provided_arg_dtypes,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_arg_dtype_names,
                                   @Const IntBuffer provided_arg_dtypes,
                                   @Cast("const mx_uint") int num_provided_arg_stypes,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer provided_arg_stype_names,
                                   @Const IntBuffer provided_arg_stypes,
                                   @Cast("const mx_uint") int num_shared_arg_names,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer shared_arg_name_list,
                                   IntBuffer shared_buffer_len,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer shared_buffer_name_list,
                                   PointerPointer shared_buffer_handle_list,
                                   @Cast("const char***") @ByPtrPtr PointerPointer updated_shared_buffer_name_list,
                                   @ByPtrPtr PointerPointer updated_shared_buffer_handle_list,
                                   @Cast("mx_uint*") IntBuffer num_in_args,
                                   @ByPtrPtr PointerPointer in_args,
                                   @ByPtrPtr PointerPointer arg_grads,
                                   @Cast("mx_uint*") IntBuffer num_aux_states,
                                   @ByPtrPtr PointerPointer aux_states,
                                   ExecutorHandle shared_exec_handle,
                                   PointerPointer out);
public static native int MXExecutorSimpleBind(SymbolHandle symbol_handle,
                                   int dev_type,
                                   int dev_id,
                                   @Cast("const mx_uint") int num_g2c_keys,
                                   @Cast("const char**") @ByPtrPtr byte[] g2c_keys,
                                   @Const int[] g2c_dev_types,
                                   @Const int[] g2c_dev_ids,
                                   @Cast("const mx_uint") int provided_grad_req_list_len,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_grad_req_names,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_grad_req_types,
                                   @Cast("const mx_uint") int num_provided_arg_shapes,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_arg_shape_names,
                                   @Cast("const mx_uint*") int[] provided_arg_shape_data,
                                   @Cast("const mx_uint*") int[] provided_arg_shape_idx,
                                   @Cast("const mx_uint") int num_provided_arg_dtypes,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_arg_dtype_names,
                                   @Const int[] provided_arg_dtypes,
                                   @Cast("const mx_uint") int num_provided_arg_stypes,
                                   @Cast("const char**") @ByPtrPtr byte[] provided_arg_stype_names,
                                   @Const int[] provided_arg_stypes,
                                   @Cast("const mx_uint") int num_shared_arg_names,
                                   @Cast("const char**") @ByPtrPtr byte[] shared_arg_name_list,
                                   int[] shared_buffer_len,
                                   @Cast("const char**") @ByPtrPtr byte[] shared_buffer_name_list,
                                   @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle shared_buffer_handle_list,
                                   @Cast("const char***") @ByPtrPtr PointerPointer updated_shared_buffer_name_list,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer updated_shared_buffer_handle_list,
                                   @Cast("mx_uint*") int[] num_in_args,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer in_args,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer arg_grads,
                                   @Cast("mx_uint*") int[] num_aux_states,
                                   @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer aux_states,
                                   ExecutorHandle shared_exec_handle,
                                   @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);

/**
 * \brief Return a new executor with the same symbol and shared memory,
 * but different input/output shapes.
 *
 * @param partial_shaping Whether to allow changing the shape of unspecified arguments.
 * @param allow_up_sizing Whether to allow allocating new ndarrays that's larger than the original.
 * @param dev_type device type of default context
 * @param dev_id device id of default context
 * @param num_map_keys size of group2ctx map
 * @param map_keys keys of group2ctx map
 * @param map_dev_types device type of group2ctx map
 * @param map_dev_ids device id of group2ctx map
 * @param num_in_args length of in_args
 * @param in_args in args array
 * @param arg_grads arg grads handle array
 * @param num_aux_states length of auxiliary states
 * @param aux_states auxiliary states array
 * @param shared_exec input executor handle for memory sharing
 * @param out output executor handle
 * @return a new executor
 */
public static native int MXExecutorReshape(int partial_shaping,
                                int allow_up_sizing,
                                int dev_type,
                                int dev_id,
                                @Cast("mx_uint") int num_map_keys,
                                @Cast("const char**") PointerPointer map_keys,
                                @Const IntPointer map_dev_types,
                                @Const IntPointer map_dev_ids,
                                @Cast("const mx_uint") int num_provided_arg_shapes,
                                @Cast("const char**") PointerPointer provided_arg_shape_names,
                                @Cast("const mx_uint*") IntPointer provided_arg_shape_data,
                                @Cast("const mx_uint*") IntPointer provided_arg_shape_idx,
                                @Cast("mx_uint*") IntPointer num_in_args,
                                @ByPtrPtr PointerPointer in_args,
                                @ByPtrPtr PointerPointer arg_grads,
                                @Cast("mx_uint*") IntPointer num_aux_states,
                                @ByPtrPtr PointerPointer aux_states,
                                ExecutorHandle shared_exec,
                                PointerPointer out);
public static native int MXExecutorReshape(int partial_shaping,
                                int allow_up_sizing,
                                int dev_type,
                                int dev_id,
                                @Cast("mx_uint") int num_map_keys,
                                @Cast("const char**") @ByPtrPtr BytePointer map_keys,
                                @Const IntPointer map_dev_types,
                                @Const IntPointer map_dev_ids,
                                @Cast("const mx_uint") int num_provided_arg_shapes,
                                @Cast("const char**") @ByPtrPtr BytePointer provided_arg_shape_names,
                                @Cast("const mx_uint*") IntPointer provided_arg_shape_data,
                                @Cast("const mx_uint*") IntPointer provided_arg_shape_idx,
                                @Cast("mx_uint*") IntPointer num_in_args,
                                @ByPtrPtr PointerPointer in_args,
                                @ByPtrPtr PointerPointer arg_grads,
                                @Cast("mx_uint*") IntPointer num_aux_states,
                                @ByPtrPtr PointerPointer aux_states,
                                ExecutorHandle shared_exec,
                                PointerPointer out);
public static native int MXExecutorReshape(int partial_shaping,
                                int allow_up_sizing,
                                int dev_type,
                                int dev_id,
                                @Cast("mx_uint") int num_map_keys,
                                @Cast("const char**") @ByPtrPtr ByteBuffer map_keys,
                                @Const IntBuffer map_dev_types,
                                @Const IntBuffer map_dev_ids,
                                @Cast("const mx_uint") int num_provided_arg_shapes,
                                @Cast("const char**") @ByPtrPtr ByteBuffer provided_arg_shape_names,
                                @Cast("const mx_uint*") IntBuffer provided_arg_shape_data,
                                @Cast("const mx_uint*") IntBuffer provided_arg_shape_idx,
                                @Cast("mx_uint*") IntBuffer num_in_args,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer in_args,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer arg_grads,
                                @Cast("mx_uint*") IntBuffer num_aux_states,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer aux_states,
                                ExecutorHandle shared_exec,
                                @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorReshape(int partial_shaping,
                                int allow_up_sizing,
                                int dev_type,
                                int dev_id,
                                @Cast("mx_uint") int num_map_keys,
                                @Cast("const char**") @ByPtrPtr byte[] map_keys,
                                @Const int[] map_dev_types,
                                @Const int[] map_dev_ids,
                                @Cast("const mx_uint") int num_provided_arg_shapes,
                                @Cast("const char**") @ByPtrPtr byte[] provided_arg_shape_names,
                                @Cast("const mx_uint*") int[] provided_arg_shape_data,
                                @Cast("const mx_uint*") int[] provided_arg_shape_idx,
                                @Cast("mx_uint*") int[] num_in_args,
                                @ByPtrPtr PointerPointer in_args,
                                @ByPtrPtr PointerPointer arg_grads,
                                @Cast("mx_uint*") int[] num_aux_states,
                                @ByPtrPtr PointerPointer aux_states,
                                ExecutorHandle shared_exec,
                                PointerPointer out);
public static native int MXExecutorReshape(int partial_shaping,
                                int allow_up_sizing,
                                int dev_type,
                                int dev_id,
                                @Cast("mx_uint") int num_map_keys,
                                @Cast("const char**") @ByPtrPtr BytePointer map_keys,
                                @Const IntPointer map_dev_types,
                                @Const IntPointer map_dev_ids,
                                @Cast("const mx_uint") int num_provided_arg_shapes,
                                @Cast("const char**") @ByPtrPtr BytePointer provided_arg_shape_names,
                                @Cast("const mx_uint*") IntPointer provided_arg_shape_data,
                                @Cast("const mx_uint*") IntPointer provided_arg_shape_idx,
                                @Cast("mx_uint*") IntPointer num_in_args,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer in_args,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer arg_grads,
                                @Cast("mx_uint*") IntPointer num_aux_states,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer aux_states,
                                ExecutorHandle shared_exec,
                                @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);
public static native int MXExecutorReshape(int partial_shaping,
                                int allow_up_sizing,
                                int dev_type,
                                int dev_id,
                                @Cast("mx_uint") int num_map_keys,
                                @Cast("const char**") @ByPtrPtr ByteBuffer map_keys,
                                @Const IntBuffer map_dev_types,
                                @Const IntBuffer map_dev_ids,
                                @Cast("const mx_uint") int num_provided_arg_shapes,
                                @Cast("const char**") @ByPtrPtr ByteBuffer provided_arg_shape_names,
                                @Cast("const mx_uint*") IntBuffer provided_arg_shape_data,
                                @Cast("const mx_uint*") IntBuffer provided_arg_shape_idx,
                                @Cast("mx_uint*") IntBuffer num_in_args,
                                @ByPtrPtr PointerPointer in_args,
                                @ByPtrPtr PointerPointer arg_grads,
                                @Cast("mx_uint*") IntBuffer num_aux_states,
                                @ByPtrPtr PointerPointer aux_states,
                                ExecutorHandle shared_exec,
                                PointerPointer out);
public static native int MXExecutorReshape(int partial_shaping,
                                int allow_up_sizing,
                                int dev_type,
                                int dev_id,
                                @Cast("mx_uint") int num_map_keys,
                                @Cast("const char**") @ByPtrPtr byte[] map_keys,
                                @Const int[] map_dev_types,
                                @Const int[] map_dev_ids,
                                @Cast("const mx_uint") int num_provided_arg_shapes,
                                @Cast("const char**") @ByPtrPtr byte[] provided_arg_shape_names,
                                @Cast("const mx_uint*") int[] provided_arg_shape_data,
                                @Cast("const mx_uint*") int[] provided_arg_shape_idx,
                                @Cast("mx_uint*") int[] num_in_args,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer in_args,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer arg_grads,
                                @Cast("mx_uint*") int[] num_aux_states,
                                @Cast("NDArrayHandle**") @ByPtrPtr PointerPointer aux_states,
                                ExecutorHandle shared_exec,
                                @Cast("ExecutorHandle*") @ByPtrPtr ExecutorHandle out);

/**
 * \brief get optimized graph from graph executor
 */
public static native int MXExecutorGetOptimizedSymbol(ExecutorHandle handle,
                                           PointerPointer out);
public static native int MXExecutorGetOptimizedSymbol(ExecutorHandle handle,
                                           @Cast("SymbolHandle*") @ByPtrPtr SymbolHandle out);

/**
 * \brief set a call back to notify the completion of operation
 */
public static native int MXExecutorSetMonitorCallback(ExecutorHandle handle,
                                           ExecutorMonitorCallback callback,
                                           Pointer callback_handle);
//--------------------------------------------
// Part 5: IO Interface
//--------------------------------------------
/**
 * \brief List all the available iterator entries
 * @param out_size the size of returned iterators
 * @param out_array the output iteratos entries
 * @return 0 when success, -1 when failure happens
 */
public static native int MXListDataIters(@Cast("mx_uint*") IntPointer out_size,
                              @ByPtrPtr PointerPointer out_array);
public static native int MXListDataIters(@Cast("mx_uint*") IntBuffer out_size,
                              @Cast("DataIterCreator**") @ByPtrPtr PointerPointer out_array);
public static native int MXListDataIters(@Cast("mx_uint*") int[] out_size,
                              @ByPtrPtr PointerPointer out_array);
/**
 * \brief Init an iterator, init with parameters
 * the array size of passed in arguments
 * @param handle of the iterator creator
 * @param num_param number of parameter
 * @param keys parameter keys
 * @param vals parameter values
 * @param out resulting iterator
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterCreateIter(DataIterCreator handle,
                                   @Cast("mx_uint") int num_param,
                                   @Cast("const char**") PointerPointer keys,
                                   @Cast("const char**") PointerPointer vals,
                                   PointerPointer out);
public static native int MXDataIterCreateIter(DataIterCreator handle,
                                   @Cast("mx_uint") int num_param,
                                   @Cast("const char**") @ByPtrPtr BytePointer keys,
                                   @Cast("const char**") @ByPtrPtr BytePointer vals,
                                   PointerPointer out);
public static native int MXDataIterCreateIter(DataIterCreator handle,
                                   @Cast("mx_uint") int num_param,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer vals,
                                   @Cast("DataIterHandle*") @ByPtrPtr DataIterHandle out);
public static native int MXDataIterCreateIter(DataIterCreator handle,
                                   @Cast("mx_uint") int num_param,
                                   @Cast("const char**") @ByPtrPtr byte[] keys,
                                   @Cast("const char**") @ByPtrPtr byte[] vals,
                                   PointerPointer out);
public static native int MXDataIterCreateIter(DataIterCreator handle,
                                   @Cast("mx_uint") int num_param,
                                   @Cast("const char**") @ByPtrPtr BytePointer keys,
                                   @Cast("const char**") @ByPtrPtr BytePointer vals,
                                   @Cast("DataIterHandle*") @ByPtrPtr DataIterHandle out);
public static native int MXDataIterCreateIter(DataIterCreator handle,
                                   @Cast("mx_uint") int num_param,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                   @Cast("const char**") @ByPtrPtr ByteBuffer vals,
                                   PointerPointer out);
public static native int MXDataIterCreateIter(DataIterCreator handle,
                                   @Cast("mx_uint") int num_param,
                                   @Cast("const char**") @ByPtrPtr byte[] keys,
                                   @Cast("const char**") @ByPtrPtr byte[] vals,
                                   @Cast("DataIterHandle*") @ByPtrPtr DataIterHandle out);
/**
 * \brief Get the detailed information about data iterator.
 * @param creator the DataIterCreator.
 * @param name The returned name of the creator.
 * @param description The returned description of the symbol.
 * @param num_args Number of arguments.
 * @param arg_names Name of the arguments.
 * @param arg_type_infos Type informations about the arguments.
 * @param arg_descriptions Description information about the arguments.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterGetIterInfo(DataIterCreator creator,
                                    @Cast("const char**") PointerPointer name,
                                    @Cast("const char**") PointerPointer description,
                                    @Cast("mx_uint*") IntPointer num_args,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions);
public static native int MXDataIterGetIterInfo(DataIterCreator creator,
                                    @Cast("const char**") @ByPtrPtr BytePointer name,
                                    @Cast("const char**") @ByPtrPtr BytePointer description,
                                    @Cast("mx_uint*") IntPointer num_args,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions);
public static native int MXDataIterGetIterInfo(DataIterCreator creator,
                                    @Cast("const char**") @ByPtrPtr ByteBuffer name,
                                    @Cast("const char**") @ByPtrPtr ByteBuffer description,
                                    @Cast("mx_uint*") IntBuffer num_args,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions);
public static native int MXDataIterGetIterInfo(DataIterCreator creator,
                                    @Cast("const char**") @ByPtrPtr byte[] name,
                                    @Cast("const char**") @ByPtrPtr byte[] description,
                                    @Cast("mx_uint*") int[] num_args,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_names,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_type_infos,
                                    @Cast("const char***") @ByPtrPtr PointerPointer arg_descriptions);
/**
 * \brief Free the handle to the IO module
 * @param handle the handle pointer to the data iterator
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterFree(DataIterHandle handle);
/**
 * \brief Move iterator to next position
 * @param handle the handle to iterator
 * @param out return value of next
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterNext(DataIterHandle handle,
                             IntPointer out);
public static native int MXDataIterNext(DataIterHandle handle,
                             IntBuffer out);
public static native int MXDataIterNext(DataIterHandle handle,
                             int[] out);
/**
 * \brief Call iterator.Reset
 * @param handle the handle to iterator
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterBeforeFirst(DataIterHandle handle);

/**
 * \brief Get the handle to the NDArray of underlying data
 * @param handle the handle pointer to the data iterator
 * @param out handle to underlying data NDArray
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterGetData(DataIterHandle handle,
                                PointerPointer out);
public static native int MXDataIterGetData(DataIterHandle handle,
                                @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
/**
 * \brief Get the image index by array.
 * @param handle the handle pointer to the data iterator
 * @param out_index output index of the array.
 * @param out_size output size of the array.
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterGetIndex(DataIterHandle handle,
                                 @Cast("uint64_t**") PointerPointer out_index,
                                 @Cast("uint64_t*") LongPointer out_size);
public static native int MXDataIterGetIndex(DataIterHandle handle,
                                 @Cast("uint64_t**") @ByPtrPtr LongPointer out_index,
                                 @Cast("uint64_t*") LongPointer out_size);
public static native int MXDataIterGetIndex(DataIterHandle handle,
                                 @Cast("uint64_t**") @ByPtrPtr LongBuffer out_index,
                                 @Cast("uint64_t*") LongBuffer out_size);
public static native int MXDataIterGetIndex(DataIterHandle handle,
                                 @Cast("uint64_t**") @ByPtrPtr long[] out_index,
                                 @Cast("uint64_t*") long[] out_size);
/**
 * \brief Get the padding number in current data batch
 * @param handle the handle pointer to the data iterator
 * @param pad pad number ptr
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterGetPadNum(DataIterHandle handle,
                                  IntPointer pad);
public static native int MXDataIterGetPadNum(DataIterHandle handle,
                                  IntBuffer pad);
public static native int MXDataIterGetPadNum(DataIterHandle handle,
                                  int[] pad);

/**
 * \brief Get the handle to the NDArray of underlying label
 * @param handle the handle pointer to the data iterator
 * @param out the handle to underlying label NDArray
 * @return 0 when success, -1 when failure happens
 */
public static native int MXDataIterGetLabel(DataIterHandle handle,
                                 PointerPointer out);
public static native int MXDataIterGetLabel(DataIterHandle handle,
                                 @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
//--------------------------------------------
// Part 6: basic KVStore interface
//--------------------------------------------
/**
 * \brief Initialized ps-lite environment variables
 * @param num_vars number of variables to initialize
 * @param keys environment keys
 * @param vals environment values
 */
public static native int MXInitPSEnv(@Cast("mx_uint") int num_vars,
                          @Cast("const char**") PointerPointer keys,
                          @Cast("const char**") PointerPointer vals);
public static native int MXInitPSEnv(@Cast("mx_uint") int num_vars,
                          @Cast("const char**") @ByPtrPtr BytePointer keys,
                          @Cast("const char**") @ByPtrPtr BytePointer vals);
public static native int MXInitPSEnv(@Cast("mx_uint") int num_vars,
                          @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                          @Cast("const char**") @ByPtrPtr ByteBuffer vals);
public static native int MXInitPSEnv(@Cast("mx_uint") int num_vars,
                          @Cast("const char**") @ByPtrPtr byte[] keys,
                          @Cast("const char**") @ByPtrPtr byte[] vals);


/**
 * \brief Create a kvstore
 * @param type the type of KVStore
 * @param out The output type of KVStore
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreCreate(@Cast("const char*") BytePointer type,
                              PointerPointer out);
public static native int MXKVStoreCreate(String type,
                              @Cast("KVStoreHandle*") @ByPtrPtr KVStoreHandle out);

/**
 * \brief Set parameters to use low-bit compressed gradients
 * @param handle handle to the kvstore
 * @param keys keys for compression parameters
 * @param vals values for compression parameters
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreSetGradientCompression(KVStoreHandle handle,
                                              @Cast("mx_uint") int num_params,
                                              @Cast("const char**") PointerPointer keys,
                                              @Cast("const char**") PointerPointer vals);
public static native int MXKVStoreSetGradientCompression(KVStoreHandle handle,
                                              @Cast("mx_uint") int num_params,
                                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                                              @Cast("const char**") @ByPtrPtr BytePointer vals);
public static native int MXKVStoreSetGradientCompression(KVStoreHandle handle,
                                              @Cast("mx_uint") int num_params,
                                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                              @Cast("const char**") @ByPtrPtr ByteBuffer vals);
public static native int MXKVStoreSetGradientCompression(KVStoreHandle handle,
                                              @Cast("mx_uint") int num_params,
                                              @Cast("const char**") @ByPtrPtr byte[] keys,
                                              @Cast("const char**") @ByPtrPtr byte[] vals);

/**
 * \brief Delete a KVStore handle.
 * @param handle handle to the kvstore
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreFree(KVStoreHandle handle);
/**
 * \brief Init a list of (key,value) pairs in kvstore
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreInit(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntPointer keys,
                            PointerPointer vals);
public static native int MXKVStoreInit(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntBuffer keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals);
public static native int MXKVStoreInit(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const int[] keys,
                            PointerPointer vals);
public static native int MXKVStoreInit(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntPointer keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals);
public static native int MXKVStoreInit(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntBuffer keys,
                            PointerPointer vals);
public static native int MXKVStoreInit(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const int[] keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals);

/**
 * \brief Init a list of (key,value) pairs in kvstore, where each key is a string
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreInitEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") PointerPointer keys,
                              PointerPointer vals);
public static native int MXKVStoreInitEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                              PointerPointer vals);
public static native int MXKVStoreInitEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals);
public static native int MXKVStoreInitEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr byte[] keys,
                              PointerPointer vals);
public static native int MXKVStoreInitEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals);
public static native int MXKVStoreInitEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                              PointerPointer vals);
public static native int MXKVStoreInitEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr byte[] keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals);

/**
 * \brief Push a list of (key,value) pairs to kvstore
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @param priority the priority of the action
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStorePush(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntPointer keys,
                            PointerPointer vals,
                            int priority);
public static native int MXKVStorePush(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntBuffer keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                            int priority);
public static native int MXKVStorePush(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const int[] keys,
                            PointerPointer vals,
                            int priority);
public static native int MXKVStorePush(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntPointer keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                            int priority);
public static native int MXKVStorePush(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntBuffer keys,
                            PointerPointer vals,
                            int priority);
public static native int MXKVStorePush(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const int[] keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                            int priority);
/**
 * \brief Push a list of (key,value) pairs to kvstore, where each key is a string
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @param priority the priority of the action
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStorePushEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") PointerPointer keys,
                              PointerPointer vals,
                              int priority);
public static native int MXKVStorePushEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                              PointerPointer vals,
                              int priority);
public static native int MXKVStorePushEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                              int priority);
public static native int MXKVStorePushEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr byte[] keys,
                              PointerPointer vals,
                              int priority);
public static native int MXKVStorePushEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                              int priority);
public static native int MXKVStorePushEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                              PointerPointer vals,
                              int priority);
public static native int MXKVStorePushEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr byte[] keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                              int priority);
/**
 * \brief pull a list of (key, value) pairs from the kvstore
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @param priority the priority of the action
 * @param ignore_sparse whether to ignore sparse arrays in the request
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStorePullWithSparse(KVStoreHandle handle,
                                      @Cast("mx_uint") int num,
                                      @Const IntPointer keys,
                                      PointerPointer vals,
                                      int priority,
                                      @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparse(KVStoreHandle handle,
                                      @Cast("mx_uint") int num,
                                      @Const IntBuffer keys,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                      int priority,
                                      @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparse(KVStoreHandle handle,
                                      @Cast("mx_uint") int num,
                                      @Const int[] keys,
                                      PointerPointer vals,
                                      int priority,
                                      @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparse(KVStoreHandle handle,
                                      @Cast("mx_uint") int num,
                                      @Const IntPointer keys,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                      int priority,
                                      @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparse(KVStoreHandle handle,
                                      @Cast("mx_uint") int num,
                                      @Const IntBuffer keys,
                                      PointerPointer vals,
                                      int priority,
                                      @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparse(KVStoreHandle handle,
                                      @Cast("mx_uint") int num,
                                      @Const int[] keys,
                                      @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                      int priority,
                                      @Cast("bool") boolean ignore_sparse);
/**
 * \brief pull a list of (key, value) pairs from the kvstore, where each key is a string
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @param priority the priority of the action
 * @param ignore_sparse whether to ignore sparse arrays in the request
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStorePullWithSparseEx(KVStoreHandle handle,
                                        @Cast("mx_uint") int num,
                                        @Cast("const char**") PointerPointer keys,
                                        PointerPointer vals,
                                        int priority,
                                        @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparseEx(KVStoreHandle handle,
                                        @Cast("mx_uint") int num,
                                        @Cast("const char**") @ByPtrPtr BytePointer keys,
                                        PointerPointer vals,
                                        int priority,
                                        @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparseEx(KVStoreHandle handle,
                                        @Cast("mx_uint") int num,
                                        @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                        @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                        int priority,
                                        @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparseEx(KVStoreHandle handle,
                                        @Cast("mx_uint") int num,
                                        @Cast("const char**") @ByPtrPtr byte[] keys,
                                        PointerPointer vals,
                                        int priority,
                                        @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparseEx(KVStoreHandle handle,
                                        @Cast("mx_uint") int num,
                                        @Cast("const char**") @ByPtrPtr BytePointer keys,
                                        @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                        int priority,
                                        @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparseEx(KVStoreHandle handle,
                                        @Cast("mx_uint") int num,
                                        @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                        PointerPointer vals,
                                        int priority,
                                        @Cast("bool") boolean ignore_sparse);
public static native int MXKVStorePullWithSparseEx(KVStoreHandle handle,
                                        @Cast("mx_uint") int num,
                                        @Cast("const char**") @ByPtrPtr byte[] keys,
                                        @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                        int priority,
                                        @Cast("bool") boolean ignore_sparse);
/**
 * \brief pull a list of (key, value) pairs from the kvstore
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @param priority the priority of the action
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStorePull(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntPointer keys,
                            PointerPointer vals,
                            int priority);
public static native int MXKVStorePull(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntBuffer keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                            int priority);
public static native int MXKVStorePull(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const int[] keys,
                            PointerPointer vals,
                            int priority);
public static native int MXKVStorePull(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntPointer keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                            int priority);
public static native int MXKVStorePull(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const IntBuffer keys,
                            PointerPointer vals,
                            int priority);
public static native int MXKVStorePull(KVStoreHandle handle,
                            @Cast("mx_uint") int num,
                            @Const int[] keys,
                            @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                            int priority);
/**
 * \brief pull a list of (key, value) pairs from the kvstore, where each key is a string
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @param priority the priority of the action
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStorePullEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") PointerPointer keys,
                              PointerPointer vals,
                              int priority);
public static native int MXKVStorePullEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                              PointerPointer vals,
                              int priority);
public static native int MXKVStorePullEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                              int priority);
public static native int MXKVStorePullEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr byte[] keys,
                              PointerPointer vals,
                              int priority);
public static native int MXKVStorePullEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr BytePointer keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                              int priority);
public static native int MXKVStorePullEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                              PointerPointer vals,
                              int priority);
public static native int MXKVStorePullEx(KVStoreHandle handle,
                              @Cast("mx_uint") int num,
                              @Cast("const char**") @ByPtrPtr byte[] keys,
                              @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                              int priority);

/**
 * \brief pull a list of (key, value) pairs from the kvstore, where each key is an integer.
 *        The NDArray pulled back will be in row_sparse storage with only the specified
 *        row_ids present based row_ids (others rows are zeros).
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @param row_ids the list of row_id NDArrays
 * @param priority the priority of the action
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStorePullRowSparse(KVStoreHandle handle,
                                     @Cast("mx_uint") int num,
                                     @Const IntPointer keys,
                                     PointerPointer vals,
                                     @Cast("NDArrayHandle*") PointerPointer row_ids,
                                     int priority);
public static native int MXKVStorePullRowSparse(KVStoreHandle handle,
                                     @Cast("mx_uint") int num,
                                     @Const IntBuffer keys,
                                     @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                     @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle row_ids,
                                     int priority);
public static native int MXKVStorePullRowSparse(KVStoreHandle handle,
                                     @Cast("mx_uint") int num,
                                     @Const int[] keys,
                                     PointerPointer vals,
                                     @Cast("NDArrayHandle*") PointerPointer row_ids,
                                     int priority);
public static native int MXKVStorePullRowSparse(KVStoreHandle handle,
                                     @Cast("mx_uint") int num,
                                     @Const IntPointer keys,
                                     @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                     @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle row_ids,
                                     int priority);
public static native int MXKVStorePullRowSparse(KVStoreHandle handle,
                                     @Cast("mx_uint") int num,
                                     @Const IntBuffer keys,
                                     PointerPointer vals,
                                     @Cast("NDArrayHandle*") PointerPointer row_ids,
                                     int priority);
public static native int MXKVStorePullRowSparse(KVStoreHandle handle,
                                     @Cast("mx_uint") int num,
                                     @Const int[] keys,
                                     @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                     @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle row_ids,
                                     int priority);
/**
 * \brief pull a list of (key, value) pairs from the kvstore, where each key is a string.
 *        The NDArray pulled back will be in row_sparse storage with only the specified
 *        row_ids present based row_ids (others rows are zeros).
 * @param handle handle to the kvstore
 * @param num the number of key-value pairs
 * @param keys the list of keys
 * @param vals the list of values
 * @param row_ids the list of row_id NDArrays
 * @param priority the priority of the action
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStorePullRowSparseEx(KVStoreHandle handle,
                                       @Cast("mx_uint") int num,
                                       @Cast("const char**") PointerPointer keys,
                                       PointerPointer vals,
                                       @Cast("NDArrayHandle*") PointerPointer row_ids,
                                       int priority);
public static native int MXKVStorePullRowSparseEx(KVStoreHandle handle,
                                       @Cast("mx_uint") int num,
                                       @Cast("const char**") @ByPtrPtr BytePointer keys,
                                       PointerPointer vals,
                                       @Cast("NDArrayHandle*") PointerPointer row_ids,
                                       int priority);
public static native int MXKVStorePullRowSparseEx(KVStoreHandle handle,
                                       @Cast("mx_uint") int num,
                                       @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                       @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                       @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle row_ids,
                                       int priority);
public static native int MXKVStorePullRowSparseEx(KVStoreHandle handle,
                                       @Cast("mx_uint") int num,
                                       @Cast("const char**") @ByPtrPtr byte[] keys,
                                       PointerPointer vals,
                                       @Cast("NDArrayHandle*") PointerPointer row_ids,
                                       int priority);
public static native int MXKVStorePullRowSparseEx(KVStoreHandle handle,
                                       @Cast("mx_uint") int num,
                                       @Cast("const char**") @ByPtrPtr BytePointer keys,
                                       @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                       @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle row_ids,
                                       int priority);
public static native int MXKVStorePullRowSparseEx(KVStoreHandle handle,
                                       @Cast("mx_uint") int num,
                                       @Cast("const char**") @ByPtrPtr ByteBuffer keys,
                                       PointerPointer vals,
                                       @Cast("NDArrayHandle*") PointerPointer row_ids,
                                       int priority);
public static native int MXKVStorePullRowSparseEx(KVStoreHandle handle,
                                       @Cast("mx_uint") int num,
                                       @Cast("const char**") @ByPtrPtr byte[] keys,
                                       @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle vals,
                                       @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle row_ids,
                                       int priority);
// Targeting ../MXKVStoreUpdater.java


// Targeting ../MXKVStoreStrUpdater.java


/**
 * \brief register a push updater
 * @param handle handle to the KVStore
 * @param updater udpater function
 * @param updater_handle The additional handle used to invoke the updater
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreSetUpdater(KVStoreHandle handle,
                                  MXKVStoreUpdater updater,
                                  Pointer updater_handle);
/**
 * \brief register a push updater with int keys and one with string keys
 * @param handle handle to the KVStore
 * @param updater updater function with int keys
 * @param str_updater updater function with string keys
 * @param updater_handle The additional handle used to invoke the updater
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreSetUpdaterEx(KVStoreHandle handle,
                                    MXKVStoreUpdater updater,
                                    MXKVStoreStrUpdater str_updater,
                                    Pointer updater_handle);
/**
 * \brief get the type of the kvstore
 * @param handle handle to the KVStore
 * @param type a string type
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreGetType(KVStoreHandle handle,
                               @Cast("const char**") PointerPointer type);
public static native int MXKVStoreGetType(KVStoreHandle handle,
                               @Cast("const char**") @ByPtrPtr BytePointer type);
public static native int MXKVStoreGetType(KVStoreHandle handle,
                               @Cast("const char**") @ByPtrPtr ByteBuffer type);
public static native int MXKVStoreGetType(KVStoreHandle handle,
                               @Cast("const char**") @ByPtrPtr byte[] type);
//--------------------------------------------
// Part 6: advanced KVStore for multi-machines
//--------------------------------------------

/**
 * \brief return The rank of this node in its group, which is in [0, GroupSize).
 *
 * @param handle handle to the KVStore
 * @param ret the node rank
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreGetRank(KVStoreHandle handle,
                               IntPointer ret);
public static native int MXKVStoreGetRank(KVStoreHandle handle,
                               IntBuffer ret);
public static native int MXKVStoreGetRank(KVStoreHandle handle,
                               int[] ret);

/**
 * \brief return The number of nodes in this group, which is
 * - number of workers if if {@code IsWorkerNode() == true},
 * - number of servers if if {@code IsServerNode() == true},
 * - 1 if {@code IsSchedulerNode() == true},
 * @param handle handle to the KVStore
 * @param ret the group size
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreGetGroupSize(KVStoreHandle handle,
                                    IntPointer ret);
public static native int MXKVStoreGetGroupSize(KVStoreHandle handle,
                                    IntBuffer ret);
public static native int MXKVStoreGetGroupSize(KVStoreHandle handle,
                                    int[] ret);

/**
 * \brief return whether or not this process is a worker node.
 * @param ret 1 for yes, 0 for no
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreIsWorkerNode(IntPointer ret);
public static native int MXKVStoreIsWorkerNode(IntBuffer ret);
public static native int MXKVStoreIsWorkerNode(int[] ret);


/**
 * \brief return whether or not this process is a server node.
 * @param ret 1 for yes, 0 for no
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreIsServerNode(IntPointer ret);
public static native int MXKVStoreIsServerNode(IntBuffer ret);
public static native int MXKVStoreIsServerNode(int[] ret);


/**
 * \brief return whether or not this process is a scheduler node.
 * @param ret 1 for yes, 0 for no
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreIsSchedulerNode(IntPointer ret);
public static native int MXKVStoreIsSchedulerNode(IntBuffer ret);
public static native int MXKVStoreIsSchedulerNode(int[] ret);

/**
 * \brief global barrier among all worker machines
 *
 * @param handle handle to the KVStore
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreBarrier(KVStoreHandle handle);

/**
 * \brief whether to do barrier when finalize
 *
 * @param handle handle to the KVStore
 * @param barrier_before_exit whether to do barrier when kvstore finalize
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreSetBarrierBeforeExit(KVStoreHandle handle,
                                            int barrier_before_exit);
// Targeting ../MXKVStoreServerController.java



/**
 * \brief Run as server (or scheduler)
 * @param handle handle to the KVStore
 * @param controller the user-defined server controller
 * @param controller_handle helper handle for implementing controller
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreRunServer(KVStoreHandle handle,
                                 MXKVStoreServerController controller,
                                 Pointer controller_handle);

/**
 * \brief Send a command to all server nodes
 * @param handle handle to the KVStore
 * @param cmd_id the head of the command
 * @param cmd_body the body of the command
 * @return 0 when success, -1 when failure happens
 */
public static native int MXKVStoreSendCommmandToServers(KVStoreHandle handle,
                                             int cmd_id,
                                             @Cast("const char*") BytePointer cmd_body);
public static native int MXKVStoreSendCommmandToServers(KVStoreHandle handle,
                                             int cmd_id,
                                             String cmd_body);

/**
 * \brief Get the number of ps dead node(s) specified by {node_id}
 *
 * @param handle handle to the KVStore
 * @param node_id Can be a node group or a single node.
 *                kScheduler = 1, kServerGroup = 2, kWorkerGroup = 4
 * @param number Ouptut number of dead nodes
 * @param timeout_sec A node fails to send heartbeart in {timeout_sec} seconds
 *                    will be presumed as 'dead'
 */
public static native int MXKVStoreGetNumDeadNode(KVStoreHandle handle,
                                      int node_id,
                                      IntPointer number,
                                      int timeout_sec/*=60*/);
public static native int MXKVStoreGetNumDeadNode(KVStoreHandle handle,
                                      int node_id,
                                      IntPointer number);
public static native int MXKVStoreGetNumDeadNode(KVStoreHandle handle,
                                      int node_id,
                                      IntBuffer number,
                                      int timeout_sec/*=60*/);
public static native int MXKVStoreGetNumDeadNode(KVStoreHandle handle,
                                      int node_id,
                                      IntBuffer number);
public static native int MXKVStoreGetNumDeadNode(KVStoreHandle handle,
                                      int node_id,
                                      int[] number,
                                      int timeout_sec/*=60*/);
public static native int MXKVStoreGetNumDeadNode(KVStoreHandle handle,
                                      int node_id,
                                      int[] number);

/**
 * \brief Create a RecordIO writer object
 * @param uri path to file
 * @param out handle pointer to the created object
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOWriterCreate(@Cast("const char*") BytePointer uri, PointerPointer out);
public static native int MXRecordIOWriterCreate(String uri, @Cast("RecordIOHandle*") @ByPtrPtr RecordIOHandle out);

/**
 * \brief Delete a RecordIO writer object
 * @param handle handle to RecordIO object
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOWriterFree(RecordIOHandle handle);

/**
 * \brief Write a record to a RecordIO object
 * @param handle handle to RecordIO object
 * @param buf buffer to write
 * @param size size of buffer
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOWriterWriteRecord(RecordIOHandle handle,
                                          @Cast("const char*") BytePointer buf, @Cast("size_t") long size);
public static native int MXRecordIOWriterWriteRecord(RecordIOHandle handle,
                                          String buf, @Cast("size_t") long size);

/**
 * \brief Get the current writer pointer position
 * @param handle handle to RecordIO object
 * @param pos handle to output position
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOWriterTell(RecordIOHandle handle, @Cast("size_t*") SizeTPointer pos);

/**
 * \brief Create a RecordIO reader object
 * @param uri path to file
 * @param out handle pointer to the created object
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOReaderCreate(@Cast("const char*") BytePointer uri, PointerPointer out);
public static native int MXRecordIOReaderCreate(String uri, @Cast("RecordIOHandle*") @ByPtrPtr RecordIOHandle out);

/**
 * \brief Delete a RecordIO reader object
 * @param handle handle to RecordIO object
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOReaderFree(RecordIOHandle handle);

/**
 * \brief Write a record to a RecordIO object
 * @param handle handle to RecordIO object
 * @param buf pointer to return buffer
 * @param size point to size of buffer
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOReaderReadRecord(RecordIOHandle handle,
                                        @Cast("const char**") PointerPointer buf, @Cast("size_t*") SizeTPointer size);
public static native int MXRecordIOReaderReadRecord(RecordIOHandle handle,
                                        @Cast("const char**") @ByPtrPtr BytePointer buf, @Cast("size_t*") SizeTPointer size);
public static native int MXRecordIOReaderReadRecord(RecordIOHandle handle,
                                        @Cast("const char**") @ByPtrPtr ByteBuffer buf, @Cast("size_t*") SizeTPointer size);
public static native int MXRecordIOReaderReadRecord(RecordIOHandle handle,
                                        @Cast("const char**") @ByPtrPtr byte[] buf, @Cast("size_t*") SizeTPointer size);

/**
 * \brief Set the current reader pointer position
 * @param handle handle to RecordIO object
 * @param pos target position
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOReaderSeek(RecordIOHandle handle, @Cast("size_t") long pos);

/**
 * \brief Get the current writer pointer position
 * @param handle handle to RecordIO object
 * @param pos handle to output position
 * @return 0 when success, -1 when failure happens
*/
public static native int MXRecordIOReaderTell(RecordIOHandle handle, @Cast("size_t*") SizeTPointer pos);

/**
 * \brief Create a MXRtc object
*/
public static native int MXRtcCreate(@Cast("char*") BytePointer name, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                          @Cast("char**") PointerPointer input_names, @Cast("char**") PointerPointer output_names,
                          PointerPointer inputs, PointerPointer outputs,
                          @Cast("char*") BytePointer kernel, PointerPointer out);
public static native int MXRtcCreate(@Cast("char*") BytePointer name, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                          @Cast("char**") @ByPtrPtr BytePointer input_names, @Cast("char**") @ByPtrPtr BytePointer output_names,
                          PointerPointer inputs, PointerPointer outputs,
                          @Cast("char*") BytePointer kernel, PointerPointer out);
public static native int MXRtcCreate(@Cast("char*") ByteBuffer name, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                          @Cast("char**") @ByPtrPtr ByteBuffer input_names, @Cast("char**") @ByPtrPtr ByteBuffer output_names,
                          @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle outputs,
                          @Cast("char*") ByteBuffer kernel, @Cast("RtcHandle*") @ByPtrPtr RtcHandle out);
public static native int MXRtcCreate(@Cast("char*") byte[] name, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                          @Cast("char**") @ByPtrPtr byte[] input_names, @Cast("char**") @ByPtrPtr byte[] output_names,
                          PointerPointer inputs, PointerPointer outputs,
                          @Cast("char*") byte[] kernel, PointerPointer out);
public static native int MXRtcCreate(@Cast("char*") BytePointer name, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                          @Cast("char**") @ByPtrPtr BytePointer input_names, @Cast("char**") @ByPtrPtr BytePointer output_names,
                          @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle outputs,
                          @Cast("char*") BytePointer kernel, @Cast("RtcHandle*") @ByPtrPtr RtcHandle out);
public static native int MXRtcCreate(@Cast("char*") ByteBuffer name, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                          @Cast("char**") @ByPtrPtr ByteBuffer input_names, @Cast("char**") @ByPtrPtr ByteBuffer output_names,
                          PointerPointer inputs, PointerPointer outputs,
                          @Cast("char*") ByteBuffer kernel, PointerPointer out);
public static native int MXRtcCreate(@Cast("char*") byte[] name, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                          @Cast("char**") @ByPtrPtr byte[] input_names, @Cast("char**") @ByPtrPtr byte[] output_names,
                          @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle outputs,
                          @Cast("char*") byte[] kernel, @Cast("RtcHandle*") @ByPtrPtr RtcHandle out);

/**
 * \brief Run cuda kernel
*/
public static native int MXRtcPush(RtcHandle handle, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                        PointerPointer inputs, PointerPointer outputs,
                        @Cast("mx_uint") int gridDimX,
                        @Cast("mx_uint") int gridDimY,
                        @Cast("mx_uint") int gridDimZ,
                        @Cast("mx_uint") int blockDimX,
                        @Cast("mx_uint") int blockDimY,
                        @Cast("mx_uint") int blockDimZ);
public static native int MXRtcPush(RtcHandle handle, @Cast("mx_uint") int num_input, @Cast("mx_uint") int num_output,
                        @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle outputs,
                        @Cast("mx_uint") int gridDimX,
                        @Cast("mx_uint") int gridDimY,
                        @Cast("mx_uint") int gridDimZ,
                        @Cast("mx_uint") int blockDimX,
                        @Cast("mx_uint") int blockDimY,
                        @Cast("mx_uint") int blockDimZ);

/**
 * \brief Delete a MXRtc object
*/
public static native int MXRtcFree(RtcHandle handle);
/*
 * \brief register custom operators from frontend.
 * \param op_type name of custom op
 * \param creator
 */
public static native int MXCustomOpRegister(@Cast("const char*") BytePointer op_type, CustomOpPropCreator creator);
public static native int MXCustomOpRegister(String op_type, CustomOpPropCreator creator);
/*
 * \brief record custom function for backward later.
 * \param num_inputs number of input NDArrays.
 * \param inputs handle to input NDArrays.
 * \param num_outputs number of output NDArrays.
 * \param outputs handle to output NDArrays.
 * \param callbacks callbacks for backward function.
 */
public static native int MXCustomFunctionRecord(int num_inputs, PointerPointer inputs,
                                     int num_outputs, PointerPointer outputs,
                                     MXCallbackList callbacks);
public static native int MXCustomFunctionRecord(int num_inputs, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle inputs,
                                     int num_outputs, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle outputs,
                                     MXCallbackList callbacks);
/*
 * \brief create cuda rtc module
 * \param source cuda source code
 * \param num_options number of compiler flags
 * \param options compiler flags
 * \param num_exports number of exported function names
 * \param exported function names
 * \param out handle to created module
 */
public static native int MXRtcCudaModuleCreate(@Cast("const char*") BytePointer source, int num_options,
                                    @Cast("const char**") PointerPointer options, int num_exports,
                                    @Cast("const char**") PointerPointer exports, @ByPtrPtr CudaModuleHandle out);
public static native int MXRtcCudaModuleCreate(@Cast("const char*") BytePointer source, int num_options,
                                    @Cast("const char**") @ByPtrPtr BytePointer options, int num_exports,
                                    @Cast("const char**") @ByPtrPtr BytePointer exports, @ByPtrPtr CudaModuleHandle out);
public static native int MXRtcCudaModuleCreate(String source, int num_options,
                                    @Cast("const char**") @ByPtrPtr ByteBuffer options, int num_exports,
                                    @Cast("const char**") @ByPtrPtr ByteBuffer exports, @ByPtrPtr CudaModuleHandle out);
public static native int MXRtcCudaModuleCreate(@Cast("const char*") BytePointer source, int num_options,
                                    @Cast("const char**") @ByPtrPtr byte[] options, int num_exports,
                                    @Cast("const char**") @ByPtrPtr byte[] exports, @ByPtrPtr CudaModuleHandle out);
public static native int MXRtcCudaModuleCreate(String source, int num_options,
                                    @Cast("const char**") @ByPtrPtr BytePointer options, int num_exports,
                                    @Cast("const char**") @ByPtrPtr BytePointer exports, @ByPtrPtr CudaModuleHandle out);
public static native int MXRtcCudaModuleCreate(@Cast("const char*") BytePointer source, int num_options,
                                    @Cast("const char**") @ByPtrPtr ByteBuffer options, int num_exports,
                                    @Cast("const char**") @ByPtrPtr ByteBuffer exports, @ByPtrPtr CudaModuleHandle out);
public static native int MXRtcCudaModuleCreate(String source, int num_options,
                                    @Cast("const char**") @ByPtrPtr byte[] options, int num_exports,
                                    @Cast("const char**") @ByPtrPtr byte[] exports, @ByPtrPtr CudaModuleHandle out);
/*
 * \brief delete cuda rtc module
 * \param handle handle to cuda module
 */
public static native int MXRtcCudaModuleFree(CudaModuleHandle handle);
/*
 * \brief get kernel from module
 * \param handle handle to cuda module
 * \param name name of kernel function
 * \param num_args number of arguments
 * \param is_ndarray whether argument is ndarray
 * \param is_const whether argument is constant
 * \param arg_types data type of arguments
 * \param out created kernel
 */
public static native int MXRtcCudaKernelCreate(CudaModuleHandle handle, @Cast("const char*") BytePointer name,
                                    int num_args, IntPointer is_ndarray, IntPointer is_const,
                                    IntPointer arg_types, @ByPtrPtr CudaKernelHandle out);
public static native int MXRtcCudaKernelCreate(CudaModuleHandle handle, String name,
                                    int num_args, IntBuffer is_ndarray, IntBuffer is_const,
                                    IntBuffer arg_types, @ByPtrPtr CudaKernelHandle out);
public static native int MXRtcCudaKernelCreate(CudaModuleHandle handle, @Cast("const char*") BytePointer name,
                                    int num_args, int[] is_ndarray, int[] is_const,
                                    int[] arg_types, @ByPtrPtr CudaKernelHandle out);
public static native int MXRtcCudaKernelCreate(CudaModuleHandle handle, String name,
                                    int num_args, IntPointer is_ndarray, IntPointer is_const,
                                    IntPointer arg_types, @ByPtrPtr CudaKernelHandle out);
public static native int MXRtcCudaKernelCreate(CudaModuleHandle handle, @Cast("const char*") BytePointer name,
                                    int num_args, IntBuffer is_ndarray, IntBuffer is_const,
                                    IntBuffer arg_types, @ByPtrPtr CudaKernelHandle out);
public static native int MXRtcCudaKernelCreate(CudaModuleHandle handle, String name,
                                    int num_args, int[] is_ndarray, int[] is_const,
                                    int[] arg_types, @ByPtrPtr CudaKernelHandle out);
/*
 * \brief delete kernel
 * \param handle handle to previously created kernel
 */
public static native int MXRtcCudaKernelFree(CudaKernelHandle handle);
/*
 * \brief launch cuda kernel
 * \param handle handle to kernel
 * \param dev_id (GPU) device id
 * \param args pointer to arguments
 * \param grid_dim_x grid dimension x
 * \param grid_dim_y grid dimension y
 * \param grid_dim_z grid dimension z
 * \param block_dim_x block dimension x
 * \param block_dim_y block dimension y
 * \param block_dim_z block dimension z
 * \param shared_mem size of dynamically allocated shared memory
 */
public static native int MXRtcCudaKernelCall(CudaKernelHandle handle, int dev_id, @Cast("void**") PointerPointer args,
                                  @Cast("mx_uint") int grid_dim_x, @Cast("mx_uint") int grid_dim_y,
                                  @Cast("mx_uint") int grid_dim_z, @Cast("mx_uint") int block_dim_x,
                                  @Cast("mx_uint") int block_dim_y, @Cast("mx_uint") int block_dim_z,
                                  @Cast("mx_uint") int shared_mem);
public static native int MXRtcCudaKernelCall(CudaKernelHandle handle, int dev_id, @Cast("void**") @ByPtrPtr Pointer args,
                                  @Cast("mx_uint") int grid_dim_x, @Cast("mx_uint") int grid_dim_y,
                                  @Cast("mx_uint") int grid_dim_z, @Cast("mx_uint") int block_dim_x,
                                  @Cast("mx_uint") int block_dim_y, @Cast("mx_uint") int block_dim_z,
                                  @Cast("mx_uint") int shared_mem);
/**
 * \brief Get shared memory handle from NDArray
 * @param handle NDArray handle.
 * @param shared_pid output PID
 * @param shared_id output shared memory id.
 */
public static native int MXNDArrayGetSharedMemHandle(NDArrayHandle handle, IntPointer shared_pid,
                                          IntPointer shared_id);
public static native int MXNDArrayGetSharedMemHandle(NDArrayHandle handle, IntBuffer shared_pid,
                                          IntBuffer shared_id);
public static native int MXNDArrayGetSharedMemHandle(NDArrayHandle handle, int[] shared_pid,
                                          int[] shared_id);
/**
 * \brief Reconstruct NDArray from shared memory handle
 * @param shared_pid shared PID
 * @param shared_id shared memory id
 * @param shape pointer to NDArray dimensions
 * @param ndim number of NDArray dimensions
 * @param dtype data type of NDArray
 * @param out constructed NDArray
 */
public static native int MXNDArrayCreateFromSharedMem(int shared_pid, int shared_id, @Cast("const mx_uint*") IntPointer shape,
                                           @Cast("mx_uint") int ndim, int dtype, PointerPointer out);
public static native int MXNDArrayCreateFromSharedMem(int shared_pid, int shared_id, @Cast("const mx_uint*") IntBuffer shape,
                                           @Cast("mx_uint") int ndim, int dtype, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayCreateFromSharedMem(int shared_pid, int shared_id, @Cast("const mx_uint*") int[] shape,
                                           @Cast("mx_uint") int ndim, int dtype, PointerPointer out);
public static native int MXNDArrayCreateFromSharedMem(int shared_pid, int shared_id, @Cast("const mx_uint*") IntPointer shape,
                                           @Cast("mx_uint") int ndim, int dtype, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);
public static native int MXNDArrayCreateFromSharedMem(int shared_pid, int shared_id, @Cast("const mx_uint*") IntBuffer shape,
                                           @Cast("mx_uint") int ndim, int dtype, PointerPointer out);
public static native int MXNDArrayCreateFromSharedMem(int shared_pid, int shared_id, @Cast("const mx_uint*") int[] shape,
                                           @Cast("mx_uint") int ndim, int dtype, @Cast("NDArrayHandle*") @ByPtrPtr NDArrayHandle out);


// #ifdef __cplusplus
// #endif  // __cplusplus

// #endif  // MXNET_C_API_H_


// Parsed from mxnet/c_predict_api.h

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 *  Copyright (c) 2015 by Contributors
 * \file c_predict_api.h
 * \brief C predict API of mxnet, contains a minimum API to run prediction.
 *  This file is self-contained, and do not dependent on any other files.
 */
// #ifndef MXNET_C_PREDICT_API_H_
// #define MXNET_C_PREDICT_API_H_

/** \brief Inhibit C++ name-mangling for MXNet functions. */
// #ifdef __cplusplus
// #endif  // __cplusplus

// #ifdef _WIN32
// #ifdef MXNET_EXPORTS
// #define MXNET_DLL __declspec(dllexport)
// #else
// #define MXNET_DLL __declspec(dllimport)
// #endif
// #else
// #define MXNET_DLL
// #endif

/** \brief manually define unsigned int */
/** \brief manually define float */
// Targeting ../PredictorHandle.java


// Targeting ../NDListHandle.java



/**
 * \brief Get the last error happeneed.
 * @return The last error happened at the predictor.
 */

/**
 * \brief create a predictor
 * @param symbol_json_str The JSON string of the symbol.
 * @param param_bytes The in-memory raw bytes of parameter ndarray file.
 * @param param_size The size of parameter ndarray file.
 * @param dev_type The device type, 1: cpu, 2:gpu
 * @param dev_id The device id of the predictor.
 * @param num_input_nodes Number of input nodes to the net,
 *    For feedforward net, this is 1.
 * @param input_keys The name of input argument.
 *    For feedforward net, this is {"data"}
 * @param input_shape_indptr Index pointer of shapes of each input node.
 *    The length of this array = num_input_nodes + 1.
 *    For feedforward net that takes 4 dimensional input, this is {0, 4}.
 * @param input_shape_data A flattened data of shapes of each input node.
 *    For feedforward net that takes 4 dimensional input, this is the shape data.
 * @param out The created predictor handle.
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredCreate(@Cast("const char*") BytePointer symbol_json_str,
                           @Const Pointer param_bytes,
                           int param_size,
                           int dev_type, int dev_id,
                           @Cast("mx_uint") int num_input_nodes,
                           @Cast("const char**") PointerPointer input_keys,
                           @Cast("const mx_uint*") IntPointer input_shape_indptr,
                           @Cast("const mx_uint*") IntPointer input_shape_data,
                           @ByPtrPtr PredictorHandle out);
public static native int MXPredCreate(@Cast("const char*") BytePointer symbol_json_str,
                           @Const Pointer param_bytes,
                           int param_size,
                           int dev_type, int dev_id,
                           @Cast("mx_uint") int num_input_nodes,
                           @Cast("const char**") @ByPtrPtr BytePointer input_keys,
                           @Cast("const mx_uint*") IntPointer input_shape_indptr,
                           @Cast("const mx_uint*") IntPointer input_shape_data,
                           @ByPtrPtr PredictorHandle out);
public static native int MXPredCreate(String symbol_json_str,
                           @Const Pointer param_bytes,
                           int param_size,
                           int dev_type, int dev_id,
                           @Cast("mx_uint") int num_input_nodes,
                           @Cast("const char**") @ByPtrPtr ByteBuffer input_keys,
                           @Cast("const mx_uint*") IntBuffer input_shape_indptr,
                           @Cast("const mx_uint*") IntBuffer input_shape_data,
                           @ByPtrPtr PredictorHandle out);
public static native int MXPredCreate(@Cast("const char*") BytePointer symbol_json_str,
                           @Const Pointer param_bytes,
                           int param_size,
                           int dev_type, int dev_id,
                           @Cast("mx_uint") int num_input_nodes,
                           @Cast("const char**") @ByPtrPtr byte[] input_keys,
                           @Cast("const mx_uint*") int[] input_shape_indptr,
                           @Cast("const mx_uint*") int[] input_shape_data,
                           @ByPtrPtr PredictorHandle out);
public static native int MXPredCreate(String symbol_json_str,
                           @Const Pointer param_bytes,
                           int param_size,
                           int dev_type, int dev_id,
                           @Cast("mx_uint") int num_input_nodes,
                           @Cast("const char**") @ByPtrPtr BytePointer input_keys,
                           @Cast("const mx_uint*") IntPointer input_shape_indptr,
                           @Cast("const mx_uint*") IntPointer input_shape_data,
                           @ByPtrPtr PredictorHandle out);
public static native int MXPredCreate(@Cast("const char*") BytePointer symbol_json_str,
                           @Const Pointer param_bytes,
                           int param_size,
                           int dev_type, int dev_id,
                           @Cast("mx_uint") int num_input_nodes,
                           @Cast("const char**") @ByPtrPtr ByteBuffer input_keys,
                           @Cast("const mx_uint*") IntBuffer input_shape_indptr,
                           @Cast("const mx_uint*") IntBuffer input_shape_data,
                           @ByPtrPtr PredictorHandle out);
public static native int MXPredCreate(String symbol_json_str,
                           @Const Pointer param_bytes,
                           int param_size,
                           int dev_type, int dev_id,
                           @Cast("mx_uint") int num_input_nodes,
                           @Cast("const char**") @ByPtrPtr byte[] input_keys,
                           @Cast("const mx_uint*") int[] input_shape_indptr,
                           @Cast("const mx_uint*") int[] input_shape_data,
                           @ByPtrPtr PredictorHandle out);

/**
 * \brief create a predictor wich customized outputs
 * @param symbol_json_str The JSON string of the symbol.
 * @param param_bytes The in-memory raw bytes of parameter ndarray file.
 * @param param_size The size of parameter ndarray file.
 * @param dev_type The device type, 1: cpu, 2:gpu
 * @param dev_id The device id of the predictor.
 * @param num_input_nodes Number of input nodes to the net,
 *    For feedforward net, this is 1.
 * @param input_keys The name of input argument.
 *    For feedforward net, this is {"data"}
 * @param input_shape_indptr Index pointer of shapes of each input node.
 *    The length of this array = num_input_nodes + 1.
 *    For feedforward net that takes 4 dimensional input, this is {0, 4}.
 * @param input_shape_data A flattened data of shapes of each input node.
 *    For feedforward net that takes 4 dimensional input, this is the shape data.
 * @param num_output_nodes Number of output nodes to the net,
 * @param output_keys The name of output argument.
 *    For example {"global_pool"}
 * @param out The created predictor handle.
 * @return 0 when success, -1 when failure.
 */

public static native int MXPredCreatePartialOut(@Cast("const char*") BytePointer symbol_json_str,
                                     @Const Pointer param_bytes,
                                     int param_size,
                                     int dev_type, int dev_id,
                                     @Cast("mx_uint") int num_input_nodes,
                                     @Cast("const char**") PointerPointer input_keys,
                                     @Cast("const mx_uint*") IntPointer input_shape_indptr,
                                     @Cast("const mx_uint*") IntPointer input_shape_data,
                                     @Cast("mx_uint") int num_output_nodes,
                                     @Cast("const char**") PointerPointer output_keys,
                                     @ByPtrPtr PredictorHandle out);
public static native int MXPredCreatePartialOut(@Cast("const char*") BytePointer symbol_json_str,
                                     @Const Pointer param_bytes,
                                     int param_size,
                                     int dev_type, int dev_id,
                                     @Cast("mx_uint") int num_input_nodes,
                                     @Cast("const char**") @ByPtrPtr BytePointer input_keys,
                                     @Cast("const mx_uint*") IntPointer input_shape_indptr,
                                     @Cast("const mx_uint*") IntPointer input_shape_data,
                                     @Cast("mx_uint") int num_output_nodes,
                                     @Cast("const char**") @ByPtrPtr BytePointer output_keys,
                                     @ByPtrPtr PredictorHandle out);
public static native int MXPredCreatePartialOut(String symbol_json_str,
                                     @Const Pointer param_bytes,
                                     int param_size,
                                     int dev_type, int dev_id,
                                     @Cast("mx_uint") int num_input_nodes,
                                     @Cast("const char**") @ByPtrPtr ByteBuffer input_keys,
                                     @Cast("const mx_uint*") IntBuffer input_shape_indptr,
                                     @Cast("const mx_uint*") IntBuffer input_shape_data,
                                     @Cast("mx_uint") int num_output_nodes,
                                     @Cast("const char**") @ByPtrPtr ByteBuffer output_keys,
                                     @ByPtrPtr PredictorHandle out);
public static native int MXPredCreatePartialOut(@Cast("const char*") BytePointer symbol_json_str,
                                     @Const Pointer param_bytes,
                                     int param_size,
                                     int dev_type, int dev_id,
                                     @Cast("mx_uint") int num_input_nodes,
                                     @Cast("const char**") @ByPtrPtr byte[] input_keys,
                                     @Cast("const mx_uint*") int[] input_shape_indptr,
                                     @Cast("const mx_uint*") int[] input_shape_data,
                                     @Cast("mx_uint") int num_output_nodes,
                                     @Cast("const char**") @ByPtrPtr byte[] output_keys,
                                     @ByPtrPtr PredictorHandle out);
public static native int MXPredCreatePartialOut(String symbol_json_str,
                                     @Const Pointer param_bytes,
                                     int param_size,
                                     int dev_type, int dev_id,
                                     @Cast("mx_uint") int num_input_nodes,
                                     @Cast("const char**") @ByPtrPtr BytePointer input_keys,
                                     @Cast("const mx_uint*") IntPointer input_shape_indptr,
                                     @Cast("const mx_uint*") IntPointer input_shape_data,
                                     @Cast("mx_uint") int num_output_nodes,
                                     @Cast("const char**") @ByPtrPtr BytePointer output_keys,
                                     @ByPtrPtr PredictorHandle out);
public static native int MXPredCreatePartialOut(@Cast("const char*") BytePointer symbol_json_str,
                                     @Const Pointer param_bytes,
                                     int param_size,
                                     int dev_type, int dev_id,
                                     @Cast("mx_uint") int num_input_nodes,
                                     @Cast("const char**") @ByPtrPtr ByteBuffer input_keys,
                                     @Cast("const mx_uint*") IntBuffer input_shape_indptr,
                                     @Cast("const mx_uint*") IntBuffer input_shape_data,
                                     @Cast("mx_uint") int num_output_nodes,
                                     @Cast("const char**") @ByPtrPtr ByteBuffer output_keys,
                                     @ByPtrPtr PredictorHandle out);
public static native int MXPredCreatePartialOut(String symbol_json_str,
                                     @Const Pointer param_bytes,
                                     int param_size,
                                     int dev_type, int dev_id,
                                     @Cast("mx_uint") int num_input_nodes,
                                     @Cast("const char**") @ByPtrPtr byte[] input_keys,
                                     @Cast("const mx_uint*") int[] input_shape_indptr,
                                     @Cast("const mx_uint*") int[] input_shape_data,
                                     @Cast("mx_uint") int num_output_nodes,
                                     @Cast("const char**") @ByPtrPtr byte[] output_keys,
                                     @ByPtrPtr PredictorHandle out);

/**
 * \brief create predictors for multiple threads. One predictor for a thread.
 * @param symbol_json_str The JSON string of the symbol.
 * @param param_bytes The in-memory raw bytes of parameter ndarray file.
 * @param param_size The size of parameter ndarray file.
 * @param dev_type The device type, 1: cpu, 2:gpu
 * @param dev_id The device id of the predictor.
 * @param num_input_nodes Number of input nodes to the net,
 *    For feedforward net, this is 1.
 * @param input_keys The name of input argument.
 *    For feedforward net, this is {"data"}
 * @param input_shape_indptr Index pointer of shapes of each input node.
 *    The length of this array = num_input_nodes + 1.
 *    For feedforward net that takes 4 dimensional input, this is {0, 4}.
 * @param input_shape_data A flattened data of shapes of each input node.
 *    For feedforward net that takes 4 dimensional input, this is the shape data.
 * @param num_threads The number of threads that we'll run the predictors.
 * @param out An array of created predictor handles. The array has to be large
 *   enough to keep {@code num_threads} predictors.
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredCreateMultiThread(@Cast("const char*") BytePointer symbol_json_str,
                                      @Const Pointer param_bytes,
                                      int param_size,
                                      int dev_type, int dev_id,
                                      @Cast("mx_uint") int num_input_nodes,
                                      @Cast("const char**") PointerPointer input_keys,
                                      @Cast("const mx_uint*") IntPointer input_shape_indptr,
                                      @Cast("const mx_uint*") IntPointer input_shape_data,
                                      int num_threads,
                                      @ByPtrPtr PredictorHandle out);
public static native int MXPredCreateMultiThread(@Cast("const char*") BytePointer symbol_json_str,
                                      @Const Pointer param_bytes,
                                      int param_size,
                                      int dev_type, int dev_id,
                                      @Cast("mx_uint") int num_input_nodes,
                                      @Cast("const char**") @ByPtrPtr BytePointer input_keys,
                                      @Cast("const mx_uint*") IntPointer input_shape_indptr,
                                      @Cast("const mx_uint*") IntPointer input_shape_data,
                                      int num_threads,
                                      @ByPtrPtr PredictorHandle out);
public static native int MXPredCreateMultiThread(String symbol_json_str,
                                      @Const Pointer param_bytes,
                                      int param_size,
                                      int dev_type, int dev_id,
                                      @Cast("mx_uint") int num_input_nodes,
                                      @Cast("const char**") @ByPtrPtr ByteBuffer input_keys,
                                      @Cast("const mx_uint*") IntBuffer input_shape_indptr,
                                      @Cast("const mx_uint*") IntBuffer input_shape_data,
                                      int num_threads,
                                      @ByPtrPtr PredictorHandle out);
public static native int MXPredCreateMultiThread(@Cast("const char*") BytePointer symbol_json_str,
                                      @Const Pointer param_bytes,
                                      int param_size,
                                      int dev_type, int dev_id,
                                      @Cast("mx_uint") int num_input_nodes,
                                      @Cast("const char**") @ByPtrPtr byte[] input_keys,
                                      @Cast("const mx_uint*") int[] input_shape_indptr,
                                      @Cast("const mx_uint*") int[] input_shape_data,
                                      int num_threads,
                                      @ByPtrPtr PredictorHandle out);
public static native int MXPredCreateMultiThread(String symbol_json_str,
                                      @Const Pointer param_bytes,
                                      int param_size,
                                      int dev_type, int dev_id,
                                      @Cast("mx_uint") int num_input_nodes,
                                      @Cast("const char**") @ByPtrPtr BytePointer input_keys,
                                      @Cast("const mx_uint*") IntPointer input_shape_indptr,
                                      @Cast("const mx_uint*") IntPointer input_shape_data,
                                      int num_threads,
                                      @ByPtrPtr PredictorHandle out);
public static native int MXPredCreateMultiThread(@Cast("const char*") BytePointer symbol_json_str,
                                      @Const Pointer param_bytes,
                                      int param_size,
                                      int dev_type, int dev_id,
                                      @Cast("mx_uint") int num_input_nodes,
                                      @Cast("const char**") @ByPtrPtr ByteBuffer input_keys,
                                      @Cast("const mx_uint*") IntBuffer input_shape_indptr,
                                      @Cast("const mx_uint*") IntBuffer input_shape_data,
                                      int num_threads,
                                      @ByPtrPtr PredictorHandle out);
public static native int MXPredCreateMultiThread(String symbol_json_str,
                                      @Const Pointer param_bytes,
                                      int param_size,
                                      int dev_type, int dev_id,
                                      @Cast("mx_uint") int num_input_nodes,
                                      @Cast("const char**") @ByPtrPtr byte[] input_keys,
                                      @Cast("const mx_uint*") int[] input_shape_indptr,
                                      @Cast("const mx_uint*") int[] input_shape_data,
                                      int num_threads,
                                      @ByPtrPtr PredictorHandle out);

/**
 * \brief Change the input shape of an existing predictor.
 * @param num_input_nodes Number of input nodes to the net,
 *    For feedforward net, this is 1.
 * @param input_keys The name of input argument.
 *    For feedforward net, this is {"data"}
 * @param input_shape_indptr Index pointer of shapes of each input node.
 *    The length of this array = num_input_nodes + 1.
 *    For feedforward net that takes 4 dimensional input, this is {0, 4}.
 * @param input_shape_data A flattened data of shapes of each input node.
 *    For feedforward net that takes 4 dimensional input, this is the shape data.
 * @param handle The original predictor handle.
 * @param out The reshaped predictor handle.
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredReshape(@Cast("mx_uint") int num_input_nodes,
                  @Cast("const char**") PointerPointer input_keys,
                  @Cast("const mx_uint*") IntPointer input_shape_indptr,
                  @Cast("const mx_uint*") IntPointer input_shape_data,
                  PredictorHandle handle,
                  @ByPtrPtr PredictorHandle out);
public static native int MXPredReshape(@Cast("mx_uint") int num_input_nodes,
                  @Cast("const char**") @ByPtrPtr BytePointer input_keys,
                  @Cast("const mx_uint*") IntPointer input_shape_indptr,
                  @Cast("const mx_uint*") IntPointer input_shape_data,
                  PredictorHandle handle,
                  @ByPtrPtr PredictorHandle out);
public static native int MXPredReshape(@Cast("mx_uint") int num_input_nodes,
                  @Cast("const char**") @ByPtrPtr ByteBuffer input_keys,
                  @Cast("const mx_uint*") IntBuffer input_shape_indptr,
                  @Cast("const mx_uint*") IntBuffer input_shape_data,
                  PredictorHandle handle,
                  @ByPtrPtr PredictorHandle out);
public static native int MXPredReshape(@Cast("mx_uint") int num_input_nodes,
                  @Cast("const char**") @ByPtrPtr byte[] input_keys,
                  @Cast("const mx_uint*") int[] input_shape_indptr,
                  @Cast("const mx_uint*") int[] input_shape_data,
                  PredictorHandle handle,
                  @ByPtrPtr PredictorHandle out);
/**
 * \brief Get the shape of output node.
 *  The returned shape_data and shape_ndim is only valid before next call to MXPred function.
 * @param handle The handle of the predictor.
 * @param index The index of output node, set to 0 if there is only one output.
 * @param shape_data Used to hold pointer to the shape data
 * @param shape_ndim Used to hold shape dimension.
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredGetOutputShape(PredictorHandle handle,
                                   @Cast("mx_uint") int index,
                                   @Cast("mx_uint**") PointerPointer shape_data,
                                   @Cast("mx_uint*") IntPointer shape_ndim);
public static native int MXPredGetOutputShape(PredictorHandle handle,
                                   @Cast("mx_uint") int index,
                                   @Cast("mx_uint**") @ByPtrPtr IntPointer shape_data,
                                   @Cast("mx_uint*") IntPointer shape_ndim);
public static native int MXPredGetOutputShape(PredictorHandle handle,
                                   @Cast("mx_uint") int index,
                                   @Cast("mx_uint**") @ByPtrPtr IntBuffer shape_data,
                                   @Cast("mx_uint*") IntBuffer shape_ndim);
public static native int MXPredGetOutputShape(PredictorHandle handle,
                                   @Cast("mx_uint") int index,
                                   @Cast("mx_uint**") @ByPtrPtr int[] shape_data,
                                   @Cast("mx_uint*") int[] shape_ndim);
/**
 * \brief Set the input data of predictor.
 * @param handle The predictor handle.
 * @param key The name of input node to set.
 *     For feedforward net, this is "data".
 * @param data The pointer to the data to be set, with the shape specified in MXPredCreate.
 * @param size The size of data array, used for safety check.
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredSetInput(PredictorHandle handle,
                             @Cast("const char*") BytePointer key,
                             @Cast("const mx_float*") FloatPointer data,
                             @Cast("mx_uint") int size);
public static native int MXPredSetInput(PredictorHandle handle,
                             String key,
                             @Cast("const mx_float*") FloatBuffer data,
                             @Cast("mx_uint") int size);
public static native int MXPredSetInput(PredictorHandle handle,
                             @Cast("const char*") BytePointer key,
                             @Cast("const mx_float*") float[] data,
                             @Cast("mx_uint") int size);
public static native int MXPredSetInput(PredictorHandle handle,
                             String key,
                             @Cast("const mx_float*") FloatPointer data,
                             @Cast("mx_uint") int size);
public static native int MXPredSetInput(PredictorHandle handle,
                             @Cast("const char*") BytePointer key,
                             @Cast("const mx_float*") FloatBuffer data,
                             @Cast("mx_uint") int size);
public static native int MXPredSetInput(PredictorHandle handle,
                             String key,
                             @Cast("const mx_float*") float[] data,
                             @Cast("mx_uint") int size);
/**
 * \brief Run a forward pass to get the output.
 * @param handle The handle of the predictor.
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredForward(PredictorHandle handle);
/**
 * \brief Run a interactive forward pass to get the output.
 *  This is helpful for displaying progress of prediction which can be slow.
 *  User must call PartialForward from step=0, keep increasing it until step_left=0.
 * <pre>{@code
 * int step_left = 1;
 * for (int step = 0; step_left != 0; ++step) {
 *    MXPredPartialForward(handle, step, &step_left);
 *    printf("Current progress [%d/%d]\n", step, step + step_left + 1);
 * }
 * }</pre>
 * @param handle The handle of the predictor.
 * @param step The current step to run forward on.
 * @param step_left The number of steps left
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredPartialForward(PredictorHandle handle, int step, IntPointer step_left);
public static native int MXPredPartialForward(PredictorHandle handle, int step, IntBuffer step_left);
public static native int MXPredPartialForward(PredictorHandle handle, int step, int[] step_left);
/**
 * \brief Get the output value of prediction.
 * @param handle The handle of the predictor.
 * @param index The index of output node, set to 0 if there is only one output.
 * @param data User allocated data to hold the output.
 * @param size The size of data array, used for safe checking.
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredGetOutput(PredictorHandle handle,
                              @Cast("mx_uint") int index,
                              @Cast("mx_float*") FloatPointer data,
                              @Cast("mx_uint") int size);
public static native int MXPredGetOutput(PredictorHandle handle,
                              @Cast("mx_uint") int index,
                              @Cast("mx_float*") FloatBuffer data,
                              @Cast("mx_uint") int size);
public static native int MXPredGetOutput(PredictorHandle handle,
                              @Cast("mx_uint") int index,
                              @Cast("mx_float*") float[] data,
                              @Cast("mx_uint") int size);
/**
 * \brief Free a predictor handle.
 * @param handle The handle of the predictor.
 * @return 0 when success, -1 when failure.
 */
public static native int MXPredFree(PredictorHandle handle);
/**
 * \brief Create a NDArray List by loading from ndarray file.
 *     This can be used to load mean image file.
 * @param nd_file_bytes The byte contents of nd file to be loaded.
 * @param nd_file_size The size of the nd file to be loaded.
 * @param out The out put NDListHandle
 * @param out_length Length of the list.
 * @return 0 when success, -1 when failure.
 */
public static native int MXNDListCreate(@Cast("const char*") BytePointer nd_file_bytes,
                             int nd_file_size,
                             @ByPtrPtr NDListHandle out,
                             @Cast("mx_uint*") IntPointer out_length);
public static native int MXNDListCreate(String nd_file_bytes,
                             int nd_file_size,
                             @ByPtrPtr NDListHandle out,
                             @Cast("mx_uint*") IntBuffer out_length);
public static native int MXNDListCreate(@Cast("const char*") BytePointer nd_file_bytes,
                             int nd_file_size,
                             @ByPtrPtr NDListHandle out,
                             @Cast("mx_uint*") int[] out_length);
public static native int MXNDListCreate(String nd_file_bytes,
                             int nd_file_size,
                             @ByPtrPtr NDListHandle out,
                             @Cast("mx_uint*") IntPointer out_length);
public static native int MXNDListCreate(@Cast("const char*") BytePointer nd_file_bytes,
                             int nd_file_size,
                             @ByPtrPtr NDListHandle out,
                             @Cast("mx_uint*") IntBuffer out_length);
public static native int MXNDListCreate(String nd_file_bytes,
                             int nd_file_size,
                             @ByPtrPtr NDListHandle out,
                             @Cast("mx_uint*") int[] out_length);
/**
 * \brief Get an element from list
 * @param handle The handle to the NDArray
 * @param index The index in the list
 * @param out_key The output key of the item
 * @param out_data The data region of the item
 * @param out_shape The shape of the item.
 * @param out_ndim The number of dimension in the shape.
 * @return 0 when success, -1 when failure.
 */
public static native int MXNDListGet(NDListHandle handle,
                          @Cast("mx_uint") int index,
                          @Cast("const char**") PointerPointer out_key,
                          @Cast("const mx_float**") PointerPointer out_data,
                          @Cast("const mx_uint**") PointerPointer out_shape,
                          @Cast("mx_uint*") IntPointer out_ndim);
public static native int MXNDListGet(NDListHandle handle,
                          @Cast("mx_uint") int index,
                          @Cast("const char**") @ByPtrPtr BytePointer out_key,
                          @Cast("const mx_float**") @ByPtrPtr FloatPointer out_data,
                          @Cast("const mx_uint**") @ByPtrPtr IntPointer out_shape,
                          @Cast("mx_uint*") IntPointer out_ndim);
public static native int MXNDListGet(NDListHandle handle,
                          @Cast("mx_uint") int index,
                          @Cast("const char**") @ByPtrPtr ByteBuffer out_key,
                          @Cast("const mx_float**") @ByPtrPtr FloatBuffer out_data,
                          @Cast("const mx_uint**") @ByPtrPtr IntBuffer out_shape,
                          @Cast("mx_uint*") IntBuffer out_ndim);
public static native int MXNDListGet(NDListHandle handle,
                          @Cast("mx_uint") int index,
                          @Cast("const char**") @ByPtrPtr byte[] out_key,
                          @Cast("const mx_float**") @ByPtrPtr float[] out_data,
                          @Cast("const mx_uint**") @ByPtrPtr int[] out_shape,
                          @Cast("mx_uint*") int[] out_ndim);
/**
 * \brief Free a MXAPINDList
 * @param handle The handle of the MXAPINDList.
 * @return 0 when success, -1 when failure.
 */
public static native int MXNDListFree(NDListHandle handle);

// #ifdef __cplusplus
// #endif  // __cplusplus

// #endif  // MXNET_C_PREDICT_API_H_


}
