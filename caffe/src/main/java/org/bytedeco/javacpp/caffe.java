// Targeted by JavaCPP version 1.4.4: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_imgproc.*;
import static org.bytedeco.javacpp.opencv_imgcodecs.*;
import static org.bytedeco.javacpp.opencv_videoio.*;
import static org.bytedeco.javacpp.opencv_highgui.*;
import static org.bytedeco.javacpp.hdf5.*;
import static org.bytedeco.javacpp.openblas_nolapack.*;
import static org.bytedeco.javacpp.openblas.*;

public class caffe extends org.bytedeco.javacpp.presets.caffe {
    static { Loader.load(); }

@Name("std::map<std::string,caffe::LayerRegistry<float>::Creator>") public static class FloatRegistry extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatRegistry(Pointer p) { super(p); }
    public FloatRegistry()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef FloatRegistry put(@ByRef FloatRegistry x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index public native FloatLayerRegistry.Creator get(@StdString BytePointer i);
    public native FloatRegistry put(@StdString BytePointer i, FloatLayerRegistry.Creator value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString BytePointer first();
        public native @Name("operator*().second") @MemberGetter FloatLayerRegistry.Creator second();
    }
}

@Name("std::map<std::string,caffe::LayerRegistry<double>::Creator>") public static class DoubleRegistry extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleRegistry(Pointer p) { super(p); }
    public DoubleRegistry()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef DoubleRegistry put(@ByRef DoubleRegistry x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index public native DoubleLayerRegistry.Creator get(@StdString BytePointer i);
    public native DoubleRegistry put(@StdString BytePointer i, DoubleLayerRegistry.Creator value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString BytePointer first();
        public native @Name("operator*().second") @MemberGetter DoubleLayerRegistry.Creator second();
    }
}

@Name("std::map<std::string,int>") public static class StringIntMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringIntMap(Pointer p) { super(p); }
    public StringIntMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef StringIntMap put(@ByRef StringIntMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index public native int get(@StdString BytePointer i);
    public native StringIntMap put(@StdString BytePointer i, int value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*().first") @MemberGetter @StdString BytePointer first();
        public native @Name("operator*().second") @MemberGetter int second();
    }
}

@Name("std::vector<std::string>") public static class StringVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringVector(Pointer p) { super(p); }
    public StringVector(BytePointer value) { this(1); put(0, value); }
    public StringVector(BytePointer ... array) { this(array.length); put(array); }
    public StringVector(String value) { this(1); put(0, value); }
    public StringVector(String ... array) { this(array.length); put(array); }
    public StringVector()       { allocate();  }
    public StringVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef StringVector put(@ByRef StringVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @StdString BytePointer get(@Cast("size_t") long i);
    public native StringVector put(@Cast("size_t") long i, BytePointer value);
    @ValueSetter @Index(function = "at") public native StringVector put(@Cast("size_t") long i, @StdString String value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @StdString BytePointer value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @StdString BytePointer get();
    }

    public BytePointer[] get() {
        BytePointer[] array = new BytePointer[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public BytePointer pop_back() {
        long size = size();
        BytePointer value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public StringVector push_back(BytePointer value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public StringVector put(BytePointer value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public StringVector put(BytePointer ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }

    public StringVector push_back(String value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public StringVector put(String value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public StringVector put(String ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<const google::protobuf::FieldDescriptor*>") public static class FieldDescriptorVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FieldDescriptorVector(Pointer p) { super(p); }
    public FieldDescriptorVector(FieldDescriptor value) { this(1); put(0, value); }
    public FieldDescriptorVector(FieldDescriptor ... array) { this(array.length); put(array); }
    public FieldDescriptorVector()       { allocate();  }
    public FieldDescriptorVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FieldDescriptorVector put(@ByRef FieldDescriptorVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @Const FieldDescriptor get(@Cast("size_t") long i);
    public native FieldDescriptorVector put(@Cast("size_t") long i, FieldDescriptor value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @Const FieldDescriptor value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Const FieldDescriptor get();
    }

    public FieldDescriptor[] get() {
        FieldDescriptor[] array = new FieldDescriptor[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public FieldDescriptor pop_back() {
        long size = size();
        FieldDescriptor value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FieldDescriptorVector push_back(FieldDescriptor value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FieldDescriptorVector put(FieldDescriptor value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FieldDescriptorVector put(FieldDescriptor ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<caffe::Datum>") public static class DatumVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DatumVector(Pointer p) { super(p); }
    public DatumVector(Datum value) { this(1); put(0, value); }
    public DatumVector(Datum ... array) { this(array.length); put(array); }
    public DatumVector()       { allocate();  }
    public DatumVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef DatumVector put(@ByRef DatumVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef Datum get(@Cast("size_t") long i);
    public native DatumVector put(@Cast("size_t") long i, Datum value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @ByRef Datum value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const Datum get();
    }

    public Datum[] get() {
        Datum[] array = new Datum[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public Datum pop_back() {
        long size = size();
        Datum value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public DatumVector push_back(Datum value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public DatumVector put(Datum value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public DatumVector put(Datum ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<boost::shared_ptr<caffe::Blob<float> > >") public static class FloatBlobSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBlobSharedVector(Pointer p) { super(p); }
    public FloatBlobSharedVector(FloatBlob value) { this(1); put(0, value); }
    public FloatBlobSharedVector(FloatBlob ... array) { this(array.length); put(array); }
    public FloatBlobSharedVector()       { allocate();  }
    public FloatBlobSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FloatBlobSharedVector put(@ByRef FloatBlobSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr FloatBlob get(@Cast("size_t") long i);
    public native FloatBlobSharedVector put(@Cast("size_t") long i, FloatBlob value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @SharedPtr FloatBlob value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const FloatBlob get();
    }

    public FloatBlob[] get() {
        FloatBlob[] array = new FloatBlob[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public FloatBlob pop_back() {
        long size = size();
        FloatBlob value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FloatBlobSharedVector push_back(FloatBlob value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FloatBlobSharedVector put(FloatBlob value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FloatBlobSharedVector put(FloatBlob ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<boost::shared_ptr<caffe::Blob<double> > >") public static class DoubleBlobSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBlobSharedVector(Pointer p) { super(p); }
    public DoubleBlobSharedVector(DoubleBlob value) { this(1); put(0, value); }
    public DoubleBlobSharedVector(DoubleBlob ... array) { this(array.length); put(array); }
    public DoubleBlobSharedVector()       { allocate();  }
    public DoubleBlobSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef DoubleBlobSharedVector put(@ByRef DoubleBlobSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr DoubleBlob get(@Cast("size_t") long i);
    public native DoubleBlobSharedVector put(@Cast("size_t") long i, DoubleBlob value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @SharedPtr DoubleBlob value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const DoubleBlob get();
    }

    public DoubleBlob[] get() {
        DoubleBlob[] array = new DoubleBlob[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public DoubleBlob pop_back() {
        long size = size();
        DoubleBlob value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public DoubleBlobSharedVector push_back(DoubleBlob value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public DoubleBlobSharedVector put(DoubleBlob value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public DoubleBlobSharedVector put(DoubleBlob ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<boost::shared_ptr<caffe::Layer<float> > >") public static class FloatLayerSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatLayerSharedVector(Pointer p) { super(p); }
    public FloatLayerSharedVector(FloatLayer value) { this(1); put(0, value); }
    public FloatLayerSharedVector(FloatLayer ... array) { this(array.length); put(array); }
    public FloatLayerSharedVector()       { allocate();  }
    public FloatLayerSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FloatLayerSharedVector put(@ByRef FloatLayerSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @Cast({"", "boost::shared_ptr<caffe::Layer<float> >"}) @SharedPtr FloatLayer get(@Cast("size_t") long i);
    public native FloatLayerSharedVector put(@Cast("size_t") long i, FloatLayer value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @Cast({"", "boost::shared_ptr<caffe::Layer<float> >"}) @SharedPtr FloatLayer value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Cast({"", "boost::shared_ptr<caffe::Layer<float> >"}) @SharedPtr @Const FloatLayer get();
    }

    public FloatLayer[] get() {
        FloatLayer[] array = new FloatLayer[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public FloatLayer pop_back() {
        long size = size();
        FloatLayer value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FloatLayerSharedVector push_back(FloatLayer value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FloatLayerSharedVector put(FloatLayer value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FloatLayerSharedVector put(FloatLayer ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<boost::shared_ptr<caffe::Layer<double> > >") public static class DoubleLayerSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleLayerSharedVector(Pointer p) { super(p); }
    public DoubleLayerSharedVector(DoubleLayer value) { this(1); put(0, value); }
    public DoubleLayerSharedVector(DoubleLayer ... array) { this(array.length); put(array); }
    public DoubleLayerSharedVector()       { allocate();  }
    public DoubleLayerSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef DoubleLayerSharedVector put(@ByRef DoubleLayerSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @Cast({"", "boost::shared_ptr<caffe::Layer<double> >"}) @SharedPtr DoubleLayer get(@Cast("size_t") long i);
    public native DoubleLayerSharedVector put(@Cast("size_t") long i, DoubleLayer value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @Cast({"", "boost::shared_ptr<caffe::Layer<double> >"}) @SharedPtr DoubleLayer value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Cast({"", "boost::shared_ptr<caffe::Layer<double> >"}) @SharedPtr @Const DoubleLayer get();
    }

    public DoubleLayer[] get() {
        DoubleLayer[] array = new DoubleLayer[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public DoubleLayer pop_back() {
        long size = size();
        DoubleLayer value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public DoubleLayerSharedVector push_back(DoubleLayer value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public DoubleLayerSharedVector put(DoubleLayer value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public DoubleLayerSharedVector put(DoubleLayer ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<boost::shared_ptr<caffe::Net<float> > >") public static class FloatNetSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatNetSharedVector(Pointer p) { super(p); }
    public FloatNetSharedVector(FloatNet value) { this(1); put(0, value); }
    public FloatNetSharedVector(FloatNet ... array) { this(array.length); put(array); }
    public FloatNetSharedVector()       { allocate();  }
    public FloatNetSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FloatNetSharedVector put(@ByRef FloatNetSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr FloatNet get(@Cast("size_t") long i);
    public native FloatNetSharedVector put(@Cast("size_t") long i, FloatNet value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @SharedPtr FloatNet value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const FloatNet get();
    }

    public FloatNet[] get() {
        FloatNet[] array = new FloatNet[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public FloatNet pop_back() {
        long size = size();
        FloatNet value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FloatNetSharedVector push_back(FloatNet value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FloatNetSharedVector put(FloatNet value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FloatNetSharedVector put(FloatNet ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<boost::shared_ptr<caffe::Net<double> > >") public static class DoubleNetSharedVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleNetSharedVector(Pointer p) { super(p); }
    public DoubleNetSharedVector(DoubleNet value) { this(1); put(0, value); }
    public DoubleNetSharedVector(DoubleNet ... array) { this(array.length); put(array); }
    public DoubleNetSharedVector()       { allocate();  }
    public DoubleNetSharedVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef DoubleNetSharedVector put(@ByRef DoubleNetSharedVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @SharedPtr DoubleNet get(@Cast("size_t") long i);
    public native DoubleNetSharedVector put(@Cast("size_t") long i, DoubleNet value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @SharedPtr DoubleNet value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @SharedPtr @Const DoubleNet get();
    }

    public DoubleNet[] get() {
        DoubleNet[] array = new DoubleNet[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public DoubleNet pop_back() {
        long size = size();
        DoubleNet value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public DoubleNetSharedVector push_back(DoubleNet value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public DoubleNetSharedVector put(DoubleNet value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public DoubleNetSharedVector put(DoubleNet ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<caffe::Blob<float>*>") public static class FloatBlobVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBlobVector(Pointer p) { super(p); }
    public FloatBlobVector(FloatBlob value) { this(1); put(0, value); }
    public FloatBlobVector(FloatBlob ... array) { this(array.length); put(array); }
    public FloatBlobVector()       { allocate();  }
    public FloatBlobVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FloatBlobVector put(@ByRef FloatBlobVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native FloatBlob get(@Cast("size_t") long i);
    public native FloatBlobVector put(@Cast("size_t") long i, FloatBlob value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, FloatBlob value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Const FloatBlob get();
    }

    public FloatBlob[] get() {
        FloatBlob[] array = new FloatBlob[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public FloatBlob pop_back() {
        long size = size();
        FloatBlob value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FloatBlobVector push_back(FloatBlob value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FloatBlobVector put(FloatBlob value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FloatBlobVector put(FloatBlob ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<caffe::Blob<double>*>") public static class DoubleBlobVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBlobVector(Pointer p) { super(p); }
    public DoubleBlobVector(DoubleBlob value) { this(1); put(0, value); }
    public DoubleBlobVector(DoubleBlob ... array) { this(array.length); put(array); }
    public DoubleBlobVector()       { allocate();  }
    public DoubleBlobVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef DoubleBlobVector put(@ByRef DoubleBlobVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native DoubleBlob get(@Cast("size_t") long i);
    public native DoubleBlobVector put(@Cast("size_t") long i, DoubleBlob value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, DoubleBlob value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Const DoubleBlob get();
    }

    public DoubleBlob[] get() {
        DoubleBlob[] array = new DoubleBlob[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public DoubleBlob pop_back() {
        long size = size();
        DoubleBlob value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public DoubleBlobVector push_back(DoubleBlob value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public DoubleBlobVector put(DoubleBlob value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public DoubleBlobVector put(DoubleBlob ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<std::vector<caffe::Blob<float>*> >") public static class FloatBlobVectorVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBlobVectorVector(Pointer p) { super(p); }
    public FloatBlobVectorVector(FloatBlobVector value) { this(1); put(0, value); }
    public FloatBlobVectorVector(FloatBlobVector ... array) { this(array.length); put(array); }
    public FloatBlobVectorVector()       { allocate();  }
    public FloatBlobVectorVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FloatBlobVectorVector put(@ByRef FloatBlobVectorVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef FloatBlobVector get(@Cast("size_t") long i);
    public native FloatBlobVectorVector put(@Cast("size_t") long i, FloatBlobVector value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @ByRef FloatBlobVector value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const FloatBlobVector get();
    }

    public FloatBlobVector[] get() {
        FloatBlobVector[] array = new FloatBlobVector[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public FloatBlobVector pop_back() {
        long size = size();
        FloatBlobVector value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FloatBlobVectorVector push_back(FloatBlobVector value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FloatBlobVectorVector put(FloatBlobVector value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FloatBlobVectorVector put(FloatBlobVector ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<std::vector<caffe::Blob<double>*> >") public static class DoubleBlobVectorVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBlobVectorVector(Pointer p) { super(p); }
    public DoubleBlobVectorVector(DoubleBlobVector value) { this(1); put(0, value); }
    public DoubleBlobVectorVector(DoubleBlobVector ... array) { this(array.length); put(array); }
    public DoubleBlobVectorVector()       { allocate();  }
    public DoubleBlobVectorVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef DoubleBlobVectorVector put(@ByRef DoubleBlobVectorVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef DoubleBlobVector get(@Cast("size_t") long i);
    public native DoubleBlobVectorVector put(@Cast("size_t") long i, DoubleBlobVector value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @ByRef DoubleBlobVector value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const DoubleBlobVector get();
    }

    public DoubleBlobVector[] get() {
        DoubleBlobVector[] array = new DoubleBlobVector[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public DoubleBlobVector pop_back() {
        long size = size();
        DoubleBlobVector value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public DoubleBlobVectorVector push_back(DoubleBlobVector value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public DoubleBlobVectorVector put(DoubleBlobVector value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public DoubleBlobVectorVector put(DoubleBlobVector ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<bool>") public static class BoolVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BoolVector(Pointer p) { super(p); }
    public BoolVector(boolean value) { this(1); put(0, value); }
    public BoolVector(boolean ... array) { this(array.length); put(array); }
    public BoolVector()       { allocate();  }
    public BoolVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef BoolVector put(@ByRef BoolVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @Cast("bool") boolean get(@Cast("size_t") long i);
    public native BoolVector put(@Cast("size_t") long i, boolean value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @Cast("bool") boolean value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Cast("bool") boolean get();
    }

    public boolean[] get() {
        boolean[] array = new boolean[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public boolean pop_back() {
        long size = size();
        boolean value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public BoolVector push_back(boolean value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public BoolVector put(boolean value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public BoolVector put(boolean ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<std::vector<bool> >") public static class BoolVectorVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BoolVectorVector(Pointer p) { super(p); }
    public BoolVectorVector(BoolVector value) { this(1); put(0, value); }
    public BoolVectorVector(BoolVector ... array) { this(array.length); put(array); }
    public BoolVectorVector()       { allocate();  }
    public BoolVectorVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef BoolVectorVector put(@ByRef BoolVectorVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native @ByRef BoolVector get(@Cast("size_t") long i);
    public native BoolVectorVector put(@Cast("size_t") long i, BoolVector value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, @ByRef BoolVector value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @ByRef @Const BoolVector get();
    }

    public BoolVector[] get() {
        BoolVector[] array = new BoolVector[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public BoolVector pop_back() {
        long size = size();
        BoolVector value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public BoolVectorVector push_back(BoolVector value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public BoolVectorVector put(BoolVector value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public BoolVectorVector put(BoolVector ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<caffe::Solver<float>::Callback*>") public static class FloatCallbackVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCallbackVector(Pointer p) { super(p); }
    public FloatCallbackVector(FloatSolver.Callback value) { this(1); put(0, value); }
    public FloatCallbackVector(FloatSolver.Callback ... array) { this(array.length); put(array); }
    public FloatCallbackVector()       { allocate();  }
    public FloatCallbackVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef FloatCallbackVector put(@ByRef FloatCallbackVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native FloatSolver.Callback get(@Cast("size_t") long i);
    public native FloatCallbackVector put(@Cast("size_t") long i, FloatSolver.Callback value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, FloatSolver.Callback value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Const FloatSolver.Callback get();
    }

    public FloatSolver.Callback[] get() {
        FloatSolver.Callback[] array = new FloatSolver.Callback[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public FloatSolver.Callback pop_back() {
        long size = size();
        FloatSolver.Callback value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public FloatCallbackVector push_back(FloatSolver.Callback value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public FloatCallbackVector put(FloatSolver.Callback value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public FloatCallbackVector put(FloatSolver.Callback ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@Name("std::vector<caffe::Solver<double>::Callback*>") public static class DoubleCallbackVector extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCallbackVector(Pointer p) { super(p); }
    public DoubleCallbackVector(DoubleSolver.Callback value) { this(1); put(0, value); }
    public DoubleCallbackVector(DoubleSolver.Callback ... array) { this(array.length); put(array); }
    public DoubleCallbackVector()       { allocate();  }
    public DoubleCallbackVector(long n) { allocate(n); }
    private native void allocate();
    private native void allocate(@Cast("size_t") long n);
    public native @Name("operator=") @ByRef DoubleCallbackVector put(@ByRef DoubleCallbackVector x);

    public boolean empty() { return size() == 0; }
    public native long size();
    public void clear() { resize(0); }
    public native void resize(@Cast("size_t") long n);

    @Index(function = "at") public native DoubleSolver.Callback get(@Cast("size_t") long i);
    public native DoubleCallbackVector put(@Cast("size_t") long i, DoubleSolver.Callback value);

    public native @ByVal Iterator insert(@ByVal Iterator pos, DoubleSolver.Callback value);
    public native @ByVal Iterator erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator++") @ByRef Iterator increment();
        public native @Name("operator==") boolean equals(@ByRef Iterator it);
        public native @Name("operator*") @Const DoubleSolver.Callback get();
    }

    public DoubleSolver.Callback[] get() {
        DoubleSolver.Callback[] array = new DoubleSolver.Callback[size() < Integer.MAX_VALUE ? (int)size() : Integer.MAX_VALUE];
        for (int i = 0; i < array.length; i++) {
            array[i] = get(i);
        }
        return array;
    }
    @Override public String toString() {
        return java.util.Arrays.toString(get());
    }

    public DoubleSolver.Callback pop_back() {
        long size = size();
        DoubleSolver.Callback value = get(size - 1);
        resize(size - 1);
        return value;
    }
    public DoubleCallbackVector push_back(DoubleSolver.Callback value) {
        long size = size();
        resize(size + 1);
        return put(size, value);
    }
    public DoubleCallbackVector put(DoubleSolver.Callback value) {
        if (size() != 1) { resize(1); }
        return put(0, value);
    }
    public DoubleCallbackVector put(DoubleSolver.Callback ... array) {
        if (size() != array.length) { resize(array.length); }
        for (int i = 0; i < array.length; i++) {
            put(i, array[i]);
        }
        return this;
    }
}

@NoOffset @Name("std::pair<google::protobuf::uint64,google::protobuf::uint64>") public static class LongLongPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LongLongPair(Pointer p) { super(p); }
    public LongLongPair(long firstValue, long secondValue) { this(); put(firstValue, secondValue); }
    public LongLongPair()       { allocate();  }
    private native void allocate();
    public native @Name("operator=") @ByRef LongLongPair put(@ByRef LongLongPair x);


    @MemberGetter public native long first(); public native LongLongPair first(long first);
    @MemberGetter public native @Cast("google::protobuf::uint64") long second();  public native LongLongPair second(long second);

    public LongLongPair put(long firstValue, long secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

// Parsed from caffe/caffe.hpp

// caffe.hpp is the header file that you need to include in your code. It wraps
// all the internal caffe header files into one for simpler inclusion.

// #ifndef CAFFE_CAFFE_HPP_
// #define CAFFE_CAFFE_HPP_

// #include "caffe/blob.hpp"
// #include "caffe/common.hpp"
// #include "caffe/filler.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/layer_factory.hpp"
// #include "caffe/net.hpp"
// #include "caffe/parallel.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/solver.hpp"
// #include "caffe/solver_factory.hpp"
// #include "caffe/util/benchmark.hpp"
// #include "caffe/util/io.hpp"
// #include "caffe/util/upgrade_proto.hpp"

// #endif  // CAFFE_CAFFE_HPP_


// Parsed from caffe/util/device_alternate.hpp

// #ifndef CAFFE_UTIL_DEVICE_ALTERNATE_H_
// #define CAFFE_UTIL_DEVICE_ALTERNATE_H_

// #ifdef CPU_ONLY  // CPU-only Caffe.

// #include <vector>

// Stub out GPU calls as unavailable.

// #define NO_GPU LOG(FATAL) << "Cannot use GPU in CPU-only Caffe: check mode."

// #define STUB_GPU(classname)
// template <typename Dtype>
// void classname<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
//     const vector<Blob<Dtype>*>& top) { NO_GPU; }
// template <typename Dtype>
// void classname<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
//     const vector<bool>& propagate_down,
//     const vector<Blob<Dtype>*>& bottom) { NO_GPU; } 

// #define STUB_GPU_FORWARD(classname, funcname)
// template <typename Dtype>
// void classname<Dtype>::funcname##_##gpu(const vector<Blob<Dtype>*>& bottom,
//     const vector<Blob<Dtype>*>& top) { NO_GPU; } 

// #define STUB_GPU_BACKWARD(classname, funcname)
// template <typename Dtype>
// void classname<Dtype>::funcname##_##gpu(const vector<Blob<Dtype>*>& top,
//     const vector<bool>& propagate_down,
//     const vector<Blob<Dtype>*>& bottom) { NO_GPU; } 

// #else  // Normal GPU + CPU Caffe.

// #endif  // CPU_ONLY

// #endif  // CAFFE_UTIL_DEVICE_ALTERNATE_H_


// Parsed from google/protobuf/stubs/common.h

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda) and others
//
// Contains basic types and utilities used by the rest of the library.

// #ifndef GOOGLE_PROTOBUF_COMMON_H__
// #define GOOGLE_PROTOBUF_COMMON_H__

// #include <algorithm>
// #include <iostream>
// #include <map>
// #include <memory>
// #include <set>
// #include <string>
// #include <vector>

// #include <google/protobuf/stubs/port.h>
// #include <google/protobuf/stubs/macros.h>
// #include <google/protobuf/stubs/platform_macros.h>

// TODO(liujisi): Remove the following includes after the include clean-up.
// #include <google/protobuf/stubs/logging.h>
// #include <google/protobuf/stubs/mutex.h>
// #include <google/protobuf/stubs/callback.h>

// #ifndef PROTOBUF_USE_EXCEPTIONS
// #if defined(_MSC_VER) && defined(_CPPUNWIND)
  public static final int PROTOBUF_USE_EXCEPTIONS = 1;
// #elif defined(__EXCEPTIONS)
// #else
// #endif
// #endif

// #if PROTOBUF_USE_EXCEPTIONS
// #include <exception>
// #endif
// #if defined(__APPLE__)
// #include <TargetConditionals.h>  // for TARGET_OS_IPHONE
// #endif

// #if defined(__ANDROID__) || defined(GOOGLE_PROTOBUF_OS_ANDROID) || (defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE) || defined(GOOGLE_PROTOBUF_OS_IPHONE)
// #include <pthread.h>
// #endif

// #if defined(_WIN32) && defined(GetMessage)
// #endif



// Some of these constants are macros rather than const ints so that they can
// be used in #if directives.

// The current version, represented as a single integer to make comparison
// easier:  major * 10^6 + minor * 10^3 + micro
public static final int GOOGLE_PROTOBUF_VERSION = 3006001;

// A suffix string for alpha, beta or rc releases. Empty for stable releases.
public static final String GOOGLE_PROTOBUF_VERSION_SUFFIX = "";

// The minimum library version which works with the current version of the
// headers.
public static final int GOOGLE_PROTOBUF_MIN_LIBRARY_VERSION = 3006001;

// The minimum header version which works with the current version of
// the library.  This constant should only be used by protoc's C++ code
// generator.
@Namespace("google::protobuf::internal") @MemberGetter public static native int kMinHeaderVersionForLibrary();
public static final int kMinHeaderVersionForLibrary = kMinHeaderVersionForLibrary();

// The minimum protoc version which works with the current version of the
// headers.
public static final int GOOGLE_PROTOBUF_MIN_PROTOC_VERSION = 3006001;

// The minimum header version which works with the current version of
// protoc.  This constant should only be used in VerifyVersion().
@Namespace("google::protobuf::internal") @MemberGetter public static native int kMinHeaderVersionForProtoc();
public static final int kMinHeaderVersionForProtoc = kMinHeaderVersionForProtoc();

// Verifies that the headers and libraries are compatible.  Use the macro
// below to call this.
@Namespace("google::protobuf::internal") public static native void VerifyVersion(int headerVersion, int minLibraryVersion,
                                      @Cast("const char*") BytePointer filename);
@Namespace("google::protobuf::internal") public static native void VerifyVersion(int headerVersion, int minLibraryVersion,
                                      String filename);

// Converts a numeric version number to a string.
@Namespace("google::protobuf::internal") public static native @StdString BytePointer VersionString(int version);

  // namespace internal

// Place this macro in your main() function (or somewhere before you attempt
// to use the protobuf library) to verify that the version you link against
// matches the headers you compiled against.  If a version mismatch is
// detected, the process will abort.
// #define GOOGLE_PROTOBUF_VERIFY_VERSION
//   ::google::protobuf::internal::VerifyVersion(
//     GOOGLE_PROTOBUF_VERSION, GOOGLE_PROTOBUF_MIN_LIBRARY_VERSION,
//     __FILE__)


// ===================================================================
// from google3/util/utf8/public/unilib.h

@Namespace("google::protobuf") @Opaque public static class StringPiece extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public StringPiece() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringPiece(Pointer p) { super(p); }
}

// Checks if the buffer contains structurally-valid UTF-8.  Implemented in
// structurally_valid.cc.
@Namespace("google::protobuf::internal") public static native @Cast("bool") boolean IsStructurallyValidUTF8(@Cast("const char*") BytePointer buf, int len);
@Namespace("google::protobuf::internal") public static native @Cast("bool") boolean IsStructurallyValidUTF8(String buf, int len);

@Namespace("google::protobuf::internal") public static native @Cast("bool") boolean IsStructurallyValidUTF8(@StdString BytePointer str);
@Namespace("google::protobuf::internal") public static native @Cast("bool") boolean IsStructurallyValidUTF8(@StdString String str);

// Returns initial number of bytes of structually valid UTF-8.
@Namespace("google::protobuf::internal") public static native int UTF8SpnStructurallyValid(@Const @ByRef StringPiece str);

// Coerce UTF-8 byte string in src_str to be
// a structurally-valid equal-length string by selectively
// overwriting illegal bytes with replace_char (typically ' ' or '?').
// replace_char must be legal printable 7-bit Ascii 0x20..0x7e.
// src_str is read-only.
//
// Returns pointer to output buffer, src_str.data() if no changes were made,
//  or idst if some bytes were changed. idst is allocated by the caller
//  and must be at least as big as src_str
//
// Optimized for: all structurally valid and no byte copying is done.
//
@Namespace("google::protobuf::internal") public static native @Cast("char*") BytePointer UTF8CoerceToStructurallyValid(
    @Const @ByRef StringPiece str, @Cast("char*") BytePointer dst, @Cast("char") byte replace_char);
@Namespace("google::protobuf::internal") public static native @Cast("char*") ByteBuffer UTF8CoerceToStructurallyValid(
    @Const @ByRef StringPiece str, @Cast("char*") ByteBuffer dst, @Cast("char") byte replace_char);
@Namespace("google::protobuf::internal") public static native @Cast("char*") byte[] UTF8CoerceToStructurallyValid(
    @Const @ByRef StringPiece str, @Cast("char*") byte[] dst, @Cast("char") byte replace_char);

  // namespace internal


// ===================================================================
// Shutdown support.

// Shut down the entire protocol buffers library, deleting all static-duration
// objects allocated by the library or by generated .pb.cc files.
//
// There are two reasons you might want to call this:
// * You use a draconian definition of "memory leak" in which you expect
//   every single malloc() to have a corresponding free(), even for objects
//   which live until program exit.
// * You are writing a dynamically-loaded library which needs to clean up
//   after itself when the library is unloaded.
//
// It is safe to call this multiple times.  However, it is not safe to use
// any other part of the protocol buffers library after
// ShutdownProtobufLibrary() has been called. Furthermore this call is not
// thread safe, user needs to synchronize multiple calls.
@Namespace("google::protobuf") public static native void ShutdownProtobufLibrary();

// Register a function to be called when ShutdownProtocolBuffers() is called.
public static class Func extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    Func(Pointer p) { super(p); }
    protected Func() { allocate(); }
    private native void allocate();
    public native void call();
}
@Namespace("google::protobuf::internal") public static native void OnShutdown(Func func);
// Run an arbitrary function on an arg
public static class F_Pointer extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    F_Pointer(Pointer p) { super(p); }
    protected F_Pointer() { allocate(); }
    private native void allocate();
    public native void call(@Const Pointer arg0);
}
@Namespace("google::protobuf::internal") public static native void OnShutdownRun(F_Pointer f, @Const Pointer arg);

  // namespace internal

// #if PROTOBUF_USE_EXCEPTIONS
@Namespace("google::protobuf") @NoOffset public static class FatalException extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FatalException(Pointer p) { super(p); }

  public FatalException(@Cast("const char*") BytePointer filename, int line, @StdString BytePointer message) { super((Pointer)null); allocate(filename, line, message); }
  private native void allocate(@Cast("const char*") BytePointer filename, int line, @StdString BytePointer message);
  public FatalException(String filename, int line, @StdString String message) { super((Pointer)null); allocate(filename, line, message); }
  private native void allocate(String filename, int line, @StdString String message);

  public native @Cast("const char*") BytePointer what();

  public native @Cast("const char*") BytePointer filename();
  public native int line();
  public native @StdString BytePointer message();
}
// #endif

// This is at the end of the file instead of the beginning to work around a bug
// in some versions of MSVC.

  // namespace protobuf
  // namespace google

// #endif  // GOOGLE_PROTOBUF_COMMON_H__


// Parsed from google/protobuf/arena.h

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file defines an Arena allocator for better allocation performance.

// #ifndef GOOGLE_PROTOBUF_ARENA_H__
// #define GOOGLE_PROTOBUF_ARENA_H__

// #include <limits>
// #ifdef max
// #undef max  // Visual Studio defines this macro
// #endif
// #if defined(_MSC_VER) && !defined(_LIBCPP_STD_VER) && !_HAS_EXCEPTIONS
// Work around bugs in MSVC <typeinfo> header when _HAS_EXCEPTIONS=0.
// #include <exception>
// #include <typeinfo>

// #else
// #include <typeinfo>
// #endif

// #include <google/protobuf/arena_impl.h>
// #include <google/protobuf/stubs/port.h>
// #include <type_traits>  // defined below

  // namespace protobuf

@Namespace("google::quality_webanswers") public static native void TempPrivateWorkAround(ArenaOptions arena_options);

  // namespace quality_webanswers          // defined below        // defined in message.h

@Namespace("google::protobuf::arena_metrics") public static native void EnableArenaMetrics(ArenaOptions options);

  // namespace arena_metrics

@Namespace("google::protobuf::internal") @Opaque public static class ArenaStringPtr extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ArenaStringPtr() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ArenaStringPtr(Pointer p) { super(p); }
}     // defined in arenastring.h
@Namespace("google::protobuf::internal") @Opaque public static class LazyField extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public LazyField() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LazyField(Pointer p) { super(p); }
}           // defined in lazy_field.h  // defined in repeated_field.h

// Templated cleanup methods.
@Namespace("google::protobuf::internal") public static native void arena_free(Pointer object, @Cast("size_t") long size);

  // namespace internal

// ArenaOptions provides optional additional parameters to arena construction
// that control its block-allocation behavior.
@Namespace("google::protobuf") @NoOffset public static class ArenaOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ArenaOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ArenaOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ArenaOptions position(long position) {
        return (ArenaOptions)super.position(position);
    }

  // This defines the size of the first block requested from the system malloc.
  // Subsequent block sizes will increase in a geometric series up to a maximum.
  public native @Cast("size_t") long start_block_size(); public native ArenaOptions start_block_size(long start_block_size);

  // This defines the maximum block size requested from system malloc (unless an
  // individual arena allocation request occurs with a size larger than this
  // maximum). Requested block sizes increase up to this value, then remain
  // here.
  public native @Cast("size_t") long max_block_size(); public native ArenaOptions max_block_size(long max_block_size);

  // An initial block of memory for the arena to use, or NULL for none. If
  // provided, the block must live at least as long as the arena itself. The
  // creator of the Arena retains ownership of the block after the Arena is
  // destroyed.
  public native @Cast("char*") BytePointer initial_block(); public native ArenaOptions initial_block(BytePointer initial_block);

  // The size of the initial block, if provided.
  public native @Cast("size_t") long initial_block_size(); public native ArenaOptions initial_block_size(long initial_block_size);

  // A function pointer to an alloc method that returns memory blocks of size
  // requested. By default, it contains a ptr to the malloc function.
  //
  // NOTE: block_alloc and dealloc functions are expected to behave like
  // malloc and free, including Asan poisoning.
  public static class Block_alloc_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Block_alloc_long(Pointer p) { super(p); }
      protected Block_alloc_long() { allocate(); }
      private native void allocate();
      public native Pointer call(@Cast("size_t") long arg0);
  }
  public native Block_alloc_long block_alloc(); public native ArenaOptions block_alloc(Block_alloc_long block_alloc);
  // A function pointer to a dealloc method that takes ownership of the blocks
  // from the arena. By default, it contains a ptr to a wrapper function that
  // calls free.
  public static class Block_dealloc_Pointer_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Block_dealloc_Pointer_long(Pointer p) { super(p); }
      protected Block_dealloc_Pointer_long() { allocate(); }
      private native void allocate();
      public native void call(Pointer arg0, @Cast("size_t") long arg1);
  }
  public native Block_dealloc_Pointer_long block_dealloc(); public native ArenaOptions block_dealloc(Block_dealloc_Pointer_long block_dealloc);

  public ArenaOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
}

// Support for non-RTTI environments. (The metrics hooks API uses type
// information.)
// #ifndef GOOGLE_PROTOBUF_NO_RTTI
// #define RTTI_TYPE_ID(type) (&typeid(type))
// #else
// #define RTTI_TYPE_ID(type) (NULL)
// #endif

// Arena allocator. Arena allocation replaces ordinary (heap-based) allocation
// with new/delete, and improves performance by aggregating allocations into
// larger blocks and freeing allocations all at once. Protocol messages are
// allocated on an arena by using Arena::CreateMessage<T>(Arena*), below, and
// are automatically freed when the arena is destroyed.
//
// This is a thread-safe implementation: multiple threads may allocate from the
// arena concurrently. Destruction is not thread-safe and the destructing
// thread must synchronize with users of the arena first.
//
// An arena provides two allocation interfaces: CreateMessage<T>, which works
// for arena-enabled proto2 message types as well as other types that satisfy
// the appropriate protocol (described below), and Create<T>, which works for
// any arbitrary type T. CreateMessage<T> is better when the type T supports it,
// because this interface (i) passes the arena pointer to the created object so
// that its sub-objects and internal allocations can use the arena too, and (ii)
// elides the object's destructor call when possible. Create<T> does not place
// any special requirements on the type T, and will invoke the object's
// destructor when the arena is destroyed.
//
// The arena message allocation protocol, required by CreateMessage<T>, is as
// follows:
//
// - The type T must have (at least) two constructors: a constructor with no
//   arguments, called when a T is allocated on the heap; and a constructor with
//   a google::protobuf::Arena* argument, called when a T is allocated on an arena. If the
//   second constructor is called with a NULL arena pointer, it must be
//   equivalent to invoking the first (no-argument) constructor.
//
// - The type T must have a particular type trait: a nested type
//   |InternalArenaConstructable_|. This is usually a typedef to |void|. If no
//   such type trait exists, then the instantiation CreateMessage<T> will fail
//   to compile.
//
// - The type T *may* have the type trait |DestructorSkippable_|. If this type
//   trait is present in the type, then its destructor will not be called if and
//   only if it was passed a non-NULL arena pointer. If this type trait is not
//   present on the type, then its destructor is always called when the
//   containing arena is destroyed.
//
// - One- and two-user-argument forms of CreateMessage<T>() also exist that
//   forward these constructor arguments to T's constructor: for example,
//   CreateMessage<T>(Arena*, arg1, arg2) forwards to a constructor T(Arena*,
//   arg1, arg2).
//
// This protocol is implemented by all arena-enabled proto2 message classes as
// well as RepeatedPtrField.
//
// Do NOT subclass Arena. This class will be marked as final when C++11 is
// enabled.
@Namespace("google::protobuf") @NoOffset public static class Arena extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Arena(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Arena(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Arena position(long position) {
        return (Arena)super.position(position);
    }

  // Arena constructor taking custom options. See ArenaOptions below for
  // descriptions of the options available.
  public Arena(@Const @ByRef ArenaOptions options) { super((Pointer)null); allocate(options); }
  private native void allocate(@Const @ByRef ArenaOptions options);

  // Block overhead.  Use this as a guide for how much to over-allocate the
  // initial block if you want an allocation of size N to fit inside it.
  //
  // WARNING: if you allocate multiple objects, it is difficult to guarantee
  // that a series of allocations will fit in the initial block, especially if
  // Arena changes its alignment guarantees in the future!
  @MemberGetter public static native @Cast("const size_t") long kBlockOverhead();
  public static final long kBlockOverhead = kBlockOverhead();

  // Default constructor with sensible default options, tuned for average
  // use-cases.
  public Arena() { super((Pointer)null); allocate(); }
  private native void allocate();

  public native void Init(@Const @ByRef ArenaOptions options);

  // API to create proto2 message objects on the arena. If the arena passed in
  // is NULL, then a heap allocated object is returned. Type T must be a message
  // defined in a .proto file with cc_enable_arenas set to true, otherwise a
  // compilation error will occur.
  //
  // RepeatedField and RepeatedPtrField may also be instantiated directly on an
  // arena with this method.
  //
  // This function also accepts any type T that satisfies the arena message
  // allocation protocol, documented above.

  // API to create any objects on the arena. Note that only the object will
  // be created on the arena; the underlying ptrs (in case of a proto2 message)
  // will be still heap allocated. Proto messages should usually be allocated
  // with CreateMessage<T>() instead.
  //
  // Note that even if T satisfies the arena message construction protocol
  // (InternalArenaConstructable_ trait and optional DestructorSkippable_
  // trait), as described above, this function does not follow the protocol;
  // instead, it treats T as a black-box type, just as if it did not have these
  // traits. Specifically, T's constructor arguments will always be only those
  // passed to Create<T>() -- no additional arena pointer is implicitly added.
  // Furthermore, the destructor will always be called at arena destruction time
  // (unless the destructor is trivial). Hence, from T's point of view, it is as
  // if the object were allocated on the heap (except that the underlying memory
  // is obtained from the arena).

  // Create an array of object type T on the arena *without* invoking the
  // constructor of T. If `arena` is null, then the return value should be freed
  // with `delete[] x;` (or `::operator delete[](x);`).
  // To ensure safe uses, this function checks at compile time
  // (when compiled as C++11) that T is trivially default-constructible and
  // trivially destructible.

  // Returns the total space allocated by the arena, which is the sum of the
  // sizes of the underlying blocks. This method is relatively fast; a counter
  // is kept as blocks are allocated.
  public native @Cast("google::protobuf::uint64") long SpaceAllocated();
  // Returns the total space used by the arena. Similar to SpaceAllocated but
  // does not include free space and block overhead. The total space returned
  // may not include space used by other threads executing concurrently with
  // the call to this method.
  public native @Cast("google::protobuf::uint64") long SpaceUsed();
  // DEPRECATED. Please use SpaceAllocated() and SpaceUsed().
  //
  // Combines SpaceAllocated and SpaceUsed. Returns a pair of
  // <space_allocated, space_used>.
  public native @ByVal LongLongPair SpaceAllocatedAndUsed();

  // Frees all storage allocated by this arena after calling destructors
  // registered with OwnDestructor() and freeing objects registered with Own().
  // Any objects allocated on this arena are unusable after this call. It also
  // returns the total space used by the arena which is the sums of the sizes
  // of the allocated blocks. This method is not thread-safe.
  public native @Cast("google::protobuf::uint64") long Reset();

  // Adds |object| to a list of heap-allocated objects to be freed with |delete|
  // when the arena is destroyed or reset.

  // Adds |object| to a list of objects whose destructors will be manually
  // called when the arena is destroyed or reset. This differs from Own() in
  // that it does not free the underlying memory with |delete|; hence, it is
  // normally only used for objects that are placement-newed into
  // arena-allocated memory.

  // Adds a custom member function on an object to the list of destructors that
  // will be manually called when the arena is destroyed or reset. This differs
  // from OwnDestructor() in that any member function may be specified, not only
  // the class destructor.
  public static class Destruct_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Destruct_Pointer(Pointer p) { super(p); }
      protected Destruct_Pointer() { allocate(); }
      private native void allocate();
      public native void call(Pointer arg0);
  }
  public native void OwnCustomDestructor(
        Pointer object, Destruct_Pointer destruct);

  // Retrieves the arena associated with |value| if |value| is an arena-capable
  // message, or NULL otherwise. This differs from value->GetArena() in that the
  // latter is a virtual call, while this method is a templated call that
  // resolves at compile-time.

  // Helper typetraits that indicates support for arenas in a type T at compile
  // time. This is public only to allow construction of higher-level templated
  // utilities.
  //
  // is_arena_constructable<T>::value is true if the message type T has arena
  // support enabled, and false otherwise.
  //
  // is_destructor_skippable<T>::value is true if the message type T has told
  // the arena that it is safe to skip the destructor, and false otherwise.
  //
  // This is inside Arena because only Arena has the friend relationships
  // necessary to see the underlying generated code traits.
}

// Defined above for supporting environments without RTTI.
// #undef RTTI_TYPE_ID

  // namespace protobuf

  // namespace google
// #endif  // GOOGLE_PROTOBUF_ARENA_H__


// Parsed from google/protobuf/descriptor.h

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// This file contains classes which describe a type of protocol message.
// You can use a message's descriptor to learn at runtime what fields
// it contains and what the types of those fields are.  The Message
// interface also allows you to dynamically access and modify individual
// fields by passing the FieldDescriptor of the field you are interested
// in.
//
// Most users will not care about descriptors, because they will write
// code specific to certain protocol types and will simply use the classes
// generated by the protocol compiler directly.  Advanced users who want
// to operate on arbitrary types (not known at compile time) may want to
// read descriptors in order to learn about the contents of a message.
// A very small number of users will want to construct their own
// Descriptors, either because they are implementing Message manually or
// because they are writing something like the protocol compiler.
//
// For an example of how you might use descriptors, see the code example
// at the top of message.h.

// #ifndef GOOGLE_PROTOBUF_DESCRIPTOR_H__
// #define GOOGLE_PROTOBUF_DESCRIPTOR_H__

// #include <memory>
// #include <set>
// #include <string>
// #include <vector>
// #include <google/protobuf/stubs/common.h>
// #include <google/protobuf/stubs/mutex.h>
// #include <google/protobuf/stubs/once.h>

// TYPE_BOOL is defined in the MacOS's ConditionalMacros.h.
// #ifdef TYPE_BOOL
// #undef TYPE_BOOL
// #endif  // TYPE_BOOL

// Defined in this file.
@Namespace("google::protobuf") @Opaque public static class DescriptorDatabase extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public DescriptorDatabase() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DescriptorDatabase(Pointer p) { super(p); }
}

// Defined in descriptor.proto
@Namespace("google::protobuf") @Opaque public static class DescriptorProto extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public DescriptorProto() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DescriptorProto(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class DescriptorProto_ExtensionRange extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public DescriptorProto_ExtensionRange() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DescriptorProto_ExtensionRange(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class FieldDescriptorProto extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public FieldDescriptorProto() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FieldDescriptorProto(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class OneofDescriptorProto extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public OneofDescriptorProto() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OneofDescriptorProto(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class EnumDescriptorProto extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public EnumDescriptorProto() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EnumDescriptorProto(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class EnumValueDescriptorProto extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public EnumValueDescriptorProto() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EnumValueDescriptorProto(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class ServiceDescriptorProto extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ServiceDescriptorProto() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ServiceDescriptorProto(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class MethodDescriptorProto extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MethodDescriptorProto() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MethodDescriptorProto(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class FileDescriptorProto extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public FileDescriptorProto() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileDescriptorProto(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class MessageOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MessageOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MessageOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class FieldOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public FieldOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FieldOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class OneofOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public OneofOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OneofOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class EnumOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public EnumOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EnumOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class EnumValueOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public EnumValueOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EnumValueOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class ExtensionRangeOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ExtensionRangeOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ExtensionRangeOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class ServiceOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ServiceOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ServiceOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class MethodOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MethodOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MethodOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class FileOptions extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public FileOptions() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileOptions(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class UninterpretedOption extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public UninterpretedOption() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UninterpretedOption(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class SourceCodeInfo extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public SourceCodeInfo() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SourceCodeInfo(Pointer p) { super(p); }
}

// Defined in message.h

// Defined in descriptor.cc
@Namespace("google::protobuf") @Opaque public static class DescriptorBuilder extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public DescriptorBuilder() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DescriptorBuilder(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class FileDescriptorTables extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public FileDescriptorTables() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileDescriptorTables(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class Symbol extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Symbol() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Symbol(Pointer p) { super(p); }
}

// Defined in unknown_field_set.h.
@Namespace("google::protobuf") @Opaque public static class UnknownField extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public UnknownField() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UnknownField(Pointer p) { super(p); }
}

// Defined in generated_message_reflection.h.
@Namespace("google::protobuf::internal") @Opaque public static class GeneratedMessageReflection extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public GeneratedMessageReflection() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GeneratedMessageReflection(Pointer p) { super(p); }
}
  // namespace internal

// Defined in command_line_interface.cc
@Namespace("google::protobuf::compiler") @Opaque public static class CommandLineInterface extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CommandLineInterface() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CommandLineInterface(Pointer p) { super(p); }
}
  // namespace compiler
@Namespace("google::protobuf::descriptor_unittest") @Opaque public static class DescriptorTest extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public DescriptorTest() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DescriptorTest(Pointer p) { super(p); }
}
  // namespace descriptor_unittest

// Defined in printer.h
@Namespace("google::protobuf::io") @Opaque public static class Printer extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public Printer() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Printer(Pointer p) { super(p); }
}
  // namespace io

// NB, all indices are zero-based.
@Namespace("google::protobuf") public static class SourceLocation extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SourceLocation() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SourceLocation(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SourceLocation(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SourceLocation position(long position) {
        return (SourceLocation)super.position(position);
    }

  public native int start_line(); public native SourceLocation start_line(int start_line);
  public native int end_line(); public native SourceLocation end_line(int end_line);
  public native int start_column(); public native SourceLocation start_column(int start_column);
  public native int end_column(); public native SourceLocation end_column(int end_column);

  // Doc comments found at the source location.
  // See the comments in SourceCodeInfo.Location (descriptor.proto) for details.
  public native @StdString BytePointer leading_comments(); public native SourceLocation leading_comments(BytePointer leading_comments);
  public native @StdString BytePointer trailing_comments(); public native SourceLocation trailing_comments(BytePointer trailing_comments);
  public native @ByRef StringVector leading_detached_comments(); public native SourceLocation leading_detached_comments(StringVector leading_detached_comments);
}

// Options when generating machine-parsable output from a descriptor with
// DebugString().
@Namespace("google::protobuf") @NoOffset public static class DebugStringOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DebugStringOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DebugStringOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DebugStringOptions position(long position) {
        return (DebugStringOptions)super.position(position);
    }

  // include original user comments as recorded in SourceLocation entries. N.B.
  // that this must be |false| by default: several other pieces of code (for
  // example, the C++ code generation for fields in the proto compiler) rely on
  // DebugString() output being unobstructed by user comments.
  public native @Cast("bool") boolean include_comments(); public native DebugStringOptions include_comments(boolean include_comments);
  // If true, elide the braced body in the debug string.
  public native @Cast("bool") boolean elide_group_body(); public native DebugStringOptions elide_group_body(boolean elide_group_body);
  public native @Cast("bool") boolean elide_oneof_body(); public native DebugStringOptions elide_oneof_body(boolean elide_oneof_body);

  public DebugStringOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
}

// A class to handle the simplest cases of a lazily linked descriptor
// for a message type that isn't built at the time of cross linking,
// which is needed when a pool has lazily_build_dependencies_ set.
// Must be instantiated as mutable in a descriptor.
@Namespace("google::protobuf::internal") public static class LazyDescriptor extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LazyDescriptor() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LazyDescriptor(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LazyDescriptor(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LazyDescriptor position(long position) {
        return (LazyDescriptor)super.position(position);
    }

  // Init function to be called at init time of a descriptor containing
  // a LazyDescriptor.
  public native void Init();

  // Sets the value of the descriptor if it is known during the descriptor
  // building process. Not thread safe, should only be called during the
  // descriptor build process. Should not be called after SetLazy has been
  // called.
  public native void Set(@Const Descriptor descriptor);

  // Sets the information needed to lazily cross link the descriptor at a later
  // time, SetLazy is not thread safe, should be called only once at descriptor
  // build time if the symbol wasn't found and building of the file containing
  // that type is delayed because lazily_build_dependencies_ is set on the pool.
  // Should not be called after Set() has been called.
  public native void SetLazy(@StdString BytePointer name, @Const FileDescriptor file);
  public native void SetLazy(@StdString String name, @Const FileDescriptor file);

  // Returns the current value of the descriptor, thread-safe. If SetLazy(...)
  // has been called, will do a one-time cross link of the type specified,
  // building the descriptor file that contains the type if necessary.
  public native @Const Descriptor Get();
}
  // namespace internal

// Describes a type of protocol message, or a particular group within a
// message.  To obtain the Descriptor for a given message object, call
// Message::GetDescriptor().  Generated message classes also have a
// static method called descriptor() which returns the type's descriptor.
// Use DescriptorPool to construct your own descriptors.
@Namespace("google::protobuf") @NoOffset public static class Descriptor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Descriptor(Pointer p) { super(p); }

  // The name of the message type, not including its scope.
  public native @StdString BytePointer name();

  // The fully-qualified name of the message type, scope delimited by
  // periods.  For example, message type "Foo" which is declared in package
  // "bar" has full name "bar.Foo".  If a type "Baz" is nested within
  // Foo, Baz's full_name is "bar.Foo.Baz".  To get only the part that
  // comes after the last '.', use name().
  public native @StdString BytePointer full_name();

  // Index of this descriptor within the file or containing type's message
  // type array.
  public native int index();

  // The .proto file in which this message type was defined.  Never NULL.
  public native @Const FileDescriptor file();

  // If this Descriptor describes a nested type, this returns the type
  // in which it is nested.  Otherwise, returns NULL.
  public native @Const Descriptor containing_type();

  // Get options for this message type.  These are specified in the .proto file
  // by placing lines like "option foo = 1234;" in the message definition.
  // Allowed options are defined by MessageOptions in
  // google/protobuf/descriptor.proto, and any available extensions of that
  // message.
  public native @Const @ByRef MessageOptions options();

  // Write the contents of this Descriptor into the given DescriptorProto.
  // The target DescriptorProto must be clear before calling this; if it
  // isn't, the result may be garbage.
  public native void CopyTo(DescriptorProto proto);

  // Write the contents of this decriptor in a human-readable form. Output
  // will be suitable for re-parsing.
  public native @StdString BytePointer DebugString();

  // Similar to DebugString(), but additionally takes options (e.g.,
  // include original user comments in output).
  public native @StdString BytePointer DebugStringWithOptions(@Const @ByRef DebugStringOptions options);

  // Returns true if this is a placeholder for an unknown type. This will
  // only be the case if this descriptor comes from a DescriptorPool
  // with AllowUnknownDependencies() set.
  public native @Cast("bool") boolean is_placeholder();

  // Field stuff -----------------------------------------------------

  // The number of fields in this message type.
  public native int field_count();
  // Gets a field by index, where 0 <= index < field_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const FieldDescriptor field(int index);

  // Looks up a field by declared tag number.  Returns NULL if no such field
  // exists.
  public native @Const FieldDescriptor FindFieldByNumber(int number);
  // Looks up a field by name.  Returns NULL if no such field exists.
  public native @Const FieldDescriptor FindFieldByName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindFieldByName(@StdString String name);

  // Looks up a field by lowercased name (as returned by lowercase_name()).
  // This lookup may be ambiguous if multiple field names differ only by case,
  // in which case the field returned is chosen arbitrarily from the matches.
  public native @Const FieldDescriptor FindFieldByLowercaseName(
        @StdString BytePointer lowercase_name);
  public native @Const FieldDescriptor FindFieldByLowercaseName(
        @StdString String lowercase_name);

  // Looks up a field by camel-case name (as returned by camelcase_name()).
  // This lookup may be ambiguous if multiple field names differ in a way that
  // leads them to have identical camel-case names, in which case the field
  // returned is chosen arbitrarily from the matches.
  public native @Const FieldDescriptor FindFieldByCamelcaseName(
        @StdString BytePointer camelcase_name);
  public native @Const FieldDescriptor FindFieldByCamelcaseName(
        @StdString String camelcase_name);

  // The number of oneofs in this message type.
  public native int oneof_decl_count();
  // Get a oneof by index, where 0 <= index < oneof_decl_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const OneofDescriptor oneof_decl(int index);

  // Looks up a oneof by name.  Returns NULL if no such oneof exists.
  public native @Const OneofDescriptor FindOneofByName(@StdString BytePointer name);
  public native @Const OneofDescriptor FindOneofByName(@StdString String name);

  // Nested type stuff -----------------------------------------------

  // The number of nested types in this message type.
  public native int nested_type_count();
  // Gets a nested type by index, where 0 <= index < nested_type_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const Descriptor nested_type(int index);

  // Looks up a nested type by name.  Returns NULL if no such nested type
  // exists.
  public native @Const Descriptor FindNestedTypeByName(@StdString BytePointer name);
  public native @Const Descriptor FindNestedTypeByName(@StdString String name);

  // Enum stuff ------------------------------------------------------

  // The number of enum types in this message type.
  public native int enum_type_count();
  // Gets an enum type by index, where 0 <= index < enum_type_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const EnumDescriptor enum_type(int index);

  // Looks up an enum type by name.  Returns NULL if no such enum type exists.
  public native @Const EnumDescriptor FindEnumTypeByName(@StdString BytePointer name);
  public native @Const EnumDescriptor FindEnumTypeByName(@StdString String name);

  // Looks up an enum value by name, among all enum types in this message.
  // Returns NULL if no such value exists.
  public native @Const EnumValueDescriptor FindEnumValueByName(@StdString BytePointer name);
  public native @Const EnumValueDescriptor FindEnumValueByName(@StdString String name);

  // Extensions ------------------------------------------------------

  // A range of field numbers which are designated for third-party
  // extensions.
  public static class ExtensionRange extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public ExtensionRange() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public ExtensionRange(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public ExtensionRange(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public ExtensionRange position(long position) {
          return (ExtensionRange)super.position(position);
      }
  

    // See Descriptor::CopyTo().
    public native void CopyTo(DescriptorProto_ExtensionRange proto);

    public native int start(); public native ExtensionRange start(int start);  // inclusive
    public native int end(); public native ExtensionRange end(int end);    // exclusive

    @MemberGetter public native @Const ExtensionRangeOptions options_();
  }

  // The number of extension ranges in this message type.
  public native int extension_range_count();
  // Gets an extension range by index, where 0 <= index <
  // extension_range_count(). These are returned in the order they were defined
  // in the .proto file.
  public native @Const ExtensionRange extension_range(int index);

  // Returns true if the number is in one of the extension ranges.
  public native @Cast("bool") boolean IsExtensionNumber(int number);

  // Returns NULL if no extension range contains the given number.
  public native @Const ExtensionRange FindExtensionRangeContainingNumber(int number);

  // The number of extensions -- extending *other* messages -- that were
  // defined nested within this message type's scope.
  public native int extension_count();
  // Get an extension by index, where 0 <= index < extension_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const FieldDescriptor extension(int index);

  // Looks up a named extension (which extends some *other* message type)
  // defined within this message type's scope.
  public native @Const FieldDescriptor FindExtensionByName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindExtensionByName(@StdString String name);

  // Similar to FindFieldByLowercaseName(), but finds extensions defined within
  // this message type's scope.
  public native @Const FieldDescriptor FindExtensionByLowercaseName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindExtensionByLowercaseName(@StdString String name);

  // Similar to FindFieldByCamelcaseName(), but finds extensions defined within
  // this message type's scope.
  public native @Const FieldDescriptor FindExtensionByCamelcaseName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindExtensionByCamelcaseName(@StdString String name);

  // Reserved fields -------------------------------------------------

  // A range of reserved field numbers.
  public static class ReservedRange extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public ReservedRange() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public ReservedRange(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public ReservedRange(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public ReservedRange position(long position) {
          return (ReservedRange)super.position(position);
      }
  
    public native int start(); public native ReservedRange start(int start);  // inclusive
    public native int end(); public native ReservedRange end(int end);    // exclusive
  }

  // The number of reserved ranges in this message type.
  public native int reserved_range_count();
  // Gets an reserved range by index, where 0 <= index <
  // reserved_range_count(). These are returned in the order they were defined
  // in the .proto file.
  public native @Const ReservedRange reserved_range(int index);

  // Returns true if the number is in one of the reserved ranges.
  public native @Cast("bool") boolean IsReservedNumber(int number);

  // Returns NULL if no reserved range contains the given number.
  public native @Const ReservedRange FindReservedRangeContainingNumber(int number);

  // The number of reserved field names in this message type.
  public native int reserved_name_count();

  // Gets a reserved name by index, where 0 <= index < reserved_name_count().
  public native @StdString BytePointer reserved_name(int index);

  // Returns true if the field name is reserved.
  public native @Cast("bool") boolean IsReservedName(@StdString BytePointer name);
  public native @Cast("bool") boolean IsReservedName(@StdString String name);

  // Source Location ---------------------------------------------------

  // Updates |*out_location| to the source location of the complete
  // extent of this message declaration.  Returns false and leaves
  // |*out_location| unchanged iff location information was not available.
  public native @Cast("bool") boolean GetSourceLocation(SourceLocation out_location);
}


// Describes a single field of a message.  To get the descriptor for a given
// field, first get the Descriptor for the message in which it is defined,
// then call Descriptor::FindFieldByName().  To get a FieldDescriptor for
// an extension, do one of the following:
// - Get the Descriptor or FileDescriptor for its containing scope, then
//   call Descriptor::FindExtensionByName() or
//   FileDescriptor::FindExtensionByName().
// - Given a DescriptorPool, call DescriptorPool::FindExtensionByNumber().
// - Given a Reflection for a message object, call
//   Reflection::FindKnownExtensionByName() or
//   Reflection::FindKnownExtensionByNumber().
// Use DescriptorPool to construct your own descriptors.
@Namespace("google::protobuf") @NoOffset public static class FieldDescriptor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FieldDescriptor(Pointer p) { super(p); }

  // Identifies a field type.  0 is reserved for errors.  The order is weird
  // for historical reasons.  Types 12 and up are new in proto2.
  /** enum google::protobuf::FieldDescriptor::Type */
  public static final int
    TYPE_DOUBLE         = 1,   // double, exactly eight bytes on the wire.
    TYPE_FLOAT          = 2,   // float, exactly four bytes on the wire.
    TYPE_INT64          = 3,   // int64, varint on the wire.  Negative numbers
                               // take 10 bytes.  Use TYPE_SINT64 if negative
                               // values are likely.
    TYPE_UINT64         = 4,   // uint64, varint on the wire.
    TYPE_INT32          = 5,   // int32, varint on the wire.  Negative numbers
                               // take 10 bytes.  Use TYPE_SINT32 if negative
                               // values are likely.
    TYPE_FIXED64        = 6,   // uint64, exactly eight bytes on the wire.
    TYPE_FIXED32        = 7,   // uint32, exactly four bytes on the wire.
    TYPE_BOOL           = 8,   // bool, varint on the wire.
    TYPE_STRING         = 9,   // UTF-8 text.
    TYPE_GROUP          = 10,  // Tag-delimited message.  Deprecated.
    TYPE_MESSAGE        = 11,  // Length-delimited message.

    TYPE_BYTES          = 12,  // Arbitrary byte array.
    TYPE_UINT32         = 13,  // uint32, varint on the wire
    TYPE_ENUM           = 14,  // Enum, varint on the wire
    TYPE_SFIXED32       = 15,  // int32, exactly four bytes on the wire
    TYPE_SFIXED64       = 16,  // int64, exactly eight bytes on the wire
    TYPE_SINT32         = 17,  // int32, ZigZag-encoded varint on the wire
    TYPE_SINT64         = 18,  // int64, ZigZag-encoded varint on the wire

    MAX_TYPE            = 18;  // Constant useful for defining lookup tables
                               // indexed by Type.

  // Specifies the C++ data type used to represent the field.  There is a
  // fixed mapping from Type to CppType where each Type maps to exactly one
  // CppType.  0 is reserved for errors.
  /** enum google::protobuf::FieldDescriptor::CppType */
  public static final int
    CPPTYPE_INT32       = 1,     // TYPE_INT32, TYPE_SINT32, TYPE_SFIXED32
    CPPTYPE_INT64       = 2,     // TYPE_INT64, TYPE_SINT64, TYPE_SFIXED64
    CPPTYPE_UINT32      = 3,     // TYPE_UINT32, TYPE_FIXED32
    CPPTYPE_UINT64      = 4,     // TYPE_UINT64, TYPE_FIXED64
    CPPTYPE_DOUBLE      = 5,     // TYPE_DOUBLE
    CPPTYPE_FLOAT       = 6,     // TYPE_FLOAT
    CPPTYPE_BOOL        = 7,     // TYPE_BOOL
    CPPTYPE_ENUM        = 8,     // TYPE_ENUM
    CPPTYPE_STRING      = 9,     // TYPE_STRING, TYPE_BYTES
    CPPTYPE_MESSAGE     = 10,    // TYPE_MESSAGE, TYPE_GROUP

    MAX_CPPTYPE         = 10;    // Constant useful for defining lookup tables
                                 // indexed by CppType.

  // Identifies whether the field is optional, required, or repeated.  0 is
  // reserved for errors.
  /** enum google::protobuf::FieldDescriptor::Label */
  public static final int
    LABEL_OPTIONAL      = 1,    // optional
    LABEL_REQUIRED      = 2,    // required
    LABEL_REPEATED      = 3,    // repeated

    MAX_LABEL           = 3;    // Constant useful for defining lookup tables
                                // indexed by Label.

  // Valid field numbers are positive integers up to kMaxNumber.
  @MemberGetter public static native int kMaxNumber();
  public static final int kMaxNumber = kMaxNumber();

  // First field number reserved for the protocol buffer library implementation.
  // Users may not declare fields that use reserved numbers.
  @MemberGetter public static native int kFirstReservedNumber();
  public static final int kFirstReservedNumber = kFirstReservedNumber();
  // Last field number reserved for the protocol buffer library implementation.
  // Users may not declare fields that use reserved numbers.
  @MemberGetter public static native int kLastReservedNumber();
  public static final int kLastReservedNumber = kLastReservedNumber();

  public native @StdString BytePointer name();        // Name of this field within the message.
  public native @StdString BytePointer full_name();   // Fully-qualified name of the field.
  public native @StdString BytePointer json_name();   // JSON name of this field.
  public native @Const FileDescriptor file();// File in which this field was defined.
  public native @Cast("bool") boolean is_extension();         // Is this an extension field?
  public native int number();                // Declared tag number.

  // Same as name() except converted to lower-case.  This (and especially the
  // FindFieldByLowercaseName() method) can be useful when parsing formats
  // which prefer to use lowercase naming style.  (Although, technically
  // field names should be lowercased anyway according to the protobuf style
  // guide, so this only makes a difference when dealing with old .proto files
  // which do not follow the guide.)
  public native @StdString BytePointer lowercase_name();

  // Same as name() except converted to camel-case.  In this conversion, any
  // time an underscore appears in the name, it is removed and the next
  // letter is capitalized.  Furthermore, the first letter of the name is
  // lower-cased.  Examples:
  //   FooBar -> fooBar
  //   foo_bar -> fooBar
  //   fooBar -> fooBar
  // This (and especially the FindFieldByCamelcaseName() method) can be useful
  // when parsing formats which prefer to use camel-case naming style.
  public native @StdString BytePointer camelcase_name();

  public native @Cast("google::protobuf::FieldDescriptor::Type") int type();                  // Declared type of this field.
  public native @Cast("const char*") BytePointer type_name();      // Name of the declared type.
  public native @Cast("google::protobuf::FieldDescriptor::CppType") int cpp_type();           // C++ type of this field.
  public native @Cast("const char*") BytePointer cpp_type_name();  // Name of the C++ type.
  public native @Cast("google::protobuf::FieldDescriptor::Label") int label();                // optional/required/repeated

  public native @Cast("bool") boolean is_required();      // shorthand for label() == LABEL_REQUIRED
  public native @Cast("bool") boolean is_optional();      // shorthand for label() == LABEL_OPTIONAL
  public native @Cast("bool") boolean is_repeated();      // shorthand for label() == LABEL_REPEATED
  public native @Cast("bool") boolean is_packable();      // shorthand for is_repeated() &&
                                 //               IsTypePackable(type())
  public native @Cast("bool") boolean is_packed();        // shorthand for is_packable() &&
                                 //               options().packed()
  public native @Cast("bool") boolean is_map();           // shorthand for type() == TYPE_MESSAGE &&
                                 // message_type()->options().map_entry()

  // Index of this field within the message's field array, or the file or
  // extension scope's extensions array.
  public native int index();

  // Does this field have an explicitly-declared default value?
  public native @Cast("bool") boolean has_default_value();

  // Whether the user has specified the json_name field option in the .proto
  // file.
  public native @Cast("bool") boolean has_json_name();

  // Get the field default value if cpp_type() == CPPTYPE_INT32.  If no
  // explicit default was defined, the default is 0.
  public native @Cast("google::protobuf::int32") int default_value_int32();
  // Get the field default value if cpp_type() == CPPTYPE_INT64.  If no
  // explicit default was defined, the default is 0.
  public native @Cast("google::protobuf::int64") long default_value_int64();
  // Get the field default value if cpp_type() == CPPTYPE_UINT32.  If no
  // explicit default was defined, the default is 0.
  public native @Cast("google::protobuf::uint32") int default_value_uint32();
  // Get the field default value if cpp_type() == CPPTYPE_UINT64.  If no
  // explicit default was defined, the default is 0.
  public native @Cast("google::protobuf::uint64") long default_value_uint64();
  // Get the field default value if cpp_type() == CPPTYPE_FLOAT.  If no
  // explicit default was defined, the default is 0.0.
  public native float default_value_float();
  // Get the field default value if cpp_type() == CPPTYPE_DOUBLE.  If no
  // explicit default was defined, the default is 0.0.
  public native double default_value_double();
  // Get the field default value if cpp_type() == CPPTYPE_BOOL.  If no
  // explicit default was defined, the default is false.
  public native @Cast("bool") boolean default_value_bool();
  // Get the field default value if cpp_type() == CPPTYPE_ENUM.  If no
  // explicit default was defined, the default is the first value defined
  // in the enum type (all enum types are required to have at least one value).
  // This never returns NULL.
  public native @Const EnumValueDescriptor default_value_enum();
  // Get the field default value if cpp_type() == CPPTYPE_STRING.  If no
  // explicit default was defined, the default is the empty string.
  public native @StdString BytePointer default_value_string();

  // The Descriptor for the message of which this is a field.  For extensions,
  // this is the extended type.  Never NULL.
  public native @Const Descriptor containing_type();

  // If the field is a member of a oneof, this is the one, otherwise this is
  // NULL.
  public native @Const OneofDescriptor containing_oneof();

  // If the field is a member of a oneof, returns the index in that oneof.
  public native int index_in_oneof();

  // An extension may be declared within the scope of another message.  If this
  // field is an extension (is_extension() is true), then extension_scope()
  // returns that message, or NULL if the extension was declared at global
  // scope.  If this is not an extension, extension_scope() is undefined (may
  // assert-fail).
  public native @Const Descriptor extension_scope();

  // If type is TYPE_MESSAGE or TYPE_GROUP, returns a descriptor for the
  // message or the group type.  Otherwise, returns null.
  public native @Const Descriptor message_type();
  // If type is TYPE_ENUM, returns a descriptor for the enum.  Otherwise,
  // returns null.
  public native @Const EnumDescriptor enum_type();

  // Get the FieldOptions for this field.  This includes things listed in
  // square brackets after the field definition.  E.g., the field:
  //   optional string text = 1 [ctype=CORD];
  // has the "ctype" option set.  Allowed options are defined by FieldOptions
  // in google/protobuf/descriptor.proto, and any available extensions of that
  // message.
  public native @Const @ByRef FieldOptions options();

  // See Descriptor::CopyTo().
  public native void CopyTo(FieldDescriptorProto proto);

  // See Descriptor::DebugString().
  public native @StdString BytePointer DebugString();

  // See Descriptor::DebugStringWithOptions().
  public native @StdString BytePointer DebugStringWithOptions(@Const @ByRef DebugStringOptions options);

  // Helper method to get the CppType for a particular Type.
  public static native @Cast("google::protobuf::FieldDescriptor::CppType") int TypeToCppType(@Cast("google::protobuf::FieldDescriptor::Type") int type);

  // Helper method to get the name of a Type.
  public static native @Cast("const char*") BytePointer TypeName(@Cast("google::protobuf::FieldDescriptor::Type") int type);

  // Helper method to get the name of a CppType.
  public static native @Cast("const char*") BytePointer CppTypeName(@Cast("google::protobuf::FieldDescriptor::CppType") int cpp_type);

  // Return true iff [packed = true] is valid for fields of this type.
  public static native @Cast("bool") boolean IsTypePackable(@Cast("google::protobuf::FieldDescriptor::Type") int field_type);

  // Source Location ---------------------------------------------------

  // Updates |*out_location| to the source location of the complete
  // extent of this field declaration.  Returns false and leaves
  // |*out_location| unchanged iff location information was not available.
  public native @Cast("bool") boolean GetSourceLocation(SourceLocation out_location);
}


// Describes a oneof defined in a message type.
@Namespace("google::protobuf") @NoOffset public static class OneofDescriptor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OneofDescriptor(Pointer p) { super(p); }

  public native @StdString BytePointer name();       // Name of this oneof.
  public native @StdString BytePointer full_name();  // Fully-qualified name of the oneof.

  // Index of this oneof within the message's oneof array.
  public native int index();

  // The .proto file in which this oneof was defined.  Never NULL.
  public native @Const FileDescriptor file();
  // The Descriptor for the message containing this oneof.
  public native @Const Descriptor containing_type();

  // The number of (non-extension) fields which are members of this oneof.
  public native int field_count();
  // Get a member of this oneof, in the order in which they were declared in the
  // .proto file.  Does not include extensions.
  public native @Const FieldDescriptor field(int index);

  public native @Const @ByRef OneofOptions options();

  // See Descriptor::CopyTo().
  public native void CopyTo(OneofDescriptorProto proto);

  // See Descriptor::DebugString().
  public native @StdString BytePointer DebugString();

  // See Descriptor::DebugStringWithOptions().
  public native @StdString BytePointer DebugStringWithOptions(@Const @ByRef DebugStringOptions options);

  // Source Location ---------------------------------------------------

  // Updates |*out_location| to the source location of the complete
  // extent of this oneof declaration.  Returns false and leaves
  // |*out_location| unchanged iff location information was not available.
  public native @Cast("bool") boolean GetSourceLocation(SourceLocation out_location);
}

// Describes an enum type defined in a .proto file.  To get the EnumDescriptor
// for a generated enum type, call TypeName_descriptor().  Use DescriptorPool
// to construct your own descriptors.
@Namespace("google::protobuf") @NoOffset public static class EnumDescriptor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EnumDescriptor(Pointer p) { super(p); }

  // The name of this enum type in the containing scope.
  public native @StdString BytePointer name();

  // The fully-qualified name of the enum type, scope delimited by periods.
  public native @StdString BytePointer full_name();

  // Index of this enum within the file or containing message's enum array.
  public native int index();

  // The .proto file in which this enum type was defined.  Never NULL.
  public native @Const FileDescriptor file();

  // The number of values for this EnumDescriptor.  Guaranteed to be greater
  // than zero.
  public native int value_count();
  // Gets a value by index, where 0 <= index < value_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const EnumValueDescriptor value(int index);

  // Looks up a value by name.  Returns NULL if no such value exists.
  public native @Const EnumValueDescriptor FindValueByName(@StdString BytePointer name);
  public native @Const EnumValueDescriptor FindValueByName(@StdString String name);
  // Looks up a value by number.  Returns NULL if no such value exists.  If
  // multiple values have this number, the first one defined is returned.
  public native @Const EnumValueDescriptor FindValueByNumber(int number);

  // If this enum type is nested in a message type, this is that message type.
  // Otherwise, NULL.
  public native @Const Descriptor containing_type();

  // Get options for this enum type.  These are specified in the .proto file by
  // placing lines like "option foo = 1234;" in the enum definition.  Allowed
  // options are defined by EnumOptions in google/protobuf/descriptor.proto,
  // and any available extensions of that message.
  public native @Const @ByRef EnumOptions options();

  // See Descriptor::CopyTo().
  public native void CopyTo(EnumDescriptorProto proto);

  // See Descriptor::DebugString().
  public native @StdString BytePointer DebugString();

  // See Descriptor::DebugStringWithOptions().
  public native @StdString BytePointer DebugStringWithOptions(@Const @ByRef DebugStringOptions options);

  // Returns true if this is a placeholder for an unknown enum. This will
  // only be the case if this descriptor comes from a DescriptorPool
  // with AllowUnknownDependencies() set.
  public native @Cast("bool") boolean is_placeholder();

  // Reserved fields -------------------------------------------------

  // A range of reserved field numbers.
  public static class ReservedRange extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public ReservedRange() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public ReservedRange(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public ReservedRange(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public ReservedRange position(long position) {
          return (ReservedRange)super.position(position);
      }
  
    public native int start(); public native ReservedRange start(int start);  // inclusive
    public native int end(); public native ReservedRange end(int end);    // inclusive
  }

  // The number of reserved ranges in this message type.
  public native int reserved_range_count();
  // Gets an reserved range by index, where 0 <= index <
  // reserved_range_count(). These are returned in the order they were defined
  // in the .proto file.
  public native @Const ReservedRange reserved_range(int index);

  // Returns true if the number is in one of the reserved ranges.
  public native @Cast("bool") boolean IsReservedNumber(int number);

  // Returns NULL if no reserved range contains the given number.
  public native @Const ReservedRange FindReservedRangeContainingNumber(int number);

  // The number of reserved field names in this message type.
  public native int reserved_name_count();

  // Gets a reserved name by index, where 0 <= index < reserved_name_count().
  public native @StdString BytePointer reserved_name(int index);

  // Returns true if the field name is reserved.
  public native @Cast("bool") boolean IsReservedName(@StdString BytePointer name);
  public native @Cast("bool") boolean IsReservedName(@StdString String name);

  // Source Location ---------------------------------------------------

  // Updates |*out_location| to the source location of the complete
  // extent of this enum declaration.  Returns false and leaves
  // |*out_location| unchanged iff location information was not available.
  public native @Cast("bool") boolean GetSourceLocation(SourceLocation out_location);
}

// Describes an individual enum constant of a particular type.  To get the
// EnumValueDescriptor for a given enum value, first get the EnumDescriptor
// for its type, then use EnumDescriptor::FindValueByName() or
// EnumDescriptor::FindValueByNumber().  Use DescriptorPool to construct
// your own descriptors.
@Namespace("google::protobuf") @NoOffset public static class EnumValueDescriptor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EnumValueDescriptor(Pointer p) { super(p); }

  public native @StdString BytePointer name();  // Name of this enum constant.
  public native int index();           // Index within the enums's Descriptor.
  public native int number();          // Numeric value of this enum constant.

  // The full_name of an enum value is a sibling symbol of the enum type.
  // e.g. the full name of FieldDescriptorProto::TYPE_INT32 is actually
  // "google.protobuf.FieldDescriptorProto.TYPE_INT32", NOT
  // "google.protobuf.FieldDescriptorProto.Type.TYPE_INT32".  This is to conform
  // with C++ scoping rules for enums.
  public native @StdString BytePointer full_name();

  // The .proto file in which this value was defined.  Never NULL.
  public native @Const FileDescriptor file();
  // The type of this value.  Never NULL.
  public native @Const EnumDescriptor type();

  // Get options for this enum value.  These are specified in the .proto file
  // by adding text like "[foo = 1234]" after an enum value definition.
  // Allowed options are defined by EnumValueOptions in
  // google/protobuf/descriptor.proto, and any available extensions of that
  // message.
  public native @Const @ByRef EnumValueOptions options();

  // See Descriptor::CopyTo().
  public native void CopyTo(EnumValueDescriptorProto proto);

  // See Descriptor::DebugString().
  public native @StdString BytePointer DebugString();

  // See Descriptor::DebugStringWithOptions().
  public native @StdString BytePointer DebugStringWithOptions(@Const @ByRef DebugStringOptions options);


  // Source Location ---------------------------------------------------

  // Updates |*out_location| to the source location of the complete
  // extent of this enum value declaration.  Returns false and leaves
  // |*out_location| unchanged iff location information was not available.
  public native @Cast("bool") boolean GetSourceLocation(SourceLocation out_location);
}

// Describes an RPC service.  To get the ServiceDescriptor for a service,
// call Service::GetDescriptor().  Generated service classes also have a
// static method called descriptor() which returns the type's
// ServiceDescriptor.  Use DescriptorPool to construct your own descriptors.
@Namespace("google::protobuf") @NoOffset public static class ServiceDescriptor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ServiceDescriptor(Pointer p) { super(p); }

  // The name of the service, not including its containing scope.
  public native @StdString BytePointer name();
  // The fully-qualified name of the service, scope delimited by periods.
  public native @StdString BytePointer full_name();
  // Index of this service within the file's services array.
  public native int index();

  // The .proto file in which this service was defined.  Never NULL.
  public native @Const FileDescriptor file();

  // Get options for this service type.  These are specified in the .proto file
  // by placing lines like "option foo = 1234;" in the service definition.
  // Allowed options are defined by ServiceOptions in
  // google/protobuf/descriptor.proto, and any available extensions of that
  // message.
  public native @Const @ByRef ServiceOptions options();

  // The number of methods this service defines.
  public native int method_count();
  // Gets a MethodDescriptor by index, where 0 <= index < method_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const MethodDescriptor method(int index);

  // Look up a MethodDescriptor by name.
  public native @Const MethodDescriptor FindMethodByName(@StdString BytePointer name);
  public native @Const MethodDescriptor FindMethodByName(@StdString String name);
  // See Descriptor::CopyTo().
  public native void CopyTo(ServiceDescriptorProto proto);

  // See Descriptor::DebugString().
  public native @StdString BytePointer DebugString();

  // See Descriptor::DebugStringWithOptions().
  public native @StdString BytePointer DebugStringWithOptions(@Const @ByRef DebugStringOptions options);


  // Source Location ---------------------------------------------------

  // Updates |*out_location| to the source location of the complete
  // extent of this service declaration.  Returns false and leaves
  // |*out_location| unchanged iff location information was not available.
  public native @Cast("bool") boolean GetSourceLocation(SourceLocation out_location);
}


// Describes an individual service method.  To obtain a MethodDescriptor given
// a service, first get its ServiceDescriptor, then call
// ServiceDescriptor::FindMethodByName().  Use DescriptorPool to construct your
// own descriptors.
@Namespace("google::protobuf") @NoOffset public static class MethodDescriptor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MethodDescriptor(Pointer p) { super(p); }

  // Name of this method, not including containing scope.
  public native @StdString BytePointer name();
  // The fully-qualified name of the method, scope delimited by periods.
  public native @StdString BytePointer full_name();
  // Index within the service's Descriptor.
  public native int index();

  // The .proto file in which this method was defined.  Never NULL.
  public native @Const FileDescriptor file();
  // Gets the service to which this method belongs.  Never NULL.
  public native @Const ServiceDescriptor service();

  // Gets the type of protocol message which this method accepts as input.
  public native @Const Descriptor input_type();
  // Gets the type of protocol message which this message produces as output.
  public native @Const Descriptor output_type();

  // Gets whether the client streams multiple requests.
  public native @Cast("bool") boolean client_streaming();
  // Gets whether the server streams multiple responses.
  public native @Cast("bool") boolean server_streaming();

  // Get options for this method.  These are specified in the .proto file by
  // placing lines like "option foo = 1234;" in curly-braces after a method
  // declaration.  Allowed options are defined by MethodOptions in
  // google/protobuf/descriptor.proto, and any available extensions of that
  // message.
  public native @Const @ByRef MethodOptions options();

  // See Descriptor::CopyTo().
  public native void CopyTo(MethodDescriptorProto proto);

  // See Descriptor::DebugString().
  public native @StdString BytePointer DebugString();

  // See Descriptor::DebugStringWithOptions().
  public native @StdString BytePointer DebugStringWithOptions(@Const @ByRef DebugStringOptions options);


  // Source Location ---------------------------------------------------

  // Updates |*out_location| to the source location of the complete
  // extent of this method declaration.  Returns false and leaves
  // |*out_location| unchanged iff location information was not available.
  public native @Cast("bool") boolean GetSourceLocation(SourceLocation out_location);
}


// Describes a whole .proto file.  To get the FileDescriptor for a compiled-in
// file, get the descriptor for something defined in that file and call
// descriptor->file().  Use DescriptorPool to construct your own descriptors.
@Namespace("google::protobuf") @NoOffset public static class FileDescriptor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FileDescriptor(Pointer p) { super(p); }

  // The filename, relative to the source tree.
  // e.g. "google/protobuf/descriptor.proto"
  public native @StdString BytePointer name();

  // The package, e.g. "google.protobuf.compiler".
  public native @StdString @Name("package") BytePointer _package();

  // The DescriptorPool in which this FileDescriptor and all its contents were
  // allocated.  Never NULL.
  public native @Const DescriptorPool pool();

  // The number of files imported by this one.
  public native int dependency_count();
  // Gets an imported file by index, where 0 <= index < dependency_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const FileDescriptor dependency(int index);

  // The number of files public imported by this one.
  // The public dependency list is a subset of the dependency list.
  public native int public_dependency_count();
  // Gets a public imported file by index, where 0 <= index <
  // public_dependency_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const FileDescriptor public_dependency(int index);

  // The number of files that are imported for weak fields.
  // The weak dependency list is a subset of the dependency list.
  public native int weak_dependency_count();
  // Gets a weak imported file by index, where 0 <= index <
  // weak_dependency_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const FileDescriptor weak_dependency(int index);

  // Number of top-level message types defined in this file.  (This does not
  // include nested types.)
  public native int message_type_count();
  // Gets a top-level message type, where 0 <= index < message_type_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const Descriptor message_type(int index);

  // Number of top-level enum types defined in this file.  (This does not
  // include nested types.)
  public native int enum_type_count();
  // Gets a top-level enum type, where 0 <= index < enum_type_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const EnumDescriptor enum_type(int index);

  // Number of services defined in this file.
  public native int service_count();
  // Gets a service, where 0 <= index < service_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const ServiceDescriptor service(int index);

  // Number of extensions defined at file scope.  (This does not include
  // extensions nested within message types.)
  public native int extension_count();
  // Gets an extension's descriptor, where 0 <= index < extension_count().
  // These are returned in the order they were defined in the .proto file.
  public native @Const FieldDescriptor extension(int index);

  // Get options for this file.  These are specified in the .proto file by
  // placing lines like "option foo = 1234;" at the top level, outside of any
  // other definitions.  Allowed options are defined by FileOptions in
  // google/protobuf/descriptor.proto, and any available extensions of that
  // message.
  public native @Const @ByRef FileOptions options();

  // Syntax of this file.
  /** enum google::protobuf::FileDescriptor::Syntax */
  public static final int
    SYNTAX_UNKNOWN = 0,
    SYNTAX_PROTO2  = 2,
    SYNTAX_PROTO3  = 3;
  public native @Cast("google::protobuf::FileDescriptor::Syntax") int syntax();
  public static native @Cast("const char*") BytePointer SyntaxName(@Cast("google::protobuf::FileDescriptor::Syntax") int syntax);

  // Find a top-level message type by name.  Returns NULL if not found.
  public native @Const Descriptor FindMessageTypeByName(@StdString BytePointer name);
  public native @Const Descriptor FindMessageTypeByName(@StdString String name);
  // Find a top-level enum type by name.  Returns NULL if not found.
  public native @Const EnumDescriptor FindEnumTypeByName(@StdString BytePointer name);
  public native @Const EnumDescriptor FindEnumTypeByName(@StdString String name);
  // Find an enum value defined in any top-level enum by name.  Returns NULL if
  // not found.
  public native @Const EnumValueDescriptor FindEnumValueByName(@StdString BytePointer name);
  public native @Const EnumValueDescriptor FindEnumValueByName(@StdString String name);
  // Find a service definition by name.  Returns NULL if not found.
  public native @Const ServiceDescriptor FindServiceByName(@StdString BytePointer name);
  public native @Const ServiceDescriptor FindServiceByName(@StdString String name);
  // Find a top-level extension definition by name.  Returns NULL if not found.
  public native @Const FieldDescriptor FindExtensionByName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindExtensionByName(@StdString String name);
  // Similar to FindExtensionByName(), but searches by lowercased-name.  See
  // Descriptor::FindFieldByLowercaseName().
  public native @Const FieldDescriptor FindExtensionByLowercaseName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindExtensionByLowercaseName(@StdString String name);
  // Similar to FindExtensionByName(), but searches by camelcased-name.  See
  // Descriptor::FindFieldByCamelcaseName().
  public native @Const FieldDescriptor FindExtensionByCamelcaseName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindExtensionByCamelcaseName(@StdString String name);

  // See Descriptor::CopyTo().
  // Notes:
  // - This method does NOT copy source code information since it is relatively
  //   large and rarely needed.  See CopySourceCodeInfoTo() below.
  public native void CopyTo(FileDescriptorProto proto);
  // Write the source code information of this FileDescriptor into the given
  // FileDescriptorProto.  See CopyTo() above.
  public native void CopySourceCodeInfoTo(FileDescriptorProto proto);
  // Fill the json_name field of FieldDescriptorProto for all fields. Can only
  // be called after CopyTo().
  public native void CopyJsonNameTo(FileDescriptorProto proto);

  // See Descriptor::DebugString().
  public native @StdString BytePointer DebugString();

  // See Descriptor::DebugStringWithOptions().
  public native @StdString BytePointer DebugStringWithOptions(@Const @ByRef DebugStringOptions options);

  // Returns true if this is a placeholder for an unknown file. This will
  // only be the case if this descriptor comes from a DescriptorPool
  // with AllowUnknownDependencies() set.
  public native @Cast("bool") boolean is_placeholder();

  // Updates |*out_location| to the source location of the complete extent of
  // this file declaration (namely, the empty path).
  public native @Cast("bool") boolean GetSourceLocation(SourceLocation out_location);

  // Updates |*out_location| to the source location of the complete
  // extent of the declaration or declaration-part denoted by |path|.
  // Returns false and leaves |*out_location| unchanged iff location
  // information was not available.  (See SourceCodeInfo for
  // description of path encoding.)
  public native @Cast("bool") boolean GetSourceLocation(@StdVector IntPointer path,
                           SourceLocation out_location);
  public native @Cast("bool") boolean GetSourceLocation(@StdVector IntBuffer path,
                           SourceLocation out_location);
  public native @Cast("bool") boolean GetSourceLocation(@StdVector int[] path,
                           SourceLocation out_location);
}


// ===================================================================

// Used to construct descriptors.
//
// Normally you won't want to build your own descriptors.  Message classes
// constructed by the protocol compiler will provide them for you.  However,
// if you are implementing Message on your own, or if you are writing a
// program which can operate on totally arbitrary types and needs to load
// them from some sort of database, you might need to.
//
// Since Descriptors are composed of a whole lot of cross-linked bits of
// data that would be a pain to put together manually, the
// DescriptorPool class is provided to make the process easier.  It can
// take a FileDescriptorProto (defined in descriptor.proto), validate it,
// and convert it to a set of nicely cross-linked Descriptors.
//
// DescriptorPool also helps with memory management.  Descriptors are
// composed of many objects containing static data and pointers to each
// other.  In all likelihood, when it comes time to delete this data,
// you'll want to delete it all at once.  In fact, it is not uncommon to
// have a whole pool of descriptors all cross-linked with each other which
// you wish to delete all at once.  This class represents such a pool, and
// handles the memory management for you.
//
// You can also search for descriptors within a DescriptorPool by name, and
// extensions by number.
@Namespace("google::protobuf") @NoOffset public static class DescriptorPool extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DescriptorPool(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DescriptorPool(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DescriptorPool position(long position) {
        return (DescriptorPool)super.position(position);
    }

  // Create a normal, empty DescriptorPool.
  public DescriptorPool() { super((Pointer)null); allocate(); }
  private native void allocate();

  // Constructs a DescriptorPool that, when it can't find something among the
  // descriptors already in the pool, looks for it in the given
  // DescriptorDatabase.
  // Notes:
  // - If a DescriptorPool is constructed this way, its BuildFile*() methods
  //   must not be called (they will assert-fail).  The only way to populate
  //   the pool with descriptors is to call the Find*By*() methods.
  // - The Find*By*() methods may block the calling thread if the
  //   DescriptorDatabase blocks.  This in turn means that parsing messages
  //   may block if they need to look up extensions.
  // - The Find*By*() methods will use mutexes for thread-safety, thus making
  //   them slower even when they don't have to fall back to the database.
  //   In fact, even the Find*By*() methods of descriptor objects owned by
  //   this pool will be slower, since they will have to obtain locks too.
  // - An ErrorCollector may optionally be given to collect validation errors
  //   in files loaded from the database.  If not given, errors will be printed
  //   to GOOGLE_LOG(ERROR).  Remember that files are built on-demand, so this
  //   ErrorCollector may be called from any thread that calls one of the
  //   Find*By*() methods.
  // - The DescriptorDatabase must not be mutated during the lifetime of
  //   the DescriptorPool. Even if the client takes care to avoid data races,
  //   changes to the content of the DescriptorDatabase may not be reflected
  //   in subsequent lookups in the DescriptorPool.
  public DescriptorPool(DescriptorDatabase fallback_database,
                            ErrorCollector error_collector/*=NULL*/) { super((Pointer)null); allocate(fallback_database, error_collector); }
  private native void allocate(DescriptorDatabase fallback_database,
                            ErrorCollector error_collector/*=NULL*/);
  public DescriptorPool(DescriptorDatabase fallback_database) { super((Pointer)null); allocate(fallback_database); }
  private native void allocate(DescriptorDatabase fallback_database);

  // Get a pointer to the generated pool.  Generated protocol message classes
  // which are compiled into the binary will allocate their descriptors in
  // this pool.  Do not add your own descriptors to this pool.
  public static native @Const DescriptorPool generated_pool();


  // Find a FileDescriptor in the pool by file name.  Returns NULL if not
  // found.
  public native @Const FileDescriptor FindFileByName(@StdString BytePointer name);
  public native @Const FileDescriptor FindFileByName(@StdString String name);

  // Find the FileDescriptor in the pool which defines the given symbol.
  // If any of the Find*ByName() methods below would succeed, then this is
  // equivalent to calling that method and calling the result's file() method.
  // Otherwise this returns NULL.
  public native @Const FileDescriptor FindFileContainingSymbol(
        @StdString BytePointer symbol_name);
  public native @Const FileDescriptor FindFileContainingSymbol(
        @StdString String symbol_name);

  // Looking up descriptors ------------------------------------------
  // These find descriptors by fully-qualified name.  These will find both
  // top-level descriptors and nested descriptors.  They return NULL if not
  // found.

  public native @Const Descriptor FindMessageTypeByName(@StdString BytePointer name);
  public native @Const Descriptor FindMessageTypeByName(@StdString String name);
  public native @Const FieldDescriptor FindFieldByName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindFieldByName(@StdString String name);
  public native @Const FieldDescriptor FindExtensionByName(@StdString BytePointer name);
  public native @Const FieldDescriptor FindExtensionByName(@StdString String name);
  public native @Const OneofDescriptor FindOneofByName(@StdString BytePointer name);
  public native @Const OneofDescriptor FindOneofByName(@StdString String name);
  public native @Const EnumDescriptor FindEnumTypeByName(@StdString BytePointer name);
  public native @Const EnumDescriptor FindEnumTypeByName(@StdString String name);
  public native @Const EnumValueDescriptor FindEnumValueByName(@StdString BytePointer name);
  public native @Const EnumValueDescriptor FindEnumValueByName(@StdString String name);
  public native @Const ServiceDescriptor FindServiceByName(@StdString BytePointer name);
  public native @Const ServiceDescriptor FindServiceByName(@StdString String name);
  public native @Const MethodDescriptor FindMethodByName(@StdString BytePointer name);
  public native @Const MethodDescriptor FindMethodByName(@StdString String name);

  // Finds an extension of the given type by number.  The extendee must be
  // a member of this DescriptorPool or one of its underlays.
  public native @Const FieldDescriptor FindExtensionByNumber(@Const Descriptor extendee,
                                                 int number);

  // Finds extensions of extendee. The extensions will be appended to
  // out in an undefined order. Only extensions defined directly in
  // this DescriptorPool or one of its underlays are guaranteed to be
  // found: extensions defined in the fallback database might not be found
  // depending on the database implementation.
  public native void FindAllExtensions(@Const Descriptor extendee,
                           FieldDescriptorVector out);

  // Building descriptors --------------------------------------------

  // When converting a FileDescriptorProto to a FileDescriptor, various
  // errors might be detected in the input.  The caller may handle these
  // programmatically by implementing an ErrorCollector.
  public static class ErrorCollector extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public ErrorCollector(Pointer p) { super(p); }
  

    // These constants specify what exact part of the construct is broken.
    // This is useful e.g. for mapping the error back to an exact location
    // in a .proto file.
    /** enum google::protobuf::DescriptorPool::ErrorCollector::ErrorLocation */
    public static final int
      NAME = 0,              // the symbol name, or the package name for files
      NUMBER = 1,            // field or extension range number
      TYPE = 2,              // field type
      EXTENDEE = 3,          // field extendee
      DEFAULT_VALUE = 4,     // field default value
      INPUT_TYPE = 5,        // method input type
      OUTPUT_TYPE = 6,       // method output type
      OPTION_NAME = 7,       // name in assignment
      OPTION_VALUE = 8,      // value in option assignment
      OTHER = 9;              // some other problem

    // Reports an error in the FileDescriptorProto. Use this function if the
    // problem occurred should interrupt building the FileDescriptorProto.
    public native void AddError(
          @StdString BytePointer filename,
          @StdString BytePointer element_name,
          @Const Message descriptor,
          @Cast("google::protobuf::DescriptorPool::ErrorCollector::ErrorLocation") int location,
          @StdString BytePointer message
          );
    public native void AddError(
          @StdString String filename,
          @StdString String element_name,
          @Const Message descriptor,
          @Cast("google::protobuf::DescriptorPool::ErrorCollector::ErrorLocation") int location,
          @StdString String message
          );

    // Reports a warning in the FileDescriptorProto. Use this function if the
    // problem occurred should NOT interrupt building the FileDescriptorProto.
    public native void AddWarning(
          @StdString BytePointer arg0,
          @StdString BytePointer arg1,
          @Const Message arg2,
          @Cast("google::protobuf::DescriptorPool::ErrorCollector::ErrorLocation") int arg3,
          @StdString BytePointer arg4
          );
    public native void AddWarning(
          @StdString String arg0,
          @StdString String arg1,
          @Const Message arg2,
          @Cast("google::protobuf::DescriptorPool::ErrorCollector::ErrorLocation") int arg3,
          @StdString String arg4
          );
  }

  // Convert the FileDescriptorProto to real descriptors and place them in
  // this DescriptorPool.  All dependencies of the file must already be in
  // the pool.  Returns the resulting FileDescriptor, or NULL if there were
  // problems with the input (e.g. the message was invalid, or dependencies
  // were missing).  Details about the errors are written to GOOGLE_LOG(ERROR).
  public native @Const FileDescriptor BuildFile(@Const @ByRef FileDescriptorProto proto);

  // Same as BuildFile() except errors are sent to the given ErrorCollector.
  public native @Const FileDescriptor BuildFileCollectingErrors(
      @Const @ByRef FileDescriptorProto proto,
      ErrorCollector error_collector);

  // By default, it is an error if a FileDescriptorProto contains references
  // to types or other files that are not found in the DescriptorPool (or its
  // backing DescriptorDatabase, if any).  If you call
  // AllowUnknownDependencies(), however, then unknown types and files
  // will be replaced by placeholder descriptors (which can be identified by
  // the is_placeholder() method).  This can allow you to
  // perform some useful operations with a .proto file even if you do not
  // have access to other .proto files on which it depends.  However, some
  // heuristics must be used to fill in the gaps in information, and these
  // can lead to descriptors which are inaccurate.  For example, the
  // DescriptorPool may be forced to guess whether an unknown type is a message
  // or an enum, as well as what package it resides in.  Furthermore,
  // placeholder types will not be discoverable via FindMessageTypeByName()
  // and similar methods, which could confuse some descriptor-based algorithms.
  // Generally, the results of this option should be handled with extreme care.
  public native void AllowUnknownDependencies();

  // By default, weak imports are allowed to be missing, in which case we will
  // use a placeholder for the dependency and convert the field to be an Empty
  // message field. If you call EnforceWeakDependencies(true), however, the
  // DescriptorPool will report a import not found error.
  public native void EnforceWeakDependencies(@Cast("bool") boolean enforce);

  // Internal stuff --------------------------------------------------
  // These methods MUST NOT be called from outside the proto2 library.
  // These methods may contain hidden pitfalls and may be removed in a
  // future library version.

  // Create a DescriptorPool which is overlaid on top of some other pool.
  // If you search for a descriptor in the overlay and it is not found, the
  // underlay will be searched as a backup.  If the underlay has its own
  // underlay, that will be searched next, and so on.  This also means that
  // files built in the overlay will be cross-linked with the underlay's
  // descriptors if necessary.  The underlay remains property of the caller;
  // it must remain valid for the lifetime of the newly-constructed pool.
  //
  // Example:  Say you want to parse a .proto file at runtime in order to use
  // its type with a DynamicMessage.  Say this .proto file has dependencies,
  // but you know that all the dependencies will be things that are already
  // compiled into the binary.  For ease of use, you'd like to load the types
  // right out of generated_pool() rather than have to parse redundant copies
  // of all these .protos and runtime.  But, you don't want to add the parsed
  // types directly into generated_pool(): this is not allowed, and would be
  // bad design anyway.  So, instead, you could use generated_pool() as an
  // underlay for a new DescriptorPool in which you add only the new file.
  //
  // WARNING:  Use of underlays can lead to many subtle gotchas.  Instead,
  //   try to formulate what you want to do in terms of DescriptorDatabases.
  public DescriptorPool(@Const DescriptorPool underlay) { super((Pointer)null); allocate(underlay); }
  private native void allocate(@Const DescriptorPool underlay);

  // Called by generated classes at init time to add their descriptors to
  // generated_pool.  Do NOT call this in your own code!  filename must be a
  // permanent string (e.g. a string literal).
  public static native void InternalAddGeneratedFile(
        @Const Pointer encoded_file_descriptor, int size);

  // Disallow [enforce_utf8 = false] in .proto files.
  public native void DisallowEnforceUtf8();


  // For internal use only:  Gets a non-const pointer to the generated pool.
  // This is called at static-initialization time only, so thread-safety is
  // not a concern.  If both an underlay and a fallback database are present,
  // the underlay takes precedence.
  public static native DescriptorPool internal_generated_pool();

  // For internal use only:  Changes the behavior of BuildFile() such that it
  // allows the file to make reference to message types declared in other files
  // which it did not officially declare as dependencies.
  public native void InternalDontEnforceDependencies();

  // For internal use only: Enables lazy building of dependencies of a file.
  // Delay the building of dependencies of a file descriptor until absolutely
  // necessary, like when message_type() is called on a field that is defined
  // in that dependency's file. This will cause functional issues if a proto
  // or one of it's dependencies has errors. Should only be enabled for the
  // generated_pool_ (because no descriptor build errors are guaranteed by
  // the compilation generation process), testing, or if a lack of descriptor
  // build errors can be guaranteed for a pool.
  public native void InternalSetLazilyBuildDependencies();

  // For internal use only.
  public native void internal_set_underlay(@Const DescriptorPool underlay);

  // For internal (unit test) use only:  Returns true if a FileDescriptor has
  // been constructed for the given file, false otherwise.  Useful for testing
  // lazy descriptor initialization behavior.
  public native @Cast("bool") boolean InternalIsFileLoaded(@StdString BytePointer filename);
  public native @Cast("bool") boolean InternalIsFileLoaded(@StdString String filename);


  // Add a file to unused_import_track_files_. DescriptorBuilder will log
  // warnings for those files if there is any unused import.
  public native void AddUnusedImportTrackFile(@StdString BytePointer file_name);
  public native void AddUnusedImportTrackFile(@StdString String file_name);
  public native void ClearUnusedImportTrackFiles();
}


// inline methods ====================================================

// These macros makes this repetitive code more readable.
// #define PROTOBUF_DEFINE_ACCESSOR(CLASS, FIELD, TYPE)
//   inline TYPE CLASS::FIELD() const { return FIELD##_; }

// Strings fields are stored as pointers but returned as const references.
// #define PROTOBUF_DEFINE_STRING_ACCESSOR(CLASS, FIELD)
//   inline const string& CLASS::FIELD() const { return *FIELD##_; }

// Arrays take an index parameter, obviously.
// #define PROTOBUF_DEFINE_ARRAY_ACCESSOR(CLASS, FIELD, TYPE)
//   inline TYPE CLASS::FIELD(int index) const { return FIELD##s_ + index; }

// #define PROTOBUF_DEFINE_OPTIONS_ACCESSOR(CLASS, TYPE)
//   inline const TYPE& CLASS::options() const { return *options_; }













































































































// #undef PROTOBUF_DEFINE_ACCESSOR
// #undef PROTOBUF_DEFINE_STRING_ACCESSOR
// #undef PROTOBUF_DEFINE_ARRAY_ACCESSOR

// A few accessors differ from the macros...







// Can't use PROTOBUF_DEFINE_ARRAY_ACCESSOR because reserved_names_ is actually
// an array of pointers rather than the usual array of objects.






// Can't use PROTOBUF_DEFINE_ARRAY_ACCESSOR because reserved_names_ is actually
// an array of pointers rather than the usual array of objects.














// To save space, index() is computed by looking at the descriptor's position
// in the parent's array of children.








































// Can't use PROTOBUF_DEFINE_ARRAY_ACCESSOR because fields_ is actually an array
// of pointers rather than the usual array of objects.


  // namespace protobuf

  // namespace google
// #endif  // GOOGLE_PROTOBUF_DESCRIPTOR_H__


// Parsed from google/protobuf/message_lite.h

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Authors: wink@google.com (Wink Saville),
//          kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// Defines MessageLite, the abstract interface implemented by all (lite
// and non-lite) protocol message objects.

// #ifndef GOOGLE_PROTOBUF_MESSAGE_LITE_H__
// #define GOOGLE_PROTOBUF_MESSAGE_LITE_H__

// #include <climits>
// #include <google/protobuf/stubs/common.h>
// #include <google/protobuf/stubs/logging.h>
// #include <google/protobuf/stubs/once.h>
// #include <google/protobuf/arena.h>
// #include <google/protobuf/stubs/port.h>
@Namespace("google::protobuf::io") @Opaque public static class CodedInputStream extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CodedInputStream() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CodedInputStream(Pointer p) { super(p); }
}
@Namespace("google::protobuf::io") @Opaque public static class CodedOutputStream extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CodedOutputStream() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CodedOutputStream(Pointer p) { super(p); }
}
@Namespace("google::protobuf::io") @Opaque public static class ZeroCopyInputStream extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ZeroCopyInputStream() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ZeroCopyInputStream(Pointer p) { super(p); }
}
@Namespace("google::protobuf::io") @Opaque public static class ZeroCopyOutputStream extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ZeroCopyOutputStream() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ZeroCopyOutputStream(Pointer p) { super(p); }
}


@Namespace("google::protobuf::internal") @Opaque public static class RepeatedPtrFieldBase extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public RepeatedPtrFieldBase() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RepeatedPtrFieldBase(Pointer p) { super(p); }
}
@Namespace("google::protobuf::internal") @Opaque public static class WireFormatLite extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public WireFormatLite() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public WireFormatLite(Pointer p) { super(p); }
}
@Namespace("google::protobuf::internal") @Opaque public static class WeakFieldMap extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public WeakFieldMap() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public WeakFieldMap(Pointer p) { super(p); }
}

// #ifndef SWIG
// #endif  // SWIG
  // namespace internal

// Interface to light weight protocol messages.
//
// This interface is implemented by all protocol message objects.  Non-lite
// messages additionally implement the Message interface, which is a
// subclass of MessageLite.  Use MessageLite instead when you only need
// the subset of features which it supports -- namely, nothing that uses
// descriptors or reflection.  You can instruct the protocol compiler
// to generate classes which implement only MessageLite, not the full
// Message interface, by adding the following line to the .proto file:
//
//   option optimize_for = LITE_RUNTIME;
//
// This is particularly useful on resource-constrained systems where
// the full protocol buffers runtime library is too big.
//
// Note that on non-constrained systems (e.g. servers) when you need
// to link in lots of protocol definitions, a better way to reduce
// total code footprint is to use optimize_for = CODE_SIZE.  This
// will make the generated code smaller while still supporting all the
// same features (at the expense of speed).  optimize_for = LITE_RUNTIME
// is best when you only have a small number of message types linked
// into your binary, in which case the size of the protocol buffers
// runtime itself is the biggest problem.
@Namespace("google::protobuf") public static class MessageLite extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MessageLite(Pointer p) { super(p); }


  // Basic Operations ------------------------------------------------

  // Get the name of this message type, e.g. "foo.bar.BazProto".
  public native @StdString BytePointer GetTypeName();

  // Construct a new instance of the same type.  Ownership is passed to the
  // caller.
  public native MessageLite New();

  // Construct a new instance on the arena. Ownership is passed to the caller
  // if arena is a NULL. Default implementation for backwards compatibility.
  public native MessageLite New(Arena arena);

  // Get the arena, if any, associated with this message. Virtual method
  // required for generic operations but most arena-related operations should
  // use the GetArenaNoVirtual() generated-code method. Default implementation
  // to reduce code size by avoiding the need for per-type implementations
  // when types do not implement arena support.
  public native Arena GetArena();

  // Get a pointer that may be equal to this message's arena, or may not be.
  // If the value returned by this method is equal to some arena pointer, then
  // this message is on that arena; however, if this message is on some arena,
  // this method may or may not return that arena's pointer. As a tradeoff,
  // this method may be more efficient than GetArena(). The intent is to allow
  // underlying representations that use e.g. tagged pointers to sometimes
  // store the arena pointer directly, and sometimes in a more indirect way,
  // and allow a fastpath comparison against the arena pointer when it's easy
  // to obtain.
  public native Pointer GetMaybeArenaPointer();

  // Clear all fields of the message and set them to their default values.
  // Clear() avoids freeing memory, assuming that any memory allocated
  // to hold parts of the message will be needed again to hold the next
  // message.  If you actually want to free the memory used by a Message,
  // you must delete it.
  public native void Clear();

  // Quickly check if all required fields have values set.
  public native @Cast("bool") boolean IsInitialized();

  // This is not implemented for Lite messages -- it just returns "(cannot
  // determine missing fields for lite message)".  However, it is implemented
  // for full messages.  See message.h.
  public native @StdString BytePointer InitializationErrorString();

  // If |other| is the exact same class as this, calls MergeFrom(). Otherwise,
  // results are undefined (probably crash).
  public native void CheckTypeAndMergeFrom(@Const @ByRef MessageLite other);

  // Parsing ---------------------------------------------------------
  // Methods for parsing in protocol buffer format.  Most of these are
  // just simple wrappers around MergeFromCodedStream().  Clear() will be
  // called before merging the input.

  // Fill the message with a protocol buffer parsed from the given input
  // stream. Returns false on a read error or if the input is in the wrong
  // format.  A successful return does not indicate the entire input is
  // consumed, ensure you call ConsumedEntireMessage() to check that if
  // applicable.
  public native @Cast("bool") boolean ParseFromCodedStream(CodedInputStream input);
  // Like ParseFromCodedStream(), but accepts messages that are missing
  // required fields.
  public native @Cast("bool") boolean ParsePartialFromCodedStream(CodedInputStream input);
  // Read a protocol buffer from the given zero-copy input stream.  If
  // successful, the entire input will be consumed.
  public native @Cast("bool") boolean ParseFromZeroCopyStream(ZeroCopyInputStream input);
  // Like ParseFromZeroCopyStream(), but accepts messages that are missing
  // required fields.
  public native @Cast("bool") boolean ParsePartialFromZeroCopyStream(ZeroCopyInputStream input);
  // Read a protocol buffer from the given zero-copy input stream, expecting
  // the message to be exactly "size" bytes long.  If successful, exactly
  // this many bytes will have been consumed from the input.
  public native @Cast("bool") boolean ParseFromBoundedZeroCopyStream(ZeroCopyInputStream input, int size);
  // Like ParseFromBoundedZeroCopyStream(), but accepts messages that are
  // missing required fields.
  public native @Cast("bool") boolean ParsePartialFromBoundedZeroCopyStream(ZeroCopyInputStream input,
                                               int size);
  // Parses a protocol buffer contained in a string. Returns true on success.
  // This function takes a string in the (non-human-readable) binary wire
  // format, matching the encoding output by MessageLite::SerializeToString().
  // If you'd like to convert a human-readable string into a protocol buffer
  // object, see google::protobuf::TextFormat::ParseFromString().
  public native @Cast("bool") boolean ParseFromString(@StdString BytePointer data);
  public native @Cast("bool") boolean ParseFromString(@StdString String data);
  // Like ParseFromString(), but accepts messages that are missing
  // required fields.
  public native @Cast("bool") boolean ParsePartialFromString(@StdString BytePointer data);
  public native @Cast("bool") boolean ParsePartialFromString(@StdString String data);
  // Parse a protocol buffer contained in an array of bytes.
  public native @Cast("bool") boolean ParseFromArray(@Const Pointer data, int size);
  // Like ParseFromArray(), but accepts messages that are missing
  // required fields.
  public native @Cast("bool") boolean ParsePartialFromArray(@Const Pointer data, int size);


  // Reads a protocol buffer from the stream and merges it into this
  // Message.  Singular fields read from the what is
  // already in the Message and repeated fields are appended to those
  // already present.
  //
  // It is the responsibility of the caller to call input->LastTagWas()
  // (for groups) or input->ConsumedEntireMessage() (for non-groups) after
  // this returns to verify that the message's end was delimited correctly.
  //
  // ParsefromCodedStream() is implemented as Clear() followed by
  // MergeFromCodedStream().
  public native @Cast("bool") boolean MergeFromCodedStream(CodedInputStream input);

  // Like MergeFromCodedStream(), but succeeds even if required fields are
  // missing in the input.
  //
  // MergeFromCodedStream() is just implemented as MergePartialFromCodedStream()
  // followed by IsInitialized().
  public native @Cast("bool") boolean MergePartialFromCodedStream(CodedInputStream input);


  // Serialization ---------------------------------------------------
  // Methods for serializing in protocol buffer format.  Most of these
  // are just simple wrappers around ByteSize() and SerializeWithCachedSizes().

  // Write a protocol buffer of this message to the given output.  Returns
  // false on a write error.  If the message is missing required fields,
  // this may GOOGLE_CHECK-fail.
  public native @Cast("bool") boolean SerializeToCodedStream(CodedOutputStream output);
  // Like SerializeToCodedStream(), but allows missing required fields.
  public native @Cast("bool") boolean SerializePartialToCodedStream(CodedOutputStream output);
  // Write the message to the given zero-copy output stream.  All required
  // fields must be set.
  public native @Cast("bool") boolean SerializeToZeroCopyStream(ZeroCopyOutputStream output);
  // Like SerializeToZeroCopyStream(), but allows missing required fields.
  public native @Cast("bool") boolean SerializePartialToZeroCopyStream(ZeroCopyOutputStream output);
  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  public native @Cast("bool") boolean SerializeToString(@StdString @Cast({"char*", "std::string*"}) BytePointer output);
  // Like SerializeToString(), but allows missing required fields.
  public native @Cast("bool") boolean SerializePartialToString(@StdString @Cast({"char*", "std::string*"}) BytePointer output);
  // Serialize the message and store it in the given byte array.  All required
  // fields must be set.
  public native @Cast("bool") boolean SerializeToArray(Pointer data, int size);
  // Like SerializeToArray(), but allows missing required fields.
  public native @Cast("bool") boolean SerializePartialToArray(Pointer data, int size);

  // Make a string encoding the message. Is equivalent to calling
  // SerializeToString() on a string and using that.  Returns the empty
  // string if SerializeToString() would have returned an error.
  // Note: If you intend to generate many such strings, you may
  // reduce heap fragmentation by instead re-using the same string
  // object with calls to SerializeToString().
  public native @StdString BytePointer SerializeAsString();
  // Like SerializeAsString(), but allows missing required fields.
  public native @StdString BytePointer SerializePartialAsString();

  // Like SerializeToString(), but appends to the data to the string's existing
  // contents.  All required fields must be set.
  public native @Cast("bool") boolean AppendToString(@StdString @Cast({"char*", "std::string*"}) BytePointer output);
  // Like AppendToString(), but allows missing required fields.
  public native @Cast("bool") boolean AppendPartialToString(@StdString @Cast({"char*", "std::string*"}) BytePointer output);

  // Computes the serialized size of the message.  This recursively calls
  // ByteSizeLong() on all embedded messages.
  //
  // ByteSizeLong() is generally linear in the number of fields defined for the
  // proto.
  public native @Cast("size_t") long ByteSizeLong();

  // Legacy ByteSize() API.
  public native int ByteSize();

  // Serializes the message without recomputing the size.  The message must not
  // have changed since the last call to ByteSize(), and the value returned by
  // ByteSize must be non-negative.  Otherwise the results are undefined.
  public native void SerializeWithCachedSizes(
        CodedOutputStream output);

  // Functions below here are not part of the public interface.  It isn't
  // enforced, but they should be treated as private, and will be private
  // at some future time.  Unfortunately the implementation of the "friend"
  // keyword in GCC is broken at the moment, but we expect it will be fixed.

  // Like SerializeWithCachedSizes, but writes directly to *target, returning
  // a pointer to the byte immediately after the last byte written.  "target"
  // must point at a byte array of at least ByteSize() bytes.  Whether to use
  // deterministic serialization, e.g., maps in sorted order, is determined by
  // CodedOutputStream::IsDefaultSerializationDeterministic().
  public native @Cast("google::protobuf::uint8*") BytePointer SerializeWithCachedSizesToArray(@Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") ByteBuffer SerializeWithCachedSizesToArray(@Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") byte[] SerializeWithCachedSizesToArray(@Cast("google::protobuf::uint8*") byte[] target);

  // Returns the result of the last call to ByteSize().  An embedded message's
  // size is needed both to serialize it (because embedded messages are
  // length-delimited) and to compute the outer message's size.  Caching
  // the size avoids computing it multiple times.
  //
  // ByteSize() does not automatically use the cached size when available
  // because this would require invalidating it every time the message was
  // modified, which would be too hard and expensive.  (E.g. if a deeply-nested
  // sub-message is changed, all of its parents' cached sizes would need to be
  // invalidated, which is too much work for an otherwise inlined setter
  // method.)
  public native int GetCachedSize();

  public native @Cast("google::protobuf::uint8*") BytePointer InternalSerializeWithCachedSizesToArray(@Cast("bool") boolean deterministic,
                                                           @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") ByteBuffer InternalSerializeWithCachedSizesToArray(@Cast("bool") boolean deterministic,
                                                           @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") byte[] InternalSerializeWithCachedSizesToArray(@Cast("bool") boolean deterministic,
                                                           @Cast("google::protobuf::uint8*") byte[] target);
}



// DO NOT USE: For migration only. Will be removed when Proto3 defaults to
// preserve unknowns.
@Namespace("google::protobuf::internal") public static native @Cast("bool") boolean GetProto3PreserveUnknownsDefault();

// DO NOT USE: For migration only. Will be removed when Proto3 defaults to
// preserve unknowns.
@Namespace("google::protobuf::internal") public static native void SetProto3PreserveUnknownsDefault(@Cast("bool") boolean preserve);
  // namespace internal


  // namespace protobuf

  // namespace google
// #endif  // GOOGLE_PROTOBUF_MESSAGE_LITE_H__


// Parsed from google/protobuf/message.h

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// Defines Message, the abstract interface implemented by non-lite
// protocol message objects.  Although it's possible to implement this
// interface manually, most users will use the protocol compiler to
// generate implementations.
//
// Example usage:
//
// Say you have a message defined as:
//
//   message Foo {
//     optional string text = 1;
//     repeated int32 numbers = 2;
//   }
//
// Then, if you used the protocol compiler to generate a class from the above
// definition, you could use it like so:
//
//   string data;  // Will store a serialized version of the message.
//
//   {
//     // Create a message and serialize it.
//     Foo foo;
//     foo.set_text("Hello World!");
//     foo.add_numbers(1);
//     foo.add_numbers(5);
//     foo.add_numbers(42);
//
//     foo.SerializeToString(&data);
//   }
//
//   {
//     // Parse the serialized message and check that it contains the
//     // correct data.
//     Foo foo;
//     foo.ParseFromString(data);
//
//     assert(foo.text() == "Hello World!");
//     assert(foo.numbers_size() == 3);
//     assert(foo.numbers(0) == 1);
//     assert(foo.numbers(1) == 5);
//     assert(foo.numbers(2) == 42);
//   }
//
//   {
//     // Same as the last block, but do it dynamically via the Message
//     // reflection interface.
//     Message* foo = new Foo;
//     const Descriptor* descriptor = foo->GetDescriptor();
//
//     // Get the descriptors for the fields we're interested in and verify
//     // their types.
//     const FieldDescriptor* text_field = descriptor->FindFieldByName("text");
//     assert(text_field != NULL);
//     assert(text_field->type() == FieldDescriptor::TYPE_STRING);
//     assert(text_field->label() == FieldDescriptor::LABEL_OPTIONAL);
//     const FieldDescriptor* numbers_field = descriptor->
//                                            FindFieldByName("numbers");
//     assert(numbers_field != NULL);
//     assert(numbers_field->type() == FieldDescriptor::TYPE_INT32);
//     assert(numbers_field->label() == FieldDescriptor::LABEL_REPEATED);
//
//     // Parse the message.
//     foo->ParseFromString(data);
//
//     // Use the reflection interface to examine the contents.
//     const Reflection* reflection = foo->GetReflection();
//     assert(reflection->GetString(*foo, text_field) == "Hello World!");
//     assert(reflection->FieldSize(*foo, numbers_field) == 3);
//     assert(reflection->GetRepeatedInt32(*foo, numbers_field, 0) == 1);
//     assert(reflection->GetRepeatedInt32(*foo, numbers_field, 1) == 5);
//     assert(reflection->GetRepeatedInt32(*foo, numbers_field, 2) == 42);
//
//     delete foo;
//   }

// #ifndef GOOGLE_PROTOBUF_MESSAGE_H__
// #define GOOGLE_PROTOBUF_MESSAGE_H__

// #include <iosfwd>
// #include <string>
// #include <type_traits>
// #include <vector>

// #include <google/protobuf/arena.h>
// #include <google/protobuf/message_lite.h>

// #include <google/protobuf/stubs/common.h>
// #include <google/protobuf/descriptor.h>


// #define GOOGLE_PROTOBUF_HAS_ONEOF
// #define GOOGLE_PROTOBUF_HAS_ARENAS

// Defined in this file.

// Defined in other files.
@Namespace("google::protobuf") @Opaque public static class MapKey extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MapKey() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapKey(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class MapValueRef extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MapValueRef() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapValueRef(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class MapIterator extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MapIterator() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapIterator(Pointer p) { super(p); }
}
@Namespace("google::protobuf") @Opaque public static class MapReflectionTester extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MapReflectionTester() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapReflectionTester(Pointer p) { super(p); }
}
@Namespace("google::protobuf::internal") @Opaque public static class MapFieldBase extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MapFieldBase() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapFieldBase(Pointer p) { super(p); }
}

@Namespace("google::protobuf") @Opaque public static class UnknownFieldSet extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public UnknownFieldSet() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UnknownFieldSet(Pointer p) { super(p); }
}         // unknown_field_set.h     // zero_copy_stream.h    // zero_copy_stream.h        // coded_stream.h       // coded_stream.h

@Namespace("google::protobuf::python") @Opaque public static class MapReflectionFriend extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MapReflectionFriend() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapReflectionFriend(Pointer p) { super(p); }
}     // scalar_map_container.h

@Namespace("google::protobuf::expr") @Opaque public static class CelMapReflectionFriend extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public CelMapReflectionFriend() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CelMapReflectionFriend(Pointer p) { super(p); }
}  // field_backed_map_impl.cc

@Namespace("google::protobuf::internal") @Opaque public static class ReflectionOps extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public ReflectionOps() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ReflectionOps(Pointer p) { super(p); }
}     // reflection_ops.h
@Namespace("google::protobuf::internal") @Opaque public static class MapKeySorter extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MapKeySorter() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapKeySorter(Pointer p) { super(p); }
}      // wire_format.cc
@Namespace("google::protobuf::internal") @Opaque public static class WireFormat extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public WireFormat() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public WireFormat(Pointer p) { super(p); }
}        // wire_format.h
@Namespace("google::protobuf::internal") @Opaque public static class MapFieldReflectionTest extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public MapFieldReflectionTest() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapFieldReflectionTest(Pointer p) { super(p); }
}  // map_test.cc
     // repeated_field.h  // repeated_field.h

// A container to hold message metadata.
@Namespace("google::protobuf") public static class Metadata extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public Metadata() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Metadata(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Metadata(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public Metadata position(long position) {
        return (Metadata)super.position(position);
    }

  @MemberGetter public native @Const Descriptor descriptor();
  @MemberGetter public native @Const Reflection reflection();
}

// Abstract interface for protocol messages.
//
// See also MessageLite, which contains most every-day operations.  Message
// adds descriptors and reflection on top of that.
//
// The methods of this class that are virtual but not pure-virtual have
// default implementations based on reflection.  Message classes which are
// optimized for speed will want to override these with faster implementations,
// but classes optimized for code size may be happy with keeping them.  See
// the optimize_for option in descriptor.proto.
@Namespace("google::protobuf") public static class Message extends MessageLite {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Message(Pointer p) { super(p); }


  // Basic Operations ------------------------------------------------

  // Construct a new instance of the same type.  Ownership is passed to the
  // caller.  (This is also defined in MessageLite, but is defined again here
  // for return-type covariance.)
  public native Message New();

  // Construct a new instance on the arena. Ownership is passed to the caller
  // if arena is a NULL. Default implementation allows for API compatibility
  // during the Arena transition.
  public native Message New(Arena arena);

  // Make this message into a copy of the given message.  The given message
  // must have the same descriptor, but need not necessarily be the same class.
  // By default this is just implemented as "Clear(); MergeFrom(from);".
  public native void CopyFrom(@Const @ByRef Message from);

  // Merge the fields from the given message into this message.  Singular
  // fields will be overwritten, if specified in from, except for embedded
  // messages which will be merged.  Repeated fields will be concatenated.
  // The given message must be of the same type as this message (i.e. the
  // exact same class).
  public native void MergeFrom(@Const @ByRef Message from);

  // Verifies that IsInitialized() returns true.  GOOGLE_CHECK-fails otherwise, with
  // a nice error message.
  public native void CheckInitialized();

  // Slowly build a list of all required fields that are not set.
  // This is much, much slower than IsInitialized() as it is implemented
  // purely via reflection.  Generally, you should not call this unless you
  // have already determined that an error exists by calling IsInitialized().
  public native void FindInitializationErrors(StringVector errors);

  // Like FindInitializationErrors, but joins all the strings, delimited by
  // commas, and returns them.
  public native @StdString BytePointer InitializationErrorString();

  // Clears all unknown fields from this message and all embedded messages.
  // Normally, if unknown tag numbers are encountered when parsing a message,
  // the tag and value are stored in the message's UnknownFieldSet and
  // then written back out when the message is serialized.  This allows servers
  // which simply route messages to other servers to pass through messages
  // that have new field definitions which they don't yet know about.  However,
  // this behavior can have security implications.  To avoid it, call this
  // method after parsing.
  //
  // See Reflection::GetUnknownFields() for more on unknown fields.
  public native void DiscardUnknownFields();

  // Computes (an estimate of) the total number of bytes currently used for
  // storing the message in memory.  The default implementation calls the
  // Reflection object's SpaceUsed() method.
  //
  // SpaceUsed() is noticeably slower than ByteSize(), as it is implemented
  // using reflection (rather than the generated code implementation for
  // ByteSize()). Like ByteSize(), its CPU time is linear in the number of
  // fields defined for the proto.
  public native @Cast("size_t") long SpaceUsedLong();

  public native int SpaceUsed();

  // Debugging & Testing----------------------------------------------

  // Generates a human readable form of this message, useful for debugging
  // and other purposes.
  public native @StdString BytePointer DebugString();
  // Like DebugString(), but with less whitespace.
  public native @StdString BytePointer ShortDebugString();
  // Like DebugString(), but do not escape UTF-8 byte sequences.
  public native @StdString BytePointer Utf8DebugString();
  // Convenience function useful in GDB.  Prints DebugString() to stdout.
  public native void PrintDebugString();

  // Heavy I/O -------------------------------------------------------
  // Additional parsing and serialization methods not implemented by
  // MessageLite because they are not supported by the lite library.

  // Parse a protocol buffer from a file descriptor.  If successful, the entire
  // input will be consumed.
  public native @Cast("bool") boolean ParseFromFileDescriptor(int file_descriptor);
  // Like ParseFromFileDescriptor(), but accepts messages that are missing
  // required fields.
  public native @Cast("bool") boolean ParsePartialFromFileDescriptor(int file_descriptor);
  // Parse a protocol buffer from a C++ istream.  If successful, the entire
  // input will be consumed.
  public native @Cast("bool") boolean ParseFromIstream(@Cast("std::istream*") Pointer input);
  // Like ParseFromIstream(), but accepts messages that are missing
  // required fields.
  public native @Cast("bool") boolean ParsePartialFromIstream(@Cast("std::istream*") Pointer input);

  // Serialize the message and write it to the given file descriptor.  All
  // required fields must be set.
  public native @Cast("bool") boolean SerializeToFileDescriptor(int file_descriptor);
  // Like SerializeToFileDescriptor(), but allows missing required fields.
  public native @Cast("bool") boolean SerializePartialToFileDescriptor(int file_descriptor);
  // Serialize the message and write it to the given C++ ostream.  All
  // required fields must be set.
  public native @Cast("bool") boolean SerializeToOstream(@Cast("std::ostream*") Pointer output);
  // Like SerializeToOstream(), but allows missing required fields.
  public native @Cast("bool") boolean SerializePartialToOstream(@Cast("std::ostream*") Pointer output);


  // Reflection-based methods ----------------------------------------
  // These methods are pure-virtual in MessageLite, but Message provides
  // reflection-based default implementations.

  public native @StdString BytePointer GetTypeName();
  public native void Clear();
  public native @Cast("bool") boolean IsInitialized();
  public native void CheckTypeAndMergeFrom(@Const @ByRef MessageLite other);
  public native @Cast("bool") boolean MergePartialFromCodedStream(CodedInputStream input);
  public native @Cast("size_t") long ByteSizeLong();
  public native void SerializeWithCachedSizes(CodedOutputStream output);

  // Introspection ---------------------------------------------------

  // Typedef for backwards-compatibility.

  // Get a non-owning pointer to a Descriptor for this message's type.  This
  // describes what fields the message contains, the types of those fields, etc.
  // This object remains property of the Message.
  public native @Const Descriptor GetDescriptor();

  // Get a non-owning pointer to the Reflection interface for this Message,
  // which can be used to read and modify the fields of the Message dynamically
  // (in other words, without knowing the message type at compile time).  This
  // object remains property of the Message.
  //
  // This method remains virtual in case a subclass does not implement
  // reflection and wants to override the default behavior.
  public native @Const final Reflection GetReflection();
}
// Forward-declare interfaces used to implement RepeatedFieldRef.
// These are protobuf internals that users shouldn't care about.
@Namespace("google::protobuf::internal") @Opaque public static class RepeatedFieldAccessor extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public RepeatedFieldAccessor() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RepeatedFieldAccessor(Pointer p) { super(p); }
}
  // namespace internal

// Forward-declare RepeatedFieldRef templates. The second type parameter is
// used for SFINAE tricks. Users should ignore it.

// This interface contains methods that can be used to dynamically access
// and modify the fields of a protocol message.  Their semantics are
// similar to the accessors the protocol compiler generates.
//
// To get the Reflection for a given Message, call Message::GetReflection().
//
// This interface is separate from Message only for efficiency reasons;
// the vast majority of implementations of Message will share the same
// implementation of Reflection (GeneratedMessageReflection,
// defined in generated_message.h), and all Messages of a particular class
// should share the same Reflection object (though you should not rely on
// the latter fact).
//
// There are several ways that these methods can be used incorrectly.  For
// example, any of the following conditions will lead to undefined
// results (probably assertion failures):
// - The FieldDescriptor is not a field of this message type.
// - The method called is not appropriate for the field's type.  For
//   each field type in FieldDescriptor::TYPE_*, there is only one
//   Get*() method, one Set*() method, and one Add*() method that is
//   valid for that type.  It should be obvious which (except maybe
//   for TYPE_BYTES, which are represented using strings in C++).
// - A Get*() or Set*() method for singular fields is called on a repeated
//   field.
// - GetRepeated*(), SetRepeated*(), or Add*() is called on a non-repeated
//   field.
// - The Message object passed to any method is not of the right type for
//   this Reflection object (i.e. message.GetReflection() != reflection).
//
// You might wonder why there is not any abstract representation for a field
// of arbitrary type.  E.g., why isn't there just a "GetField()" method that
// returns "const Field&", where "Field" is some class with accessors like
// "GetInt32Value()".  The problem is that someone would have to deal with
// allocating these Field objects.  For generated message classes, having to
// allocate space for an additional object to wrap every field would at least
// double the message's memory footprint, probably worse.  Allocating the
// objects on-demand, on the other hand, would be expensive and prone to
// memory leaks.  So, instead we ended up with this flat interface.
@Namespace("google::protobuf") public static class Reflection extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Reflection(Pointer p) { super(p); }


  // Get the UnknownFieldSet for the message.  This contains fields which
  // were seen when the Message was parsed but were not recognized according
  // to the Message's definition. For proto3 protos, this method will always
  // return an empty UnknownFieldSet.
  public native @Const @ByRef UnknownFieldSet GetUnknownFields(
        @Const @ByRef Message message);
  // Get a mutable pointer to the UnknownFieldSet for the message.  This
  // contains fields which were seen when the Message was parsed but were not
  // recognized according to the Message's definition. For proto3 protos, this
  // method will return a valid mutable UnknownFieldSet pointer but modifying
  // it won't affect the serialized bytes of the message.
  public native UnknownFieldSet MutableUnknownFields(Message message);

  // Estimate the amount of memory used by the message object.
  public native @Cast("size_t") long SpaceUsedLong(@Const @ByRef Message message);

  public native int SpaceUsed(@Const @ByRef Message message);

  // Check if the given non-repeated field is set.
  public native @Cast("bool") boolean HasField(@Const @ByRef Message message,
                          @Const FieldDescriptor field);

  // Get the number of elements of a repeated field.
  public native int FieldSize(@Const @ByRef Message message,
                          @Const FieldDescriptor field);

  // Clear the value of a field, so that HasField() returns false or
  // FieldSize() returns zero.
  public native void ClearField(Message message,
                            @Const FieldDescriptor field);

  // Check if the oneof is set. Returns true if any field in oneof
  // is set, false otherwise.
  // TODO(jieluo) - make it pure virtual after updating all
  // the subclasses.
  public native @Cast("bool") boolean HasOneof(@Const @ByRef Message arg0,
                          @Const OneofDescriptor arg1);

  public native void ClearOneof(Message arg0,
                            @Const OneofDescriptor arg1);

  // Returns the field descriptor if the oneof is set. NULL otherwise.
  // TODO(jieluo) - make it pure virtual.
  public native @Const FieldDescriptor GetOneofFieldDescriptor(
        @Const @ByRef Message arg0,
        @Const OneofDescriptor arg1);

  // Removes the last element of a repeated field.
  // We don't provide a way to remove any element other than the last
  // because it invites inefficient use, such as O(n^2) filtering loops
  // that should have been O(n).  If you want to remove an element other
  // than the last, the best way to do it is to re-arrange the elements
  // (using Swap()) so that the one you want removed is at the end, then
  // call RemoveLast().
  public native void RemoveLast(Message message,
                            @Const FieldDescriptor field);
  // Removes the last element of a repeated message field, and returns the
  // pointer to the caller.  Caller takes ownership of the returned pointer.
  public native Message ReleaseLast(Message message,
                                 @Const FieldDescriptor field);

  // Swap the complete contents of two messages.
  public native void Swap(Message message1, Message message2);

  // Swap fields listed in fields vector of two messages.
  public native void SwapFields(Message message1,
                            Message message2,
                            @Const @ByRef FieldDescriptorVector fields);

  // Swap two elements of a repeated field.
  public native void SwapElements(Message message,
                              @Const FieldDescriptor field,
                              int index1,
                              int index2);

  // List all fields of the message which are currently set, except for unknown
  // fields, but including extension known to the parser (i.e. compiled in).
  // Singular fields will only be listed if HasField(field) would return true
  // and repeated fields will only be listed if FieldSize(field) would return
  // non-zero.  Fields (both normal fields and extension fields) will be listed
  // ordered by field number.
  // Use Reflection::GetUnknownFields() or message.unknown_fields() to also get
  // access to fields/extensions unknown to the parser.
  public native void ListFields(
        @Const @ByRef Message message,
        FieldDescriptorVector output);

  // Singular field getters ------------------------------------------
  // These get the value of a non-repeated field.  They return the default
  // value for fields that aren't set.

  public native @Cast("google::protobuf::int32") int GetInt32(@Const @ByRef Message message,
                             @Const FieldDescriptor field);
  public native @Cast("google::protobuf::int64") long GetInt64(@Const @ByRef Message message,
                             @Const FieldDescriptor field);
  public native @Cast("google::protobuf::uint32") int GetUInt32(@Const @ByRef Message message,
                             @Const FieldDescriptor field);
  public native @Cast("google::protobuf::uint64") long GetUInt64(@Const @ByRef Message message,
                             @Const FieldDescriptor field);
  public native float GetFloat(@Const @ByRef Message message,
                             @Const FieldDescriptor field);
  public native double GetDouble(@Const @ByRef Message message,
                             @Const FieldDescriptor field);
  public native @Cast("bool") boolean GetBool(@Const @ByRef Message message,
                             @Const FieldDescriptor field);
  public native @StdString BytePointer GetString(@Const @ByRef Message message,
                             @Const FieldDescriptor field);
  public native @Const EnumValueDescriptor GetEnum(
        @Const @ByRef Message message, @Const FieldDescriptor field);

  // GetEnumValue() returns an enum field's value as an integer rather than
  // an EnumValueDescriptor*. If the integer value does not correspond to a
  // known value descriptor, a new value descriptor is created. (Such a value
  // will only be present when the new unknown-enum-value semantics are enabled
  // for a message.)
  public native int GetEnumValue(
        @Const @ByRef Message message, @Const FieldDescriptor field);

  // See MutableMessage() for the meaning of the "factory" parameter.
  public native @Const @ByRef Message GetMessage(@Const @ByRef Message message,
                                      @Const FieldDescriptor field,
                                      MessageFactory factory/*=NULL*/);
  public native @Const @ByRef Message GetMessage(@Const @ByRef Message message,
                                      @Const FieldDescriptor field);

  // Get a string value without copying, if possible.
  //
  // GetString() necessarily returns a copy of the string.  This can be
  // inefficient when the string is already stored in a string object in the
  // underlying message.  GetStringReference() will return a reference to the
  // underlying string in this case.  Otherwise, it will copy the string into
  // *scratch and return that.
  //
  // Note:  It is perfectly reasonable and useful to write code like:
  //     str = reflection->GetStringReference(field, &str);
  //   This line would ensure that only one copy of the string is made
  //   regardless of the field's underlying representation.  When initializing
  //   a newly-constructed string, though, it's just as fast and more readable
  //   to use code like:
  //     string str = reflection->GetString(message, field);
  public native @StdString BytePointer GetStringReference(@Const @ByRef Message message,
                                             @Const FieldDescriptor field,
                                             @StdString @Cast({"char*", "std::string*"}) BytePointer scratch);


  // Singular field mutators -----------------------------------------
  // These mutate the value of a non-repeated field.

  public native void SetInt32(Message message,
                           @Const FieldDescriptor field, @Cast("google::protobuf::int32") int value);
  public native void SetInt64(Message message,
                           @Const FieldDescriptor field, @Cast("google::protobuf::int64") long value);
  public native void SetUInt32(Message message,
                           @Const FieldDescriptor field, @Cast("google::protobuf::uint32") int value);
  public native void SetUInt64(Message message,
                           @Const FieldDescriptor field, @Cast("google::protobuf::uint64") long value);
  public native void SetFloat(Message message,
                           @Const FieldDescriptor field, float value);
  public native void SetDouble(Message message,
                           @Const FieldDescriptor field, double value);
  public native void SetBool(Message message,
                           @Const FieldDescriptor field, @Cast("bool") boolean value);
  public native void SetString(Message message,
                           @Const FieldDescriptor field,
                           @StdString BytePointer value);
  public native void SetString(Message message,
                           @Const FieldDescriptor field,
                           @StdString String value);
  public native void SetEnum(Message message,
                           @Const FieldDescriptor field,
                           @Const EnumValueDescriptor value);
  // Set an enum field's value with an integer rather than EnumValueDescriptor.
  // If the value does not correspond to a known enum value, either behavior is
  // undefined (for proto2 messages), or the value is accepted silently for
  // messages with new unknown-enum-value semantics.
  public native void SetEnumValue(Message message,
                              @Const FieldDescriptor field,
                              int value);

  // Get a mutable pointer to a field with a message type.  If a MessageFactory
  // is provided, it will be used to construct instances of the sub-message;
  // otherwise, the default factory is used.  If the field is an extension that
  // does not live in the same pool as the containing message's descriptor (e.g.
  // it lives in an overlay pool), then a MessageFactory must be provided.
  // If you have no idea what that meant, then you probably don't need to worry
  // about it (don't provide a MessageFactory).  WARNING:  If the
  // FieldDescriptor is for a compiled-in extension, then
  // factory->GetPrototype(field->message_type()) MUST return an instance of
  // the compiled-in class for this type, NOT DynamicMessage.
  public native Message MutableMessage(Message message,
                                    @Const FieldDescriptor field,
                                    MessageFactory factory/*=NULL*/);
  public native Message MutableMessage(Message message,
                                    @Const FieldDescriptor field);
  // Replaces the message specified by 'field' with the already-allocated object
  // sub_message, passing ownership to the message.  If the field contained a
  // message, that message is deleted.  If sub_message is NULL, the field is
  // cleared.
  public native void SetAllocatedMessage(Message message,
                                     Message sub_message,
                                     @Const FieldDescriptor field);
  // Releases the message specified by 'field' and returns the pointer,
  // ReleaseMessage() will return the message the message object if it exists.
  // Otherwise, it may or may not return NULL.  In any case, if the return value
  // is non-NULL, the caller takes ownership of the pointer.
  // If the field existed (HasField() is true), then the returned pointer will
  // be the same as the pointer returned by MutableMessage().
  // This function has the same effect as ClearField().
  public native Message ReleaseMessage(Message message,
                                    @Const FieldDescriptor field,
                                    MessageFactory factory/*=NULL*/);
  public native Message ReleaseMessage(Message message,
                                    @Const FieldDescriptor field);


  // Repeated field getters ------------------------------------------
  // These get the value of one element of a repeated field.

  public native @Cast("google::protobuf::int32") int GetRepeatedInt32(@Const @ByRef Message message,
                                     @Const FieldDescriptor field,
                                     int index);
  public native @Cast("google::protobuf::int64") long GetRepeatedInt64(@Const @ByRef Message message,
                                     @Const FieldDescriptor field,
                                     int index);
  public native @Cast("google::protobuf::uint32") int GetRepeatedUInt32(@Const @ByRef Message message,
                                     @Const FieldDescriptor field,
                                     int index);
  public native @Cast("google::protobuf::uint64") long GetRepeatedUInt64(@Const @ByRef Message message,
                                     @Const FieldDescriptor field,
                                     int index);
  public native float GetRepeatedFloat(@Const @ByRef Message message,
                                     @Const FieldDescriptor field,
                                     int index);
  public native double GetRepeatedDouble(@Const @ByRef Message message,
                                     @Const FieldDescriptor field,
                                     int index);
  public native @Cast("bool") boolean GetRepeatedBool(@Const @ByRef Message message,
                                     @Const FieldDescriptor field,
                                     int index);
  public native @StdString BytePointer GetRepeatedString(@Const @ByRef Message message,
                                     @Const FieldDescriptor field,
                                     int index);
  public native @Const EnumValueDescriptor GetRepeatedEnum(
        @Const @ByRef Message message,
        @Const FieldDescriptor field, int index);
  // GetRepeatedEnumValue() returns an enum field's value as an integer rather
  // than an EnumValueDescriptor*. If the integer value does not correspond to a
  // known value descriptor, a new value descriptor is created. (Such a value
  // will only be present when the new unknown-enum-value semantics are enabled
  // for a message.)
  public native int GetRepeatedEnumValue(
        @Const @ByRef Message message,
        @Const FieldDescriptor field, int index);
  public native @Const @ByRef Message GetRepeatedMessage(
        @Const @ByRef Message message,
        @Const FieldDescriptor field, int index);

  // See GetStringReference(), above.
  public native @StdString BytePointer GetRepeatedStringReference(
        @Const @ByRef Message message, @Const FieldDescriptor field,
        int index, @StdString @Cast({"char*", "std::string*"}) BytePointer scratch);


  // Repeated field mutators -----------------------------------------
  // These mutate the value of one element of a repeated field.

  public native void SetRepeatedInt32(Message message,
                                   @Const FieldDescriptor field,
                                   int index, @Cast("google::protobuf::int32") int value);
  public native void SetRepeatedInt64(Message message,
                                   @Const FieldDescriptor field,
                                   int index, @Cast("google::protobuf::int64") long value);
  public native void SetRepeatedUInt32(Message message,
                                   @Const FieldDescriptor field,
                                   int index, @Cast("google::protobuf::uint32") int value);
  public native void SetRepeatedUInt64(Message message,
                                   @Const FieldDescriptor field,
                                   int index, @Cast("google::protobuf::uint64") long value);
  public native void SetRepeatedFloat(Message message,
                                   @Const FieldDescriptor field,
                                   int index, float value);
  public native void SetRepeatedDouble(Message message,
                                   @Const FieldDescriptor field,
                                   int index, double value);
  public native void SetRepeatedBool(Message message,
                                   @Const FieldDescriptor field,
                                   int index, @Cast("bool") boolean value);
  public native void SetRepeatedString(Message message,
                                   @Const FieldDescriptor field,
                                   int index, @StdString BytePointer value);
  public native void SetRepeatedString(Message message,
                                   @Const FieldDescriptor field,
                                   int index, @StdString String value);
  public native void SetRepeatedEnum(Message message,
                                 @Const FieldDescriptor field, int index,
                                 @Const EnumValueDescriptor value);
  // Set an enum field's value with an integer rather than EnumValueDescriptor.
  // If the value does not correspond to a known enum value, either behavior is
  // undefined (for proto2 messages), or the value is accepted silently for
  // messages with new unknown-enum-value semantics.
  public native void SetRepeatedEnumValue(Message message,
                                      @Const FieldDescriptor field, int index,
                                      int value);
  // Get a mutable pointer to an element of a repeated field with a message
  // type.
  public native Message MutableRepeatedMessage(
        Message message, @Const FieldDescriptor field, int index);


  // Repeated field adders -------------------------------------------
  // These add an element to a repeated field.

  public native void AddInt32(Message message,
                           @Const FieldDescriptor field, @Cast("google::protobuf::int32") int value);
  public native void AddInt64(Message message,
                           @Const FieldDescriptor field, @Cast("google::protobuf::int64") long value);
  public native void AddUInt32(Message message,
                           @Const FieldDescriptor field, @Cast("google::protobuf::uint32") int value);
  public native void AddUInt64(Message message,
                           @Const FieldDescriptor field, @Cast("google::protobuf::uint64") long value);
  public native void AddFloat(Message message,
                           @Const FieldDescriptor field, float value);
  public native void AddDouble(Message message,
                           @Const FieldDescriptor field, double value);
  public native void AddBool(Message message,
                           @Const FieldDescriptor field, @Cast("bool") boolean value);
  public native void AddString(Message message,
                           @Const FieldDescriptor field,
                           @StdString BytePointer value);
  public native void AddString(Message message,
                           @Const FieldDescriptor field,
                           @StdString String value);
  public native void AddEnum(Message message,
                           @Const FieldDescriptor field,
                           @Const EnumValueDescriptor value);
  // Set an enum field's value with an integer rather than EnumValueDescriptor.
  // If the value does not correspond to a known enum value, either behavior is
  // undefined (for proto2 messages), or the value is accepted silently for
  // messages with new unknown-enum-value semantics.
  public native void AddEnumValue(Message message,
                              @Const FieldDescriptor field,
                              int value);
  // See MutableMessage() for comments on the "factory" parameter.
  public native Message AddMessage(Message message,
                                @Const FieldDescriptor field,
                                MessageFactory factory/*=NULL*/);
  public native Message AddMessage(Message message,
                                @Const FieldDescriptor field);

  // Appends an already-allocated object 'new_entry' to the repeated field
  // specifyed by 'field' passing ownership to the message.
  // TODO(tmarek): Make virtual after all subclasses have been
  // updated.
  public native void AddAllocatedMessage(Message message,
                                     @Const FieldDescriptor field,
                                     Message new_entry);


  // Get a RepeatedFieldRef object that can be used to read the underlying
  // repeated field. The type parameter T must be set according to the
  // field's cpp type. The following table shows the mapping from cpp type
  // to acceptable T.
  //
  //   field->cpp_type()      T
  //   CPPTYPE_INT32        int32
  //   CPPTYPE_UINT32       uint32
  //   CPPTYPE_INT64        int64
  //   CPPTYPE_UINT64       uint64
  //   CPPTYPE_DOUBLE       double
  //   CPPTYPE_FLOAT        float
  //   CPPTYPE_BOOL         bool
  //   CPPTYPE_ENUM         generated enum type or int32
  //   CPPTYPE_STRING       string
  //   CPPTYPE_MESSAGE      generated message type or google::protobuf::Message
  //
  // A RepeatedFieldRef object can be copied and the resulted object will point
  // to the same repeated field in the same message. The object can be used as
  // long as the message is not destroyed.
  //
  // Note that to use this method users need to include the header file
  // "google/protobuf/reflection.h" (which defines the RepeatedFieldRef
  // class templates).

  // Like GetRepeatedFieldRef() but return an object that can also be used
  // manipulate the underlying repeated field.

  // DEPRECATED. Please use Get(Mutable)RepeatedFieldRef() for repeated field
  // access. The following repeated field accesors will be removed in the
  // future.
  //
  // Repeated field accessors  -------------------------------------------------
  // The methods above, e.g. GetRepeatedInt32(msg, fd, index), provide singular
  // access to the data in a RepeatedField.  The methods below provide aggregate
  // access by exposing the RepeatedField object itself with the Message.
  // Applying these templates to inappropriate types will lead to an undefined
  // reference at link time (e.g. GetRepeatedField<***double>), or possibly a
  // template matching error at compile time (e.g. GetRepeatedPtrField<File>).
  //
  // Usage example: my_doubs = refl->GetRepeatedField<double>(msg, fd);

  // DEPRECATED. Please use GetRepeatedFieldRef().
  //
  // for T = Cord and all protobuf scalar types except enums.

  // DEPRECATED. Please use GetMutableRepeatedFieldRef().
  //
  // for T = Cord and all protobuf scalar types except enums.

  // DEPRECATED. Please use GetRepeatedFieldRef().
  //
  // for T = string, google::protobuf::internal::StringPieceField
  //         google::protobuf::Message & descendants.

  // DEPRECATED. Please use GetMutableRepeatedFieldRef().
  //
  // for T = string, google::protobuf::internal::StringPieceField
  //         google::protobuf::Message & descendants.

  // Extensions ----------------------------------------------------------------

  // Try to find an extension of this message type by fully-qualified field
  // name.  Returns NULL if no extension is known for this name or number.
  public native @Const FieldDescriptor FindKnownExtensionByName(
        @StdString BytePointer name);
  public native @Const FieldDescriptor FindKnownExtensionByName(
        @StdString String name);

  // Try to find an extension of this message type by field number.
  // Returns NULL if no extension is known for this name or number.
  public native @Const FieldDescriptor FindKnownExtensionByNumber(
        int number);

  // Feature Flags -------------------------------------------------------------

  // Does this message support storing arbitrary integer values in enum fields?
  // If |true|, GetEnumValue/SetEnumValue and associated repeated-field versions
  // take arbitrary integer values, and the legacy GetEnum() getter will
  // dynamically create an EnumValueDescriptor for any integer value without
  // one. If |false|, setting an unknown enum value via the integer-based
  // setters results in undefined behavior (in practice, GOOGLE_DCHECK-fails).
  //
  // Generic code that uses reflection to handle messages with enum fields
  // should check this flag before using the integer-based setter, and either
  // downgrade to a compatible value or use the UnknownFieldSet if not. For
  // example:
  //
  //   int new_value = GetValueFromApplicationLogic();
  //   if (reflection->SupportsUnknownEnumValues()) {
  //     reflection->SetEnumValue(message, field, new_value);
  //   } else {
  //     if (field_descriptor->enum_type()->
  //             FindValueByNumber(new_value) != NULL) {
  //       reflection->SetEnumValue(message, field, new_value);
  //     } else if (emit_unknown_enum_values) {
  //       reflection->MutableUnknownFields(message)->AddVarint(
  //           field->number(), new_value);
  //     } else {
  //       // convert value to a compatible/default value.
  //       new_value = CompatibleDowngrade(new_value);
  //       reflection->SetEnumValue(message, field, new_value);
  //     }
  //   }
  public native @Cast("bool") boolean SupportsUnknownEnumValues();

  // Returns the MessageFactory associated with this message.  This can be
  // useful for determining if a message is a generated message or not, for
  // example:
  //   if (message->GetReflection()->GetMessageFactory() ==
  //       google::protobuf::MessageFactory::generated_factory()) {
  //     // This is a generated message.
  //   }
  // It can also be used to create more messages of this type, though
  // Message::New() is an easier way to accomplish this.
  public native MessageFactory GetMessageFactory();
}

// Abstract interface for a factory for message objects.
@Namespace("google::protobuf") public static class MessageFactory extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MessageFactory(Pointer p) { super(p); }


  // Given a Descriptor, gets or constructs the default (prototype) Message
  // of that type.  You can then call that message's New() method to construct
  // a mutable message of that type.
  //
  // Calling this method twice with the same Descriptor returns the same
  // object.  The returned object remains property of the factory.  Also, any
  // objects created by calling the prototype's New() method share some data
  // with the prototype, so these must be destroyed before the MessageFactory
  // is destroyed.
  //
  // The given descriptor must outlive the returned message, and hence must
  // outlive the MessageFactory.
  //
  // Some implementations do not support all types.  GetPrototype() will
  // return NULL if the descriptor passed in is not supported.
  //
  // This method may or may not be thread-safe depending on the implementation.
  // Each implementation should document its own degree thread-safety.
  public native @Const Message GetPrototype(@Const Descriptor type);

  // Gets a MessageFactory which supports all generated, compiled-in messages.
  // In other words, for any compiled-in type FooMessage, the following is true:
  //   MessageFactory::generated_factory()->GetPrototype(
  //     FooMessage::descriptor()) == FooMessage::default_instance()
  // This factory supports all types which are found in
  // DescriptorPool::generated_pool().  If given a descriptor from any other
  // pool, GetPrototype() will return NULL.  (You can also check if a
  // descriptor is for a generated message by checking if
  // descriptor->file()->pool() == DescriptorPool::generated_pool().)
  //
  // This factory is 100% thread-safe; calling GetPrototype() does not modify
  // any shared data.
  //
  // This factory is a singleton.  The caller must not delete the object.
  public static native MessageFactory generated_factory();

  // For internal use only:  Registers a .proto file at static initialization
  // time, to be placed in generated_factory.  The first time GetPrototype()
  // is called with a descriptor from this file, |register_messages| will be
  // called, with the file name as the parameter.  It must call
  // InternalRegisterGeneratedMessage() (below) to register each message type
  // in the file.  This strange mechanism is necessary because descriptors are
  // built lazily, so we can't register types by their descriptor until we
  // know that the descriptor exists.  |filename| must be a permanent string.
  

  // For internal use only:  Registers a message type.  Called only by the
  // functions which are registered with InternalRegisterGeneratedFile(),
  // above.
  public static native void InternalRegisterGeneratedMessage(@Const Descriptor descriptor,
                                                 @Const Message prototype);
}

// #define DECLARE_GET_REPEATED_FIELD(TYPE)
// template<>
// LIBPROTOBUF_EXPORT
// const RepeatedField<TYPE>& Reflection::GetRepeatedField<TYPE>(
//     const Message& message, const FieldDescriptor* field) const;
// 
// template<>
// LIBPROTOBUF_EXPORT
// RepeatedField<TYPE>* Reflection::MutableRepeatedField<TYPE>(
//     Message* message, const FieldDescriptor* field) const;























// #undef DECLARE_GET_REPEATED_FIELD

// =============================================================================
// Implementation details for {Get,Mutable}RawRepeatedPtrField.  We provide
// specializations for <string>, <StringPieceField> and <Message> and handle
// everything else with the default template which will match any type having
// a method with signature "static const google::protobuf::Descriptor* descriptor()".
// Such a type presumably is a descendant of google::protobuf::Message.






// -----








  // namespace protobuf

  // namespace google
// #endif  // GOOGLE_PROTOBUF_MESSAGE_H__


// Parsed from caffe/common.hpp

// #ifndef CAFFE_COMMON_HPP_
// #define CAFFE_COMMON_HPP_

// #include <boost/shared_ptr.hpp>
// #include <gflags/gflags.h>
// #include <glog/logging.h>

// #include <climits>
// #include <cmath>
// #include <fstream>  // NOLINT(readability/streams)
// #include <iostream>  // NOLINT(readability/streams)
// #include <map>
// #include <set>
// #include <sstream>
// #include <string>
// #include <utility>  // pair
// #include <vector>

// #include "caffe/util/device_alternate.hpp"

// Convert macro to string
// #define STRINGIFY(m) #m
// #define AS_STRING(m) STRINGIFY(m)

// gflags 2.1 issue: namespace google was changed to gflags without warning.
// Luckily we will be able to use GFLAGS_GFLAGS_H_ to detect if it is version
// 2.1. If yes, we will add a temporary solution to redirect the namespace.
// TODO(Yangqing): Once gflags solves the problem in a more elegant way, let's
// remove the following hack.
// #ifndef GFLAGS_GFLAGS_H_
// #endif  // GFLAGS_GFLAGS_H_

// Disable the copy and assignment operator for a class.
// #define DISABLE_COPY_AND_ASSIGN(classname)
// private:
//   classname(const classname&);
//   classname& operator=(const classname&)

// Instantiate a class with float and double specifications.
// #define INSTANTIATE_CLASS(classname)
//   char gInstantiationGuard##classname;
//   template class classname<float>;
//   template class classname<double>

// #define INSTANTIATE_LAYER_GPU_FORWARD(classname)
//   template void classname<float>::Forward_gpu(
//       const std::vector<Blob<float>*>& bottom,
//       const std::vector<Blob<float>*>& top);
//   template void classname<double>::Forward_gpu(
//       const std::vector<Blob<double>*>& bottom,
//       const std::vector<Blob<double>*>& top);

// #define INSTANTIATE_LAYER_GPU_BACKWARD(classname)
//   template void classname<float>::Backward_gpu(
//       const std::vector<Blob<float>*>& top,
//       const std::vector<bool>& propagate_down,
//       const std::vector<Blob<float>*>& bottom);
//   template void classname<double>::Backward_gpu(
//       const std::vector<Blob<double>*>& top,
//       const std::vector<bool>& propagate_down,
//       const std::vector<Blob<double>*>& bottom)

// #define INSTANTIATE_LAYER_GPU_FUNCS(classname)
//   INSTANTIATE_LAYER_GPU_FORWARD(classname);
//   INSTANTIATE_LAYER_GPU_BACKWARD(classname)

// A simple macro to mark codes that are not implemented, so that when the code
// is executed we will see a fatal log.
// #define NOT_IMPLEMENTED LOG(FATAL) << "Not Implemented Yet"

// See PR #1236 

// We will use the boost shared_ptr instead of the new C++11 one mainly
// because cuda does not work (at least now) well with C++11 features.

// Common functions and classes from std that caffe often uses.

// A global initialization function that you should call in your main function.
// Currently it initializes google flags and google logging.
@Namespace("caffe") public static native void GlobalInit(IntPointer pargc, @Cast("char***") @ByPtrPtr PointerPointer pargv);
@Namespace("caffe") public static native void GlobalInit(IntBuffer pargc, @Cast("char***") @ByPtrPtr PointerPointer pargv);
@Namespace("caffe") public static native void GlobalInit(int[] pargc, @Cast("char***") @ByPtrPtr PointerPointer pargv);

// A singleton class to hold common caffe stuff, such as the handler that
// caffe is going to use for cublas, curand, etc.
@Namespace("caffe") @NoOffset public static class Caffe extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Caffe(Pointer p) { super(p); }


  // Thread local context for Caffe. Moved to common.cpp instead of
  // including boost/thread.hpp to avoid a boost/NVCC issues (#1009, #1010)
  // on OSX. Also fails on Linux with CUDA 7.0.18.
  public static native @ByRef Caffe Get();

  /** enum caffe::Caffe::Brew */
  public static final int CPU = 0, GPU = 1;

  // This random number generator facade hides boost and CUDA rng
  // implementation from one another (for cross-platform compatibility).
  @NoOffset public static class RNG extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public RNG(Pointer p) { super(p); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public RNG(long size) { super((Pointer)null); allocateArray(size); }
      private native void allocateArray(long size);
      @Override public RNG position(long position) {
          return (RNG)super.position(position);
      }
  
    public RNG() { super((Pointer)null); allocate(); }
    private native void allocate();
    public RNG(@Cast("unsigned int") int seed) { super((Pointer)null); allocate(seed); }
    private native void allocate(@Cast("unsigned int") int seed);
    public RNG(@Const @ByRef RNG arg0) { super((Pointer)null); allocate(arg0); }
    private native void allocate(@Const @ByRef RNG arg0);
    public native @ByRef @Name("operator =") RNG put(@Const @ByRef RNG arg0);
    public native Pointer generator();
  }

  // Getters for boost rng, curand, and cublas handles
  public static native @ByRef RNG rng_stream();
// #ifndef CPU_ONLY
// #endif

  // Returns the mode: running on CPU or GPU.
  public static native @Cast("caffe::Caffe::Brew") int mode();
  // The setters for the variables
  // Sets the mode. It is recommended that you don't change the mode halfway
  // into the program since that may cause allocation of pinned memory being
  // freed in a non-pinned way, which may cause problems - I haven't verified
  // it personally but better to note it here in the header file.
  public static native void set_mode(@Cast("caffe::Caffe::Brew") int mode);
  // Sets the random seed of both boost and curand
  public static native void set_random_seed(@Cast("const unsigned int") int seed);
  // Sets the device. Since we have cublas and curand stuff, set device also
  // requires us to reset those values.
  public static native void SetDevice(int device_id);
  // Prints the current GPU status.
  public static native void DeviceQuery();
  // Check if specified device is available
  public static native @Cast("bool") boolean CheckDevice(int device_id);
  // Search from start_id to the highest possible device ordinal,
  // return the ordinal of the first available device.
  public static native int FindDevice(int start_id/*=0*/);
  public static native int FindDevice();
  // Parallel training
  public static native int solver_count();
  public static native void set_solver_count(int val);
  public static native int solver_rank();
  public static native void set_solver_rank(int val);
  public static native @Cast("bool") boolean multiprocess();
  public static native void set_multiprocess(@Cast("bool") boolean val);
  public static native @Cast("bool") boolean root_solver();
}

  // namespace caffe

// #endif  // CAFFE_COMMON_HPP_


// Parsed from google/protobuf/generated_message_table_driven.h

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// #ifndef GOOGLE_PROTOBUF_GENERATED_MESSAGE_TABLE_DRIVEN_H__
// #define GOOGLE_PROTOBUF_GENERATED_MESSAGE_TABLE_DRIVEN_H__

// #include <google/protobuf/map.h>
// #include <google/protobuf/map_entry_lite.h>
// #include <google/protobuf/map_field_lite.h>
// #include <google/protobuf/message_lite.h>
// #include <google/protobuf/wire_format_lite.h>
// #include <google/protobuf/wire_format_lite_inl.h>

// We require C++11 and Clang to use constexpr for variables, as GCC 4.8
// requires constexpr to be consistent between declarations of variables
// unnecessarily (see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58541).
// VS 2017 Update 3 also supports this usage of constexpr.
// #if defined(__clang__) || (defined(_MSC_VER) && _MSC_VER >= 1911)
// #define PROTOBUF_CONSTEXPR_VAR constexpr
// #else  // !__clang__
// #define PROTOBUF_CONSTEXPR_VAR
// #endif  // !_clang

// Processing-type masks.
@Namespace("google::protobuf::internal") @MemberGetter public static native @Cast("const unsigned char") byte kOneofMask();
public static final byte kOneofMask = kOneofMask();
@Namespace("google::protobuf::internal") @MemberGetter public static native @Cast("const unsigned char") byte kRepeatedMask();
public static final byte kRepeatedMask = kRepeatedMask();
// Mask for the raw type: either a WireFormatLite::FieldType or one of the
// ProcessingTypes below, without the oneof or repeated flag.
@Namespace("google::protobuf::internal") @MemberGetter public static native @Cast("const unsigned char") byte kTypeMask();
public static final byte kTypeMask = kTypeMask();

// Wire type masks.
@Namespace("google::protobuf::internal") @MemberGetter public static native @Cast("const unsigned char") byte kNotPackedMask();
public static final byte kNotPackedMask = kNotPackedMask();
@Namespace("google::protobuf::internal") @MemberGetter public static native @Cast("const unsigned char") byte kInvalidMask();
public static final byte kInvalidMask = kInvalidMask();

/** enum google::protobuf::internal::ProcessingTypes */
public static final int
  TYPE_STRING_INLINED = 23,
  TYPE_BYTES_INLINED = 24,
  TYPE_MAP = 25;

// TODO(ckennelly):  Add a static assertion to ensure that these masks do not
// conflict with wiretypes.

// ParseTableField is kept small to help simplify instructions for computing
// offsets, as we will always need this information to parse a field.
// Additional data, needed for some types, is stored in
// AuxillaryParseTableField.
@Namespace("google::protobuf::internal") public static class ParseTableField extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ParseTableField() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ParseTableField(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ParseTableField(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ParseTableField position(long position) {
        return (ParseTableField)super.position(position);
    }

  public native @Cast("google::protobuf::uint32") int offset(); public native ParseTableField offset(int offset);
  // The presence_index ordinarily represents a has_bit index, but for fields
  // inside a oneof it represents the index in _oneof_case_.
  public native @Cast("google::protobuf::uint32") int presence_index(); public native ParseTableField presence_index(int presence_index);
  public native @Cast("unsigned char") byte normal_wiretype(); public native ParseTableField normal_wiretype(byte normal_wiretype);
  public native @Cast("unsigned char") byte packed_wiretype(); public native ParseTableField packed_wiretype(byte packed_wiretype);

  // processing_type is given by:
  //   (FieldDescriptor->type() << 1) | FieldDescriptor->is_packed()
  public native @Cast("unsigned char") byte processing_type(); public native ParseTableField processing_type(byte processing_type);

  public native @Cast("unsigned char") byte tag_size(); public native ParseTableField tag_size(byte tag_size);
}

@Namespace("google::protobuf::internal") @NoOffset public static class AuxillaryParseTableField extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AuxillaryParseTableField(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AuxillaryParseTableField(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public AuxillaryParseTableField position(long position) {
        return (AuxillaryParseTableField)super.position(position);
    }

  public static class EnumValidator extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    EnumValidator(Pointer p) { super(p); }
      protected EnumValidator() { allocate(); }
      private native void allocate();
      public native @Cast("bool") boolean call(int arg0);
  }

  // Enums
  public static class enum_aux extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public enum_aux() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public enum_aux(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public enum_aux(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public enum_aux position(long position) {
          return (enum_aux)super.position(position);
      }
  
    public native EnumValidator validator(); public native enum_aux validator(EnumValidator validator);
  }
  public native @ByRef enum_aux enums(); public native AuxillaryParseTableField enums(enum_aux enums);
  // Group, messages
  public static class message_aux extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public message_aux() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public message_aux(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public message_aux(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public message_aux position(long position) {
          return (message_aux)super.position(position);
      }
  
    // ExplicitlyInitialized<T> -> T requires a reinterpret_cast, which prevents
    // the tables from being constructed as a constexpr.  We use void to avoid
    // the cast.
    @MemberGetter public native @Const Pointer default_message_void();
    public native @Const MessageLite default_message();
  }
  public native @ByRef message_aux messages(); public native AuxillaryParseTableField messages(message_aux messages);
  // Strings
  public static class string_aux extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public string_aux() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public string_aux(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public string_aux(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public string_aux position(long position) {
          return (string_aux)super.position(position);
      }
  
    @MemberGetter public native @Const Pointer default_ptr();
    @MemberGetter public native @Cast("const char*") BytePointer field_name();
  }
  public native @ByRef string_aux strings(); public native AuxillaryParseTableField strings(string_aux strings);

  public static class map_aux extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public map_aux() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public map_aux(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public map_aux(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public map_aux position(long position) {
          return (map_aux)super.position(position);
      }
  
    public static class Parse_map_CodedInputStream_Pointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Parse_map_CodedInputStream_Pointer(Pointer p) { super(p); }
        protected Parse_map_CodedInputStream_Pointer() { allocate(); }
        private native void allocate();
        public native @Cast("bool") boolean call(CodedInputStream arg0, Pointer arg1);
    }
    public native Parse_map_CodedInputStream_Pointer parse_map(); public native map_aux parse_map(Parse_map_CodedInputStream_Pointer parse_map);
  }
  public native @ByRef map_aux maps(); public native AuxillaryParseTableField maps(map_aux maps);

  public AuxillaryParseTableField() { super((Pointer)null); allocate(); }
  private native void allocate();
  public AuxillaryParseTableField(@ByVal enum_aux e) { super((Pointer)null); allocate(e); }
  private native void allocate(@ByVal enum_aux e);
  public AuxillaryParseTableField(@ByVal message_aux m) { super((Pointer)null); allocate(m); }
  private native void allocate(@ByVal message_aux m);
  public AuxillaryParseTableField(@ByVal string_aux s) { super((Pointer)null); allocate(s); }
  private native void allocate(@ByVal string_aux s);
  public AuxillaryParseTableField(@ByVal map_aux m) { super((Pointer)null); allocate(m); }
  private native void allocate(@ByVal map_aux m);
}

@Namespace("google::protobuf::internal") public static class ParseTable extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ParseTable() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ParseTable(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ParseTable(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ParseTable position(long position) {
        return (ParseTable)super.position(position);
    }

  @MemberGetter public native @Const ParseTableField fields();
  @MemberGetter public native @Const AuxillaryParseTableField aux();
  public native int max_field_number(); public native ParseTable max_field_number(int max_field_number);
  // TODO(ckennelly): Do something with this padding.

  // TODO(ckennelly): Vet these for sign extension.
  public native @Cast("google::protobuf::int64") long has_bits_offset(); public native ParseTable has_bits_offset(long has_bits_offset);
  public native @Cast("google::protobuf::int64") long oneof_case_offset(); public native ParseTable oneof_case_offset(long oneof_case_offset);
  public native @Cast("google::protobuf::int64") long extension_offset(); public native ParseTable extension_offset(long extension_offset);
  public native @Cast("google::protobuf::int64") long arena_offset(); public native ParseTable arena_offset(long arena_offset);

  // ExplicitlyInitialized<T> -> T requires a reinterpret_cast, which prevents
  // the tables from being constructed as a constexpr.  We use void to avoid
  // the cast.
  @MemberGetter public native @Const Pointer default_instance_void();
  public native @Const MessageLite default_instance();

  public native @Cast("bool") boolean unknown_field_set(); public native ParseTable unknown_field_set(boolean unknown_field_set);
}
// The tables must be composed of POD components to ensure link-time
// initialization.

// #ifndef __NVCC__  // This assertion currently fails under NVCC.
// #endif

// TODO(ckennelly): Consolidate these implementations into a single one, using
// dynamic dispatch to the appropriate unknown field handler.
@Namespace("google::protobuf::internal") public static native @Cast("bool") boolean MergePartialFromCodedStream(MessageLite msg, @Const @ByRef ParseTable table,
                                 CodedInputStream input);
@Namespace("google::protobuf::internal") public static native @Cast("bool") boolean MergePartialFromCodedStreamLite(MessageLite msg, @Const @ByRef ParseTable table,
                                 CodedInputStream input);

  // namespace internal
  // namespace protobuf

  // namespace google
// #endif  // GOOGLE_PROTOBUF_GENERATED_MESSAGE_TABLE_DRIVEN_H__


// Parsed from caffe/proto/caffe.pb.h

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

// #ifndef PROTOBUF_INCLUDED_caffe_2eproto
// #define PROTOBUF_INCLUDED_caffe_2eproto

// #include <string>

// #include <google/protobuf/stubs/common.h>

// #if GOOGLE_PROTOBUF_VERSION < 3006001
// #error This file was generated by a newer version of protoc which is
// #error incompatible with your Protocol Buffer headers.  Please update
// #error your headers.
// #endif
// #if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
// #error This file was generated by an older version of protoc which is
// #error incompatible with your Protocol Buffer headers.  Please
// #error regenerate this file with a newer version of protoc.
// #endif

// #include <google/protobuf/io/coded_stream.h>
// #include <google/protobuf/arena.h>
// #include <google/protobuf/arenastring.h>
// #include <google/protobuf/generated_message_table_driven.h>
// #include <google/protobuf/generated_message_util.h>
// #include <google/protobuf/inlined_string_field.h>
// #include <google/protobuf/metadata.h>
// #include <google/protobuf/message.h>
// #include <google/protobuf/repeated_field.h>  // IWYU pragma: export
// #include <google/protobuf/extension_set.h>  // IWYU pragma: export
// #include <google/protobuf/generated_enum_reflection.h>
// #include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
// #define PROTOBUF_INTERNAL_EXPORT_protobuf_caffe_2eproto
// Internal implementation detail -- do not use these members.
@Namespace("protobuf_caffe_2eproto") public static native void AddDescriptors();
  // namespace protobuf_caffe_2eproto
  // namespace caffe





























































  // namespace protobuf
  // namespace google

/** enum caffe::FillerParameter_VarianceNorm */
public static final int
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2;
@Namespace("caffe") public static native @Cast("bool") boolean FillerParameter_VarianceNorm_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::FillerParameter_VarianceNorm") int FillerParameter_VarianceNorm_VarianceNorm_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::FillerParameter_VarianceNorm") int FillerParameter_VarianceNorm_VarianceNorm_MAX();
@Namespace("caffe") @MemberGetter public static native int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor FillerParameter_VarianceNorm_descriptor();
@Namespace("caffe") public static native @StdString BytePointer FillerParameter_VarianceNorm_Name(@Cast("caffe::FillerParameter_VarianceNorm") int value);
@Namespace("caffe") public static native @Cast("bool") boolean FillerParameter_VarianceNorm_Parse(
    @StdString BytePointer name, @Cast("caffe::FillerParameter_VarianceNorm*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean FillerParameter_VarianceNorm_Parse(
    @StdString String name, @Cast("caffe::FillerParameter_VarianceNorm*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean FillerParameter_VarianceNorm_Parse(
    @StdString BytePointer name, @Cast("caffe::FillerParameter_VarianceNorm*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean FillerParameter_VarianceNorm_Parse(
    @StdString String name, @Cast("caffe::FillerParameter_VarianceNorm*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean FillerParameter_VarianceNorm_Parse(
    @StdString BytePointer name, @Cast("caffe::FillerParameter_VarianceNorm*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean FillerParameter_VarianceNorm_Parse(
    @StdString String name, @Cast("caffe::FillerParameter_VarianceNorm*") int[] value);
/** enum caffe::SolverParameter_SnapshotFormat */
public static final int
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1;
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SnapshotFormat_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SolverParameter_SnapshotFormat") int SolverParameter_SnapshotFormat_SnapshotFormat_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SolverParameter_SnapshotFormat") int SolverParameter_SnapshotFormat_SnapshotFormat_MAX();
@Namespace("caffe") @MemberGetter public static native int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor SolverParameter_SnapshotFormat_descriptor();
@Namespace("caffe") public static native @StdString BytePointer SolverParameter_SnapshotFormat_Name(@Cast("caffe::SolverParameter_SnapshotFormat") int value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SnapshotFormat_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SnapshotFormat*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SnapshotFormat_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SnapshotFormat*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SnapshotFormat_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SnapshotFormat*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SnapshotFormat_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SnapshotFormat*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SnapshotFormat_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SnapshotFormat*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SnapshotFormat_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SnapshotFormat*") int[] value);
/** enum caffe::SolverParameter_SolverMode */
public static final int
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1;
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverMode_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SolverParameter_SolverMode") int SolverParameter_SolverMode_SolverMode_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SolverParameter_SolverMode") int SolverParameter_SolverMode_SolverMode_MAX();
@Namespace("caffe") @MemberGetter public static native int SolverParameter_SolverMode_SolverMode_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor SolverParameter_SolverMode_descriptor();
@Namespace("caffe") public static native @StdString BytePointer SolverParameter_SolverMode_Name(@Cast("caffe::SolverParameter_SolverMode") int value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverMode_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SolverMode*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverMode_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SolverMode*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverMode_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SolverMode*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverMode_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SolverMode*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverMode_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SolverMode*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverMode_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SolverMode*") int[] value);
/** enum caffe::SolverParameter_SolverType */
public static final int
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5;
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverType_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SolverParameter_SolverType") int SolverParameter_SolverType_SolverType_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SolverParameter_SolverType") int SolverParameter_SolverType_SolverType_MAX();
@Namespace("caffe") @MemberGetter public static native int SolverParameter_SolverType_SolverType_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor SolverParameter_SolverType_descriptor();
@Namespace("caffe") public static native @StdString BytePointer SolverParameter_SolverType_Name(@Cast("caffe::SolverParameter_SolverType") int value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverType_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SolverType*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverType_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SolverType*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverType_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SolverType*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverType_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SolverType*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverType_Parse(
    @StdString BytePointer name, @Cast("caffe::SolverParameter_SolverType*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SolverParameter_SolverType_Parse(
    @StdString String name, @Cast("caffe::SolverParameter_SolverType*") int[] value);
/** enum caffe::ParamSpec_DimCheckMode */
public static final int
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1;
@Namespace("caffe") public static native @Cast("bool") boolean ParamSpec_DimCheckMode_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::ParamSpec_DimCheckMode") int ParamSpec_DimCheckMode_DimCheckMode_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::ParamSpec_DimCheckMode") int ParamSpec_DimCheckMode_DimCheckMode_MAX();
@Namespace("caffe") @MemberGetter public static native int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor ParamSpec_DimCheckMode_descriptor();
@Namespace("caffe") public static native @StdString BytePointer ParamSpec_DimCheckMode_Name(@Cast("caffe::ParamSpec_DimCheckMode") int value);
@Namespace("caffe") public static native @Cast("bool") boolean ParamSpec_DimCheckMode_Parse(
    @StdString BytePointer name, @Cast("caffe::ParamSpec_DimCheckMode*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean ParamSpec_DimCheckMode_Parse(
    @StdString String name, @Cast("caffe::ParamSpec_DimCheckMode*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean ParamSpec_DimCheckMode_Parse(
    @StdString BytePointer name, @Cast("caffe::ParamSpec_DimCheckMode*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean ParamSpec_DimCheckMode_Parse(
    @StdString String name, @Cast("caffe::ParamSpec_DimCheckMode*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean ParamSpec_DimCheckMode_Parse(
    @StdString BytePointer name, @Cast("caffe::ParamSpec_DimCheckMode*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean ParamSpec_DimCheckMode_Parse(
    @StdString String name, @Cast("caffe::ParamSpec_DimCheckMode*") int[] value);
/** enum caffe::LossParameter_NormalizationMode */
public static final int
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3;
@Namespace("caffe") public static native @Cast("bool") boolean LossParameter_NormalizationMode_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::LossParameter_NormalizationMode") int LossParameter_NormalizationMode_NormalizationMode_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::LossParameter_NormalizationMode") int LossParameter_NormalizationMode_NormalizationMode_MAX();
@Namespace("caffe") @MemberGetter public static native int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor LossParameter_NormalizationMode_descriptor();
@Namespace("caffe") public static native @StdString BytePointer LossParameter_NormalizationMode_Name(@Cast("caffe::LossParameter_NormalizationMode") int value);
@Namespace("caffe") public static native @Cast("bool") boolean LossParameter_NormalizationMode_Parse(
    @StdString BytePointer name, @Cast("caffe::LossParameter_NormalizationMode*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean LossParameter_NormalizationMode_Parse(
    @StdString String name, @Cast("caffe::LossParameter_NormalizationMode*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean LossParameter_NormalizationMode_Parse(
    @StdString BytePointer name, @Cast("caffe::LossParameter_NormalizationMode*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean LossParameter_NormalizationMode_Parse(
    @StdString String name, @Cast("caffe::LossParameter_NormalizationMode*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean LossParameter_NormalizationMode_Parse(
    @StdString BytePointer name, @Cast("caffe::LossParameter_NormalizationMode*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean LossParameter_NormalizationMode_Parse(
    @StdString String name, @Cast("caffe::LossParameter_NormalizationMode*") int[] value);
/** enum caffe::ConvolutionParameter_Engine */
public static final int
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2;
@Namespace("caffe") public static native @Cast("bool") boolean ConvolutionParameter_Engine_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::ConvolutionParameter_Engine") int ConvolutionParameter_Engine_Engine_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::ConvolutionParameter_Engine") int ConvolutionParameter_Engine_Engine_MAX();
@Namespace("caffe") @MemberGetter public static native int ConvolutionParameter_Engine_Engine_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor ConvolutionParameter_Engine_descriptor();
@Namespace("caffe") public static native @StdString BytePointer ConvolutionParameter_Engine_Name(@Cast("caffe::ConvolutionParameter_Engine") int value);
@Namespace("caffe") public static native @Cast("bool") boolean ConvolutionParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::ConvolutionParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean ConvolutionParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::ConvolutionParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean ConvolutionParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::ConvolutionParameter_Engine*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean ConvolutionParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::ConvolutionParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean ConvolutionParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::ConvolutionParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean ConvolutionParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::ConvolutionParameter_Engine*") int[] value);
/** enum caffe::DataParameter_DB */
public static final int
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1;
@Namespace("caffe") public static native @Cast("bool") boolean DataParameter_DB_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::DataParameter_DB") int DataParameter_DB_DB_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::DataParameter_DB") int DataParameter_DB_DB_MAX();
@Namespace("caffe") @MemberGetter public static native int DataParameter_DB_DB_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor DataParameter_DB_descriptor();
@Namespace("caffe") public static native @StdString BytePointer DataParameter_DB_Name(@Cast("caffe::DataParameter_DB") int value);
@Namespace("caffe") public static native @Cast("bool") boolean DataParameter_DB_Parse(
    @StdString BytePointer name, @Cast("caffe::DataParameter_DB*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean DataParameter_DB_Parse(
    @StdString String name, @Cast("caffe::DataParameter_DB*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean DataParameter_DB_Parse(
    @StdString BytePointer name, @Cast("caffe::DataParameter_DB*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean DataParameter_DB_Parse(
    @StdString String name, @Cast("caffe::DataParameter_DB*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean DataParameter_DB_Parse(
    @StdString BytePointer name, @Cast("caffe::DataParameter_DB*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean DataParameter_DB_Parse(
    @StdString String name, @Cast("caffe::DataParameter_DB*") int[] value);
/** enum caffe::EltwiseParameter_EltwiseOp */
public static final int
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2;
@Namespace("caffe") public static native @Cast("bool") boolean EltwiseParameter_EltwiseOp_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::EltwiseParameter_EltwiseOp") int EltwiseParameter_EltwiseOp_EltwiseOp_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::EltwiseParameter_EltwiseOp") int EltwiseParameter_EltwiseOp_EltwiseOp_MAX();
@Namespace("caffe") @MemberGetter public static native int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor EltwiseParameter_EltwiseOp_descriptor();
@Namespace("caffe") public static native @StdString BytePointer EltwiseParameter_EltwiseOp_Name(@Cast("caffe::EltwiseParameter_EltwiseOp") int value);
@Namespace("caffe") public static native @Cast("bool") boolean EltwiseParameter_EltwiseOp_Parse(
    @StdString BytePointer name, @Cast("caffe::EltwiseParameter_EltwiseOp*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean EltwiseParameter_EltwiseOp_Parse(
    @StdString String name, @Cast("caffe::EltwiseParameter_EltwiseOp*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean EltwiseParameter_EltwiseOp_Parse(
    @StdString BytePointer name, @Cast("caffe::EltwiseParameter_EltwiseOp*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean EltwiseParameter_EltwiseOp_Parse(
    @StdString String name, @Cast("caffe::EltwiseParameter_EltwiseOp*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean EltwiseParameter_EltwiseOp_Parse(
    @StdString BytePointer name, @Cast("caffe::EltwiseParameter_EltwiseOp*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean EltwiseParameter_EltwiseOp_Parse(
    @StdString String name, @Cast("caffe::EltwiseParameter_EltwiseOp*") int[] value);
/** enum caffe::HingeLossParameter_Norm */
public static final int
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2;
@Namespace("caffe") public static native @Cast("bool") boolean HingeLossParameter_Norm_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::HingeLossParameter_Norm") int HingeLossParameter_Norm_Norm_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::HingeLossParameter_Norm") int HingeLossParameter_Norm_Norm_MAX();
@Namespace("caffe") @MemberGetter public static native int HingeLossParameter_Norm_Norm_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor HingeLossParameter_Norm_descriptor();
@Namespace("caffe") public static native @StdString BytePointer HingeLossParameter_Norm_Name(@Cast("caffe::HingeLossParameter_Norm") int value);
@Namespace("caffe") public static native @Cast("bool") boolean HingeLossParameter_Norm_Parse(
    @StdString BytePointer name, @Cast("caffe::HingeLossParameter_Norm*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean HingeLossParameter_Norm_Parse(
    @StdString String name, @Cast("caffe::HingeLossParameter_Norm*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean HingeLossParameter_Norm_Parse(
    @StdString BytePointer name, @Cast("caffe::HingeLossParameter_Norm*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean HingeLossParameter_Norm_Parse(
    @StdString String name, @Cast("caffe::HingeLossParameter_Norm*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean HingeLossParameter_Norm_Parse(
    @StdString BytePointer name, @Cast("caffe::HingeLossParameter_Norm*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean HingeLossParameter_Norm_Parse(
    @StdString String name, @Cast("caffe::HingeLossParameter_Norm*") int[] value);
/** enum caffe::LRNParameter_NormRegion */
public static final int
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1;
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_NormRegion_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::LRNParameter_NormRegion") int LRNParameter_NormRegion_NormRegion_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::LRNParameter_NormRegion") int LRNParameter_NormRegion_NormRegion_MAX();
@Namespace("caffe") @MemberGetter public static native int LRNParameter_NormRegion_NormRegion_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor LRNParameter_NormRegion_descriptor();
@Namespace("caffe") public static native @StdString BytePointer LRNParameter_NormRegion_Name(@Cast("caffe::LRNParameter_NormRegion") int value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_NormRegion_Parse(
    @StdString BytePointer name, @Cast("caffe::LRNParameter_NormRegion*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_NormRegion_Parse(
    @StdString String name, @Cast("caffe::LRNParameter_NormRegion*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_NormRegion_Parse(
    @StdString BytePointer name, @Cast("caffe::LRNParameter_NormRegion*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_NormRegion_Parse(
    @StdString String name, @Cast("caffe::LRNParameter_NormRegion*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_NormRegion_Parse(
    @StdString BytePointer name, @Cast("caffe::LRNParameter_NormRegion*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_NormRegion_Parse(
    @StdString String name, @Cast("caffe::LRNParameter_NormRegion*") int[] value);
/** enum caffe::LRNParameter_Engine */
public static final int
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2;
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_Engine_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::LRNParameter_Engine") int LRNParameter_Engine_Engine_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::LRNParameter_Engine") int LRNParameter_Engine_Engine_MAX();
@Namespace("caffe") @MemberGetter public static native int LRNParameter_Engine_Engine_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor LRNParameter_Engine_descriptor();
@Namespace("caffe") public static native @StdString BytePointer LRNParameter_Engine_Name(@Cast("caffe::LRNParameter_Engine") int value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::LRNParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::LRNParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::LRNParameter_Engine*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::LRNParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::LRNParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean LRNParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::LRNParameter_Engine*") int[] value);
/** enum caffe::PoolingParameter_PoolMethod */
public static final int
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2;
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_PoolMethod_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::PoolingParameter_PoolMethod") int PoolingParameter_PoolMethod_PoolMethod_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::PoolingParameter_PoolMethod") int PoolingParameter_PoolMethod_PoolMethod_MAX();
@Namespace("caffe") @MemberGetter public static native int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor PoolingParameter_PoolMethod_descriptor();
@Namespace("caffe") public static native @StdString BytePointer PoolingParameter_PoolMethod_Name(@Cast("caffe::PoolingParameter_PoolMethod") int value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::PoolingParameter_PoolMethod*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::PoolingParameter_PoolMethod*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::PoolingParameter_PoolMethod*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::PoolingParameter_PoolMethod*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::PoolingParameter_PoolMethod*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::PoolingParameter_PoolMethod*") int[] value);
/** enum caffe::PoolingParameter_Engine */
public static final int
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2;
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_Engine_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::PoolingParameter_Engine") int PoolingParameter_Engine_Engine_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::PoolingParameter_Engine") int PoolingParameter_Engine_Engine_MAX();
@Namespace("caffe") @MemberGetter public static native int PoolingParameter_Engine_Engine_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor PoolingParameter_Engine_descriptor();
@Namespace("caffe") public static native @StdString BytePointer PoolingParameter_Engine_Name(@Cast("caffe::PoolingParameter_Engine") int value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::PoolingParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::PoolingParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::PoolingParameter_Engine*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::PoolingParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::PoolingParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean PoolingParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::PoolingParameter_Engine*") int[] value);
/** enum caffe::ReductionParameter_ReductionOp */
public static final int
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4;
@Namespace("caffe") public static native @Cast("bool") boolean ReductionParameter_ReductionOp_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::ReductionParameter_ReductionOp") int ReductionParameter_ReductionOp_ReductionOp_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::ReductionParameter_ReductionOp") int ReductionParameter_ReductionOp_ReductionOp_MAX();
@Namespace("caffe") @MemberGetter public static native int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor ReductionParameter_ReductionOp_descriptor();
@Namespace("caffe") public static native @StdString BytePointer ReductionParameter_ReductionOp_Name(@Cast("caffe::ReductionParameter_ReductionOp") int value);
@Namespace("caffe") public static native @Cast("bool") boolean ReductionParameter_ReductionOp_Parse(
    @StdString BytePointer name, @Cast("caffe::ReductionParameter_ReductionOp*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean ReductionParameter_ReductionOp_Parse(
    @StdString String name, @Cast("caffe::ReductionParameter_ReductionOp*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean ReductionParameter_ReductionOp_Parse(
    @StdString BytePointer name, @Cast("caffe::ReductionParameter_ReductionOp*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean ReductionParameter_ReductionOp_Parse(
    @StdString String name, @Cast("caffe::ReductionParameter_ReductionOp*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean ReductionParameter_ReductionOp_Parse(
    @StdString BytePointer name, @Cast("caffe::ReductionParameter_ReductionOp*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean ReductionParameter_ReductionOp_Parse(
    @StdString String name, @Cast("caffe::ReductionParameter_ReductionOp*") int[] value);
/** enum caffe::ReLUParameter_Engine */
public static final int
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2;
@Namespace("caffe") public static native @Cast("bool") boolean ReLUParameter_Engine_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::ReLUParameter_Engine") int ReLUParameter_Engine_Engine_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::ReLUParameter_Engine") int ReLUParameter_Engine_Engine_MAX();
@Namespace("caffe") @MemberGetter public static native int ReLUParameter_Engine_Engine_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor ReLUParameter_Engine_descriptor();
@Namespace("caffe") public static native @StdString BytePointer ReLUParameter_Engine_Name(@Cast("caffe::ReLUParameter_Engine") int value);
@Namespace("caffe") public static native @Cast("bool") boolean ReLUParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::ReLUParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean ReLUParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::ReLUParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean ReLUParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::ReLUParameter_Engine*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean ReLUParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::ReLUParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean ReLUParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::ReLUParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean ReLUParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::ReLUParameter_Engine*") int[] value);
/** enum caffe::SigmoidParameter_Engine */
public static final int
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2;
@Namespace("caffe") public static native @Cast("bool") boolean SigmoidParameter_Engine_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SigmoidParameter_Engine") int SigmoidParameter_Engine_Engine_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SigmoidParameter_Engine") int SigmoidParameter_Engine_Engine_MAX();
@Namespace("caffe") @MemberGetter public static native int SigmoidParameter_Engine_Engine_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor SigmoidParameter_Engine_descriptor();
@Namespace("caffe") public static native @StdString BytePointer SigmoidParameter_Engine_Name(@Cast("caffe::SigmoidParameter_Engine") int value);
@Namespace("caffe") public static native @Cast("bool") boolean SigmoidParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SigmoidParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SigmoidParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SigmoidParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SigmoidParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SigmoidParameter_Engine*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean SigmoidParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SigmoidParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SigmoidParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SigmoidParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SigmoidParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SigmoidParameter_Engine*") int[] value);
/** enum caffe::SoftmaxParameter_Engine */
public static final int
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2;
@Namespace("caffe") public static native @Cast("bool") boolean SoftmaxParameter_Engine_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SoftmaxParameter_Engine") int SoftmaxParameter_Engine_Engine_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SoftmaxParameter_Engine") int SoftmaxParameter_Engine_Engine_MAX();
@Namespace("caffe") @MemberGetter public static native int SoftmaxParameter_Engine_Engine_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor SoftmaxParameter_Engine_descriptor();
@Namespace("caffe") public static native @StdString BytePointer SoftmaxParameter_Engine_Name(@Cast("caffe::SoftmaxParameter_Engine") int value);
@Namespace("caffe") public static native @Cast("bool") boolean SoftmaxParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SoftmaxParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SoftmaxParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SoftmaxParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SoftmaxParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SoftmaxParameter_Engine*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean SoftmaxParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SoftmaxParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SoftmaxParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SoftmaxParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SoftmaxParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SoftmaxParameter_Engine*") int[] value);
/** enum caffe::TanHParameter_Engine */
public static final int
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2;
@Namespace("caffe") public static native @Cast("bool") boolean TanHParameter_Engine_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::TanHParameter_Engine") int TanHParameter_Engine_Engine_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::TanHParameter_Engine") int TanHParameter_Engine_Engine_MAX();
@Namespace("caffe") @MemberGetter public static native int TanHParameter_Engine_Engine_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor TanHParameter_Engine_descriptor();
@Namespace("caffe") public static native @StdString BytePointer TanHParameter_Engine_Name(@Cast("caffe::TanHParameter_Engine") int value);
@Namespace("caffe") public static native @Cast("bool") boolean TanHParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::TanHParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean TanHParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::TanHParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean TanHParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::TanHParameter_Engine*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean TanHParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::TanHParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean TanHParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::TanHParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean TanHParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::TanHParameter_Engine*") int[] value);
/** enum caffe::SPPParameter_PoolMethod */
public static final int
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2;
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_PoolMethod_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SPPParameter_PoolMethod") int SPPParameter_PoolMethod_PoolMethod_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SPPParameter_PoolMethod") int SPPParameter_PoolMethod_PoolMethod_MAX();
@Namespace("caffe") @MemberGetter public static native int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor SPPParameter_PoolMethod_descriptor();
@Namespace("caffe") public static native @StdString BytePointer SPPParameter_PoolMethod_Name(@Cast("caffe::SPPParameter_PoolMethod") int value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::SPPParameter_PoolMethod*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::SPPParameter_PoolMethod*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::SPPParameter_PoolMethod*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::SPPParameter_PoolMethod*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::SPPParameter_PoolMethod*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::SPPParameter_PoolMethod*") int[] value);
/** enum caffe::SPPParameter_Engine */
public static final int
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2;
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_Engine_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SPPParameter_Engine") int SPPParameter_Engine_Engine_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::SPPParameter_Engine") int SPPParameter_Engine_Engine_MAX();
@Namespace("caffe") @MemberGetter public static native int SPPParameter_Engine_Engine_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor SPPParameter_Engine_descriptor();
@Namespace("caffe") public static native @StdString BytePointer SPPParameter_Engine_Name(@Cast("caffe::SPPParameter_Engine") int value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SPPParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SPPParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SPPParameter_Engine*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SPPParameter_Engine*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_Engine_Parse(
    @StdString BytePointer name, @Cast("caffe::SPPParameter_Engine*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean SPPParameter_Engine_Parse(
    @StdString String name, @Cast("caffe::SPPParameter_Engine*") int[] value);
/** enum caffe::V1LayerParameter_LayerType */
public static final int
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31;
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_LayerType_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::V1LayerParameter_LayerType") int V1LayerParameter_LayerType_LayerType_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::V1LayerParameter_LayerType") int V1LayerParameter_LayerType_LayerType_MAX();
@Namespace("caffe") @MemberGetter public static native int V1LayerParameter_LayerType_LayerType_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor V1LayerParameter_LayerType_descriptor();
@Namespace("caffe") public static native @StdString BytePointer V1LayerParameter_LayerType_Name(@Cast("caffe::V1LayerParameter_LayerType") int value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_LayerType_Parse(
    @StdString BytePointer name, @Cast("caffe::V1LayerParameter_LayerType*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_LayerType_Parse(
    @StdString String name, @Cast("caffe::V1LayerParameter_LayerType*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_LayerType_Parse(
    @StdString BytePointer name, @Cast("caffe::V1LayerParameter_LayerType*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_LayerType_Parse(
    @StdString String name, @Cast("caffe::V1LayerParameter_LayerType*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_LayerType_Parse(
    @StdString BytePointer name, @Cast("caffe::V1LayerParameter_LayerType*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_LayerType_Parse(
    @StdString String name, @Cast("caffe::V1LayerParameter_LayerType*") int[] value);
/** enum caffe::V1LayerParameter_DimCheckMode */
public static final int
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1;
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_DimCheckMode_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::V1LayerParameter_DimCheckMode") int V1LayerParameter_DimCheckMode_DimCheckMode_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::V1LayerParameter_DimCheckMode") int V1LayerParameter_DimCheckMode_DimCheckMode_MAX();
@Namespace("caffe") @MemberGetter public static native int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor V1LayerParameter_DimCheckMode_descriptor();
@Namespace("caffe") public static native @StdString BytePointer V1LayerParameter_DimCheckMode_Name(@Cast("caffe::V1LayerParameter_DimCheckMode") int value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_DimCheckMode_Parse(
    @StdString BytePointer name, @Cast("caffe::V1LayerParameter_DimCheckMode*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_DimCheckMode_Parse(
    @StdString String name, @Cast("caffe::V1LayerParameter_DimCheckMode*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_DimCheckMode_Parse(
    @StdString BytePointer name, @Cast("caffe::V1LayerParameter_DimCheckMode*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_DimCheckMode_Parse(
    @StdString String name, @Cast("caffe::V1LayerParameter_DimCheckMode*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_DimCheckMode_Parse(
    @StdString BytePointer name, @Cast("caffe::V1LayerParameter_DimCheckMode*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean V1LayerParameter_DimCheckMode_Parse(
    @StdString String name, @Cast("caffe::V1LayerParameter_DimCheckMode*") int[] value);
/** enum caffe::V0LayerParameter_PoolMethod */
public static final int
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2;
@Namespace("caffe") public static native @Cast("bool") boolean V0LayerParameter_PoolMethod_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::V0LayerParameter_PoolMethod") int V0LayerParameter_PoolMethod_PoolMethod_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::V0LayerParameter_PoolMethod") int V0LayerParameter_PoolMethod_PoolMethod_MAX();
@Namespace("caffe") @MemberGetter public static native int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor V0LayerParameter_PoolMethod_descriptor();
@Namespace("caffe") public static native @StdString BytePointer V0LayerParameter_PoolMethod_Name(@Cast("caffe::V0LayerParameter_PoolMethod") int value);
@Namespace("caffe") public static native @Cast("bool") boolean V0LayerParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::V0LayerParameter_PoolMethod*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean V0LayerParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::V0LayerParameter_PoolMethod*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean V0LayerParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::V0LayerParameter_PoolMethod*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean V0LayerParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::V0LayerParameter_PoolMethod*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean V0LayerParameter_PoolMethod_Parse(
    @StdString BytePointer name, @Cast("caffe::V0LayerParameter_PoolMethod*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean V0LayerParameter_PoolMethod_Parse(
    @StdString String name, @Cast("caffe::V0LayerParameter_PoolMethod*") int[] value);
/** enum caffe::Phase */
public static final int
  TRAIN = 0,
  TEST = 1;
@Namespace("caffe") public static native @Cast("bool") boolean Phase_IsValid(int value);
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::Phase") int Phase_MIN();
@Namespace("caffe") @MemberGetter public static native @Cast("const caffe::Phase") int Phase_MAX();
@Namespace("caffe") @MemberGetter public static native int Phase_ARRAYSIZE();

@Namespace("caffe") public static native @Const EnumDescriptor Phase_descriptor();
@Namespace("caffe") public static native @StdString BytePointer Phase_Name(@Cast("caffe::Phase") int value);
@Namespace("caffe") public static native @Cast("bool") boolean Phase_Parse(
    @StdString BytePointer name, @Cast("caffe::Phase*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean Phase_Parse(
    @StdString String name, @Cast("caffe::Phase*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean Phase_Parse(
    @StdString BytePointer name, @Cast("caffe::Phase*") int[] value);
@Namespace("caffe") public static native @Cast("bool") boolean Phase_Parse(
    @StdString String name, @Cast("caffe::Phase*") IntPointer value);
@Namespace("caffe") public static native @Cast("bool") boolean Phase_Parse(
    @StdString BytePointer name, @Cast("caffe::Phase*") IntBuffer value);
@Namespace("caffe") public static native @Cast("bool") boolean Phase_Parse(
    @StdString String name, @Cast("caffe::Phase*") int[] value);
// ===================================================================

@Namespace("caffe") @NoOffset public static class BlobShape extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BlobShape(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BlobShape(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public BlobShape position(long position) {
        return (BlobShape)super.position(position);
    }

  public BlobShape() { super((Pointer)null); allocate(); }
  private native void allocate();

  public BlobShape(@Const @ByRef BlobShape from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef BlobShape from);

  public native @ByRef @Name("operator =") BlobShape put(@Const @ByRef BlobShape from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef BlobShape default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const BlobShape internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(BlobShape other);
  

  // implements Message ----------------------------------------------

  public native final BlobShape New();

  public native final BlobShape New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef BlobShape from);
  public native void MergeFrom(@Const @ByRef BlobShape from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  public native int dim_size();
  public native void clear_dim();
  @MemberGetter public static native int kDimFieldNumber();
  public static final int kDimFieldNumber = kDimFieldNumber();
  public native @Cast("google::protobuf::int64") long dim(int index);
  public native void set_dim(int index, @Cast("google::protobuf::int64") long value);
  public native void add_dim(@Cast("google::protobuf::int64") long value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class BlobProto extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BlobProto(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BlobProto(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public BlobProto position(long position) {
        return (BlobProto)super.position(position);
    }

  public BlobProto() { super((Pointer)null); allocate(); }
  private native void allocate();

  public BlobProto(@Const @ByRef BlobProto from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef BlobProto from);

  public native @ByRef @Name("operator =") BlobProto put(@Const @ByRef BlobProto from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef BlobProto default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const BlobProto internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(BlobProto other);
  

  // implements Message ----------------------------------------------

  public native final BlobProto New();

  public native final BlobProto New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef BlobProto from);
  public native void MergeFrom(@Const @ByRef BlobProto from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float data = 5 [packed = true];
  public native int data_size();
  public native void clear_data();
  @MemberGetter public static native int kDataFieldNumber();
  public static final int kDataFieldNumber = kDataFieldNumber();
  public native float data(int index);
  public native void set_data(int index, float value);
  public native void add_data(float value);

  // repeated float diff = 6 [packed = true];
  public native int diff_size();
  public native void clear_diff();
  @MemberGetter public static native int kDiffFieldNumber();
  public static final int kDiffFieldNumber = kDiffFieldNumber();
  public native float diff(int index);
  public native void set_diff(int index, float value);
  public native void add_diff(float value);

  // repeated double double_data = 8 [packed = true];
  public native int double_data_size();
  public native void clear_double_data();
  @MemberGetter public static native int kDoubleDataFieldNumber();
  public static final int kDoubleDataFieldNumber = kDoubleDataFieldNumber();
  public native double double_data(int index);
  public native void set_double_data(int index, double value);
  public native void add_double_data(double value);

  // repeated double double_diff = 9 [packed = true];
  public native int double_diff_size();
  public native void clear_double_diff();
  @MemberGetter public static native int kDoubleDiffFieldNumber();
  public static final int kDoubleDiffFieldNumber = kDoubleDiffFieldNumber();
  public native double double_diff(int index);
  public native void set_double_diff(int index, double value);
  public native void add_double_diff(double value);

  // optional .caffe.BlobShape shape = 7;
  public native @Cast("bool") boolean has_shape();
  public native void clear_shape();
  @MemberGetter public static native int kShapeFieldNumber();
  public static final int kShapeFieldNumber = kShapeFieldNumber();
  public native @Const @ByRef BlobShape shape();
  public native BlobShape release_shape();
  public native BlobShape mutable_shape();
  public native void set_allocated_shape(BlobShape shape);

  // optional int32 num = 1 [default = 0];
  public native @Cast("bool") boolean has_num();
  public native void clear_num();
  @MemberGetter public static native int kNumFieldNumber();
  public static final int kNumFieldNumber = kNumFieldNumber();
  public native @Cast("google::protobuf::int32") int num();
  public native void set_num(@Cast("google::protobuf::int32") int value);

  // optional int32 channels = 2 [default = 0];
  public native @Cast("bool") boolean has_channels();
  public native void clear_channels();
  @MemberGetter public static native int kChannelsFieldNumber();
  public static final int kChannelsFieldNumber = kChannelsFieldNumber();
  public native @Cast("google::protobuf::int32") int channels();
  public native void set_channels(@Cast("google::protobuf::int32") int value);

  // optional int32 height = 3 [default = 0];
  public native @Cast("bool") boolean has_height();
  public native void clear_height();
  @MemberGetter public static native int kHeightFieldNumber();
  public static final int kHeightFieldNumber = kHeightFieldNumber();
  public native @Cast("google::protobuf::int32") int height();
  public native void set_height(@Cast("google::protobuf::int32") int value);

  // optional int32 width = 4 [default = 0];
  public native @Cast("bool") boolean has_width();
  public native void clear_width();
  @MemberGetter public static native int kWidthFieldNumber();
  public static final int kWidthFieldNumber = kWidthFieldNumber();
  public native @Cast("google::protobuf::int32") int width();
  public native void set_width(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class BlobProtoVector extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BlobProtoVector(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BlobProtoVector(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public BlobProtoVector position(long position) {
        return (BlobProtoVector)super.position(position);
    }

  public BlobProtoVector() { super((Pointer)null); allocate(); }
  private native void allocate();

  public BlobProtoVector(@Const @ByRef BlobProtoVector from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef BlobProtoVector from);

  public native @ByRef @Name("operator =") BlobProtoVector put(@Const @ByRef BlobProtoVector from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef BlobProtoVector default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const BlobProtoVector internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(BlobProtoVector other);
  

  // implements Message ----------------------------------------------

  public native final BlobProtoVector New();

  public native final BlobProtoVector New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef BlobProtoVector from);
  public native void MergeFrom(@Const @ByRef BlobProtoVector from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  public native int blobs_size();
  public native void clear_blobs();
  @MemberGetter public static native int kBlobsFieldNumber();
  public static final int kBlobsFieldNumber = kBlobsFieldNumber();
  public native BlobProto mutable_blobs(int index);
  public native @Const @ByRef BlobProto blobs(int index);
  public native BlobProto add_blobs();
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class Datum extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Datum(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Datum(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Datum position(long position) {
        return (Datum)super.position(position);
    }

  public Datum() { super((Pointer)null); allocate(); }
  private native void allocate();

  public Datum(@Const @ByRef Datum from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef Datum from);

  public native @ByRef @Name("operator =") Datum put(@Const @ByRef Datum from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef Datum default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const Datum internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(Datum other);
  

  // implements Message ----------------------------------------------

  public native final Datum New();

  public native final Datum New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef Datum from);
  public native void MergeFrom(@Const @ByRef Datum from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_data = 6;
  public native int float_data_size();
  public native void clear_float_data();
  @MemberGetter public static native int kFloatDataFieldNumber();
  public static final int kFloatDataFieldNumber = kFloatDataFieldNumber();
  public native float float_data(int index);
  public native void set_float_data(int index, float value);
  public native void add_float_data(float value);

  // optional bytes data = 4;
  public native @Cast("bool") boolean has_data();
  public native void clear_data();
  @MemberGetter public static native int kDataFieldNumber();
  public static final int kDataFieldNumber = kDataFieldNumber();
  public native @StdString BytePointer data();
  public native void set_data(@StdString BytePointer value);
  public native void set_data(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_data(@Const Pointer value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_data();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_data();
  public native void set_allocated_data(@StdString @Cast({"char*", "std::string*"}) BytePointer data);

  // optional int32 channels = 1;
  public native @Cast("bool") boolean has_channels();
  public native void clear_channels();
  @MemberGetter public static native int kChannelsFieldNumber();
  public static final int kChannelsFieldNumber = kChannelsFieldNumber();
  public native @Cast("google::protobuf::int32") int channels();
  public native void set_channels(@Cast("google::protobuf::int32") int value);

  // optional int32 height = 2;
  public native @Cast("bool") boolean has_height();
  public native void clear_height();
  @MemberGetter public static native int kHeightFieldNumber();
  public static final int kHeightFieldNumber = kHeightFieldNumber();
  public native @Cast("google::protobuf::int32") int height();
  public native void set_height(@Cast("google::protobuf::int32") int value);

  // optional int32 width = 3;
  public native @Cast("bool") boolean has_width();
  public native void clear_width();
  @MemberGetter public static native int kWidthFieldNumber();
  public static final int kWidthFieldNumber = kWidthFieldNumber();
  public native @Cast("google::protobuf::int32") int width();
  public native void set_width(@Cast("google::protobuf::int32") int value);

  // optional int32 label = 5;
  public native @Cast("bool") boolean has_label();
  public native void clear_label();
  @MemberGetter public static native int kLabelFieldNumber();
  public static final int kLabelFieldNumber = kLabelFieldNumber();
  public native @Cast("google::protobuf::int32") int label();
  public native void set_label(@Cast("google::protobuf::int32") int value);

  // optional bool encoded = 7 [default = false];
  public native @Cast("bool") boolean has_encoded();
  public native void clear_encoded();
  @MemberGetter public static native int kEncodedFieldNumber();
  public static final int kEncodedFieldNumber = kEncodedFieldNumber();
  public native @Cast("bool") boolean encoded();
  public native void set_encoded(@Cast("bool") boolean value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class FillerParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FillerParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FillerParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public FillerParameter position(long position) {
        return (FillerParameter)super.position(position);
    }

  public FillerParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public FillerParameter(@Const @ByRef FillerParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef FillerParameter from);

  public native @ByRef @Name("operator =") FillerParameter put(@Const @ByRef FillerParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef FillerParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const FillerParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(FillerParameter other);
  

  // implements Message ----------------------------------------------

  public native final FillerParameter New();

  public native final FillerParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef FillerParameter from);
  public native void MergeFrom(@Const @ByRef FillerParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::FillerParameter::VarianceNorm") int FAN_IN();
  public static final int FAN_IN = FAN_IN();
  @MemberGetter public static native @Cast("const caffe::FillerParameter::VarianceNorm") int FAN_OUT();
  public static final int FAN_OUT = FAN_OUT();
  @MemberGetter public static native @Cast("const caffe::FillerParameter::VarianceNorm") int AVERAGE();
  public static final int AVERAGE = AVERAGE();
  public static native @Cast("bool") boolean VarianceNorm_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::FillerParameter::VarianceNorm") int VarianceNorm_MIN();
  public static final int VarianceNorm_MIN = VarianceNorm_MIN();
  @MemberGetter public static native @Cast("const caffe::FillerParameter::VarianceNorm") int VarianceNorm_MAX();
  public static final int VarianceNorm_MAX = VarianceNorm_MAX();
  @MemberGetter public static native int VarianceNorm_ARRAYSIZE();
  public static final int VarianceNorm_ARRAYSIZE = VarianceNorm_ARRAYSIZE();
  public static native @Const EnumDescriptor VarianceNorm_descriptor();
  public static native @StdString BytePointer VarianceNorm_Name(@Cast("caffe::FillerParameter::VarianceNorm") int value);
  public static native @Cast("bool") boolean VarianceNorm_Parse(@StdString BytePointer name,
        @Cast("caffe::FillerParameter::VarianceNorm*") IntPointer value);
  public static native @Cast("bool") boolean VarianceNorm_Parse(@StdString String name,
        @Cast("caffe::FillerParameter::VarianceNorm*") IntBuffer value);
  public static native @Cast("bool") boolean VarianceNorm_Parse(@StdString BytePointer name,
        @Cast("caffe::FillerParameter::VarianceNorm*") int[] value);
  public static native @Cast("bool") boolean VarianceNorm_Parse(@StdString String name,
        @Cast("caffe::FillerParameter::VarianceNorm*") IntPointer value);
  public static native @Cast("bool") boolean VarianceNorm_Parse(@StdString BytePointer name,
        @Cast("caffe::FillerParameter::VarianceNorm*") IntBuffer value);
  public static native @Cast("bool") boolean VarianceNorm_Parse(@StdString String name,
        @Cast("caffe::FillerParameter::VarianceNorm*") int[] value);

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  public native @Cast("bool") boolean has_type();
  public native void clear_type();
  @MemberGetter public static native int kTypeFieldNumber();
  public static final int kTypeFieldNumber = kTypeFieldNumber();
  public native @StdString BytePointer type();
  public native void set_type(@StdString BytePointer value);
  public native void set_type(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_type(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_type(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_type();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_type();
  public native void set_allocated_type(@StdString @Cast({"char*", "std::string*"}) BytePointer type);

  // optional float value = 2 [default = 0];
  public native @Cast("bool") boolean has_value();
  public native void clear_value();
  @MemberGetter public static native int kValueFieldNumber();
  public static final int kValueFieldNumber = kValueFieldNumber();
  public native float value();
  public native void set_value(float value);

  // optional float min = 3 [default = 0];
  public native @Cast("bool") boolean has_min();
  public native void clear_min();
  @MemberGetter public static native int kMinFieldNumber();
  public static final int kMinFieldNumber = kMinFieldNumber();
  public native float min();
  public native void set_min(float value);

  // optional float mean = 5 [default = 0];
  public native @Cast("bool") boolean has_mean();
  public native void clear_mean();
  @MemberGetter public static native int kMeanFieldNumber();
  public static final int kMeanFieldNumber = kMeanFieldNumber();
  public native float mean();
  public native void set_mean(float value);

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  public native @Cast("bool") boolean has_variance_norm();
  public native void clear_variance_norm();
  @MemberGetter public static native int kVarianceNormFieldNumber();
  public static final int kVarianceNormFieldNumber = kVarianceNormFieldNumber();
  public native @Cast("caffe::FillerParameter_VarianceNorm") int variance_norm();
  public native void set_variance_norm(@Cast("caffe::FillerParameter_VarianceNorm") int value);

  // optional int32 sparse = 7 [default = -1];
  public native @Cast("bool") boolean has_sparse();
  public native void clear_sparse();
  @MemberGetter public static native int kSparseFieldNumber();
  public static final int kSparseFieldNumber = kSparseFieldNumber();
  public native @Cast("google::protobuf::int32") int sparse();
  public native void set_sparse(@Cast("google::protobuf::int32") int value);

  // optional float max = 4 [default = 1];
  public native @Cast("bool") boolean has_max();
  public native void clear_max();
  @MemberGetter public static native int kMaxFieldNumber();
  public static final int kMaxFieldNumber = kMaxFieldNumber();
  public native float max();
  public native void set_max(float value);

  // optional float std = 6 [default = 1];
  public native @Cast("bool") boolean has_std();
  public native void clear_std();
  @MemberGetter public static native int kStdFieldNumber();
  public static final int kStdFieldNumber = kStdFieldNumber();
  public native float std();
  public native void set_std(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class NetParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NetParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NetParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public NetParameter position(long position) {
        return (NetParameter)super.position(position);
    }

  public NetParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public NetParameter(@Const @ByRef NetParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef NetParameter from);

  public native @ByRef @Name("operator =") NetParameter put(@Const @ByRef NetParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef NetParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const NetParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(NetParameter other);
  

  // implements Message ----------------------------------------------

  public native final NetParameter New();

  public native final NetParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef NetParameter from);
  public native void MergeFrom(@Const @ByRef NetParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.V1LayerParameter layers = 2;
  public native int layers_size();
  public native void clear_layers();
  @MemberGetter public static native int kLayersFieldNumber();
  public static final int kLayersFieldNumber = kLayersFieldNumber();
  public native V1LayerParameter mutable_layers(int index);
  public native @Const @ByRef V1LayerParameter layers(int index);
  public native V1LayerParameter add_layers();

  // repeated string input = 3;
  public native int input_size();
  public native void clear_input();
  @MemberGetter public static native int kInputFieldNumber();
  public static final int kInputFieldNumber = kInputFieldNumber();
  public native @StdString BytePointer input(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_input(int index);
  public native void set_input(int index, @StdString BytePointer value);
  public native void set_input(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_input(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_input(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_input();
  public native void add_input(@StdString BytePointer value);
  public native void add_input(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_input(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_input(String value, @Cast("size_t") long size);

  // repeated int32 input_dim = 4;
  public native int input_dim_size();
  public native void clear_input_dim();
  @MemberGetter public static native int kInputDimFieldNumber();
  public static final int kInputDimFieldNumber = kInputDimFieldNumber();
  public native @Cast("google::protobuf::int32") int input_dim(int index);
  public native void set_input_dim(int index, @Cast("google::protobuf::int32") int value);
  public native void add_input_dim(@Cast("google::protobuf::int32") int value);

  // repeated .caffe.BlobShape input_shape = 8;
  public native int input_shape_size();
  public native void clear_input_shape();
  @MemberGetter public static native int kInputShapeFieldNumber();
  public static final int kInputShapeFieldNumber = kInputShapeFieldNumber();
  public native BlobShape mutable_input_shape(int index);
  public native @Const @ByRef BlobShape input_shape(int index);
  public native BlobShape add_input_shape();

  // repeated .caffe.LayerParameter layer = 100;
  public native int layer_size();
  public native void clear_layer();
  @MemberGetter public static native int kLayerFieldNumber();
  public static final int kLayerFieldNumber = kLayerFieldNumber();
  public native LayerParameter mutable_layer(int index);
  public native @Const @ByRef LayerParameter layer(int index);
  public native LayerParameter add_layer();

  // optional string name = 1;
  public native @Cast("bool") boolean has_name();
  public native void clear_name();
  @MemberGetter public static native int kNameFieldNumber();
  public static final int kNameFieldNumber = kNameFieldNumber();
  public native @StdString BytePointer name();
  public native void set_name(@StdString BytePointer value);
  public native void set_name(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_name(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_name(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_name();
  public native void set_allocated_name(@StdString @Cast({"char*", "std::string*"}) BytePointer name);

  // optional .caffe.NetState state = 6;
  public native @Cast("bool") boolean has_state();
  public native void clear_state();
  @MemberGetter public static native int kStateFieldNumber();
  public static final int kStateFieldNumber = kStateFieldNumber();
  public native @Const @ByRef NetState state();
  public native NetState release_state();
  public native NetState mutable_state();
  public native void set_allocated_state(NetState state);

  // optional bool force_backward = 5 [default = false];
  public native @Cast("bool") boolean has_force_backward();
  public native void clear_force_backward();
  @MemberGetter public static native int kForceBackwardFieldNumber();
  public static final int kForceBackwardFieldNumber = kForceBackwardFieldNumber();
  public native @Cast("bool") boolean force_backward();
  public native void set_force_backward(@Cast("bool") boolean value);

  // optional bool debug_info = 7 [default = false];
  public native @Cast("bool") boolean has_debug_info();
  public native void clear_debug_info();
  @MemberGetter public static native int kDebugInfoFieldNumber();
  public static final int kDebugInfoFieldNumber = kDebugInfoFieldNumber();
  public native @Cast("bool") boolean debug_info();
  public native void set_debug_info(@Cast("bool") boolean value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class SolverParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SolverParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SolverParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SolverParameter position(long position) {
        return (SolverParameter)super.position(position);
    }

  public SolverParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public SolverParameter(@Const @ByRef SolverParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef SolverParameter from);

  public native @ByRef @Name("operator =") SolverParameter put(@Const @ByRef SolverParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef SolverParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const SolverParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(SolverParameter other);
  

  // implements Message ----------------------------------------------

  public native final SolverParameter New();

  public native final SolverParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef SolverParameter from);
  public native void MergeFrom(@Const @ByRef SolverParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SnapshotFormat") int HDF5();
  public static final int HDF5 = HDF5();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SnapshotFormat") int BINARYPROTO();
  public static final int BINARYPROTO = BINARYPROTO();
  public static native @Cast("bool") boolean SnapshotFormat_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SnapshotFormat") int SnapshotFormat_MIN();
  public static final int SnapshotFormat_MIN = SnapshotFormat_MIN();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SnapshotFormat") int SnapshotFormat_MAX();
  public static final int SnapshotFormat_MAX = SnapshotFormat_MAX();
  @MemberGetter public static native int SnapshotFormat_ARRAYSIZE();
  public static final int SnapshotFormat_ARRAYSIZE = SnapshotFormat_ARRAYSIZE();
  public static native @Const EnumDescriptor SnapshotFormat_descriptor();
  public static native @StdString BytePointer SnapshotFormat_Name(@Cast("caffe::SolverParameter::SnapshotFormat") int value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") IntPointer value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") IntBuffer value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") int[] value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") IntPointer value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") IntBuffer value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") int[] value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverMode") int CPU();
  public static final int CPU = CPU();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverMode") int GPU();
  public static final int GPU = GPU();
  public static native @Cast("bool") boolean SolverMode_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverMode") int SolverMode_MIN();
  public static final int SolverMode_MIN = SolverMode_MIN();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverMode") int SolverMode_MAX();
  public static final int SolverMode_MAX = SolverMode_MAX();
  @MemberGetter public static native int SolverMode_ARRAYSIZE();
  public static final int SolverMode_ARRAYSIZE = SolverMode_ARRAYSIZE();
  public static native @Const EnumDescriptor SolverMode_descriptor();
  public static native @StdString BytePointer SolverMode_Name(@Cast("caffe::SolverParameter::SolverMode") int value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverMode*") IntPointer value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverMode*") IntBuffer value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverMode*") int[] value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverMode*") IntPointer value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverMode*") IntBuffer value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverMode*") int[] value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int SGD();
  public static final int SGD = SGD();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int NESTEROV();
  public static final int NESTEROV = NESTEROV();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int ADAGRAD();
  public static final int ADAGRAD = ADAGRAD();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int RMSPROP();
  public static final int RMSPROP = RMSPROP();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int ADADELTA();
  public static final int ADADELTA = ADADELTA();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int ADAM();
  public static final int ADAM = ADAM();
  public static native @Cast("bool") boolean SolverType_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int SolverType_MIN();
  public static final int SolverType_MIN = SolverType_MIN();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int SolverType_MAX();
  public static final int SolverType_MAX = SolverType_MAX();
  @MemberGetter public static native int SolverType_ARRAYSIZE();
  public static final int SolverType_ARRAYSIZE = SolverType_ARRAYSIZE();
  public static native @Const EnumDescriptor SolverType_descriptor();
  public static native @StdString BytePointer SolverType_Name(@Cast("caffe::SolverParameter::SolverType") int value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverType*") IntPointer value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverType*") IntBuffer value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverType*") int[] value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverType*") IntPointer value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverType*") IntBuffer value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverType*") int[] value);

  // accessors -------------------------------------------------------

  // repeated string test_net = 2;
  public native int test_net_size();
  public native void clear_test_net();
  @MemberGetter public static native int kTestNetFieldNumber();
  public static final int kTestNetFieldNumber = kTestNetFieldNumber();
  public native @StdString BytePointer test_net(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_test_net(int index);
  public native void set_test_net(int index, @StdString BytePointer value);
  public native void set_test_net(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_test_net(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_test_net(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_test_net();
  public native void add_test_net(@StdString BytePointer value);
  public native void add_test_net(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_test_net(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_test_net(String value, @Cast("size_t") long size);

  // repeated int32 test_iter = 3;
  public native int test_iter_size();
  public native void clear_test_iter();
  @MemberGetter public static native int kTestIterFieldNumber();
  public static final int kTestIterFieldNumber = kTestIterFieldNumber();
  public native @Cast("google::protobuf::int32") int test_iter(int index);
  public native void set_test_iter(int index, @Cast("google::protobuf::int32") int value);
  public native void add_test_iter(@Cast("google::protobuf::int32") int value);

  // repeated .caffe.NetParameter test_net_param = 22;
  public native int test_net_param_size();
  public native void clear_test_net_param();
  @MemberGetter public static native int kTestNetParamFieldNumber();
  public static final int kTestNetParamFieldNumber = kTestNetParamFieldNumber();
  public native NetParameter mutable_test_net_param(int index);
  public native @Const @ByRef NetParameter test_net_param(int index);
  public native NetParameter add_test_net_param();

  // repeated .caffe.NetState test_state = 27;
  public native int test_state_size();
  public native void clear_test_state();
  @MemberGetter public static native int kTestStateFieldNumber();
  public static final int kTestStateFieldNumber = kTestStateFieldNumber();
  public native NetState mutable_test_state(int index);
  public native @Const @ByRef NetState test_state(int index);
  public native NetState add_test_state();

  // repeated int32 stepvalue = 34;
  public native int stepvalue_size();
  public native void clear_stepvalue();
  @MemberGetter public static native int kStepvalueFieldNumber();
  public static final int kStepvalueFieldNumber = kStepvalueFieldNumber();
  public native @Cast("google::protobuf::int32") int stepvalue(int index);
  public native void set_stepvalue(int index, @Cast("google::protobuf::int32") int value);
  public native void add_stepvalue(@Cast("google::protobuf::int32") int value);

  // optional string train_net = 1;
  public native @Cast("bool") boolean has_train_net();
  public native void clear_train_net();
  @MemberGetter public static native int kTrainNetFieldNumber();
  public static final int kTrainNetFieldNumber = kTrainNetFieldNumber();
  public native @StdString BytePointer train_net();
  public native void set_train_net(@StdString BytePointer value);
  public native void set_train_net(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_train_net(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_train_net(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_train_net();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_train_net();
  public native void set_allocated_train_net(@StdString @Cast({"char*", "std::string*"}) BytePointer train_net);

  // optional string lr_policy = 8;
  public native @Cast("bool") boolean has_lr_policy();
  public native void clear_lr_policy();
  @MemberGetter public static native int kLrPolicyFieldNumber();
  public static final int kLrPolicyFieldNumber = kLrPolicyFieldNumber();
  public native @StdString BytePointer lr_policy();
  public native void set_lr_policy(@StdString BytePointer value);
  public native void set_lr_policy(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_lr_policy(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_lr_policy(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_lr_policy();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_lr_policy();
  public native void set_allocated_lr_policy(@StdString @Cast({"char*", "std::string*"}) BytePointer lr_policy);

  // optional string snapshot_prefix = 15;
  public native @Cast("bool") boolean has_snapshot_prefix();
  public native void clear_snapshot_prefix();
  @MemberGetter public static native int kSnapshotPrefixFieldNumber();
  public static final int kSnapshotPrefixFieldNumber = kSnapshotPrefixFieldNumber();
  public native @StdString BytePointer snapshot_prefix();
  public native void set_snapshot_prefix(@StdString BytePointer value);
  public native void set_snapshot_prefix(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_snapshot_prefix(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_snapshot_prefix(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_snapshot_prefix();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_snapshot_prefix();
  public native void set_allocated_snapshot_prefix(@StdString @Cast({"char*", "std::string*"}) BytePointer snapshot_prefix);

  // optional string net = 24;
  public native @Cast("bool") boolean has_net();
  public native void clear_net();
  @MemberGetter public static native int kNetFieldNumber();
  public static final int kNetFieldNumber = kNetFieldNumber();
  public native @StdString BytePointer net();
  public native void set_net(@StdString BytePointer value);
  public native void set_net(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_net(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_net(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_net();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_net();
  public native void set_allocated_net(@StdString @Cast({"char*", "std::string*"}) BytePointer net);

  // optional string regularization_type = 29 [default = "L2"];
  public native @Cast("bool") boolean has_regularization_type();
  public native void clear_regularization_type();
  @MemberGetter public static native int kRegularizationTypeFieldNumber();
  public static final int kRegularizationTypeFieldNumber = kRegularizationTypeFieldNumber();
  public native @StdString BytePointer regularization_type();
  public native void set_regularization_type(@StdString BytePointer value);
  public native void set_regularization_type(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_regularization_type(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_regularization_type(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_regularization_type();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_regularization_type();
  public native void set_allocated_regularization_type(@StdString @Cast({"char*", "std::string*"}) BytePointer regularization_type);

  // optional string type = 40 [default = "SGD"];
  public native @Cast("bool") boolean has_type();
  public native void clear_type();
  @MemberGetter public static native int kTypeFieldNumber();
  public static final int kTypeFieldNumber = kTypeFieldNumber();
  public native @StdString BytePointer type();
  public native void set_type(@StdString BytePointer value);
  public native void set_type(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_type(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_type(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_type();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_type();
  public native void set_allocated_type(@StdString @Cast({"char*", "std::string*"}) BytePointer type);

  // optional .caffe.NetParameter train_net_param = 21;
  public native @Cast("bool") boolean has_train_net_param();
  public native void clear_train_net_param();
  @MemberGetter public static native int kTrainNetParamFieldNumber();
  public static final int kTrainNetParamFieldNumber = kTrainNetParamFieldNumber();
  public native @Const @ByRef NetParameter train_net_param();
  public native NetParameter release_train_net_param();
  public native NetParameter mutable_train_net_param();
  public native void set_allocated_train_net_param(NetParameter train_net_param);

  // optional .caffe.NetParameter net_param = 25;
  public native @Cast("bool") boolean has_net_param();
  public native void clear_net_param();
  @MemberGetter public static native int kNetParamFieldNumber();
  public static final int kNetParamFieldNumber = kNetParamFieldNumber();
  public native @Const @ByRef NetParameter net_param();
  public native NetParameter release_net_param();
  public native NetParameter mutable_net_param();
  public native void set_allocated_net_param(NetParameter net_param);

  // optional .caffe.NetState train_state = 26;
  public native @Cast("bool") boolean has_train_state();
  public native void clear_train_state();
  @MemberGetter public static native int kTrainStateFieldNumber();
  public static final int kTrainStateFieldNumber = kTrainStateFieldNumber();
  public native @Const @ByRef NetState train_state();
  public native NetState release_train_state();
  public native NetState mutable_train_state();
  public native void set_allocated_train_state(NetState train_state);

  // optional int32 test_interval = 4 [default = 0];
  public native @Cast("bool") boolean has_test_interval();
  public native void clear_test_interval();
  @MemberGetter public static native int kTestIntervalFieldNumber();
  public static final int kTestIntervalFieldNumber = kTestIntervalFieldNumber();
  public native @Cast("google::protobuf::int32") int test_interval();
  public native void set_test_interval(@Cast("google::protobuf::int32") int value);

  // optional float base_lr = 5;
  public native @Cast("bool") boolean has_base_lr();
  public native void clear_base_lr();
  @MemberGetter public static native int kBaseLrFieldNumber();
  public static final int kBaseLrFieldNumber = kBaseLrFieldNumber();
  public native float base_lr();
  public native void set_base_lr(float value);

  // optional int32 display = 6;
  public native @Cast("bool") boolean has_display();
  public native void clear_display();
  @MemberGetter public static native int kDisplayFieldNumber();
  public static final int kDisplayFieldNumber = kDisplayFieldNumber();
  public native @Cast("google::protobuf::int32") int display();
  public native void set_display(@Cast("google::protobuf::int32") int value);

  // optional int32 max_iter = 7;
  public native @Cast("bool") boolean has_max_iter();
  public native void clear_max_iter();
  @MemberGetter public static native int kMaxIterFieldNumber();
  public static final int kMaxIterFieldNumber = kMaxIterFieldNumber();
  public native @Cast("google::protobuf::int32") int max_iter();
  public native void set_max_iter(@Cast("google::protobuf::int32") int value);

  // optional float gamma = 9;
  public native @Cast("bool") boolean has_gamma();
  public native void clear_gamma();
  @MemberGetter public static native int kGammaFieldNumber();
  public static final int kGammaFieldNumber = kGammaFieldNumber();
  public native float gamma();
  public native void set_gamma(float value);

  // optional float power = 10;
  public native @Cast("bool") boolean has_power();
  public native void clear_power();
  @MemberGetter public static native int kPowerFieldNumber();
  public static final int kPowerFieldNumber = kPowerFieldNumber();
  public native float power();
  public native void set_power(float value);

  // optional float momentum = 11;
  public native @Cast("bool") boolean has_momentum();
  public native void clear_momentum();
  @MemberGetter public static native int kMomentumFieldNumber();
  public static final int kMomentumFieldNumber = kMomentumFieldNumber();
  public native float momentum();
  public native void set_momentum(float value);

  // optional float weight_decay = 12;
  public native @Cast("bool") boolean has_weight_decay();
  public native void clear_weight_decay();
  @MemberGetter public static native int kWeightDecayFieldNumber();
  public static final int kWeightDecayFieldNumber = kWeightDecayFieldNumber();
  public native float weight_decay();
  public native void set_weight_decay(float value);

  // optional int32 stepsize = 13;
  public native @Cast("bool") boolean has_stepsize();
  public native void clear_stepsize();
  @MemberGetter public static native int kStepsizeFieldNumber();
  public static final int kStepsizeFieldNumber = kStepsizeFieldNumber();
  public native @Cast("google::protobuf::int32") int stepsize();
  public native void set_stepsize(@Cast("google::protobuf::int32") int value);

  // optional int32 snapshot = 14 [default = 0];
  public native @Cast("bool") boolean has_snapshot();
  public native void clear_snapshot();
  @MemberGetter public static native int kSnapshotFieldNumber();
  public static final int kSnapshotFieldNumber = kSnapshotFieldNumber();
  public native @Cast("google::protobuf::int32") int snapshot();
  public native void set_snapshot(@Cast("google::protobuf::int32") int value);

  // optional int32 device_id = 18 [default = 0];
  public native @Cast("bool") boolean has_device_id();
  public native void clear_device_id();
  @MemberGetter public static native int kDeviceIdFieldNumber();
  public static final int kDeviceIdFieldNumber = kDeviceIdFieldNumber();
  public native @Cast("google::protobuf::int32") int device_id();
  public native void set_device_id(@Cast("google::protobuf::int32") int value);

  // optional bool test_compute_loss = 19 [default = false];
  public native @Cast("bool") boolean has_test_compute_loss();
  public native void clear_test_compute_loss();
  @MemberGetter public static native int kTestComputeLossFieldNumber();
  public static final int kTestComputeLossFieldNumber = kTestComputeLossFieldNumber();
  public native @Cast("bool") boolean test_compute_loss();
  public native void set_test_compute_loss(@Cast("bool") boolean value);

  // optional bool snapshot_diff = 16 [default = false];
  public native @Cast("bool") boolean has_snapshot_diff();
  public native void clear_snapshot_diff();
  @MemberGetter public static native int kSnapshotDiffFieldNumber();
  public static final int kSnapshotDiffFieldNumber = kSnapshotDiffFieldNumber();
  public native @Cast("bool") boolean snapshot_diff();
  public native void set_snapshot_diff(@Cast("bool") boolean value);

  // optional bool debug_info = 23 [default = false];
  public native @Cast("bool") boolean has_debug_info();
  public native void clear_debug_info();
  @MemberGetter public static native int kDebugInfoFieldNumber();
  public static final int kDebugInfoFieldNumber = kDebugInfoFieldNumber();
  public native @Cast("bool") boolean debug_info();
  public native void set_debug_info(@Cast("bool") boolean value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  public native @Cast("bool") boolean has_solver_type();
  public native void clear_solver_type();
  @MemberGetter public static native int kSolverTypeFieldNumber();
  public static final int kSolverTypeFieldNumber = kSolverTypeFieldNumber();
  public native @Cast("caffe::SolverParameter_SolverType") int solver_type();
  public native void set_solver_type(@Cast("caffe::SolverParameter_SolverType") int value);

  // optional float momentum2 = 39 [default = 0.999];
  public native @Cast("bool") boolean has_momentum2();
  public native void clear_momentum2();
  @MemberGetter public static native int kMomentum2FieldNumber();
  public static final int kMomentum2FieldNumber = kMomentum2FieldNumber();
  public native float momentum2();
  public native void set_momentum2(float value);

  // optional int64 random_seed = 20 [default = -1];
  public native @Cast("bool") boolean has_random_seed();
  public native void clear_random_seed();
  @MemberGetter public static native int kRandomSeedFieldNumber();
  public static final int kRandomSeedFieldNumber = kRandomSeedFieldNumber();
  public native @Cast("google::protobuf::int64") long random_seed();
  public native void set_random_seed(@Cast("google::protobuf::int64") long value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  public native @Cast("bool") boolean has_solver_mode();
  public native void clear_solver_mode();
  @MemberGetter public static native int kSolverModeFieldNumber();
  public static final int kSolverModeFieldNumber = kSolverModeFieldNumber();
  public native @Cast("caffe::SolverParameter_SolverMode") int solver_mode();
  public native void set_solver_mode(@Cast("caffe::SolverParameter_SolverMode") int value);

  // optional float delta = 31 [default = 1e-08];
  public native @Cast("bool") boolean has_delta();
  public native void clear_delta();
  @MemberGetter public static native int kDeltaFieldNumber();
  public static final int kDeltaFieldNumber = kDeltaFieldNumber();
  public native float delta();
  public native void set_delta(float value);

  // optional int32 average_loss = 33 [default = 1];
  public native @Cast("bool") boolean has_average_loss();
  public native void clear_average_loss();
  @MemberGetter public static native int kAverageLossFieldNumber();
  public static final int kAverageLossFieldNumber = kAverageLossFieldNumber();
  public native @Cast("google::protobuf::int32") int average_loss();
  public native void set_average_loss(@Cast("google::protobuf::int32") int value);

  // optional bool test_initialization = 32 [default = true];
  public native @Cast("bool") boolean has_test_initialization();
  public native void clear_test_initialization();
  @MemberGetter public static native int kTestInitializationFieldNumber();
  public static final int kTestInitializationFieldNumber = kTestInitializationFieldNumber();
  public native @Cast("bool") boolean test_initialization();
  public native void set_test_initialization(@Cast("bool") boolean value);

  // optional bool snapshot_after_train = 28 [default = true];
  public native @Cast("bool") boolean has_snapshot_after_train();
  public native void clear_snapshot_after_train();
  @MemberGetter public static native int kSnapshotAfterTrainFieldNumber();
  public static final int kSnapshotAfterTrainFieldNumber = kSnapshotAfterTrainFieldNumber();
  public native @Cast("bool") boolean snapshot_after_train();
  public native void set_snapshot_after_train(@Cast("bool") boolean value);

  // optional bool layer_wise_reduce = 41 [default = true];
  public native @Cast("bool") boolean has_layer_wise_reduce();
  public native void clear_layer_wise_reduce();
  @MemberGetter public static native int kLayerWiseReduceFieldNumber();
  public static final int kLayerWiseReduceFieldNumber = kLayerWiseReduceFieldNumber();
  public native @Cast("bool") boolean layer_wise_reduce();
  public native void set_layer_wise_reduce(@Cast("bool") boolean value);

  // optional float clip_gradients = 35 [default = -1];
  public native @Cast("bool") boolean has_clip_gradients();
  public native void clear_clip_gradients();
  @MemberGetter public static native int kClipGradientsFieldNumber();
  public static final int kClipGradientsFieldNumber = kClipGradientsFieldNumber();
  public native float clip_gradients();
  public native void set_clip_gradients(float value);

  // optional int32 iter_size = 36 [default = 1];
  public native @Cast("bool") boolean has_iter_size();
  public native void clear_iter_size();
  @MemberGetter public static native int kIterSizeFieldNumber();
  public static final int kIterSizeFieldNumber = kIterSizeFieldNumber();
  public native @Cast("google::protobuf::int32") int iter_size();
  public native void set_iter_size(@Cast("google::protobuf::int32") int value);

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  public native @Cast("bool") boolean has_snapshot_format();
  public native void clear_snapshot_format();
  @MemberGetter public static native int kSnapshotFormatFieldNumber();
  public static final int kSnapshotFormatFieldNumber = kSnapshotFormatFieldNumber();
  public native @Cast("caffe::SolverParameter_SnapshotFormat") int snapshot_format();
  public native void set_snapshot_format(@Cast("caffe::SolverParameter_SnapshotFormat") int value);

  // optional float rms_decay = 38 [default = 0.99];
  public native @Cast("bool") boolean has_rms_decay();
  public native void clear_rms_decay();
  @MemberGetter public static native int kRmsDecayFieldNumber();
  public static final int kRmsDecayFieldNumber = kRmsDecayFieldNumber();
  public native float rms_decay();
  public native void set_rms_decay(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class SolverState extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SolverState(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SolverState(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SolverState position(long position) {
        return (SolverState)super.position(position);
    }

  public SolverState() { super((Pointer)null); allocate(); }
  private native void allocate();

  public SolverState(@Const @ByRef SolverState from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef SolverState from);

  public native @ByRef @Name("operator =") SolverState put(@Const @ByRef SolverState from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef SolverState default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const SolverState internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(SolverState other);
  

  // implements Message ----------------------------------------------

  public native final SolverState New();

  public native final SolverState New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef SolverState from);
  public native void MergeFrom(@Const @ByRef SolverState from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto history = 3;
  public native int history_size();
  public native void clear_history();
  @MemberGetter public static native int kHistoryFieldNumber();
  public static final int kHistoryFieldNumber = kHistoryFieldNumber();
  public native BlobProto mutable_history(int index);
  public native @Const @ByRef BlobProto history(int index);
  public native BlobProto add_history();

  // optional string learned_net = 2;
  public native @Cast("bool") boolean has_learned_net();
  public native void clear_learned_net();
  @MemberGetter public static native int kLearnedNetFieldNumber();
  public static final int kLearnedNetFieldNumber = kLearnedNetFieldNumber();
  public native @StdString BytePointer learned_net();
  public native void set_learned_net(@StdString BytePointer value);
  public native void set_learned_net(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_learned_net(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_learned_net(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_learned_net();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_learned_net();
  public native void set_allocated_learned_net(@StdString @Cast({"char*", "std::string*"}) BytePointer learned_net);

  // optional int32 iter = 1;
  public native @Cast("bool") boolean has_iter();
  public native void clear_iter();
  @MemberGetter public static native int kIterFieldNumber();
  public static final int kIterFieldNumber = kIterFieldNumber();
  public native @Cast("google::protobuf::int32") int iter();
  public native void set_iter(@Cast("google::protobuf::int32") int value);

  // optional int32 current_step = 4 [default = 0];
  public native @Cast("bool") boolean has_current_step();
  public native void clear_current_step();
  @MemberGetter public static native int kCurrentStepFieldNumber();
  public static final int kCurrentStepFieldNumber = kCurrentStepFieldNumber();
  public native @Cast("google::protobuf::int32") int current_step();
  public native void set_current_step(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class NetState extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NetState(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NetState(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public NetState position(long position) {
        return (NetState)super.position(position);
    }

  public NetState() { super((Pointer)null); allocate(); }
  private native void allocate();

  public NetState(@Const @ByRef NetState from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef NetState from);

  public native @ByRef @Name("operator =") NetState put(@Const @ByRef NetState from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef NetState default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const NetState internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(NetState other);
  

  // implements Message ----------------------------------------------

  public native final NetState New();

  public native final NetState New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef NetState from);
  public native void MergeFrom(@Const @ByRef NetState from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 3;
  public native int stage_size();
  public native void clear_stage();
  @MemberGetter public static native int kStageFieldNumber();
  public static final int kStageFieldNumber = kStageFieldNumber();
  public native @StdString BytePointer stage(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_stage(int index);
  public native void set_stage(int index, @StdString BytePointer value);
  public native void set_stage(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_stage(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_stage(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_stage();
  public native void add_stage(@StdString BytePointer value);
  public native void add_stage(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_stage(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_stage(String value, @Cast("size_t") long size);

  // optional int32 level = 2 [default = 0];
  public native @Cast("bool") boolean has_level();
  public native void clear_level();
  @MemberGetter public static native int kLevelFieldNumber();
  public static final int kLevelFieldNumber = kLevelFieldNumber();
  public native @Cast("google::protobuf::int32") int level();
  public native void set_level(@Cast("google::protobuf::int32") int value);

  // optional .caffe.Phase phase = 1 [default = TEST];
  public native @Cast("bool") boolean has_phase();
  public native void clear_phase();
  @MemberGetter public static native int kPhaseFieldNumber();
  public static final int kPhaseFieldNumber = kPhaseFieldNumber();
  public native @Cast("caffe::Phase") int phase();
  public native void set_phase(@Cast("caffe::Phase") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class NetStateRule extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NetStateRule(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NetStateRule(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public NetStateRule position(long position) {
        return (NetStateRule)super.position(position);
    }

  public NetStateRule() { super((Pointer)null); allocate(); }
  private native void allocate();

  public NetStateRule(@Const @ByRef NetStateRule from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef NetStateRule from);

  public native @ByRef @Name("operator =") NetStateRule put(@Const @ByRef NetStateRule from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef NetStateRule default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const NetStateRule internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(NetStateRule other);
  

  // implements Message ----------------------------------------------

  public native final NetStateRule New();

  public native final NetStateRule New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef NetStateRule from);
  public native void MergeFrom(@Const @ByRef NetStateRule from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 4;
  public native int stage_size();
  public native void clear_stage();
  @MemberGetter public static native int kStageFieldNumber();
  public static final int kStageFieldNumber = kStageFieldNumber();
  public native @StdString BytePointer stage(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_stage(int index);
  public native void set_stage(int index, @StdString BytePointer value);
  public native void set_stage(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_stage(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_stage(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_stage();
  public native void add_stage(@StdString BytePointer value);
  public native void add_stage(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_stage(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_stage(String value, @Cast("size_t") long size);

  // repeated string not_stage = 5;
  public native int not_stage_size();
  public native void clear_not_stage();
  @MemberGetter public static native int kNotStageFieldNumber();
  public static final int kNotStageFieldNumber = kNotStageFieldNumber();
  public native @StdString BytePointer not_stage(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_not_stage(int index);
  public native void set_not_stage(int index, @StdString BytePointer value);
  public native void set_not_stage(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_not_stage(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_not_stage(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_not_stage();
  public native void add_not_stage(@StdString BytePointer value);
  public native void add_not_stage(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_not_stage(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_not_stage(String value, @Cast("size_t") long size);

  // optional .caffe.Phase phase = 1;
  public native @Cast("bool") boolean has_phase();
  public native void clear_phase();
  @MemberGetter public static native int kPhaseFieldNumber();
  public static final int kPhaseFieldNumber = kPhaseFieldNumber();
  public native @Cast("caffe::Phase") int phase();
  public native void set_phase(@Cast("caffe::Phase") int value);

  // optional int32 min_level = 2;
  public native @Cast("bool") boolean has_min_level();
  public native void clear_min_level();
  @MemberGetter public static native int kMinLevelFieldNumber();
  public static final int kMinLevelFieldNumber = kMinLevelFieldNumber();
  public native @Cast("google::protobuf::int32") int min_level();
  public native void set_min_level(@Cast("google::protobuf::int32") int value);

  // optional int32 max_level = 3;
  public native @Cast("bool") boolean has_max_level();
  public native void clear_max_level();
  @MemberGetter public static native int kMaxLevelFieldNumber();
  public static final int kMaxLevelFieldNumber = kMaxLevelFieldNumber();
  public native @Cast("google::protobuf::int32") int max_level();
  public native void set_max_level(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ParamSpec extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ParamSpec(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ParamSpec(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ParamSpec position(long position) {
        return (ParamSpec)super.position(position);
    }

  public ParamSpec() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ParamSpec(@Const @ByRef ParamSpec from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ParamSpec from);

  public native @ByRef @Name("operator =") ParamSpec put(@Const @ByRef ParamSpec from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ParamSpec default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ParamSpec internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ParamSpec other);
  

  // implements Message ----------------------------------------------

  public native final ParamSpec New();

  public native final ParamSpec New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ParamSpec from);
  public native void MergeFrom(@Const @ByRef ParamSpec from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::ParamSpec::DimCheckMode") int STRICT();
  public static final int STRICT = STRICT();
  @MemberGetter public static native @Cast("const caffe::ParamSpec::DimCheckMode") int PERMISSIVE();
  public static final int PERMISSIVE = PERMISSIVE();
  public static native @Cast("bool") boolean DimCheckMode_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::ParamSpec::DimCheckMode") int DimCheckMode_MIN();
  public static final int DimCheckMode_MIN = DimCheckMode_MIN();
  @MemberGetter public static native @Cast("const caffe::ParamSpec::DimCheckMode") int DimCheckMode_MAX();
  public static final int DimCheckMode_MAX = DimCheckMode_MAX();
  @MemberGetter public static native int DimCheckMode_ARRAYSIZE();
  public static final int DimCheckMode_ARRAYSIZE = DimCheckMode_ARRAYSIZE();
  public static native @Const EnumDescriptor DimCheckMode_descriptor();
  public static native @StdString BytePointer DimCheckMode_Name(@Cast("caffe::ParamSpec::DimCheckMode") int value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString BytePointer name,
        @Cast("caffe::ParamSpec::DimCheckMode*") IntPointer value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString String name,
        @Cast("caffe::ParamSpec::DimCheckMode*") IntBuffer value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString BytePointer name,
        @Cast("caffe::ParamSpec::DimCheckMode*") int[] value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString String name,
        @Cast("caffe::ParamSpec::DimCheckMode*") IntPointer value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString BytePointer name,
        @Cast("caffe::ParamSpec::DimCheckMode*") IntBuffer value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString String name,
        @Cast("caffe::ParamSpec::DimCheckMode*") int[] value);

  // accessors -------------------------------------------------------

  // optional string name = 1;
  public native @Cast("bool") boolean has_name();
  public native void clear_name();
  @MemberGetter public static native int kNameFieldNumber();
  public static final int kNameFieldNumber = kNameFieldNumber();
  public native @StdString BytePointer name();
  public native void set_name(@StdString BytePointer value);
  public native void set_name(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_name(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_name(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_name();
  public native void set_allocated_name(@StdString @Cast({"char*", "std::string*"}) BytePointer name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  public native @Cast("bool") boolean has_share_mode();
  public native void clear_share_mode();
  @MemberGetter public static native int kShareModeFieldNumber();
  public static final int kShareModeFieldNumber = kShareModeFieldNumber();
  public native @Cast("caffe::ParamSpec_DimCheckMode") int share_mode();
  public native void set_share_mode(@Cast("caffe::ParamSpec_DimCheckMode") int value);

  // optional float lr_mult = 3 [default = 1];
  public native @Cast("bool") boolean has_lr_mult();
  public native void clear_lr_mult();
  @MemberGetter public static native int kLrMultFieldNumber();
  public static final int kLrMultFieldNumber = kLrMultFieldNumber();
  public native float lr_mult();
  public native void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  public native @Cast("bool") boolean has_decay_mult();
  public native void clear_decay_mult();
  @MemberGetter public static native int kDecayMultFieldNumber();
  public static final int kDecayMultFieldNumber = kDecayMultFieldNumber();
  public native float decay_mult();
  public native void set_decay_mult(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class LayerParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LayerParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LayerParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LayerParameter position(long position) {
        return (LayerParameter)super.position(position);
    }

  public LayerParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public LayerParameter(@Const @ByRef LayerParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef LayerParameter from);

  public native @ByRef @Name("operator =") LayerParameter put(@Const @ByRef LayerParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef LayerParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const LayerParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(LayerParameter other);
  

  // implements Message ----------------------------------------------

  public native final LayerParameter New();

  public native final LayerParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef LayerParameter from);
  public native void MergeFrom(@Const @ByRef LayerParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string bottom = 3;
  public native int bottom_size();
  public native void clear_bottom();
  @MemberGetter public static native int kBottomFieldNumber();
  public static final int kBottomFieldNumber = kBottomFieldNumber();
  public native @StdString BytePointer bottom(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_bottom(int index);
  public native void set_bottom(int index, @StdString BytePointer value);
  public native void set_bottom(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_bottom(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_bottom(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_bottom();
  public native void add_bottom(@StdString BytePointer value);
  public native void add_bottom(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_bottom(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_bottom(String value, @Cast("size_t") long size);

  // repeated string top = 4;
  public native int top_size();
  public native void clear_top();
  @MemberGetter public static native int kTopFieldNumber();
  public static final int kTopFieldNumber = kTopFieldNumber();
  public native @StdString BytePointer top(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_top(int index);
  public native void set_top(int index, @StdString BytePointer value);
  public native void set_top(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_top(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_top(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_top();
  public native void add_top(@StdString BytePointer value);
  public native void add_top(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_top(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_top(String value, @Cast("size_t") long size);

  // repeated float loss_weight = 5;
  public native int loss_weight_size();
  public native void clear_loss_weight();
  @MemberGetter public static native int kLossWeightFieldNumber();
  public static final int kLossWeightFieldNumber = kLossWeightFieldNumber();
  public native float loss_weight(int index);
  public native void set_loss_weight(int index, float value);
  public native void add_loss_weight(float value);

  // repeated .caffe.ParamSpec param = 6;
  public native int param_size();
  public native void clear_param();
  @MemberGetter public static native int kParamFieldNumber();
  public static final int kParamFieldNumber = kParamFieldNumber();
  public native ParamSpec mutable_param(int index);
  public native @Const @ByRef ParamSpec param(int index);
  public native ParamSpec add_param();

  // repeated .caffe.BlobProto blobs = 7;
  public native int blobs_size();
  public native void clear_blobs();
  @MemberGetter public static native int kBlobsFieldNumber();
  public static final int kBlobsFieldNumber = kBlobsFieldNumber();
  public native BlobProto mutable_blobs(int index);
  public native @Const @ByRef BlobProto blobs(int index);
  public native BlobProto add_blobs();

  // repeated .caffe.NetStateRule include = 8;
  public native int include_size();
  public native void clear_include();
  @MemberGetter public static native int kIncludeFieldNumber();
  public static final int kIncludeFieldNumber = kIncludeFieldNumber();
  public native NetStateRule mutable_include(int index);
  public native @Const @ByRef NetStateRule include(int index);
  public native NetStateRule add_include();

  // repeated .caffe.NetStateRule exclude = 9;
  public native int exclude_size();
  public native void clear_exclude();
  @MemberGetter public static native int kExcludeFieldNumber();
  public static final int kExcludeFieldNumber = kExcludeFieldNumber();
  public native NetStateRule mutable_exclude(int index);
  public native @Const @ByRef NetStateRule exclude(int index);
  public native NetStateRule add_exclude();

  // repeated bool propagate_down = 11;
  public native int propagate_down_size();
  public native void clear_propagate_down();
  @MemberGetter public static native int kPropagateDownFieldNumber();
  public static final int kPropagateDownFieldNumber = kPropagateDownFieldNumber();
  public native @Cast("bool") boolean propagate_down(int index);
  public native void set_propagate_down(int index, @Cast("bool") boolean value);
  public native void add_propagate_down(@Cast("bool") boolean value);

  // optional string name = 1;
  public native @Cast("bool") boolean has_name();
  public native void clear_name();
  @MemberGetter public static native int kNameFieldNumber();
  public static final int kNameFieldNumber = kNameFieldNumber();
  public native @StdString BytePointer name();
  public native void set_name(@StdString BytePointer value);
  public native void set_name(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_name(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_name(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_name();
  public native void set_allocated_name(@StdString @Cast({"char*", "std::string*"}) BytePointer name);

  // optional string type = 2;
  public native @Cast("bool") boolean has_type();
  public native void clear_type();
  @MemberGetter public static native int kTypeFieldNumber();
  public static final int kTypeFieldNumber = kTypeFieldNumber();
  public native @StdString BytePointer type();
  public native void set_type(@StdString BytePointer value);
  public native void set_type(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_type(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_type(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_type();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_type();
  public native void set_allocated_type(@StdString @Cast({"char*", "std::string*"}) BytePointer type);

  // optional .caffe.TransformationParameter transform_param = 100;
  public native @Cast("bool") boolean has_transform_param();
  public native void clear_transform_param();
  @MemberGetter public static native int kTransformParamFieldNumber();
  public static final int kTransformParamFieldNumber = kTransformParamFieldNumber();
  public native @Const @ByRef TransformationParameter transform_param();
  public native TransformationParameter release_transform_param();
  public native TransformationParameter mutable_transform_param();
  public native void set_allocated_transform_param(TransformationParameter transform_param);

  // optional .caffe.LossParameter loss_param = 101;
  public native @Cast("bool") boolean has_loss_param();
  public native void clear_loss_param();
  @MemberGetter public static native int kLossParamFieldNumber();
  public static final int kLossParamFieldNumber = kLossParamFieldNumber();
  public native @Const @ByRef LossParameter loss_param();
  public native LossParameter release_loss_param();
  public native LossParameter mutable_loss_param();
  public native void set_allocated_loss_param(LossParameter loss_param);

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  public native @Cast("bool") boolean has_accuracy_param();
  public native void clear_accuracy_param();
  @MemberGetter public static native int kAccuracyParamFieldNumber();
  public static final int kAccuracyParamFieldNumber = kAccuracyParamFieldNumber();
  public native @Const @ByRef AccuracyParameter accuracy_param();
  public native AccuracyParameter release_accuracy_param();
  public native AccuracyParameter mutable_accuracy_param();
  public native void set_allocated_accuracy_param(AccuracyParameter accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  public native @Cast("bool") boolean has_argmax_param();
  public native void clear_argmax_param();
  @MemberGetter public static native int kArgmaxParamFieldNumber();
  public static final int kArgmaxParamFieldNumber = kArgmaxParamFieldNumber();
  public native @Const @ByRef ArgMaxParameter argmax_param();
  public native ArgMaxParameter release_argmax_param();
  public native ArgMaxParameter mutable_argmax_param();
  public native void set_allocated_argmax_param(ArgMaxParameter argmax_param);

  // optional .caffe.ConcatParameter concat_param = 104;
  public native @Cast("bool") boolean has_concat_param();
  public native void clear_concat_param();
  @MemberGetter public static native int kConcatParamFieldNumber();
  public static final int kConcatParamFieldNumber = kConcatParamFieldNumber();
  public native @Const @ByRef ConcatParameter concat_param();
  public native ConcatParameter release_concat_param();
  public native ConcatParameter mutable_concat_param();
  public native void set_allocated_concat_param(ConcatParameter concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  public native @Cast("bool") boolean has_contrastive_loss_param();
  public native void clear_contrastive_loss_param();
  @MemberGetter public static native int kContrastiveLossParamFieldNumber();
  public static final int kContrastiveLossParamFieldNumber = kContrastiveLossParamFieldNumber();
  public native @Const @ByRef ContrastiveLossParameter contrastive_loss_param();
  public native ContrastiveLossParameter release_contrastive_loss_param();
  public native ContrastiveLossParameter mutable_contrastive_loss_param();
  public native void set_allocated_contrastive_loss_param(ContrastiveLossParameter contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  public native @Cast("bool") boolean has_convolution_param();
  public native void clear_convolution_param();
  @MemberGetter public static native int kConvolutionParamFieldNumber();
  public static final int kConvolutionParamFieldNumber = kConvolutionParamFieldNumber();
  public native @Const @ByRef ConvolutionParameter convolution_param();
  public native ConvolutionParameter release_convolution_param();
  public native ConvolutionParameter mutable_convolution_param();
  public native void set_allocated_convolution_param(ConvolutionParameter convolution_param);

  // optional .caffe.DataParameter data_param = 107;
  public native @Cast("bool") boolean has_data_param();
  public native void clear_data_param();
  @MemberGetter public static native int kDataParamFieldNumber();
  public static final int kDataParamFieldNumber = kDataParamFieldNumber();
  public native @Const @ByRef DataParameter data_param();
  public native DataParameter release_data_param();
  public native DataParameter mutable_data_param();
  public native void set_allocated_data_param(DataParameter data_param);

  // optional .caffe.DropoutParameter dropout_param = 108;
  public native @Cast("bool") boolean has_dropout_param();
  public native void clear_dropout_param();
  @MemberGetter public static native int kDropoutParamFieldNumber();
  public static final int kDropoutParamFieldNumber = kDropoutParamFieldNumber();
  public native @Const @ByRef DropoutParameter dropout_param();
  public native DropoutParameter release_dropout_param();
  public native DropoutParameter mutable_dropout_param();
  public native void set_allocated_dropout_param(DropoutParameter dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  public native @Cast("bool") boolean has_dummy_data_param();
  public native void clear_dummy_data_param();
  @MemberGetter public static native int kDummyDataParamFieldNumber();
  public static final int kDummyDataParamFieldNumber = kDummyDataParamFieldNumber();
  public native @Const @ByRef DummyDataParameter dummy_data_param();
  public native DummyDataParameter release_dummy_data_param();
  public native DummyDataParameter mutable_dummy_data_param();
  public native void set_allocated_dummy_data_param(DummyDataParameter dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  public native @Cast("bool") boolean has_eltwise_param();
  public native void clear_eltwise_param();
  @MemberGetter public static native int kEltwiseParamFieldNumber();
  public static final int kEltwiseParamFieldNumber = kEltwiseParamFieldNumber();
  public native @Const @ByRef EltwiseParameter eltwise_param();
  public native EltwiseParameter release_eltwise_param();
  public native EltwiseParameter mutable_eltwise_param();
  public native void set_allocated_eltwise_param(EltwiseParameter eltwise_param);

  // optional .caffe.ExpParameter exp_param = 111;
  public native @Cast("bool") boolean has_exp_param();
  public native void clear_exp_param();
  @MemberGetter public static native int kExpParamFieldNumber();
  public static final int kExpParamFieldNumber = kExpParamFieldNumber();
  public native @Const @ByRef ExpParameter exp_param();
  public native ExpParameter release_exp_param();
  public native ExpParameter mutable_exp_param();
  public native void set_allocated_exp_param(ExpParameter exp_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  public native @Cast("bool") boolean has_hdf5_data_param();
  public native void clear_hdf5_data_param();
  @MemberGetter public static native int kHdf5DataParamFieldNumber();
  public static final int kHdf5DataParamFieldNumber = kHdf5DataParamFieldNumber();
  public native @Const @ByRef HDF5DataParameter hdf5_data_param();
  public native HDF5DataParameter release_hdf5_data_param();
  public native HDF5DataParameter mutable_hdf5_data_param();
  public native void set_allocated_hdf5_data_param(HDF5DataParameter hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  public native @Cast("bool") boolean has_hdf5_output_param();
  public native void clear_hdf5_output_param();
  @MemberGetter public static native int kHdf5OutputParamFieldNumber();
  public static final int kHdf5OutputParamFieldNumber = kHdf5OutputParamFieldNumber();
  public native @Const @ByRef HDF5OutputParameter hdf5_output_param();
  public native HDF5OutputParameter release_hdf5_output_param();
  public native HDF5OutputParameter mutable_hdf5_output_param();
  public native void set_allocated_hdf5_output_param(HDF5OutputParameter hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  public native @Cast("bool") boolean has_hinge_loss_param();
  public native void clear_hinge_loss_param();
  @MemberGetter public static native int kHingeLossParamFieldNumber();
  public static final int kHingeLossParamFieldNumber = kHingeLossParamFieldNumber();
  public native @Const @ByRef HingeLossParameter hinge_loss_param();
  public native HingeLossParameter release_hinge_loss_param();
  public native HingeLossParameter mutable_hinge_loss_param();
  public native void set_allocated_hinge_loss_param(HingeLossParameter hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 115;
  public native @Cast("bool") boolean has_image_data_param();
  public native void clear_image_data_param();
  @MemberGetter public static native int kImageDataParamFieldNumber();
  public static final int kImageDataParamFieldNumber = kImageDataParamFieldNumber();
  public native @Const @ByRef ImageDataParameter image_data_param();
  public native ImageDataParameter release_image_data_param();
  public native ImageDataParameter mutable_image_data_param();
  public native void set_allocated_image_data_param(ImageDataParameter image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  public native @Cast("bool") boolean has_infogain_loss_param();
  public native void clear_infogain_loss_param();
  @MemberGetter public static native int kInfogainLossParamFieldNumber();
  public static final int kInfogainLossParamFieldNumber = kInfogainLossParamFieldNumber();
  public native @Const @ByRef InfogainLossParameter infogain_loss_param();
  public native InfogainLossParameter release_infogain_loss_param();
  public native InfogainLossParameter mutable_infogain_loss_param();
  public native void set_allocated_infogain_loss_param(InfogainLossParameter infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  public native @Cast("bool") boolean has_inner_product_param();
  public native void clear_inner_product_param();
  @MemberGetter public static native int kInnerProductParamFieldNumber();
  public static final int kInnerProductParamFieldNumber = kInnerProductParamFieldNumber();
  public native @Const @ByRef InnerProductParameter inner_product_param();
  public native InnerProductParameter release_inner_product_param();
  public native InnerProductParameter mutable_inner_product_param();
  public native void set_allocated_inner_product_param(InnerProductParameter inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 118;
  public native @Cast("bool") boolean has_lrn_param();
  public native void clear_lrn_param();
  @MemberGetter public static native int kLrnParamFieldNumber();
  public static final int kLrnParamFieldNumber = kLrnParamFieldNumber();
  public native @Const @ByRef LRNParameter lrn_param();
  public native LRNParameter release_lrn_param();
  public native LRNParameter mutable_lrn_param();
  public native void set_allocated_lrn_param(LRNParameter lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  public native @Cast("bool") boolean has_memory_data_param();
  public native void clear_memory_data_param();
  @MemberGetter public static native int kMemoryDataParamFieldNumber();
  public static final int kMemoryDataParamFieldNumber = kMemoryDataParamFieldNumber();
  public native @Const @ByRef MemoryDataParameter memory_data_param();
  public native MemoryDataParameter release_memory_data_param();
  public native MemoryDataParameter mutable_memory_data_param();
  public native void set_allocated_memory_data_param(MemoryDataParameter memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 120;
  public native @Cast("bool") boolean has_mvn_param();
  public native void clear_mvn_param();
  @MemberGetter public static native int kMvnParamFieldNumber();
  public static final int kMvnParamFieldNumber = kMvnParamFieldNumber();
  public native @Const @ByRef MVNParameter mvn_param();
  public native MVNParameter release_mvn_param();
  public native MVNParameter mutable_mvn_param();
  public native void set_allocated_mvn_param(MVNParameter mvn_param);

  // optional .caffe.PoolingParameter pooling_param = 121;
  public native @Cast("bool") boolean has_pooling_param();
  public native void clear_pooling_param();
  @MemberGetter public static native int kPoolingParamFieldNumber();
  public static final int kPoolingParamFieldNumber = kPoolingParamFieldNumber();
  public native @Const @ByRef PoolingParameter pooling_param();
  public native PoolingParameter release_pooling_param();
  public native PoolingParameter mutable_pooling_param();
  public native void set_allocated_pooling_param(PoolingParameter pooling_param);

  // optional .caffe.PowerParameter power_param = 122;
  public native @Cast("bool") boolean has_power_param();
  public native void clear_power_param();
  @MemberGetter public static native int kPowerParamFieldNumber();
  public static final int kPowerParamFieldNumber = kPowerParamFieldNumber();
  public native @Const @ByRef PowerParameter power_param();
  public native PowerParameter release_power_param();
  public native PowerParameter mutable_power_param();
  public native void set_allocated_power_param(PowerParameter power_param);

  // optional .caffe.ReLUParameter relu_param = 123;
  public native @Cast("bool") boolean has_relu_param();
  public native void clear_relu_param();
  @MemberGetter public static native int kReluParamFieldNumber();
  public static final int kReluParamFieldNumber = kReluParamFieldNumber();
  public native @Const @ByRef ReLUParameter relu_param();
  public native ReLUParameter release_relu_param();
  public native ReLUParameter mutable_relu_param();
  public native void set_allocated_relu_param(ReLUParameter relu_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  public native @Cast("bool") boolean has_sigmoid_param();
  public native void clear_sigmoid_param();
  @MemberGetter public static native int kSigmoidParamFieldNumber();
  public static final int kSigmoidParamFieldNumber = kSigmoidParamFieldNumber();
  public native @Const @ByRef SigmoidParameter sigmoid_param();
  public native SigmoidParameter release_sigmoid_param();
  public native SigmoidParameter mutable_sigmoid_param();
  public native void set_allocated_sigmoid_param(SigmoidParameter sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  public native @Cast("bool") boolean has_softmax_param();
  public native void clear_softmax_param();
  @MemberGetter public static native int kSoftmaxParamFieldNumber();
  public static final int kSoftmaxParamFieldNumber = kSoftmaxParamFieldNumber();
  public native @Const @ByRef SoftmaxParameter softmax_param();
  public native SoftmaxParameter release_softmax_param();
  public native SoftmaxParameter mutable_softmax_param();
  public native void set_allocated_softmax_param(SoftmaxParameter softmax_param);

  // optional .caffe.SliceParameter slice_param = 126;
  public native @Cast("bool") boolean has_slice_param();
  public native void clear_slice_param();
  @MemberGetter public static native int kSliceParamFieldNumber();
  public static final int kSliceParamFieldNumber = kSliceParamFieldNumber();
  public native @Const @ByRef SliceParameter slice_param();
  public native SliceParameter release_slice_param();
  public native SliceParameter mutable_slice_param();
  public native void set_allocated_slice_param(SliceParameter slice_param);

  // optional .caffe.TanHParameter tanh_param = 127;
  public native @Cast("bool") boolean has_tanh_param();
  public native void clear_tanh_param();
  @MemberGetter public static native int kTanhParamFieldNumber();
  public static final int kTanhParamFieldNumber = kTanhParamFieldNumber();
  public native @Const @ByRef TanHParameter tanh_param();
  public native TanHParameter release_tanh_param();
  public native TanHParameter mutable_tanh_param();
  public native void set_allocated_tanh_param(TanHParameter tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 128;
  public native @Cast("bool") boolean has_threshold_param();
  public native void clear_threshold_param();
  @MemberGetter public static native int kThresholdParamFieldNumber();
  public static final int kThresholdParamFieldNumber = kThresholdParamFieldNumber();
  public native @Const @ByRef ThresholdParameter threshold_param();
  public native ThresholdParameter release_threshold_param();
  public native ThresholdParameter mutable_threshold_param();
  public native void set_allocated_threshold_param(ThresholdParameter threshold_param);

  // optional .caffe.WindowDataParameter window_data_param = 129;
  public native @Cast("bool") boolean has_window_data_param();
  public native void clear_window_data_param();
  @MemberGetter public static native int kWindowDataParamFieldNumber();
  public static final int kWindowDataParamFieldNumber = kWindowDataParamFieldNumber();
  public native @Const @ByRef WindowDataParameter window_data_param();
  public native WindowDataParameter release_window_data_param();
  public native WindowDataParameter mutable_window_data_param();
  public native void set_allocated_window_data_param(WindowDataParameter window_data_param);

  // optional .caffe.PythonParameter python_param = 130;
  public native @Cast("bool") boolean has_python_param();
  public native void clear_python_param();
  @MemberGetter public static native int kPythonParamFieldNumber();
  public static final int kPythonParamFieldNumber = kPythonParamFieldNumber();
  public native @Const @ByRef PythonParameter python_param();
  public native PythonParameter release_python_param();
  public native PythonParameter mutable_python_param();
  public native void set_allocated_python_param(PythonParameter python_param);

  // optional .caffe.PReLUParameter prelu_param = 131;
  public native @Cast("bool") boolean has_prelu_param();
  public native void clear_prelu_param();
  @MemberGetter public static native int kPreluParamFieldNumber();
  public static final int kPreluParamFieldNumber = kPreluParamFieldNumber();
  public native @Const @ByRef PReLUParameter prelu_param();
  public native PReLUParameter release_prelu_param();
  public native PReLUParameter mutable_prelu_param();
  public native void set_allocated_prelu_param(PReLUParameter prelu_param);

  // optional .caffe.SPPParameter spp_param = 132;
  public native @Cast("bool") boolean has_spp_param();
  public native void clear_spp_param();
  @MemberGetter public static native int kSppParamFieldNumber();
  public static final int kSppParamFieldNumber = kSppParamFieldNumber();
  public native @Const @ByRef SPPParameter spp_param();
  public native SPPParameter release_spp_param();
  public native SPPParameter mutable_spp_param();
  public native void set_allocated_spp_param(SPPParameter spp_param);

  // optional .caffe.ReshapeParameter reshape_param = 133;
  public native @Cast("bool") boolean has_reshape_param();
  public native void clear_reshape_param();
  @MemberGetter public static native int kReshapeParamFieldNumber();
  public static final int kReshapeParamFieldNumber = kReshapeParamFieldNumber();
  public native @Const @ByRef ReshapeParameter reshape_param();
  public native ReshapeParameter release_reshape_param();
  public native ReshapeParameter mutable_reshape_param();
  public native void set_allocated_reshape_param(ReshapeParameter reshape_param);

  // optional .caffe.LogParameter log_param = 134;
  public native @Cast("bool") boolean has_log_param();
  public native void clear_log_param();
  @MemberGetter public static native int kLogParamFieldNumber();
  public static final int kLogParamFieldNumber = kLogParamFieldNumber();
  public native @Const @ByRef LogParameter log_param();
  public native LogParameter release_log_param();
  public native LogParameter mutable_log_param();
  public native void set_allocated_log_param(LogParameter log_param);

  // optional .caffe.FlattenParameter flatten_param = 135;
  public native @Cast("bool") boolean has_flatten_param();
  public native void clear_flatten_param();
  @MemberGetter public static native int kFlattenParamFieldNumber();
  public static final int kFlattenParamFieldNumber = kFlattenParamFieldNumber();
  public native @Const @ByRef FlattenParameter flatten_param();
  public native FlattenParameter release_flatten_param();
  public native FlattenParameter mutable_flatten_param();
  public native void set_allocated_flatten_param(FlattenParameter flatten_param);

  // optional .caffe.ReductionParameter reduction_param = 136;
  public native @Cast("bool") boolean has_reduction_param();
  public native void clear_reduction_param();
  @MemberGetter public static native int kReductionParamFieldNumber();
  public static final int kReductionParamFieldNumber = kReductionParamFieldNumber();
  public native @Const @ByRef ReductionParameter reduction_param();
  public native ReductionParameter release_reduction_param();
  public native ReductionParameter mutable_reduction_param();
  public native void set_allocated_reduction_param(ReductionParameter reduction_param);

  // optional .caffe.EmbedParameter embed_param = 137;
  public native @Cast("bool") boolean has_embed_param();
  public native void clear_embed_param();
  @MemberGetter public static native int kEmbedParamFieldNumber();
  public static final int kEmbedParamFieldNumber = kEmbedParamFieldNumber();
  public native @Const @ByRef EmbedParameter embed_param();
  public native EmbedParameter release_embed_param();
  public native EmbedParameter mutable_embed_param();
  public native void set_allocated_embed_param(EmbedParameter embed_param);

  // optional .caffe.TileParameter tile_param = 138;
  public native @Cast("bool") boolean has_tile_param();
  public native void clear_tile_param();
  @MemberGetter public static native int kTileParamFieldNumber();
  public static final int kTileParamFieldNumber = kTileParamFieldNumber();
  public native @Const @ByRef TileParameter tile_param();
  public native TileParameter release_tile_param();
  public native TileParameter mutable_tile_param();
  public native void set_allocated_tile_param(TileParameter tile_param);

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  public native @Cast("bool") boolean has_batch_norm_param();
  public native void clear_batch_norm_param();
  @MemberGetter public static native int kBatchNormParamFieldNumber();
  public static final int kBatchNormParamFieldNumber = kBatchNormParamFieldNumber();
  public native @Const @ByRef BatchNormParameter batch_norm_param();
  public native BatchNormParameter release_batch_norm_param();
  public native BatchNormParameter mutable_batch_norm_param();
  public native void set_allocated_batch_norm_param(BatchNormParameter batch_norm_param);

  // optional .caffe.ELUParameter elu_param = 140;
  public native @Cast("bool") boolean has_elu_param();
  public native void clear_elu_param();
  @MemberGetter public static native int kEluParamFieldNumber();
  public static final int kEluParamFieldNumber = kEluParamFieldNumber();
  public native @Const @ByRef ELUParameter elu_param();
  public native ELUParameter release_elu_param();
  public native ELUParameter mutable_elu_param();
  public native void set_allocated_elu_param(ELUParameter elu_param);

  // optional .caffe.BiasParameter bias_param = 141;
  public native @Cast("bool") boolean has_bias_param();
  public native void clear_bias_param();
  @MemberGetter public static native int kBiasParamFieldNumber();
  public static final int kBiasParamFieldNumber = kBiasParamFieldNumber();
  public native @Const @ByRef BiasParameter bias_param();
  public native BiasParameter release_bias_param();
  public native BiasParameter mutable_bias_param();
  public native void set_allocated_bias_param(BiasParameter bias_param);

  // optional .caffe.ScaleParameter scale_param = 142;
  public native @Cast("bool") boolean has_scale_param();
  public native void clear_scale_param();
  @MemberGetter public static native int kScaleParamFieldNumber();
  public static final int kScaleParamFieldNumber = kScaleParamFieldNumber();
  public native @Const @ByRef ScaleParameter scale_param();
  public native ScaleParameter release_scale_param();
  public native ScaleParameter mutable_scale_param();
  public native void set_allocated_scale_param(ScaleParameter scale_param);

  // optional .caffe.InputParameter input_param = 143;
  public native @Cast("bool") boolean has_input_param();
  public native void clear_input_param();
  @MemberGetter public static native int kInputParamFieldNumber();
  public static final int kInputParamFieldNumber = kInputParamFieldNumber();
  public native @Const @ByRef InputParameter input_param();
  public native InputParameter release_input_param();
  public native InputParameter mutable_input_param();
  public native void set_allocated_input_param(InputParameter input_param);

  // optional .caffe.CropParameter crop_param = 144;
  public native @Cast("bool") boolean has_crop_param();
  public native void clear_crop_param();
  @MemberGetter public static native int kCropParamFieldNumber();
  public static final int kCropParamFieldNumber = kCropParamFieldNumber();
  public native @Const @ByRef CropParameter crop_param();
  public native CropParameter release_crop_param();
  public native CropParameter mutable_crop_param();
  public native void set_allocated_crop_param(CropParameter crop_param);

  // optional .caffe.ParameterParameter parameter_param = 145;
  public native @Cast("bool") boolean has_parameter_param();
  public native void clear_parameter_param();
  @MemberGetter public static native int kParameterParamFieldNumber();
  public static final int kParameterParamFieldNumber = kParameterParamFieldNumber();
  public native @Const @ByRef ParameterParameter parameter_param();
  public native ParameterParameter release_parameter_param();
  public native ParameterParameter mutable_parameter_param();
  public native void set_allocated_parameter_param(ParameterParameter parameter_param);

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  public native @Cast("bool") boolean has_recurrent_param();
  public native void clear_recurrent_param();
  @MemberGetter public static native int kRecurrentParamFieldNumber();
  public static final int kRecurrentParamFieldNumber = kRecurrentParamFieldNumber();
  public native @Const @ByRef RecurrentParameter recurrent_param();
  public native RecurrentParameter release_recurrent_param();
  public native RecurrentParameter mutable_recurrent_param();
  public native void set_allocated_recurrent_param(RecurrentParameter recurrent_param);

  // optional .caffe.Phase phase = 10;
  public native @Cast("bool") boolean has_phase();
  public native void clear_phase();
  @MemberGetter public static native int kPhaseFieldNumber();
  public static final int kPhaseFieldNumber = kPhaseFieldNumber();
  public native @Cast("caffe::Phase") int phase();
  public native void set_phase(@Cast("caffe::Phase") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class TransformationParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TransformationParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TransformationParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TransformationParameter position(long position) {
        return (TransformationParameter)super.position(position);
    }

  public TransformationParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public TransformationParameter(@Const @ByRef TransformationParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef TransformationParameter from);

  public native @ByRef @Name("operator =") TransformationParameter put(@Const @ByRef TransformationParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef TransformationParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const TransformationParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(TransformationParameter other);
  

  // implements Message ----------------------------------------------

  public native final TransformationParameter New();

  public native final TransformationParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef TransformationParameter from);
  public native void MergeFrom(@Const @ByRef TransformationParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mean_value = 5;
  public native int mean_value_size();
  public native void clear_mean_value();
  @MemberGetter public static native int kMeanValueFieldNumber();
  public static final int kMeanValueFieldNumber = kMeanValueFieldNumber();
  public native float mean_value(int index);
  public native void set_mean_value(int index, float value);
  public native void add_mean_value(float value);

  // optional string mean_file = 4;
  public native @Cast("bool") boolean has_mean_file();
  public native void clear_mean_file();
  @MemberGetter public static native int kMeanFileFieldNumber();
  public static final int kMeanFileFieldNumber = kMeanFileFieldNumber();
  public native @StdString BytePointer mean_file();
  public native void set_mean_file(@StdString BytePointer value);
  public native void set_mean_file(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_mean_file(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_mean_file(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_mean_file();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_mean_file();
  public native void set_allocated_mean_file(@StdString @Cast({"char*", "std::string*"}) BytePointer mean_file);

  // optional uint32 crop_size = 3 [default = 0];
  public native @Cast("bool") boolean has_crop_size();
  public native void clear_crop_size();
  @MemberGetter public static native int kCropSizeFieldNumber();
  public static final int kCropSizeFieldNumber = kCropSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int crop_size();
  public native void set_crop_size(@Cast("google::protobuf::uint32") int value);

  // optional bool mirror = 2 [default = false];
  public native @Cast("bool") boolean has_mirror();
  public native void clear_mirror();
  @MemberGetter public static native int kMirrorFieldNumber();
  public static final int kMirrorFieldNumber = kMirrorFieldNumber();
  public native @Cast("bool") boolean mirror();
  public native void set_mirror(@Cast("bool") boolean value);

  // optional bool force_color = 6 [default = false];
  public native @Cast("bool") boolean has_force_color();
  public native void clear_force_color();
  @MemberGetter public static native int kForceColorFieldNumber();
  public static final int kForceColorFieldNumber = kForceColorFieldNumber();
  public native @Cast("bool") boolean force_color();
  public native void set_force_color(@Cast("bool") boolean value);

  // optional bool force_gray = 7 [default = false];
  public native @Cast("bool") boolean has_force_gray();
  public native void clear_force_gray();
  @MemberGetter public static native int kForceGrayFieldNumber();
  public static final int kForceGrayFieldNumber = kForceGrayFieldNumber();
  public native @Cast("bool") boolean force_gray();
  public native void set_force_gray(@Cast("bool") boolean value);

  // optional float scale = 1 [default = 1];
  public native @Cast("bool") boolean has_scale();
  public native void clear_scale();
  @MemberGetter public static native int kScaleFieldNumber();
  public static final int kScaleFieldNumber = kScaleFieldNumber();
  public native float scale();
  public native void set_scale(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class LossParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LossParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LossParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LossParameter position(long position) {
        return (LossParameter)super.position(position);
    }

  public LossParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public LossParameter(@Const @ByRef LossParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef LossParameter from);

  public native @ByRef @Name("operator =") LossParameter put(@Const @ByRef LossParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef LossParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const LossParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(LossParameter other);
  

  // implements Message ----------------------------------------------

  public native final LossParameter New();

  public native final LossParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef LossParameter from);
  public native void MergeFrom(@Const @ByRef LossParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::LossParameter::NormalizationMode") int FULL();
  public static final int FULL = FULL();
  @MemberGetter public static native @Cast("const caffe::LossParameter::NormalizationMode") int VALID();
  public static final int VALID = VALID();
  @MemberGetter public static native @Cast("const caffe::LossParameter::NormalizationMode") int BATCH_SIZE();
  public static final int BATCH_SIZE = BATCH_SIZE();
  @MemberGetter public static native @Cast("const caffe::LossParameter::NormalizationMode") int NONE();
  public static final int NONE = NONE();
  public static native @Cast("bool") boolean NormalizationMode_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::LossParameter::NormalizationMode") int NormalizationMode_MIN();
  public static final int NormalizationMode_MIN = NormalizationMode_MIN();
  @MemberGetter public static native @Cast("const caffe::LossParameter::NormalizationMode") int NormalizationMode_MAX();
  public static final int NormalizationMode_MAX = NormalizationMode_MAX();
  @MemberGetter public static native int NormalizationMode_ARRAYSIZE();
  public static final int NormalizationMode_ARRAYSIZE = NormalizationMode_ARRAYSIZE();
  public static native @Const EnumDescriptor NormalizationMode_descriptor();
  public static native @StdString BytePointer NormalizationMode_Name(@Cast("caffe::LossParameter::NormalizationMode") int value);
  public static native @Cast("bool") boolean NormalizationMode_Parse(@StdString BytePointer name,
        @Cast("caffe::LossParameter::NormalizationMode*") IntPointer value);
  public static native @Cast("bool") boolean NormalizationMode_Parse(@StdString String name,
        @Cast("caffe::LossParameter::NormalizationMode*") IntBuffer value);
  public static native @Cast("bool") boolean NormalizationMode_Parse(@StdString BytePointer name,
        @Cast("caffe::LossParameter::NormalizationMode*") int[] value);
  public static native @Cast("bool") boolean NormalizationMode_Parse(@StdString String name,
        @Cast("caffe::LossParameter::NormalizationMode*") IntPointer value);
  public static native @Cast("bool") boolean NormalizationMode_Parse(@StdString BytePointer name,
        @Cast("caffe::LossParameter::NormalizationMode*") IntBuffer value);
  public static native @Cast("bool") boolean NormalizationMode_Parse(@StdString String name,
        @Cast("caffe::LossParameter::NormalizationMode*") int[] value);

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  public native @Cast("bool") boolean has_ignore_label();
  public native void clear_ignore_label();
  @MemberGetter public static native int kIgnoreLabelFieldNumber();
  public static final int kIgnoreLabelFieldNumber = kIgnoreLabelFieldNumber();
  public native @Cast("google::protobuf::int32") int ignore_label();
  public native void set_ignore_label(@Cast("google::protobuf::int32") int value);

  // optional bool normalize = 2;
  public native @Cast("bool") boolean has_normalize();
  public native void clear_normalize();
  @MemberGetter public static native int kNormalizeFieldNumber();
  public static final int kNormalizeFieldNumber = kNormalizeFieldNumber();
  public native @Cast("bool") boolean normalize();
  public native void set_normalize(@Cast("bool") boolean value);

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  public native @Cast("bool") boolean has_normalization();
  public native void clear_normalization();
  @MemberGetter public static native int kNormalizationFieldNumber();
  public static final int kNormalizationFieldNumber = kNormalizationFieldNumber();
  public native @Cast("caffe::LossParameter_NormalizationMode") int normalization();
  public native void set_normalization(@Cast("caffe::LossParameter_NormalizationMode") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class AccuracyParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AccuracyParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AccuracyParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public AccuracyParameter position(long position) {
        return (AccuracyParameter)super.position(position);
    }

  public AccuracyParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public AccuracyParameter(@Const @ByRef AccuracyParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef AccuracyParameter from);

  public native @ByRef @Name("operator =") AccuracyParameter put(@Const @ByRef AccuracyParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef AccuracyParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const AccuracyParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(AccuracyParameter other);
  

  // implements Message ----------------------------------------------

  public native final AccuracyParameter New();

  public native final AccuracyParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef AccuracyParameter from);
  public native void MergeFrom(@Const @ByRef AccuracyParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 3;
  public native @Cast("bool") boolean has_ignore_label();
  public native void clear_ignore_label();
  @MemberGetter public static native int kIgnoreLabelFieldNumber();
  public static final int kIgnoreLabelFieldNumber = kIgnoreLabelFieldNumber();
  public native @Cast("google::protobuf::int32") int ignore_label();
  public native void set_ignore_label(@Cast("google::protobuf::int32") int value);

  // optional uint32 top_k = 1 [default = 1];
  public native @Cast("bool") boolean has_top_k();
  public native void clear_top_k();
  @MemberGetter public static native int kTopKFieldNumber();
  public static final int kTopKFieldNumber = kTopKFieldNumber();
  public native @Cast("google::protobuf::uint32") int top_k();
  public native void set_top_k(@Cast("google::protobuf::uint32") int value);

  // optional int32 axis = 2 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ArgMaxParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ArgMaxParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ArgMaxParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ArgMaxParameter position(long position) {
        return (ArgMaxParameter)super.position(position);
    }

  public ArgMaxParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ArgMaxParameter(@Const @ByRef ArgMaxParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ArgMaxParameter from);

  public native @ByRef @Name("operator =") ArgMaxParameter put(@Const @ByRef ArgMaxParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ArgMaxParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ArgMaxParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ArgMaxParameter other);
  

  // implements Message ----------------------------------------------

  public native final ArgMaxParameter New();

  public native final ArgMaxParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ArgMaxParameter from);
  public native void MergeFrom(@Const @ByRef ArgMaxParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  public native @Cast("bool") boolean has_out_max_val();
  public native void clear_out_max_val();
  @MemberGetter public static native int kOutMaxValFieldNumber();
  public static final int kOutMaxValFieldNumber = kOutMaxValFieldNumber();
  public native @Cast("bool") boolean out_max_val();
  public native void set_out_max_val(@Cast("bool") boolean value);

  // optional int32 axis = 3;
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);

  // optional uint32 top_k = 2 [default = 1];
  public native @Cast("bool") boolean has_top_k();
  public native void clear_top_k();
  @MemberGetter public static native int kTopKFieldNumber();
  public static final int kTopKFieldNumber = kTopKFieldNumber();
  public native @Cast("google::protobuf::uint32") int top_k();
  public native void set_top_k(@Cast("google::protobuf::uint32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ConcatParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ConcatParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ConcatParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ConcatParameter position(long position) {
        return (ConcatParameter)super.position(position);
    }

  public ConcatParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ConcatParameter(@Const @ByRef ConcatParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ConcatParameter from);

  public native @ByRef @Name("operator =") ConcatParameter put(@Const @ByRef ConcatParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ConcatParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ConcatParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ConcatParameter other);
  

  // implements Message ----------------------------------------------

  public native final ConcatParameter New();

  public native final ConcatParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ConcatParameter from);
  public native void MergeFrom(@Const @ByRef ConcatParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 concat_dim = 1 [default = 1];
  public native @Cast("bool") boolean has_concat_dim();
  public native void clear_concat_dim();
  @MemberGetter public static native int kConcatDimFieldNumber();
  public static final int kConcatDimFieldNumber = kConcatDimFieldNumber();
  public native @Cast("google::protobuf::uint32") int concat_dim();
  public native void set_concat_dim(@Cast("google::protobuf::uint32") int value);

  // optional int32 axis = 2 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class BatchNormParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BatchNormParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BatchNormParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public BatchNormParameter position(long position) {
        return (BatchNormParameter)super.position(position);
    }

  public BatchNormParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public BatchNormParameter(@Const @ByRef BatchNormParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef BatchNormParameter from);

  public native @ByRef @Name("operator =") BatchNormParameter put(@Const @ByRef BatchNormParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef BatchNormParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const BatchNormParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(BatchNormParameter other);
  

  // implements Message ----------------------------------------------

  public native final BatchNormParameter New();

  public native final BatchNormParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef BatchNormParameter from);
  public native void MergeFrom(@Const @ByRef BatchNormParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1;
  public native @Cast("bool") boolean has_use_global_stats();
  public native void clear_use_global_stats();
  @MemberGetter public static native int kUseGlobalStatsFieldNumber();
  public static final int kUseGlobalStatsFieldNumber = kUseGlobalStatsFieldNumber();
  public native @Cast("bool") boolean use_global_stats();
  public native void set_use_global_stats(@Cast("bool") boolean value);

  // optional float moving_average_fraction = 2 [default = 0.999];
  public native @Cast("bool") boolean has_moving_average_fraction();
  public native void clear_moving_average_fraction();
  @MemberGetter public static native int kMovingAverageFractionFieldNumber();
  public static final int kMovingAverageFractionFieldNumber = kMovingAverageFractionFieldNumber();
  public native float moving_average_fraction();
  public native void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 1e-05];
  public native @Cast("bool") boolean has_eps();
  public native void clear_eps();
  @MemberGetter public static native int kEpsFieldNumber();
  public static final int kEpsFieldNumber = kEpsFieldNumber();
  public native float eps();
  public native void set_eps(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class BiasParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BiasParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BiasParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public BiasParameter position(long position) {
        return (BiasParameter)super.position(position);
    }

  public BiasParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public BiasParameter(@Const @ByRef BiasParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef BiasParameter from);

  public native @ByRef @Name("operator =") BiasParameter put(@Const @ByRef BiasParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef BiasParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const BiasParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(BiasParameter other);
  

  // implements Message ----------------------------------------------

  public native final BiasParameter New();

  public native final BiasParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef BiasParameter from);
  public native void MergeFrom(@Const @ByRef BiasParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 3;
  public native @Cast("bool") boolean has_filler();
  public native void clear_filler();
  @MemberGetter public static native int kFillerFieldNumber();
  public static final int kFillerFieldNumber = kFillerFieldNumber();
  public native @Const @ByRef FillerParameter filler();
  public native FillerParameter release_filler();
  public native FillerParameter mutable_filler();
  public native void set_allocated_filler(FillerParameter filler);

  // optional int32 axis = 1 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);

  // optional int32 num_axes = 2 [default = 1];
  public native @Cast("bool") boolean has_num_axes();
  public native void clear_num_axes();
  @MemberGetter public static native int kNumAxesFieldNumber();
  public static final int kNumAxesFieldNumber = kNumAxesFieldNumber();
  public native @Cast("google::protobuf::int32") int num_axes();
  public native void set_num_axes(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ContrastiveLossParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ContrastiveLossParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ContrastiveLossParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ContrastiveLossParameter position(long position) {
        return (ContrastiveLossParameter)super.position(position);
    }

  public ContrastiveLossParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ContrastiveLossParameter(@Const @ByRef ContrastiveLossParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ContrastiveLossParameter from);

  public native @ByRef @Name("operator =") ContrastiveLossParameter put(@Const @ByRef ContrastiveLossParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ContrastiveLossParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ContrastiveLossParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ContrastiveLossParameter other);
  

  // implements Message ----------------------------------------------

  public native final ContrastiveLossParameter New();

  public native final ContrastiveLossParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ContrastiveLossParameter from);
  public native void MergeFrom(@Const @ByRef ContrastiveLossParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool legacy_version = 2 [default = false];
  public native @Cast("bool") boolean has_legacy_version();
  public native void clear_legacy_version();
  @MemberGetter public static native int kLegacyVersionFieldNumber();
  public static final int kLegacyVersionFieldNumber = kLegacyVersionFieldNumber();
  public native @Cast("bool") boolean legacy_version();
  public native void set_legacy_version(@Cast("bool") boolean value);

  // optional float margin = 1 [default = 1];
  public native @Cast("bool") boolean has_margin();
  public native void clear_margin();
  @MemberGetter public static native int kMarginFieldNumber();
  public static final int kMarginFieldNumber = kMarginFieldNumber();
  public native float margin();
  public native void set_margin(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ConvolutionParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ConvolutionParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ConvolutionParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ConvolutionParameter position(long position) {
        return (ConvolutionParameter)super.position(position);
    }

  public ConvolutionParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ConvolutionParameter(@Const @ByRef ConvolutionParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ConvolutionParameter from);

  public native @ByRef @Name("operator =") ConvolutionParameter put(@Const @ByRef ConvolutionParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ConvolutionParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ConvolutionParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ConvolutionParameter other);
  

  // implements Message ----------------------------------------------

  public native final ConvolutionParameter New();

  public native final ConvolutionParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ConvolutionParameter from);
  public native void MergeFrom(@Const @ByRef ConvolutionParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::ConvolutionParameter::Engine") int DEFAULT();
  public static final int DEFAULT = DEFAULT();
  @MemberGetter public static native @Cast("const caffe::ConvolutionParameter::Engine") int CAFFE();
  public static final int CAFFE = CAFFE();
  @MemberGetter public static native @Cast("const caffe::ConvolutionParameter::Engine") int CUDNN();
  public static final int CUDNN = CUDNN();
  public static native @Cast("bool") boolean Engine_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::ConvolutionParameter::Engine") int Engine_MIN();
  public static final int Engine_MIN = Engine_MIN();
  @MemberGetter public static native @Cast("const caffe::ConvolutionParameter::Engine") int Engine_MAX();
  public static final int Engine_MAX = Engine_MAX();
  @MemberGetter public static native int Engine_ARRAYSIZE();
  public static final int Engine_ARRAYSIZE = Engine_ARRAYSIZE();
  public static native @Const EnumDescriptor Engine_descriptor();
  public static native @StdString BytePointer Engine_Name(@Cast("caffe::ConvolutionParameter::Engine") int value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::ConvolutionParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::ConvolutionParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::ConvolutionParameter::Engine*") int[] value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::ConvolutionParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::ConvolutionParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::ConvolutionParameter::Engine*") int[] value);

  // accessors -------------------------------------------------------

  // repeated uint32 pad = 3;
  public native int pad_size();
  public native void clear_pad();
  @MemberGetter public static native int kPadFieldNumber();
  public static final int kPadFieldNumber = kPadFieldNumber();
  public native @Cast("google::protobuf::uint32") int pad(int index);
  public native void set_pad(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_pad(@Cast("google::protobuf::uint32") int value);

  // repeated uint32 kernel_size = 4;
  public native int kernel_size_size();
  public native void clear_kernel_size();
  @MemberGetter public static native int kKernelSizeFieldNumber();
  public static final int kKernelSizeFieldNumber = kKernelSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int kernel_size(int index);
  public native void set_kernel_size(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_kernel_size(@Cast("google::protobuf::uint32") int value);

  // repeated uint32 stride = 6;
  public native int stride_size();
  public native void clear_stride();
  @MemberGetter public static native int kStrideFieldNumber();
  public static final int kStrideFieldNumber = kStrideFieldNumber();
  public native @Cast("google::protobuf::uint32") int stride(int index);
  public native void set_stride(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_stride(@Cast("google::protobuf::uint32") int value);

  // repeated uint32 dilation = 18;
  public native int dilation_size();
  public native void clear_dilation();
  @MemberGetter public static native int kDilationFieldNumber();
  public static final int kDilationFieldNumber = kDilationFieldNumber();
  public native @Cast("google::protobuf::uint32") int dilation(int index);
  public native void set_dilation(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_dilation(@Cast("google::protobuf::uint32") int value);

  // optional .caffe.FillerParameter weight_filler = 7;
  public native @Cast("bool") boolean has_weight_filler();
  public native void clear_weight_filler();
  @MemberGetter public static native int kWeightFillerFieldNumber();
  public static final int kWeightFillerFieldNumber = kWeightFillerFieldNumber();
  public native @Const @ByRef FillerParameter weight_filler();
  public native FillerParameter release_weight_filler();
  public native FillerParameter mutable_weight_filler();
  public native void set_allocated_weight_filler(FillerParameter weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  public native @Cast("bool") boolean has_bias_filler();
  public native void clear_bias_filler();
  @MemberGetter public static native int kBiasFillerFieldNumber();
  public static final int kBiasFillerFieldNumber = kBiasFillerFieldNumber();
  public native @Const @ByRef FillerParameter bias_filler();
  public native FillerParameter release_bias_filler();
  public native FillerParameter mutable_bias_filler();
  public native void set_allocated_bias_filler(FillerParameter bias_filler);

  // optional uint32 num_output = 1;
  public native @Cast("bool") boolean has_num_output();
  public native void clear_num_output();
  @MemberGetter public static native int kNumOutputFieldNumber();
  public static final int kNumOutputFieldNumber = kNumOutputFieldNumber();
  public native @Cast("google::protobuf::uint32") int num_output();
  public native void set_num_output(@Cast("google::protobuf::uint32") int value);

  // optional uint32 pad_h = 9 [default = 0];
  public native @Cast("bool") boolean has_pad_h();
  public native void clear_pad_h();
  @MemberGetter public static native int kPadHFieldNumber();
  public static final int kPadHFieldNumber = kPadHFieldNumber();
  public native @Cast("google::protobuf::uint32") int pad_h();
  public native void set_pad_h(@Cast("google::protobuf::uint32") int value);

  // optional uint32 pad_w = 10 [default = 0];
  public native @Cast("bool") boolean has_pad_w();
  public native void clear_pad_w();
  @MemberGetter public static native int kPadWFieldNumber();
  public static final int kPadWFieldNumber = kPadWFieldNumber();
  public native @Cast("google::protobuf::uint32") int pad_w();
  public native void set_pad_w(@Cast("google::protobuf::uint32") int value);

  // optional uint32 kernel_h = 11;
  public native @Cast("bool") boolean has_kernel_h();
  public native void clear_kernel_h();
  @MemberGetter public static native int kKernelHFieldNumber();
  public static final int kKernelHFieldNumber = kKernelHFieldNumber();
  public native @Cast("google::protobuf::uint32") int kernel_h();
  public native void set_kernel_h(@Cast("google::protobuf::uint32") int value);

  // optional uint32 kernel_w = 12;
  public native @Cast("bool") boolean has_kernel_w();
  public native void clear_kernel_w();
  @MemberGetter public static native int kKernelWFieldNumber();
  public static final int kKernelWFieldNumber = kKernelWFieldNumber();
  public native @Cast("google::protobuf::uint32") int kernel_w();
  public native void set_kernel_w(@Cast("google::protobuf::uint32") int value);

  // optional uint32 stride_h = 13;
  public native @Cast("bool") boolean has_stride_h();
  public native void clear_stride_h();
  @MemberGetter public static native int kStrideHFieldNumber();
  public static final int kStrideHFieldNumber = kStrideHFieldNumber();
  public native @Cast("google::protobuf::uint32") int stride_h();
  public native void set_stride_h(@Cast("google::protobuf::uint32") int value);

  // optional uint32 stride_w = 14;
  public native @Cast("bool") boolean has_stride_w();
  public native void clear_stride_w();
  @MemberGetter public static native int kStrideWFieldNumber();
  public static final int kStrideWFieldNumber = kStrideWFieldNumber();
  public native @Cast("google::protobuf::uint32") int stride_w();
  public native void set_stride_w(@Cast("google::protobuf::uint32") int value);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  public native @Cast("bool") boolean has_engine();
  public native void clear_engine();
  @MemberGetter public static native int kEngineFieldNumber();
  public static final int kEngineFieldNumber = kEngineFieldNumber();
  public native @Cast("caffe::ConvolutionParameter_Engine") int engine();
  public native void set_engine(@Cast("caffe::ConvolutionParameter_Engine") int value);

  // optional bool force_nd_im2col = 17 [default = false];
  public native @Cast("bool") boolean has_force_nd_im2col();
  public native void clear_force_nd_im2col();
  @MemberGetter public static native int kForceNdIm2ColFieldNumber();
  public static final int kForceNdIm2ColFieldNumber = kForceNdIm2ColFieldNumber();
  public native @Cast("bool") boolean force_nd_im2col();
  public native void set_force_nd_im2col(@Cast("bool") boolean value);

  // optional int32 axis = 16 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);

  // optional bool bias_term = 2 [default = true];
  public native @Cast("bool") boolean has_bias_term();
  public native void clear_bias_term();
  @MemberGetter public static native int kBiasTermFieldNumber();
  public static final int kBiasTermFieldNumber = kBiasTermFieldNumber();
  public native @Cast("bool") boolean bias_term();
  public native void set_bias_term(@Cast("bool") boolean value);

  // optional uint32 group = 5 [default = 1];
  public native @Cast("bool") boolean has_group();
  public native void clear_group();
  @MemberGetter public static native int kGroupFieldNumber();
  public static final int kGroupFieldNumber = kGroupFieldNumber();
  public native @Cast("google::protobuf::uint32") int group();
  public native void set_group(@Cast("google::protobuf::uint32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class CropParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CropParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CropParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public CropParameter position(long position) {
        return (CropParameter)super.position(position);
    }

  public CropParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public CropParameter(@Const @ByRef CropParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef CropParameter from);

  public native @ByRef @Name("operator =") CropParameter put(@Const @ByRef CropParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef CropParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const CropParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(CropParameter other);
  

  // implements Message ----------------------------------------------

  public native final CropParameter New();

  public native final CropParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef CropParameter from);
  public native void MergeFrom(@Const @ByRef CropParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 offset = 2;
  public native int offset_size();
  public native void clear_offset();
  @MemberGetter public static native int kOffsetFieldNumber();
  public static final int kOffsetFieldNumber = kOffsetFieldNumber();
  public native @Cast("google::protobuf::uint32") int offset(int index);
  public native void set_offset(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_offset(@Cast("google::protobuf::uint32") int value);

  // optional int32 axis = 1 [default = 2];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class DataParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DataParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DataParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DataParameter position(long position) {
        return (DataParameter)super.position(position);
    }

  public DataParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public DataParameter(@Const @ByRef DataParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef DataParameter from);

  public native @ByRef @Name("operator =") DataParameter put(@Const @ByRef DataParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef DataParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const DataParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(DataParameter other);
  

  // implements Message ----------------------------------------------

  public native final DataParameter New();

  public native final DataParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef DataParameter from);
  public native void MergeFrom(@Const @ByRef DataParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::DataParameter::DB") int LEVELDB();
  public static final int LEVELDB = LEVELDB();
  @MemberGetter public static native @Cast("const caffe::DataParameter::DB") int LMDB();
  public static final int LMDB = LMDB();
  public static native @Cast("bool") boolean DB_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::DataParameter::DB") int DB_MIN();
  public static final int DB_MIN = DB_MIN();
  @MemberGetter public static native @Cast("const caffe::DataParameter::DB") int DB_MAX();
  public static final int DB_MAX = DB_MAX();
  @MemberGetter public static native int DB_ARRAYSIZE();
  public static final int DB_ARRAYSIZE = DB_ARRAYSIZE();
  public static native @Const EnumDescriptor DB_descriptor();
  public static native @StdString BytePointer DB_Name(@Cast("caffe::DataParameter::DB") int value);
  public static native @Cast("bool") boolean DB_Parse(@StdString BytePointer name,
        @Cast("caffe::DataParameter::DB*") IntPointer value);
  public static native @Cast("bool") boolean DB_Parse(@StdString String name,
        @Cast("caffe::DataParameter::DB*") IntBuffer value);
  public static native @Cast("bool") boolean DB_Parse(@StdString BytePointer name,
        @Cast("caffe::DataParameter::DB*") int[] value);
  public static native @Cast("bool") boolean DB_Parse(@StdString String name,
        @Cast("caffe::DataParameter::DB*") IntPointer value);
  public static native @Cast("bool") boolean DB_Parse(@StdString BytePointer name,
        @Cast("caffe::DataParameter::DB*") IntBuffer value);
  public static native @Cast("bool") boolean DB_Parse(@StdString String name,
        @Cast("caffe::DataParameter::DB*") int[] value);

  // accessors -------------------------------------------------------

  // optional string source = 1;
  public native @Cast("bool") boolean has_source();
  public native void clear_source();
  @MemberGetter public static native int kSourceFieldNumber();
  public static final int kSourceFieldNumber = kSourceFieldNumber();
  public native @StdString BytePointer source();
  public native void set_source(@StdString BytePointer value);
  public native void set_source(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_source(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_source(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_source();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_source();
  public native void set_allocated_source(@StdString @Cast({"char*", "std::string*"}) BytePointer source);

  // optional string mean_file = 3;
  public native @Cast("bool") boolean has_mean_file();
  public native void clear_mean_file();
  @MemberGetter public static native int kMeanFileFieldNumber();
  public static final int kMeanFileFieldNumber = kMeanFileFieldNumber();
  public native @StdString BytePointer mean_file();
  public native void set_mean_file(@StdString BytePointer value);
  public native void set_mean_file(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_mean_file(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_mean_file(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_mean_file();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_mean_file();
  public native void set_allocated_mean_file(@StdString @Cast({"char*", "std::string*"}) BytePointer mean_file);

  // optional uint32 batch_size = 4;
  public native @Cast("bool") boolean has_batch_size();
  public native void clear_batch_size();
  @MemberGetter public static native int kBatchSizeFieldNumber();
  public static final int kBatchSizeFieldNumber = kBatchSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int batch_size();
  public native void set_batch_size(@Cast("google::protobuf::uint32") int value);

  // optional uint32 crop_size = 5 [default = 0];
  public native @Cast("bool") boolean has_crop_size();
  public native void clear_crop_size();
  @MemberGetter public static native int kCropSizeFieldNumber();
  public static final int kCropSizeFieldNumber = kCropSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int crop_size();
  public native void set_crop_size(@Cast("google::protobuf::uint32") int value);

  // optional uint32 rand_skip = 7 [default = 0];
  public native @Cast("bool") boolean has_rand_skip();
  public native void clear_rand_skip();
  @MemberGetter public static native int kRandSkipFieldNumber();
  public static final int kRandSkipFieldNumber = kRandSkipFieldNumber();
  public native @Cast("google::protobuf::uint32") int rand_skip();
  public native void set_rand_skip(@Cast("google::protobuf::uint32") int value);

  // optional bool mirror = 6 [default = false];
  public native @Cast("bool") boolean has_mirror();
  public native void clear_mirror();
  @MemberGetter public static native int kMirrorFieldNumber();
  public static final int kMirrorFieldNumber = kMirrorFieldNumber();
  public native @Cast("bool") boolean mirror();
  public native void set_mirror(@Cast("bool") boolean value);

  // optional bool force_encoded_color = 9 [default = false];
  public native @Cast("bool") boolean has_force_encoded_color();
  public native void clear_force_encoded_color();
  @MemberGetter public static native int kForceEncodedColorFieldNumber();
  public static final int kForceEncodedColorFieldNumber = kForceEncodedColorFieldNumber();
  public native @Cast("bool") boolean force_encoded_color();
  public native void set_force_encoded_color(@Cast("bool") boolean value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  public native @Cast("bool") boolean has_backend();
  public native void clear_backend();
  @MemberGetter public static native int kBackendFieldNumber();
  public static final int kBackendFieldNumber = kBackendFieldNumber();
  public native @Cast("caffe::DataParameter_DB") int backend();
  public native void set_backend(@Cast("caffe::DataParameter_DB") int value);

  // optional float scale = 2 [default = 1];
  public native @Cast("bool") boolean has_scale();
  public native void clear_scale();
  @MemberGetter public static native int kScaleFieldNumber();
  public static final int kScaleFieldNumber = kScaleFieldNumber();
  public native float scale();
  public native void set_scale(float value);

  // optional uint32 prefetch = 10 [default = 4];
  public native @Cast("bool") boolean has_prefetch();
  public native void clear_prefetch();
  @MemberGetter public static native int kPrefetchFieldNumber();
  public static final int kPrefetchFieldNumber = kPrefetchFieldNumber();
  public native @Cast("google::protobuf::uint32") int prefetch();
  public native void set_prefetch(@Cast("google::protobuf::uint32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class DropoutParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DropoutParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DropoutParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DropoutParameter position(long position) {
        return (DropoutParameter)super.position(position);
    }

  public DropoutParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public DropoutParameter(@Const @ByRef DropoutParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef DropoutParameter from);

  public native @ByRef @Name("operator =") DropoutParameter put(@Const @ByRef DropoutParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef DropoutParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const DropoutParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(DropoutParameter other);
  

  // implements Message ----------------------------------------------

  public native final DropoutParameter New();

  public native final DropoutParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef DropoutParameter from);
  public native void MergeFrom(@Const @ByRef DropoutParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  public native @Cast("bool") boolean has_dropout_ratio();
  public native void clear_dropout_ratio();
  @MemberGetter public static native int kDropoutRatioFieldNumber();
  public static final int kDropoutRatioFieldNumber = kDropoutRatioFieldNumber();
  public native float dropout_ratio();
  public native void set_dropout_ratio(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class DummyDataParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DummyDataParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DummyDataParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DummyDataParameter position(long position) {
        return (DummyDataParameter)super.position(position);
    }

  public DummyDataParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public DummyDataParameter(@Const @ByRef DummyDataParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef DummyDataParameter from);

  public native @ByRef @Name("operator =") DummyDataParameter put(@Const @ByRef DummyDataParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef DummyDataParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const DummyDataParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(DummyDataParameter other);
  

  // implements Message ----------------------------------------------

  public native final DummyDataParameter New();

  public native final DummyDataParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef DummyDataParameter from);
  public native void MergeFrom(@Const @ByRef DummyDataParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  public native int data_filler_size();
  public native void clear_data_filler();
  @MemberGetter public static native int kDataFillerFieldNumber();
  public static final int kDataFillerFieldNumber = kDataFillerFieldNumber();
  public native FillerParameter mutable_data_filler(int index);
  public native @Const @ByRef FillerParameter data_filler(int index);
  public native FillerParameter add_data_filler();

  // repeated uint32 num = 2;
  public native int num_size();
  public native void clear_num();
  @MemberGetter public static native int kNumFieldNumber();
  public static final int kNumFieldNumber = kNumFieldNumber();
  public native @Cast("google::protobuf::uint32") int num(int index);
  public native void set_num(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_num(@Cast("google::protobuf::uint32") int value);

  // repeated uint32 channels = 3;
  public native int channels_size();
  public native void clear_channels();
  @MemberGetter public static native int kChannelsFieldNumber();
  public static final int kChannelsFieldNumber = kChannelsFieldNumber();
  public native @Cast("google::protobuf::uint32") int channels(int index);
  public native void set_channels(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_channels(@Cast("google::protobuf::uint32") int value);

  // repeated uint32 height = 4;
  public native int height_size();
  public native void clear_height();
  @MemberGetter public static native int kHeightFieldNumber();
  public static final int kHeightFieldNumber = kHeightFieldNumber();
  public native @Cast("google::protobuf::uint32") int height(int index);
  public native void set_height(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_height(@Cast("google::protobuf::uint32") int value);

  // repeated uint32 width = 5;
  public native int width_size();
  public native void clear_width();
  @MemberGetter public static native int kWidthFieldNumber();
  public static final int kWidthFieldNumber = kWidthFieldNumber();
  public native @Cast("google::protobuf::uint32") int width(int index);
  public native void set_width(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_width(@Cast("google::protobuf::uint32") int value);

  // repeated .caffe.BlobShape shape = 6;
  public native int shape_size();
  public native void clear_shape();
  @MemberGetter public static native int kShapeFieldNumber();
  public static final int kShapeFieldNumber = kShapeFieldNumber();
  public native BlobShape mutable_shape(int index);
  public native @Const @ByRef BlobShape shape(int index);
  public native BlobShape add_shape();
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class EltwiseParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EltwiseParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public EltwiseParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public EltwiseParameter position(long position) {
        return (EltwiseParameter)super.position(position);
    }

  public EltwiseParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public EltwiseParameter(@Const @ByRef EltwiseParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef EltwiseParameter from);

  public native @ByRef @Name("operator =") EltwiseParameter put(@Const @ByRef EltwiseParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef EltwiseParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const EltwiseParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(EltwiseParameter other);
  

  // implements Message ----------------------------------------------

  public native final EltwiseParameter New();

  public native final EltwiseParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef EltwiseParameter from);
  public native void MergeFrom(@Const @ByRef EltwiseParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::EltwiseParameter::EltwiseOp") int PROD();
  public static final int PROD = PROD();
  @MemberGetter public static native @Cast("const caffe::EltwiseParameter::EltwiseOp") int SUM();
  public static final int SUM = SUM();
  @MemberGetter public static native @Cast("const caffe::EltwiseParameter::EltwiseOp") int MAX();
  public static final int MAX = MAX();
  public static native @Cast("bool") boolean EltwiseOp_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::EltwiseParameter::EltwiseOp") int EltwiseOp_MIN();
  public static final int EltwiseOp_MIN = EltwiseOp_MIN();
  @MemberGetter public static native @Cast("const caffe::EltwiseParameter::EltwiseOp") int EltwiseOp_MAX();
  public static final int EltwiseOp_MAX = EltwiseOp_MAX();
  @MemberGetter public static native int EltwiseOp_ARRAYSIZE();
  public static final int EltwiseOp_ARRAYSIZE = EltwiseOp_ARRAYSIZE();
  public static native @Const EnumDescriptor EltwiseOp_descriptor();
  public static native @StdString BytePointer EltwiseOp_Name(@Cast("caffe::EltwiseParameter::EltwiseOp") int value);
  public static native @Cast("bool") boolean EltwiseOp_Parse(@StdString BytePointer name,
        @Cast("caffe::EltwiseParameter::EltwiseOp*") IntPointer value);
  public static native @Cast("bool") boolean EltwiseOp_Parse(@StdString String name,
        @Cast("caffe::EltwiseParameter::EltwiseOp*") IntBuffer value);
  public static native @Cast("bool") boolean EltwiseOp_Parse(@StdString BytePointer name,
        @Cast("caffe::EltwiseParameter::EltwiseOp*") int[] value);
  public static native @Cast("bool") boolean EltwiseOp_Parse(@StdString String name,
        @Cast("caffe::EltwiseParameter::EltwiseOp*") IntPointer value);
  public static native @Cast("bool") boolean EltwiseOp_Parse(@StdString BytePointer name,
        @Cast("caffe::EltwiseParameter::EltwiseOp*") IntBuffer value);
  public static native @Cast("bool") boolean EltwiseOp_Parse(@StdString String name,
        @Cast("caffe::EltwiseParameter::EltwiseOp*") int[] value);

  // accessors -------------------------------------------------------

  // repeated float coeff = 2;
  public native int coeff_size();
  public native void clear_coeff();
  @MemberGetter public static native int kCoeffFieldNumber();
  public static final int kCoeffFieldNumber = kCoeffFieldNumber();
  public native float coeff(int index);
  public native void set_coeff(int index, float value);
  public native void add_coeff(float value);

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  public native @Cast("bool") boolean has_operation();
  public native void clear_operation();
  @MemberGetter public static native int kOperationFieldNumber();
  public static final int kOperationFieldNumber = kOperationFieldNumber();
  public native @Cast("caffe::EltwiseParameter_EltwiseOp") int operation();
  public native void set_operation(@Cast("caffe::EltwiseParameter_EltwiseOp") int value);

  // optional bool stable_prod_grad = 3 [default = true];
  public native @Cast("bool") boolean has_stable_prod_grad();
  public native void clear_stable_prod_grad();
  @MemberGetter public static native int kStableProdGradFieldNumber();
  public static final int kStableProdGradFieldNumber = kStableProdGradFieldNumber();
  public native @Cast("bool") boolean stable_prod_grad();
  public native void set_stable_prod_grad(@Cast("bool") boolean value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ELUParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ELUParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ELUParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ELUParameter position(long position) {
        return (ELUParameter)super.position(position);
    }

  public ELUParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ELUParameter(@Const @ByRef ELUParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ELUParameter from);

  public native @ByRef @Name("operator =") ELUParameter put(@Const @ByRef ELUParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ELUParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ELUParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ELUParameter other);
  

  // implements Message ----------------------------------------------

  public native final ELUParameter New();

  public native final ELUParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ELUParameter from);
  public native void MergeFrom(@Const @ByRef ELUParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 1];
  public native @Cast("bool") boolean has_alpha();
  public native void clear_alpha();
  @MemberGetter public static native int kAlphaFieldNumber();
  public static final int kAlphaFieldNumber = kAlphaFieldNumber();
  public native float alpha();
  public native void set_alpha(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class EmbedParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public EmbedParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public EmbedParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public EmbedParameter position(long position) {
        return (EmbedParameter)super.position(position);
    }

  public EmbedParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public EmbedParameter(@Const @ByRef EmbedParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef EmbedParameter from);

  public native @ByRef @Name("operator =") EmbedParameter put(@Const @ByRef EmbedParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef EmbedParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const EmbedParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(EmbedParameter other);
  

  // implements Message ----------------------------------------------

  public native final EmbedParameter New();

  public native final EmbedParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef EmbedParameter from);
  public native void MergeFrom(@Const @ByRef EmbedParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 4;
  public native @Cast("bool") boolean has_weight_filler();
  public native void clear_weight_filler();
  @MemberGetter public static native int kWeightFillerFieldNumber();
  public static final int kWeightFillerFieldNumber = kWeightFillerFieldNumber();
  public native @Const @ByRef FillerParameter weight_filler();
  public native FillerParameter release_weight_filler();
  public native FillerParameter mutable_weight_filler();
  public native void set_allocated_weight_filler(FillerParameter weight_filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  public native @Cast("bool") boolean has_bias_filler();
  public native void clear_bias_filler();
  @MemberGetter public static native int kBiasFillerFieldNumber();
  public static final int kBiasFillerFieldNumber = kBiasFillerFieldNumber();
  public native @Const @ByRef FillerParameter bias_filler();
  public native FillerParameter release_bias_filler();
  public native FillerParameter mutable_bias_filler();
  public native void set_allocated_bias_filler(FillerParameter bias_filler);

  // optional uint32 num_output = 1;
  public native @Cast("bool") boolean has_num_output();
  public native void clear_num_output();
  @MemberGetter public static native int kNumOutputFieldNumber();
  public static final int kNumOutputFieldNumber = kNumOutputFieldNumber();
  public native @Cast("google::protobuf::uint32") int num_output();
  public native void set_num_output(@Cast("google::protobuf::uint32") int value);

  // optional uint32 input_dim = 2;
  public native @Cast("bool") boolean has_input_dim();
  public native void clear_input_dim();
  @MemberGetter public static native int kInputDimFieldNumber();
  public static final int kInputDimFieldNumber = kInputDimFieldNumber();
  public native @Cast("google::protobuf::uint32") int input_dim();
  public native void set_input_dim(@Cast("google::protobuf::uint32") int value);

  // optional bool bias_term = 3 [default = true];
  public native @Cast("bool") boolean has_bias_term();
  public native void clear_bias_term();
  @MemberGetter public static native int kBiasTermFieldNumber();
  public static final int kBiasTermFieldNumber = kBiasTermFieldNumber();
  public native @Cast("bool") boolean bias_term();
  public native void set_bias_term(@Cast("bool") boolean value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ExpParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ExpParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ExpParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ExpParameter position(long position) {
        return (ExpParameter)super.position(position);
    }

  public ExpParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ExpParameter(@Const @ByRef ExpParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ExpParameter from);

  public native @ByRef @Name("operator =") ExpParameter put(@Const @ByRef ExpParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ExpParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ExpParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ExpParameter other);
  

  // implements Message ----------------------------------------------

  public native final ExpParameter New();

  public native final ExpParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ExpParameter from);
  public native void MergeFrom(@Const @ByRef ExpParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  public native @Cast("bool") boolean has_shift();
  public native void clear_shift();
  @MemberGetter public static native int kShiftFieldNumber();
  public static final int kShiftFieldNumber = kShiftFieldNumber();
  public native float shift();
  public native void set_shift(float value);

  // optional float base = 1 [default = -1];
  public native @Cast("bool") boolean has_base();
  public native void clear_base();
  @MemberGetter public static native int kBaseFieldNumber();
  public static final int kBaseFieldNumber = kBaseFieldNumber();
  public native float base();
  public native void set_base(float value);

  // optional float scale = 2 [default = 1];
  public native @Cast("bool") boolean has_scale();
  public native void clear_scale();
  @MemberGetter public static native int kScaleFieldNumber();
  public static final int kScaleFieldNumber = kScaleFieldNumber();
  public native float scale();
  public native void set_scale(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class FlattenParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FlattenParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FlattenParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public FlattenParameter position(long position) {
        return (FlattenParameter)super.position(position);
    }

  public FlattenParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public FlattenParameter(@Const @ByRef FlattenParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef FlattenParameter from);

  public native @ByRef @Name("operator =") FlattenParameter put(@Const @ByRef FlattenParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef FlattenParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const FlattenParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(FlattenParameter other);
  

  // implements Message ----------------------------------------------

  public native final FlattenParameter New();

  public native final FlattenParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef FlattenParameter from);
  public native void MergeFrom(@Const @ByRef FlattenParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);

  // optional int32 end_axis = 2 [default = -1];
  public native @Cast("bool") boolean has_end_axis();
  public native void clear_end_axis();
  @MemberGetter public static native int kEndAxisFieldNumber();
  public static final int kEndAxisFieldNumber = kEndAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int end_axis();
  public native void set_end_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class HDF5DataParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HDF5DataParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HDF5DataParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public HDF5DataParameter position(long position) {
        return (HDF5DataParameter)super.position(position);
    }

  public HDF5DataParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public HDF5DataParameter(@Const @ByRef HDF5DataParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef HDF5DataParameter from);

  public native @ByRef @Name("operator =") HDF5DataParameter put(@Const @ByRef HDF5DataParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef HDF5DataParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const HDF5DataParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(HDF5DataParameter other);
  

  // implements Message ----------------------------------------------

  public native final HDF5DataParameter New();

  public native final HDF5DataParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef HDF5DataParameter from);
  public native void MergeFrom(@Const @ByRef HDF5DataParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  public native @Cast("bool") boolean has_source();
  public native void clear_source();
  @MemberGetter public static native int kSourceFieldNumber();
  public static final int kSourceFieldNumber = kSourceFieldNumber();
  public native @StdString BytePointer source();
  public native void set_source(@StdString BytePointer value);
  public native void set_source(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_source(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_source(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_source();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_source();
  public native void set_allocated_source(@StdString @Cast({"char*", "std::string*"}) BytePointer source);

  // optional uint32 batch_size = 2;
  public native @Cast("bool") boolean has_batch_size();
  public native void clear_batch_size();
  @MemberGetter public static native int kBatchSizeFieldNumber();
  public static final int kBatchSizeFieldNumber = kBatchSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int batch_size();
  public native void set_batch_size(@Cast("google::protobuf::uint32") int value);

  // optional bool shuffle = 3 [default = false];
  public native @Cast("bool") boolean has_shuffle();
  public native void clear_shuffle();
  @MemberGetter public static native int kShuffleFieldNumber();
  public static final int kShuffleFieldNumber = kShuffleFieldNumber();
  public native @Cast("bool") boolean shuffle();
  public native void set_shuffle(@Cast("bool") boolean value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class HDF5OutputParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HDF5OutputParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HDF5OutputParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public HDF5OutputParameter position(long position) {
        return (HDF5OutputParameter)super.position(position);
    }

  public HDF5OutputParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public HDF5OutputParameter(@Const @ByRef HDF5OutputParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef HDF5OutputParameter from);

  public native @ByRef @Name("operator =") HDF5OutputParameter put(@Const @ByRef HDF5OutputParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef HDF5OutputParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const HDF5OutputParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(HDF5OutputParameter other);
  

  // implements Message ----------------------------------------------

  public native final HDF5OutputParameter New();

  public native final HDF5OutputParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef HDF5OutputParameter from);
  public native void MergeFrom(@Const @ByRef HDF5OutputParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  public native @Cast("bool") boolean has_file_name();
  public native void clear_file_name();
  @MemberGetter public static native int kFileNameFieldNumber();
  public static final int kFileNameFieldNumber = kFileNameFieldNumber();
  public native @StdString BytePointer file_name();
  public native void set_file_name(@StdString BytePointer value);
  public native void set_file_name(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_file_name(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_file_name(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_file_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_file_name();
  public native void set_allocated_file_name(@StdString @Cast({"char*", "std::string*"}) BytePointer file_name);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class HingeLossParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HingeLossParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HingeLossParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public HingeLossParameter position(long position) {
        return (HingeLossParameter)super.position(position);
    }

  public HingeLossParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public HingeLossParameter(@Const @ByRef HingeLossParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef HingeLossParameter from);

  public native @ByRef @Name("operator =") HingeLossParameter put(@Const @ByRef HingeLossParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef HingeLossParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const HingeLossParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(HingeLossParameter other);
  

  // implements Message ----------------------------------------------

  public native final HingeLossParameter New();

  public native final HingeLossParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef HingeLossParameter from);
  public native void MergeFrom(@Const @ByRef HingeLossParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::HingeLossParameter::Norm") int L1();
  public static final int L1 = L1();
  @MemberGetter public static native @Cast("const caffe::HingeLossParameter::Norm") int L2();
  public static final int L2 = L2();
  public static native @Cast("bool") boolean Norm_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::HingeLossParameter::Norm") int Norm_MIN();
  public static final int Norm_MIN = Norm_MIN();
  @MemberGetter public static native @Cast("const caffe::HingeLossParameter::Norm") int Norm_MAX();
  public static final int Norm_MAX = Norm_MAX();
  @MemberGetter public static native int Norm_ARRAYSIZE();
  public static final int Norm_ARRAYSIZE = Norm_ARRAYSIZE();
  public static native @Const EnumDescriptor Norm_descriptor();
  public static native @StdString BytePointer Norm_Name(@Cast("caffe::HingeLossParameter::Norm") int value);
  public static native @Cast("bool") boolean Norm_Parse(@StdString BytePointer name,
        @Cast("caffe::HingeLossParameter::Norm*") IntPointer value);
  public static native @Cast("bool") boolean Norm_Parse(@StdString String name,
        @Cast("caffe::HingeLossParameter::Norm*") IntBuffer value);
  public static native @Cast("bool") boolean Norm_Parse(@StdString BytePointer name,
        @Cast("caffe::HingeLossParameter::Norm*") int[] value);
  public static native @Cast("bool") boolean Norm_Parse(@StdString String name,
        @Cast("caffe::HingeLossParameter::Norm*") IntPointer value);
  public static native @Cast("bool") boolean Norm_Parse(@StdString BytePointer name,
        @Cast("caffe::HingeLossParameter::Norm*") IntBuffer value);
  public static native @Cast("bool") boolean Norm_Parse(@StdString String name,
        @Cast("caffe::HingeLossParameter::Norm*") int[] value);

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  public native @Cast("bool") boolean has_norm();
  public native void clear_norm();
  @MemberGetter public static native int kNormFieldNumber();
  public static final int kNormFieldNumber = kNormFieldNumber();
  public native @Cast("caffe::HingeLossParameter_Norm") int norm();
  public native void set_norm(@Cast("caffe::HingeLossParameter_Norm") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ImageDataParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImageDataParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImageDataParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ImageDataParameter position(long position) {
        return (ImageDataParameter)super.position(position);
    }

  public ImageDataParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ImageDataParameter(@Const @ByRef ImageDataParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ImageDataParameter from);

  public native @ByRef @Name("operator =") ImageDataParameter put(@Const @ByRef ImageDataParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ImageDataParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ImageDataParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ImageDataParameter other);
  

  // implements Message ----------------------------------------------

  public native final ImageDataParameter New();

  public native final ImageDataParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ImageDataParameter from);
  public native void MergeFrom(@Const @ByRef ImageDataParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  public native @Cast("bool") boolean has_source();
  public native void clear_source();
  @MemberGetter public static native int kSourceFieldNumber();
  public static final int kSourceFieldNumber = kSourceFieldNumber();
  public native @StdString BytePointer source();
  public native void set_source(@StdString BytePointer value);
  public native void set_source(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_source(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_source(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_source();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_source();
  public native void set_allocated_source(@StdString @Cast({"char*", "std::string*"}) BytePointer source);

  // optional string mean_file = 3;
  public native @Cast("bool") boolean has_mean_file();
  public native void clear_mean_file();
  @MemberGetter public static native int kMeanFileFieldNumber();
  public static final int kMeanFileFieldNumber = kMeanFileFieldNumber();
  public native @StdString BytePointer mean_file();
  public native void set_mean_file(@StdString BytePointer value);
  public native void set_mean_file(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_mean_file(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_mean_file(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_mean_file();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_mean_file();
  public native void set_allocated_mean_file(@StdString @Cast({"char*", "std::string*"}) BytePointer mean_file);

  // optional string root_folder = 12 [default = ""];
  public native @Cast("bool") boolean has_root_folder();
  public native void clear_root_folder();
  @MemberGetter public static native int kRootFolderFieldNumber();
  public static final int kRootFolderFieldNumber = kRootFolderFieldNumber();
  public native @StdString BytePointer root_folder();
  public native void set_root_folder(@StdString BytePointer value);
  public native void set_root_folder(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_root_folder(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_root_folder(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_root_folder();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_root_folder();
  public native void set_allocated_root_folder(@StdString @Cast({"char*", "std::string*"}) BytePointer root_folder);

  // optional uint32 crop_size = 5 [default = 0];
  public native @Cast("bool") boolean has_crop_size();
  public native void clear_crop_size();
  @MemberGetter public static native int kCropSizeFieldNumber();
  public static final int kCropSizeFieldNumber = kCropSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int crop_size();
  public native void set_crop_size(@Cast("google::protobuf::uint32") int value);

  // optional uint32 rand_skip = 7 [default = 0];
  public native @Cast("bool") boolean has_rand_skip();
  public native void clear_rand_skip();
  @MemberGetter public static native int kRandSkipFieldNumber();
  public static final int kRandSkipFieldNumber = kRandSkipFieldNumber();
  public native @Cast("google::protobuf::uint32") int rand_skip();
  public native void set_rand_skip(@Cast("google::protobuf::uint32") int value);

  // optional bool shuffle = 8 [default = false];
  public native @Cast("bool") boolean has_shuffle();
  public native void clear_shuffle();
  @MemberGetter public static native int kShuffleFieldNumber();
  public static final int kShuffleFieldNumber = kShuffleFieldNumber();
  public native @Cast("bool") boolean shuffle();
  public native void set_shuffle(@Cast("bool") boolean value);

  // optional bool mirror = 6 [default = false];
  public native @Cast("bool") boolean has_mirror();
  public native void clear_mirror();
  @MemberGetter public static native int kMirrorFieldNumber();
  public static final int kMirrorFieldNumber = kMirrorFieldNumber();
  public native @Cast("bool") boolean mirror();
  public native void set_mirror(@Cast("bool") boolean value);

  // optional uint32 new_height = 9 [default = 0];
  public native @Cast("bool") boolean has_new_height();
  public native void clear_new_height();
  @MemberGetter public static native int kNewHeightFieldNumber();
  public static final int kNewHeightFieldNumber = kNewHeightFieldNumber();
  public native @Cast("google::protobuf::uint32") int new_height();
  public native void set_new_height(@Cast("google::protobuf::uint32") int value);

  // optional uint32 new_width = 10 [default = 0];
  public native @Cast("bool") boolean has_new_width();
  public native void clear_new_width();
  @MemberGetter public static native int kNewWidthFieldNumber();
  public static final int kNewWidthFieldNumber = kNewWidthFieldNumber();
  public native @Cast("google::protobuf::uint32") int new_width();
  public native void set_new_width(@Cast("google::protobuf::uint32") int value);

  // optional bool is_color = 11 [default = true];
  public native @Cast("bool") boolean has_is_color();
  public native void clear_is_color();
  @MemberGetter public static native int kIsColorFieldNumber();
  public static final int kIsColorFieldNumber = kIsColorFieldNumber();
  public native @Cast("bool") boolean is_color();
  public native void set_is_color(@Cast("bool") boolean value);

  // optional float scale = 2 [default = 1];
  public native @Cast("bool") boolean has_scale();
  public native void clear_scale();
  @MemberGetter public static native int kScaleFieldNumber();
  public static final int kScaleFieldNumber = kScaleFieldNumber();
  public native float scale();
  public native void set_scale(float value);

  // optional uint32 batch_size = 4 [default = 1];
  public native @Cast("bool") boolean has_batch_size();
  public native void clear_batch_size();
  @MemberGetter public static native int kBatchSizeFieldNumber();
  public static final int kBatchSizeFieldNumber = kBatchSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int batch_size();
  public native void set_batch_size(@Cast("google::protobuf::uint32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class InfogainLossParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InfogainLossParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InfogainLossParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public InfogainLossParameter position(long position) {
        return (InfogainLossParameter)super.position(position);
    }

  public InfogainLossParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public InfogainLossParameter(@Const @ByRef InfogainLossParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef InfogainLossParameter from);

  public native @ByRef @Name("operator =") InfogainLossParameter put(@Const @ByRef InfogainLossParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef InfogainLossParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const InfogainLossParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(InfogainLossParameter other);
  

  // implements Message ----------------------------------------------

  public native final InfogainLossParameter New();

  public native final InfogainLossParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef InfogainLossParameter from);
  public native void MergeFrom(@Const @ByRef InfogainLossParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  public native @Cast("bool") boolean has_source();
  public native void clear_source();
  @MemberGetter public static native int kSourceFieldNumber();
  public static final int kSourceFieldNumber = kSourceFieldNumber();
  public native @StdString BytePointer source();
  public native void set_source(@StdString BytePointer value);
  public native void set_source(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_source(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_source(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_source();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_source();
  public native void set_allocated_source(@StdString @Cast({"char*", "std::string*"}) BytePointer source);

  // optional int32 axis = 2 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class InnerProductParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InnerProductParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InnerProductParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public InnerProductParameter position(long position) {
        return (InnerProductParameter)super.position(position);
    }

  public InnerProductParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public InnerProductParameter(@Const @ByRef InnerProductParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef InnerProductParameter from);

  public native @ByRef @Name("operator =") InnerProductParameter put(@Const @ByRef InnerProductParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef InnerProductParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const InnerProductParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(InnerProductParameter other);
  

  // implements Message ----------------------------------------------

  public native final InnerProductParameter New();

  public native final InnerProductParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef InnerProductParameter from);
  public native void MergeFrom(@Const @ByRef InnerProductParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 3;
  public native @Cast("bool") boolean has_weight_filler();
  public native void clear_weight_filler();
  @MemberGetter public static native int kWeightFillerFieldNumber();
  public static final int kWeightFillerFieldNumber = kWeightFillerFieldNumber();
  public native @Const @ByRef FillerParameter weight_filler();
  public native FillerParameter release_weight_filler();
  public native FillerParameter mutable_weight_filler();
  public native void set_allocated_weight_filler(FillerParameter weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  public native @Cast("bool") boolean has_bias_filler();
  public native void clear_bias_filler();
  @MemberGetter public static native int kBiasFillerFieldNumber();
  public static final int kBiasFillerFieldNumber = kBiasFillerFieldNumber();
  public native @Const @ByRef FillerParameter bias_filler();
  public native FillerParameter release_bias_filler();
  public native FillerParameter mutable_bias_filler();
  public native void set_allocated_bias_filler(FillerParameter bias_filler);

  // optional uint32 num_output = 1;
  public native @Cast("bool") boolean has_num_output();
  public native void clear_num_output();
  @MemberGetter public static native int kNumOutputFieldNumber();
  public static final int kNumOutputFieldNumber = kNumOutputFieldNumber();
  public native @Cast("google::protobuf::uint32") int num_output();
  public native void set_num_output(@Cast("google::protobuf::uint32") int value);

  // optional bool transpose = 6 [default = false];
  public native @Cast("bool") boolean has_transpose();
  public native void clear_transpose();
  @MemberGetter public static native int kTransposeFieldNumber();
  public static final int kTransposeFieldNumber = kTransposeFieldNumber();
  public native @Cast("bool") boolean transpose();
  public native void set_transpose(@Cast("bool") boolean value);

  // optional bool bias_term = 2 [default = true];
  public native @Cast("bool") boolean has_bias_term();
  public native void clear_bias_term();
  @MemberGetter public static native int kBiasTermFieldNumber();
  public static final int kBiasTermFieldNumber = kBiasTermFieldNumber();
  public native @Cast("bool") boolean bias_term();
  public native void set_bias_term(@Cast("bool") boolean value);

  // optional int32 axis = 5 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class InputParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InputParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InputParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public InputParameter position(long position) {
        return (InputParameter)super.position(position);
    }

  public InputParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public InputParameter(@Const @ByRef InputParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef InputParameter from);

  public native @ByRef @Name("operator =") InputParameter put(@Const @ByRef InputParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef InputParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const InputParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(InputParameter other);
  

  // implements Message ----------------------------------------------

  public native final InputParameter New();

  public native final InputParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef InputParameter from);
  public native void MergeFrom(@Const @ByRef InputParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobShape shape = 1;
  public native int shape_size();
  public native void clear_shape();
  @MemberGetter public static native int kShapeFieldNumber();
  public static final int kShapeFieldNumber = kShapeFieldNumber();
  public native BlobShape mutable_shape(int index);
  public native @Const @ByRef BlobShape shape(int index);
  public native BlobShape add_shape();
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class LogParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LogParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LogParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LogParameter position(long position) {
        return (LogParameter)super.position(position);
    }

  public LogParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public LogParameter(@Const @ByRef LogParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef LogParameter from);

  public native @ByRef @Name("operator =") LogParameter put(@Const @ByRef LogParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef LogParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const LogParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(LogParameter other);
  

  // implements Message ----------------------------------------------

  public native final LogParameter New();

  public native final LogParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef LogParameter from);
  public native void MergeFrom(@Const @ByRef LogParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  public native @Cast("bool") boolean has_shift();
  public native void clear_shift();
  @MemberGetter public static native int kShiftFieldNumber();
  public static final int kShiftFieldNumber = kShiftFieldNumber();
  public native float shift();
  public native void set_shift(float value);

  // optional float base = 1 [default = -1];
  public native @Cast("bool") boolean has_base();
  public native void clear_base();
  @MemberGetter public static native int kBaseFieldNumber();
  public static final int kBaseFieldNumber = kBaseFieldNumber();
  public native float base();
  public native void set_base(float value);

  // optional float scale = 2 [default = 1];
  public native @Cast("bool") boolean has_scale();
  public native void clear_scale();
  @MemberGetter public static native int kScaleFieldNumber();
  public static final int kScaleFieldNumber = kScaleFieldNumber();
  public native float scale();
  public native void set_scale(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class LRNParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LRNParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LRNParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LRNParameter position(long position) {
        return (LRNParameter)super.position(position);
    }

  public LRNParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public LRNParameter(@Const @ByRef LRNParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef LRNParameter from);

  public native @ByRef @Name("operator =") LRNParameter put(@Const @ByRef LRNParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef LRNParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const LRNParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(LRNParameter other);
  

  // implements Message ----------------------------------------------

  public native final LRNParameter New();

  public native final LRNParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef LRNParameter from);
  public native void MergeFrom(@Const @ByRef LRNParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::LRNParameter::NormRegion") int ACROSS_CHANNELS();
  public static final int ACROSS_CHANNELS = ACROSS_CHANNELS();
  @MemberGetter public static native @Cast("const caffe::LRNParameter::NormRegion") int WITHIN_CHANNEL();
  public static final int WITHIN_CHANNEL = WITHIN_CHANNEL();
  public static native @Cast("bool") boolean NormRegion_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::LRNParameter::NormRegion") int NormRegion_MIN();
  public static final int NormRegion_MIN = NormRegion_MIN();
  @MemberGetter public static native @Cast("const caffe::LRNParameter::NormRegion") int NormRegion_MAX();
  public static final int NormRegion_MAX = NormRegion_MAX();
  @MemberGetter public static native int NormRegion_ARRAYSIZE();
  public static final int NormRegion_ARRAYSIZE = NormRegion_ARRAYSIZE();
  public static native @Const EnumDescriptor NormRegion_descriptor();
  public static native @StdString BytePointer NormRegion_Name(@Cast("caffe::LRNParameter::NormRegion") int value);
  public static native @Cast("bool") boolean NormRegion_Parse(@StdString BytePointer name,
        @Cast("caffe::LRNParameter::NormRegion*") IntPointer value);
  public static native @Cast("bool") boolean NormRegion_Parse(@StdString String name,
        @Cast("caffe::LRNParameter::NormRegion*") IntBuffer value);
  public static native @Cast("bool") boolean NormRegion_Parse(@StdString BytePointer name,
        @Cast("caffe::LRNParameter::NormRegion*") int[] value);
  public static native @Cast("bool") boolean NormRegion_Parse(@StdString String name,
        @Cast("caffe::LRNParameter::NormRegion*") IntPointer value);
  public static native @Cast("bool") boolean NormRegion_Parse(@StdString BytePointer name,
        @Cast("caffe::LRNParameter::NormRegion*") IntBuffer value);
  public static native @Cast("bool") boolean NormRegion_Parse(@StdString String name,
        @Cast("caffe::LRNParameter::NormRegion*") int[] value);
  @MemberGetter public static native @Cast("const caffe::LRNParameter::Engine") int DEFAULT();
  public static final int DEFAULT = DEFAULT();
  @MemberGetter public static native @Cast("const caffe::LRNParameter::Engine") int CAFFE();
  public static final int CAFFE = CAFFE();
  @MemberGetter public static native @Cast("const caffe::LRNParameter::Engine") int CUDNN();
  public static final int CUDNN = CUDNN();
  public static native @Cast("bool") boolean Engine_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::LRNParameter::Engine") int Engine_MIN();
  public static final int Engine_MIN = Engine_MIN();
  @MemberGetter public static native @Cast("const caffe::LRNParameter::Engine") int Engine_MAX();
  public static final int Engine_MAX = Engine_MAX();
  @MemberGetter public static native int Engine_ARRAYSIZE();
  public static final int Engine_ARRAYSIZE = Engine_ARRAYSIZE();
  public static native @Const EnumDescriptor Engine_descriptor();
  public static native @StdString BytePointer Engine_Name(@Cast("caffe::LRNParameter::Engine") int value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::LRNParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::LRNParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::LRNParameter::Engine*") int[] value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::LRNParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::LRNParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::LRNParameter::Engine*") int[] value);

  // accessors -------------------------------------------------------

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  public native @Cast("bool") boolean has_norm_region();
  public native void clear_norm_region();
  @MemberGetter public static native int kNormRegionFieldNumber();
  public static final int kNormRegionFieldNumber = kNormRegionFieldNumber();
  public native @Cast("caffe::LRNParameter_NormRegion") int norm_region();
  public native void set_norm_region(@Cast("caffe::LRNParameter_NormRegion") int value);

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  public native @Cast("bool") boolean has_engine();
  public native void clear_engine();
  @MemberGetter public static native int kEngineFieldNumber();
  public static final int kEngineFieldNumber = kEngineFieldNumber();
  public native @Cast("caffe::LRNParameter_Engine") int engine();
  public native void set_engine(@Cast("caffe::LRNParameter_Engine") int value);

  // optional uint32 local_size = 1 [default = 5];
  public native @Cast("bool") boolean has_local_size();
  public native void clear_local_size();
  @MemberGetter public static native int kLocalSizeFieldNumber();
  public static final int kLocalSizeFieldNumber = kLocalSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int local_size();
  public native void set_local_size(@Cast("google::protobuf::uint32") int value);

  // optional float alpha = 2 [default = 1];
  public native @Cast("bool") boolean has_alpha();
  public native void clear_alpha();
  @MemberGetter public static native int kAlphaFieldNumber();
  public static final int kAlphaFieldNumber = kAlphaFieldNumber();
  public native float alpha();
  public native void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  public native @Cast("bool") boolean has_beta();
  public native void clear_beta();
  @MemberGetter public static native int kBetaFieldNumber();
  public static final int kBetaFieldNumber = kBetaFieldNumber();
  public native float beta();
  public native void set_beta(float value);

  // optional float k = 5 [default = 1];
  public native @Cast("bool") boolean has_k();
  public native void clear_k();
  @MemberGetter public static native int kKFieldNumber();
  public static final int kKFieldNumber = kKFieldNumber();
  public native float k();
  public native void set_k(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class MemoryDataParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MemoryDataParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MemoryDataParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MemoryDataParameter position(long position) {
        return (MemoryDataParameter)super.position(position);
    }

  public MemoryDataParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public MemoryDataParameter(@Const @ByRef MemoryDataParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef MemoryDataParameter from);

  public native @ByRef @Name("operator =") MemoryDataParameter put(@Const @ByRef MemoryDataParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef MemoryDataParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const MemoryDataParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(MemoryDataParameter other);
  

  // implements Message ----------------------------------------------

  public native final MemoryDataParameter New();

  public native final MemoryDataParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef MemoryDataParameter from);
  public native void MergeFrom(@Const @ByRef MemoryDataParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  public native @Cast("bool") boolean has_batch_size();
  public native void clear_batch_size();
  @MemberGetter public static native int kBatchSizeFieldNumber();
  public static final int kBatchSizeFieldNumber = kBatchSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int batch_size();
  public native void set_batch_size(@Cast("google::protobuf::uint32") int value);

  // optional uint32 channels = 2;
  public native @Cast("bool") boolean has_channels();
  public native void clear_channels();
  @MemberGetter public static native int kChannelsFieldNumber();
  public static final int kChannelsFieldNumber = kChannelsFieldNumber();
  public native @Cast("google::protobuf::uint32") int channels();
  public native void set_channels(@Cast("google::protobuf::uint32") int value);

  // optional uint32 height = 3;
  public native @Cast("bool") boolean has_height();
  public native void clear_height();
  @MemberGetter public static native int kHeightFieldNumber();
  public static final int kHeightFieldNumber = kHeightFieldNumber();
  public native @Cast("google::protobuf::uint32") int height();
  public native void set_height(@Cast("google::protobuf::uint32") int value);

  // optional uint32 width = 4;
  public native @Cast("bool") boolean has_width();
  public native void clear_width();
  @MemberGetter public static native int kWidthFieldNumber();
  public static final int kWidthFieldNumber = kWidthFieldNumber();
  public native @Cast("google::protobuf::uint32") int width();
  public native void set_width(@Cast("google::protobuf::uint32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class MVNParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MVNParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MVNParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MVNParameter position(long position) {
        return (MVNParameter)super.position(position);
    }

  public MVNParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public MVNParameter(@Const @ByRef MVNParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef MVNParameter from);

  public native @ByRef @Name("operator =") MVNParameter put(@Const @ByRef MVNParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef MVNParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const MVNParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(MVNParameter other);
  

  // implements Message ----------------------------------------------

  public native final MVNParameter New();

  public native final MVNParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef MVNParameter from);
  public native void MergeFrom(@Const @ByRef MVNParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool across_channels = 2 [default = false];
  public native @Cast("bool") boolean has_across_channels();
  public native void clear_across_channels();
  @MemberGetter public static native int kAcrossChannelsFieldNumber();
  public static final int kAcrossChannelsFieldNumber = kAcrossChannelsFieldNumber();
  public native @Cast("bool") boolean across_channels();
  public native void set_across_channels(@Cast("bool") boolean value);

  // optional bool normalize_variance = 1 [default = true];
  public native @Cast("bool") boolean has_normalize_variance();
  public native void clear_normalize_variance();
  @MemberGetter public static native int kNormalizeVarianceFieldNumber();
  public static final int kNormalizeVarianceFieldNumber = kNormalizeVarianceFieldNumber();
  public native @Cast("bool") boolean normalize_variance();
  public native void set_normalize_variance(@Cast("bool") boolean value);

  // optional float eps = 3 [default = 1e-09];
  public native @Cast("bool") boolean has_eps();
  public native void clear_eps();
  @MemberGetter public static native int kEpsFieldNumber();
  public static final int kEpsFieldNumber = kEpsFieldNumber();
  public native float eps();
  public native void set_eps(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ParameterParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ParameterParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ParameterParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ParameterParameter position(long position) {
        return (ParameterParameter)super.position(position);
    }

  public ParameterParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ParameterParameter(@Const @ByRef ParameterParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ParameterParameter from);

  public native @ByRef @Name("operator =") ParameterParameter put(@Const @ByRef ParameterParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ParameterParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ParameterParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ParameterParameter other);
  

  // implements Message ----------------------------------------------

  public native final ParameterParameter New();

  public native final ParameterParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ParameterParameter from);
  public native void MergeFrom(@Const @ByRef ParameterParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  public native @Cast("bool") boolean has_shape();
  public native void clear_shape();
  @MemberGetter public static native int kShapeFieldNumber();
  public static final int kShapeFieldNumber = kShapeFieldNumber();
  public native @Const @ByRef BlobShape shape();
  public native BlobShape release_shape();
  public native BlobShape mutable_shape();
  public native void set_allocated_shape(BlobShape shape);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class PoolingParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PoolingParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PoolingParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PoolingParameter position(long position) {
        return (PoolingParameter)super.position(position);
    }

  public PoolingParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public PoolingParameter(@Const @ByRef PoolingParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef PoolingParameter from);

  public native @ByRef @Name("operator =") PoolingParameter put(@Const @ByRef PoolingParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef PoolingParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const PoolingParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(PoolingParameter other);
  

  // implements Message ----------------------------------------------

  public native final PoolingParameter New();

  public native final PoolingParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef PoolingParameter from);
  public native void MergeFrom(@Const @ByRef PoolingParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::PoolMethod") int MAX();
  public static final int MAX = MAX();
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::PoolMethod") int AVE();
  public static final int AVE = AVE();
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::PoolMethod") int STOCHASTIC();
  public static final int STOCHASTIC = STOCHASTIC();
  public static native @Cast("bool") boolean PoolMethod_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::PoolMethod") int PoolMethod_MIN();
  public static final int PoolMethod_MIN = PoolMethod_MIN();
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::PoolMethod") int PoolMethod_MAX();
  public static final int PoolMethod_MAX = PoolMethod_MAX();
  @MemberGetter public static native int PoolMethod_ARRAYSIZE();
  public static final int PoolMethod_ARRAYSIZE = PoolMethod_ARRAYSIZE();
  public static native @Const EnumDescriptor PoolMethod_descriptor();
  public static native @StdString BytePointer PoolMethod_Name(@Cast("caffe::PoolingParameter::PoolMethod") int value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::PoolingParameter::PoolMethod*") IntPointer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::PoolingParameter::PoolMethod*") IntBuffer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::PoolingParameter::PoolMethod*") int[] value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::PoolingParameter::PoolMethod*") IntPointer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::PoolingParameter::PoolMethod*") IntBuffer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::PoolingParameter::PoolMethod*") int[] value);
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::Engine") int DEFAULT();
  public static final int DEFAULT = DEFAULT();
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::Engine") int CAFFE();
  public static final int CAFFE = CAFFE();
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::Engine") int CUDNN();
  public static final int CUDNN = CUDNN();
  public static native @Cast("bool") boolean Engine_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::Engine") int Engine_MIN();
  public static final int Engine_MIN = Engine_MIN();
  @MemberGetter public static native @Cast("const caffe::PoolingParameter::Engine") int Engine_MAX();
  public static final int Engine_MAX = Engine_MAX();
  @MemberGetter public static native int Engine_ARRAYSIZE();
  public static final int Engine_ARRAYSIZE = Engine_ARRAYSIZE();
  public static native @Const EnumDescriptor Engine_descriptor();
  public static native @StdString BytePointer Engine_Name(@Cast("caffe::PoolingParameter::Engine") int value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::PoolingParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::PoolingParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::PoolingParameter::Engine*") int[] value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::PoolingParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::PoolingParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::PoolingParameter::Engine*") int[] value);

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  public native @Cast("bool") boolean has_pool();
  public native void clear_pool();
  @MemberGetter public static native int kPoolFieldNumber();
  public static final int kPoolFieldNumber = kPoolFieldNumber();
  public native @Cast("caffe::PoolingParameter_PoolMethod") int pool();
  public native void set_pool(@Cast("caffe::PoolingParameter_PoolMethod") int value);

  // optional uint32 kernel_size = 2;
  public native @Cast("bool") boolean has_kernel_size();
  public native void clear_kernel_size();
  @MemberGetter public static native int kKernelSizeFieldNumber();
  public static final int kKernelSizeFieldNumber = kKernelSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int kernel_size();
  public native void set_kernel_size(@Cast("google::protobuf::uint32") int value);

  // optional uint32 pad = 4 [default = 0];
  public native @Cast("bool") boolean has_pad();
  public native void clear_pad();
  @MemberGetter public static native int kPadFieldNumber();
  public static final int kPadFieldNumber = kPadFieldNumber();
  public native @Cast("google::protobuf::uint32") int pad();
  public native void set_pad(@Cast("google::protobuf::uint32") int value);

  // optional uint32 kernel_h = 5;
  public native @Cast("bool") boolean has_kernel_h();
  public native void clear_kernel_h();
  @MemberGetter public static native int kKernelHFieldNumber();
  public static final int kKernelHFieldNumber = kKernelHFieldNumber();
  public native @Cast("google::protobuf::uint32") int kernel_h();
  public native void set_kernel_h(@Cast("google::protobuf::uint32") int value);

  // optional uint32 kernel_w = 6;
  public native @Cast("bool") boolean has_kernel_w();
  public native void clear_kernel_w();
  @MemberGetter public static native int kKernelWFieldNumber();
  public static final int kKernelWFieldNumber = kKernelWFieldNumber();
  public native @Cast("google::protobuf::uint32") int kernel_w();
  public native void set_kernel_w(@Cast("google::protobuf::uint32") int value);

  // optional uint32 stride_h = 7;
  public native @Cast("bool") boolean has_stride_h();
  public native void clear_stride_h();
  @MemberGetter public static native int kStrideHFieldNumber();
  public static final int kStrideHFieldNumber = kStrideHFieldNumber();
  public native @Cast("google::protobuf::uint32") int stride_h();
  public native void set_stride_h(@Cast("google::protobuf::uint32") int value);

  // optional uint32 stride_w = 8;
  public native @Cast("bool") boolean has_stride_w();
  public native void clear_stride_w();
  @MemberGetter public static native int kStrideWFieldNumber();
  public static final int kStrideWFieldNumber = kStrideWFieldNumber();
  public native @Cast("google::protobuf::uint32") int stride_w();
  public native void set_stride_w(@Cast("google::protobuf::uint32") int value);

  // optional uint32 pad_h = 9 [default = 0];
  public native @Cast("bool") boolean has_pad_h();
  public native void clear_pad_h();
  @MemberGetter public static native int kPadHFieldNumber();
  public static final int kPadHFieldNumber = kPadHFieldNumber();
  public native @Cast("google::protobuf::uint32") int pad_h();
  public native void set_pad_h(@Cast("google::protobuf::uint32") int value);

  // optional uint32 pad_w = 10 [default = 0];
  public native @Cast("bool") boolean has_pad_w();
  public native void clear_pad_w();
  @MemberGetter public static native int kPadWFieldNumber();
  public static final int kPadWFieldNumber = kPadWFieldNumber();
  public native @Cast("google::protobuf::uint32") int pad_w();
  public native void set_pad_w(@Cast("google::protobuf::uint32") int value);

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  public native @Cast("bool") boolean has_engine();
  public native void clear_engine();
  @MemberGetter public static native int kEngineFieldNumber();
  public static final int kEngineFieldNumber = kEngineFieldNumber();
  public native @Cast("caffe::PoolingParameter_Engine") int engine();
  public native void set_engine(@Cast("caffe::PoolingParameter_Engine") int value);

  // optional bool global_pooling = 12 [default = false];
  public native @Cast("bool") boolean has_global_pooling();
  public native void clear_global_pooling();
  @MemberGetter public static native int kGlobalPoolingFieldNumber();
  public static final int kGlobalPoolingFieldNumber = kGlobalPoolingFieldNumber();
  public native @Cast("bool") boolean global_pooling();
  public native void set_global_pooling(@Cast("bool") boolean value);

  // optional uint32 stride = 3 [default = 1];
  public native @Cast("bool") boolean has_stride();
  public native void clear_stride();
  @MemberGetter public static native int kStrideFieldNumber();
  public static final int kStrideFieldNumber = kStrideFieldNumber();
  public native @Cast("google::protobuf::uint32") int stride();
  public native void set_stride(@Cast("google::protobuf::uint32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class PowerParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PowerParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PowerParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PowerParameter position(long position) {
        return (PowerParameter)super.position(position);
    }

  public PowerParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public PowerParameter(@Const @ByRef PowerParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef PowerParameter from);

  public native @ByRef @Name("operator =") PowerParameter put(@Const @ByRef PowerParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef PowerParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const PowerParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(PowerParameter other);
  

  // implements Message ----------------------------------------------

  public native final PowerParameter New();

  public native final PowerParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef PowerParameter from);
  public native void MergeFrom(@Const @ByRef PowerParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float shift = 3 [default = 0];
  public native @Cast("bool") boolean has_shift();
  public native void clear_shift();
  @MemberGetter public static native int kShiftFieldNumber();
  public static final int kShiftFieldNumber = kShiftFieldNumber();
  public native float shift();
  public native void set_shift(float value);

  // optional float power = 1 [default = 1];
  public native @Cast("bool") boolean has_power();
  public native void clear_power();
  @MemberGetter public static native int kPowerFieldNumber();
  public static final int kPowerFieldNumber = kPowerFieldNumber();
  public native float power();
  public native void set_power(float value);

  // optional float scale = 2 [default = 1];
  public native @Cast("bool") boolean has_scale();
  public native void clear_scale();
  @MemberGetter public static native int kScaleFieldNumber();
  public static final int kScaleFieldNumber = kScaleFieldNumber();
  public native float scale();
  public native void set_scale(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class PythonParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PythonParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PythonParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PythonParameter position(long position) {
        return (PythonParameter)super.position(position);
    }

  public PythonParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public PythonParameter(@Const @ByRef PythonParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef PythonParameter from);

  public native @ByRef @Name("operator =") PythonParameter put(@Const @ByRef PythonParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef PythonParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const PythonParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(PythonParameter other);
  

  // implements Message ----------------------------------------------

  public native final PythonParameter New();

  public native final PythonParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef PythonParameter from);
  public native void MergeFrom(@Const @ByRef PythonParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  public native @Cast("bool") boolean has_module();
  public native void clear_module();
  @MemberGetter public static native int kModuleFieldNumber();
  public static final int kModuleFieldNumber = kModuleFieldNumber();
  public native @StdString BytePointer module();
  public native void set_module(@StdString BytePointer value);
  public native void set_module(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_module(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_module(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_module();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_module();
  public native void set_allocated_module(@StdString @Cast({"char*", "std::string*"}) BytePointer module);

  // optional string layer = 2;
  public native @Cast("bool") boolean has_layer();
  public native void clear_layer();
  @MemberGetter public static native int kLayerFieldNumber();
  public static final int kLayerFieldNumber = kLayerFieldNumber();
  public native @StdString BytePointer layer();
  public native void set_layer(@StdString BytePointer value);
  public native void set_layer(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_layer(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_layer(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_layer();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_layer();
  public native void set_allocated_layer(@StdString @Cast({"char*", "std::string*"}) BytePointer layer);

  // optional string param_str = 3 [default = ""];
  public native @Cast("bool") boolean has_param_str();
  public native void clear_param_str();
  @MemberGetter public static native int kParamStrFieldNumber();
  public static final int kParamStrFieldNumber = kParamStrFieldNumber();
  public native @StdString BytePointer param_str();
  public native void set_param_str(@StdString BytePointer value);
  public native void set_param_str(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_param_str(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_param_str(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_param_str();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_param_str();
  public native void set_allocated_param_str(@StdString @Cast({"char*", "std::string*"}) BytePointer param_str);

  // optional bool share_in_parallel = 4 [default = false];
  public native @Cast("bool") boolean has_share_in_parallel();
  public native void clear_share_in_parallel();
  @MemberGetter public static native int kShareInParallelFieldNumber();
  public static final int kShareInParallelFieldNumber = kShareInParallelFieldNumber();
  public native @Cast("bool") boolean share_in_parallel();
  public native void set_share_in_parallel(@Cast("bool") boolean value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class RecurrentParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RecurrentParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RecurrentParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public RecurrentParameter position(long position) {
        return (RecurrentParameter)super.position(position);
    }

  public RecurrentParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public RecurrentParameter(@Const @ByRef RecurrentParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef RecurrentParameter from);

  public native @ByRef @Name("operator =") RecurrentParameter put(@Const @ByRef RecurrentParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef RecurrentParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const RecurrentParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(RecurrentParameter other);
  

  // implements Message ----------------------------------------------

  public native final RecurrentParameter New();

  public native final RecurrentParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef RecurrentParameter from);
  public native void MergeFrom(@Const @ByRef RecurrentParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter weight_filler = 2;
  public native @Cast("bool") boolean has_weight_filler();
  public native void clear_weight_filler();
  @MemberGetter public static native int kWeightFillerFieldNumber();
  public static final int kWeightFillerFieldNumber = kWeightFillerFieldNumber();
  public native @Const @ByRef FillerParameter weight_filler();
  public native FillerParameter release_weight_filler();
  public native FillerParameter mutable_weight_filler();
  public native void set_allocated_weight_filler(FillerParameter weight_filler);

  // optional .caffe.FillerParameter bias_filler = 3;
  public native @Cast("bool") boolean has_bias_filler();
  public native void clear_bias_filler();
  @MemberGetter public static native int kBiasFillerFieldNumber();
  public static final int kBiasFillerFieldNumber = kBiasFillerFieldNumber();
  public native @Const @ByRef FillerParameter bias_filler();
  public native FillerParameter release_bias_filler();
  public native FillerParameter mutable_bias_filler();
  public native void set_allocated_bias_filler(FillerParameter bias_filler);

  // optional uint32 num_output = 1 [default = 0];
  public native @Cast("bool") boolean has_num_output();
  public native void clear_num_output();
  @MemberGetter public static native int kNumOutputFieldNumber();
  public static final int kNumOutputFieldNumber = kNumOutputFieldNumber();
  public native @Cast("google::protobuf::uint32") int num_output();
  public native void set_num_output(@Cast("google::protobuf::uint32") int value);

  // optional bool debug_info = 4 [default = false];
  public native @Cast("bool") boolean has_debug_info();
  public native void clear_debug_info();
  @MemberGetter public static native int kDebugInfoFieldNumber();
  public static final int kDebugInfoFieldNumber = kDebugInfoFieldNumber();
  public native @Cast("bool") boolean debug_info();
  public native void set_debug_info(@Cast("bool") boolean value);

  // optional bool expose_hidden = 5 [default = false];
  public native @Cast("bool") boolean has_expose_hidden();
  public native void clear_expose_hidden();
  @MemberGetter public static native int kExposeHiddenFieldNumber();
  public static final int kExposeHiddenFieldNumber = kExposeHiddenFieldNumber();
  public native @Cast("bool") boolean expose_hidden();
  public native void set_expose_hidden(@Cast("bool") boolean value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ReductionParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ReductionParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ReductionParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ReductionParameter position(long position) {
        return (ReductionParameter)super.position(position);
    }

  public ReductionParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ReductionParameter(@Const @ByRef ReductionParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ReductionParameter from);

  public native @ByRef @Name("operator =") ReductionParameter put(@Const @ByRef ReductionParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ReductionParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ReductionParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ReductionParameter other);
  

  // implements Message ----------------------------------------------

  public native final ReductionParameter New();

  public native final ReductionParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ReductionParameter from);
  public native void MergeFrom(@Const @ByRef ReductionParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::ReductionParameter::ReductionOp") int SUM();
  public static final int SUM = SUM();
  @MemberGetter public static native @Cast("const caffe::ReductionParameter::ReductionOp") int ASUM();
  public static final int ASUM = ASUM();
  @MemberGetter public static native @Cast("const caffe::ReductionParameter::ReductionOp") int SUMSQ();
  public static final int SUMSQ = SUMSQ();
  @MemberGetter public static native @Cast("const caffe::ReductionParameter::ReductionOp") int MEAN();
  public static final int MEAN = MEAN();
  public static native @Cast("bool") boolean ReductionOp_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::ReductionParameter::ReductionOp") int ReductionOp_MIN();
  public static final int ReductionOp_MIN = ReductionOp_MIN();
  @MemberGetter public static native @Cast("const caffe::ReductionParameter::ReductionOp") int ReductionOp_MAX();
  public static final int ReductionOp_MAX = ReductionOp_MAX();
  @MemberGetter public static native int ReductionOp_ARRAYSIZE();
  public static final int ReductionOp_ARRAYSIZE = ReductionOp_ARRAYSIZE();
  public static native @Const EnumDescriptor ReductionOp_descriptor();
  public static native @StdString BytePointer ReductionOp_Name(@Cast("caffe::ReductionParameter::ReductionOp") int value);
  public static native @Cast("bool") boolean ReductionOp_Parse(@StdString BytePointer name,
        @Cast("caffe::ReductionParameter::ReductionOp*") IntPointer value);
  public static native @Cast("bool") boolean ReductionOp_Parse(@StdString String name,
        @Cast("caffe::ReductionParameter::ReductionOp*") IntBuffer value);
  public static native @Cast("bool") boolean ReductionOp_Parse(@StdString BytePointer name,
        @Cast("caffe::ReductionParameter::ReductionOp*") int[] value);
  public static native @Cast("bool") boolean ReductionOp_Parse(@StdString String name,
        @Cast("caffe::ReductionParameter::ReductionOp*") IntPointer value);
  public static native @Cast("bool") boolean ReductionOp_Parse(@StdString BytePointer name,
        @Cast("caffe::ReductionParameter::ReductionOp*") IntBuffer value);
  public static native @Cast("bool") boolean ReductionOp_Parse(@StdString String name,
        @Cast("caffe::ReductionParameter::ReductionOp*") int[] value);

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 0];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);

  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  public native @Cast("bool") boolean has_operation();
  public native void clear_operation();
  @MemberGetter public static native int kOperationFieldNumber();
  public static final int kOperationFieldNumber = kOperationFieldNumber();
  public native @Cast("caffe::ReductionParameter_ReductionOp") int operation();
  public native void set_operation(@Cast("caffe::ReductionParameter_ReductionOp") int value);

  // optional float coeff = 3 [default = 1];
  public native @Cast("bool") boolean has_coeff();
  public native void clear_coeff();
  @MemberGetter public static native int kCoeffFieldNumber();
  public static final int kCoeffFieldNumber = kCoeffFieldNumber();
  public native float coeff();
  public native void set_coeff(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ReLUParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ReLUParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ReLUParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ReLUParameter position(long position) {
        return (ReLUParameter)super.position(position);
    }

  public ReLUParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ReLUParameter(@Const @ByRef ReLUParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ReLUParameter from);

  public native @ByRef @Name("operator =") ReLUParameter put(@Const @ByRef ReLUParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ReLUParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ReLUParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ReLUParameter other);
  

  // implements Message ----------------------------------------------

  public native final ReLUParameter New();

  public native final ReLUParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ReLUParameter from);
  public native void MergeFrom(@Const @ByRef ReLUParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::ReLUParameter::Engine") int DEFAULT();
  public static final int DEFAULT = DEFAULT();
  @MemberGetter public static native @Cast("const caffe::ReLUParameter::Engine") int CAFFE();
  public static final int CAFFE = CAFFE();
  @MemberGetter public static native @Cast("const caffe::ReLUParameter::Engine") int CUDNN();
  public static final int CUDNN = CUDNN();
  public static native @Cast("bool") boolean Engine_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::ReLUParameter::Engine") int Engine_MIN();
  public static final int Engine_MIN = Engine_MIN();
  @MemberGetter public static native @Cast("const caffe::ReLUParameter::Engine") int Engine_MAX();
  public static final int Engine_MAX = Engine_MAX();
  @MemberGetter public static native int Engine_ARRAYSIZE();
  public static final int Engine_ARRAYSIZE = Engine_ARRAYSIZE();
  public static native @Const EnumDescriptor Engine_descriptor();
  public static native @StdString BytePointer Engine_Name(@Cast("caffe::ReLUParameter::Engine") int value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::ReLUParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::ReLUParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::ReLUParameter::Engine*") int[] value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::ReLUParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::ReLUParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::ReLUParameter::Engine*") int[] value);

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  public native @Cast("bool") boolean has_negative_slope();
  public native void clear_negative_slope();
  @MemberGetter public static native int kNegativeSlopeFieldNumber();
  public static final int kNegativeSlopeFieldNumber = kNegativeSlopeFieldNumber();
  public native float negative_slope();
  public native void set_negative_slope(float value);

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  public native @Cast("bool") boolean has_engine();
  public native void clear_engine();
  @MemberGetter public static native int kEngineFieldNumber();
  public static final int kEngineFieldNumber = kEngineFieldNumber();
  public native @Cast("caffe::ReLUParameter_Engine") int engine();
  public native void set_engine(@Cast("caffe::ReLUParameter_Engine") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ReshapeParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ReshapeParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ReshapeParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ReshapeParameter position(long position) {
        return (ReshapeParameter)super.position(position);
    }

  public ReshapeParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ReshapeParameter(@Const @ByRef ReshapeParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ReshapeParameter from);

  public native @ByRef @Name("operator =") ReshapeParameter put(@Const @ByRef ReshapeParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ReshapeParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ReshapeParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ReshapeParameter other);
  

  // implements Message ----------------------------------------------

  public native final ReshapeParameter New();

  public native final ReshapeParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ReshapeParameter from);
  public native void MergeFrom(@Const @ByRef ReshapeParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  public native @Cast("bool") boolean has_shape();
  public native void clear_shape();
  @MemberGetter public static native int kShapeFieldNumber();
  public static final int kShapeFieldNumber = kShapeFieldNumber();
  public native @Const @ByRef BlobShape shape();
  public native BlobShape release_shape();
  public native BlobShape mutable_shape();
  public native void set_allocated_shape(BlobShape shape);

  // optional int32 axis = 2 [default = 0];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);

  // optional int32 num_axes = 3 [default = -1];
  public native @Cast("bool") boolean has_num_axes();
  public native void clear_num_axes();
  @MemberGetter public static native int kNumAxesFieldNumber();
  public static final int kNumAxesFieldNumber = kNumAxesFieldNumber();
  public native @Cast("google::protobuf::int32") int num_axes();
  public native void set_num_axes(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ScaleParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ScaleParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ScaleParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ScaleParameter position(long position) {
        return (ScaleParameter)super.position(position);
    }

  public ScaleParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ScaleParameter(@Const @ByRef ScaleParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ScaleParameter from);

  public native @ByRef @Name("operator =") ScaleParameter put(@Const @ByRef ScaleParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ScaleParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ScaleParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ScaleParameter other);
  

  // implements Message ----------------------------------------------

  public native final ScaleParameter New();

  public native final ScaleParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ScaleParameter from);
  public native void MergeFrom(@Const @ByRef ScaleParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 3;
  public native @Cast("bool") boolean has_filler();
  public native void clear_filler();
  @MemberGetter public static native int kFillerFieldNumber();
  public static final int kFillerFieldNumber = kFillerFieldNumber();
  public native @Const @ByRef FillerParameter filler();
  public native FillerParameter release_filler();
  public native FillerParameter mutable_filler();
  public native void set_allocated_filler(FillerParameter filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  public native @Cast("bool") boolean has_bias_filler();
  public native void clear_bias_filler();
  @MemberGetter public static native int kBiasFillerFieldNumber();
  public static final int kBiasFillerFieldNumber = kBiasFillerFieldNumber();
  public native @Const @ByRef FillerParameter bias_filler();
  public native FillerParameter release_bias_filler();
  public native FillerParameter mutable_bias_filler();
  public native void set_allocated_bias_filler(FillerParameter bias_filler);

  // optional bool bias_term = 4 [default = false];
  public native @Cast("bool") boolean has_bias_term();
  public native void clear_bias_term();
  @MemberGetter public static native int kBiasTermFieldNumber();
  public static final int kBiasTermFieldNumber = kBiasTermFieldNumber();
  public native @Cast("bool") boolean bias_term();
  public native void set_bias_term(@Cast("bool") boolean value);

  // optional int32 axis = 1 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);

  // optional int32 num_axes = 2 [default = 1];
  public native @Cast("bool") boolean has_num_axes();
  public native void clear_num_axes();
  @MemberGetter public static native int kNumAxesFieldNumber();
  public static final int kNumAxesFieldNumber = kNumAxesFieldNumber();
  public native @Cast("google::protobuf::int32") int num_axes();
  public native void set_num_axes(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class SigmoidParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SigmoidParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SigmoidParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SigmoidParameter position(long position) {
        return (SigmoidParameter)super.position(position);
    }

  public SigmoidParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public SigmoidParameter(@Const @ByRef SigmoidParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef SigmoidParameter from);

  public native @ByRef @Name("operator =") SigmoidParameter put(@Const @ByRef SigmoidParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef SigmoidParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const SigmoidParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(SigmoidParameter other);
  

  // implements Message ----------------------------------------------

  public native final SigmoidParameter New();

  public native final SigmoidParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef SigmoidParameter from);
  public native void MergeFrom(@Const @ByRef SigmoidParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::SigmoidParameter::Engine") int DEFAULT();
  public static final int DEFAULT = DEFAULT();
  @MemberGetter public static native @Cast("const caffe::SigmoidParameter::Engine") int CAFFE();
  public static final int CAFFE = CAFFE();
  @MemberGetter public static native @Cast("const caffe::SigmoidParameter::Engine") int CUDNN();
  public static final int CUDNN = CUDNN();
  public static native @Cast("bool") boolean Engine_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SigmoidParameter::Engine") int Engine_MIN();
  public static final int Engine_MIN = Engine_MIN();
  @MemberGetter public static native @Cast("const caffe::SigmoidParameter::Engine") int Engine_MAX();
  public static final int Engine_MAX = Engine_MAX();
  @MemberGetter public static native int Engine_ARRAYSIZE();
  public static final int Engine_ARRAYSIZE = Engine_ARRAYSIZE();
  public static native @Const EnumDescriptor Engine_descriptor();
  public static native @StdString BytePointer Engine_Name(@Cast("caffe::SigmoidParameter::Engine") int value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SigmoidParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SigmoidParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SigmoidParameter::Engine*") int[] value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SigmoidParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SigmoidParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SigmoidParameter::Engine*") int[] value);

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  public native @Cast("bool") boolean has_engine();
  public native void clear_engine();
  @MemberGetter public static native int kEngineFieldNumber();
  public static final int kEngineFieldNumber = kEngineFieldNumber();
  public native @Cast("caffe::SigmoidParameter_Engine") int engine();
  public native void set_engine(@Cast("caffe::SigmoidParameter_Engine") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class SliceParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SliceParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SliceParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SliceParameter position(long position) {
        return (SliceParameter)super.position(position);
    }

  public SliceParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public SliceParameter(@Const @ByRef SliceParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef SliceParameter from);

  public native @ByRef @Name("operator =") SliceParameter put(@Const @ByRef SliceParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef SliceParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const SliceParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(SliceParameter other);
  

  // implements Message ----------------------------------------------

  public native final SliceParameter New();

  public native final SliceParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef SliceParameter from);
  public native void MergeFrom(@Const @ByRef SliceParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 slice_point = 2;
  public native int slice_point_size();
  public native void clear_slice_point();
  @MemberGetter public static native int kSlicePointFieldNumber();
  public static final int kSlicePointFieldNumber = kSlicePointFieldNumber();
  public native @Cast("google::protobuf::uint32") int slice_point(int index);
  public native void set_slice_point(int index, @Cast("google::protobuf::uint32") int value);
  public native void add_slice_point(@Cast("google::protobuf::uint32") int value);

  // optional uint32 slice_dim = 1 [default = 1];
  public native @Cast("bool") boolean has_slice_dim();
  public native void clear_slice_dim();
  @MemberGetter public static native int kSliceDimFieldNumber();
  public static final int kSliceDimFieldNumber = kSliceDimFieldNumber();
  public native @Cast("google::protobuf::uint32") int slice_dim();
  public native void set_slice_dim(@Cast("google::protobuf::uint32") int value);

  // optional int32 axis = 3 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class SoftmaxParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SoftmaxParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SoftmaxParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SoftmaxParameter position(long position) {
        return (SoftmaxParameter)super.position(position);
    }

  public SoftmaxParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public SoftmaxParameter(@Const @ByRef SoftmaxParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef SoftmaxParameter from);

  public native @ByRef @Name("operator =") SoftmaxParameter put(@Const @ByRef SoftmaxParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef SoftmaxParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const SoftmaxParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(SoftmaxParameter other);
  

  // implements Message ----------------------------------------------

  public native final SoftmaxParameter New();

  public native final SoftmaxParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef SoftmaxParameter from);
  public native void MergeFrom(@Const @ByRef SoftmaxParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::SoftmaxParameter::Engine") int DEFAULT();
  public static final int DEFAULT = DEFAULT();
  @MemberGetter public static native @Cast("const caffe::SoftmaxParameter::Engine") int CAFFE();
  public static final int CAFFE = CAFFE();
  @MemberGetter public static native @Cast("const caffe::SoftmaxParameter::Engine") int CUDNN();
  public static final int CUDNN = CUDNN();
  public static native @Cast("bool") boolean Engine_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SoftmaxParameter::Engine") int Engine_MIN();
  public static final int Engine_MIN = Engine_MIN();
  @MemberGetter public static native @Cast("const caffe::SoftmaxParameter::Engine") int Engine_MAX();
  public static final int Engine_MAX = Engine_MAX();
  @MemberGetter public static native int Engine_ARRAYSIZE();
  public static final int Engine_ARRAYSIZE = Engine_ARRAYSIZE();
  public static native @Const EnumDescriptor Engine_descriptor();
  public static native @StdString BytePointer Engine_Name(@Cast("caffe::SoftmaxParameter::Engine") int value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SoftmaxParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SoftmaxParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SoftmaxParameter::Engine*") int[] value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SoftmaxParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SoftmaxParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SoftmaxParameter::Engine*") int[] value);

  // accessors -------------------------------------------------------

  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  public native @Cast("bool") boolean has_engine();
  public native void clear_engine();
  @MemberGetter public static native int kEngineFieldNumber();
  public static final int kEngineFieldNumber = kEngineFieldNumber();
  public native @Cast("caffe::SoftmaxParameter_Engine") int engine();
  public native void set_engine(@Cast("caffe::SoftmaxParameter_Engine") int value);

  // optional int32 axis = 2 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class TanHParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TanHParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TanHParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TanHParameter position(long position) {
        return (TanHParameter)super.position(position);
    }

  public TanHParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public TanHParameter(@Const @ByRef TanHParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef TanHParameter from);

  public native @ByRef @Name("operator =") TanHParameter put(@Const @ByRef TanHParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef TanHParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const TanHParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(TanHParameter other);
  

  // implements Message ----------------------------------------------

  public native final TanHParameter New();

  public native final TanHParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef TanHParameter from);
  public native void MergeFrom(@Const @ByRef TanHParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::TanHParameter::Engine") int DEFAULT();
  public static final int DEFAULT = DEFAULT();
  @MemberGetter public static native @Cast("const caffe::TanHParameter::Engine") int CAFFE();
  public static final int CAFFE = CAFFE();
  @MemberGetter public static native @Cast("const caffe::TanHParameter::Engine") int CUDNN();
  public static final int CUDNN = CUDNN();
  public static native @Cast("bool") boolean Engine_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::TanHParameter::Engine") int Engine_MIN();
  public static final int Engine_MIN = Engine_MIN();
  @MemberGetter public static native @Cast("const caffe::TanHParameter::Engine") int Engine_MAX();
  public static final int Engine_MAX = Engine_MAX();
  @MemberGetter public static native int Engine_ARRAYSIZE();
  public static final int Engine_ARRAYSIZE = Engine_ARRAYSIZE();
  public static native @Const EnumDescriptor Engine_descriptor();
  public static native @StdString BytePointer Engine_Name(@Cast("caffe::TanHParameter::Engine") int value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::TanHParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::TanHParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::TanHParameter::Engine*") int[] value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::TanHParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::TanHParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::TanHParameter::Engine*") int[] value);

  // accessors -------------------------------------------------------

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  public native @Cast("bool") boolean has_engine();
  public native void clear_engine();
  @MemberGetter public static native int kEngineFieldNumber();
  public static final int kEngineFieldNumber = kEngineFieldNumber();
  public native @Cast("caffe::TanHParameter_Engine") int engine();
  public native void set_engine(@Cast("caffe::TanHParameter_Engine") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class TileParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TileParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TileParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TileParameter position(long position) {
        return (TileParameter)super.position(position);
    }

  public TileParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public TileParameter(@Const @ByRef TileParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef TileParameter from);

  public native @ByRef @Name("operator =") TileParameter put(@Const @ByRef TileParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef TileParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const TileParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(TileParameter other);
  

  // implements Message ----------------------------------------------

  public native final TileParameter New();

  public native final TileParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef TileParameter from);
  public native void MergeFrom(@Const @ByRef TileParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tiles = 2;
  public native @Cast("bool") boolean has_tiles();
  public native void clear_tiles();
  @MemberGetter public static native int kTilesFieldNumber();
  public static final int kTilesFieldNumber = kTilesFieldNumber();
  public native @Cast("google::protobuf::int32") int tiles();
  public native void set_tiles(@Cast("google::protobuf::int32") int value);

  // optional int32 axis = 1 [default = 1];
  public native @Cast("bool") boolean has_axis();
  public native void clear_axis();
  @MemberGetter public static native int kAxisFieldNumber();
  public static final int kAxisFieldNumber = kAxisFieldNumber();
  public native @Cast("google::protobuf::int32") int axis();
  public native void set_axis(@Cast("google::protobuf::int32") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class ThresholdParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ThresholdParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ThresholdParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ThresholdParameter position(long position) {
        return (ThresholdParameter)super.position(position);
    }

  public ThresholdParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ThresholdParameter(@Const @ByRef ThresholdParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef ThresholdParameter from);

  public native @ByRef @Name("operator =") ThresholdParameter put(@Const @ByRef ThresholdParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef ThresholdParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const ThresholdParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(ThresholdParameter other);
  

  // implements Message ----------------------------------------------

  public native final ThresholdParameter New();

  public native final ThresholdParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef ThresholdParameter from);
  public native void MergeFrom(@Const @ByRef ThresholdParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  public native @Cast("bool") boolean has_threshold();
  public native void clear_threshold();
  @MemberGetter public static native int kThresholdFieldNumber();
  public static final int kThresholdFieldNumber = kThresholdFieldNumber();
  public native float threshold();
  public native void set_threshold(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class WindowDataParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public WindowDataParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public WindowDataParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public WindowDataParameter position(long position) {
        return (WindowDataParameter)super.position(position);
    }

  public WindowDataParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public WindowDataParameter(@Const @ByRef WindowDataParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef WindowDataParameter from);

  public native @ByRef @Name("operator =") WindowDataParameter put(@Const @ByRef WindowDataParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef WindowDataParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const WindowDataParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(WindowDataParameter other);
  

  // implements Message ----------------------------------------------

  public native final WindowDataParameter New();

  public native final WindowDataParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef WindowDataParameter from);
  public native void MergeFrom(@Const @ByRef WindowDataParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  public native @Cast("bool") boolean has_source();
  public native void clear_source();
  @MemberGetter public static native int kSourceFieldNumber();
  public static final int kSourceFieldNumber = kSourceFieldNumber();
  public native @StdString BytePointer source();
  public native void set_source(@StdString BytePointer value);
  public native void set_source(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_source(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_source(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_source();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_source();
  public native void set_allocated_source(@StdString @Cast({"char*", "std::string*"}) BytePointer source);

  // optional string mean_file = 3;
  public native @Cast("bool") boolean has_mean_file();
  public native void clear_mean_file();
  @MemberGetter public static native int kMeanFileFieldNumber();
  public static final int kMeanFileFieldNumber = kMeanFileFieldNumber();
  public native @StdString BytePointer mean_file();
  public native void set_mean_file(@StdString BytePointer value);
  public native void set_mean_file(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_mean_file(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_mean_file(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_mean_file();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_mean_file();
  public native void set_allocated_mean_file(@StdString @Cast({"char*", "std::string*"}) BytePointer mean_file);

  // optional string crop_mode = 11 [default = "warp"];
  public native @Cast("bool") boolean has_crop_mode();
  public native void clear_crop_mode();
  @MemberGetter public static native int kCropModeFieldNumber();
  public static final int kCropModeFieldNumber = kCropModeFieldNumber();
  public native @StdString BytePointer crop_mode();
  public native void set_crop_mode(@StdString BytePointer value);
  public native void set_crop_mode(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_crop_mode(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_crop_mode(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_crop_mode();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_crop_mode();
  public native void set_allocated_crop_mode(@StdString @Cast({"char*", "std::string*"}) BytePointer crop_mode);

  // optional string root_folder = 13 [default = ""];
  public native @Cast("bool") boolean has_root_folder();
  public native void clear_root_folder();
  @MemberGetter public static native int kRootFolderFieldNumber();
  public static final int kRootFolderFieldNumber = kRootFolderFieldNumber();
  public native @StdString BytePointer root_folder();
  public native void set_root_folder(@StdString BytePointer value);
  public native void set_root_folder(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_root_folder(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_root_folder(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_root_folder();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_root_folder();
  public native void set_allocated_root_folder(@StdString @Cast({"char*", "std::string*"}) BytePointer root_folder);

  // optional uint32 batch_size = 4;
  public native @Cast("bool") boolean has_batch_size();
  public native void clear_batch_size();
  @MemberGetter public static native int kBatchSizeFieldNumber();
  public static final int kBatchSizeFieldNumber = kBatchSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int batch_size();
  public native void set_batch_size(@Cast("google::protobuf::uint32") int value);

  // optional uint32 crop_size = 5 [default = 0];
  public native @Cast("bool") boolean has_crop_size();
  public native void clear_crop_size();
  @MemberGetter public static native int kCropSizeFieldNumber();
  public static final int kCropSizeFieldNumber = kCropSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int crop_size();
  public native void set_crop_size(@Cast("google::protobuf::uint32") int value);

  // optional bool mirror = 6 [default = false];
  public native @Cast("bool") boolean has_mirror();
  public native void clear_mirror();
  @MemberGetter public static native int kMirrorFieldNumber();
  public static final int kMirrorFieldNumber = kMirrorFieldNumber();
  public native @Cast("bool") boolean mirror();
  public native void set_mirror(@Cast("bool") boolean value);

  // optional bool cache_images = 12 [default = false];
  public native @Cast("bool") boolean has_cache_images();
  public native void clear_cache_images();
  @MemberGetter public static native int kCacheImagesFieldNumber();
  public static final int kCacheImagesFieldNumber = kCacheImagesFieldNumber();
  public native @Cast("bool") boolean cache_images();
  public native void set_cache_images(@Cast("bool") boolean value);

  // optional uint32 context_pad = 10 [default = 0];
  public native @Cast("bool") boolean has_context_pad();
  public native void clear_context_pad();
  @MemberGetter public static native int kContextPadFieldNumber();
  public static final int kContextPadFieldNumber = kContextPadFieldNumber();
  public native @Cast("google::protobuf::uint32") int context_pad();
  public native void set_context_pad(@Cast("google::protobuf::uint32") int value);

  // optional float scale = 2 [default = 1];
  public native @Cast("bool") boolean has_scale();
  public native void clear_scale();
  @MemberGetter public static native int kScaleFieldNumber();
  public static final int kScaleFieldNumber = kScaleFieldNumber();
  public native float scale();
  public native void set_scale(float value);

  // optional float fg_threshold = 7 [default = 0.5];
  public native @Cast("bool") boolean has_fg_threshold();
  public native void clear_fg_threshold();
  @MemberGetter public static native int kFgThresholdFieldNumber();
  public static final int kFgThresholdFieldNumber = kFgThresholdFieldNumber();
  public native float fg_threshold();
  public native void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  public native @Cast("bool") boolean has_bg_threshold();
  public native void clear_bg_threshold();
  @MemberGetter public static native int kBgThresholdFieldNumber();
  public static final int kBgThresholdFieldNumber = kBgThresholdFieldNumber();
  public native float bg_threshold();
  public native void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  public native @Cast("bool") boolean has_fg_fraction();
  public native void clear_fg_fraction();
  @MemberGetter public static native int kFgFractionFieldNumber();
  public static final int kFgFractionFieldNumber = kFgFractionFieldNumber();
  public native float fg_fraction();
  public native void set_fg_fraction(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class SPPParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SPPParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SPPParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SPPParameter position(long position) {
        return (SPPParameter)super.position(position);
    }

  public SPPParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public SPPParameter(@Const @ByRef SPPParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef SPPParameter from);

  public native @ByRef @Name("operator =") SPPParameter put(@Const @ByRef SPPParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef SPPParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const SPPParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(SPPParameter other);
  

  // implements Message ----------------------------------------------

  public native final SPPParameter New();

  public native final SPPParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef SPPParameter from);
  public native void MergeFrom(@Const @ByRef SPPParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::SPPParameter::PoolMethod") int MAX();
  public static final int MAX = MAX();
  @MemberGetter public static native @Cast("const caffe::SPPParameter::PoolMethod") int AVE();
  public static final int AVE = AVE();
  @MemberGetter public static native @Cast("const caffe::SPPParameter::PoolMethod") int STOCHASTIC();
  public static final int STOCHASTIC = STOCHASTIC();
  public static native @Cast("bool") boolean PoolMethod_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SPPParameter::PoolMethod") int PoolMethod_MIN();
  public static final int PoolMethod_MIN = PoolMethod_MIN();
  @MemberGetter public static native @Cast("const caffe::SPPParameter::PoolMethod") int PoolMethod_MAX();
  public static final int PoolMethod_MAX = PoolMethod_MAX();
  @MemberGetter public static native int PoolMethod_ARRAYSIZE();
  public static final int PoolMethod_ARRAYSIZE = PoolMethod_ARRAYSIZE();
  public static native @Const EnumDescriptor PoolMethod_descriptor();
  public static native @StdString BytePointer PoolMethod_Name(@Cast("caffe::SPPParameter::PoolMethod") int value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::SPPParameter::PoolMethod*") IntPointer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::SPPParameter::PoolMethod*") IntBuffer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::SPPParameter::PoolMethod*") int[] value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::SPPParameter::PoolMethod*") IntPointer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::SPPParameter::PoolMethod*") IntBuffer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::SPPParameter::PoolMethod*") int[] value);
  @MemberGetter public static native @Cast("const caffe::SPPParameter::Engine") int DEFAULT();
  public static final int DEFAULT = DEFAULT();
  @MemberGetter public static native @Cast("const caffe::SPPParameter::Engine") int CAFFE();
  public static final int CAFFE = CAFFE();
  @MemberGetter public static native @Cast("const caffe::SPPParameter::Engine") int CUDNN();
  public static final int CUDNN = CUDNN();
  public static native @Cast("bool") boolean Engine_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SPPParameter::Engine") int Engine_MIN();
  public static final int Engine_MIN = Engine_MIN();
  @MemberGetter public static native @Cast("const caffe::SPPParameter::Engine") int Engine_MAX();
  public static final int Engine_MAX = Engine_MAX();
  @MemberGetter public static native int Engine_ARRAYSIZE();
  public static final int Engine_ARRAYSIZE = Engine_ARRAYSIZE();
  public static native @Const EnumDescriptor Engine_descriptor();
  public static native @StdString BytePointer Engine_Name(@Cast("caffe::SPPParameter::Engine") int value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SPPParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SPPParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SPPParameter::Engine*") int[] value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SPPParameter::Engine*") IntPointer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString BytePointer name,
        @Cast("caffe::SPPParameter::Engine*") IntBuffer value);
  public static native @Cast("bool") boolean Engine_Parse(@StdString String name,
        @Cast("caffe::SPPParameter::Engine*") int[] value);

  // accessors -------------------------------------------------------

  // optional uint32 pyramid_height = 1;
  public native @Cast("bool") boolean has_pyramid_height();
  public native void clear_pyramid_height();
  @MemberGetter public static native int kPyramidHeightFieldNumber();
  public static final int kPyramidHeightFieldNumber = kPyramidHeightFieldNumber();
  public native @Cast("google::protobuf::uint32") int pyramid_height();
  public native void set_pyramid_height(@Cast("google::protobuf::uint32") int value);

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  public native @Cast("bool") boolean has_pool();
  public native void clear_pool();
  @MemberGetter public static native int kPoolFieldNumber();
  public static final int kPoolFieldNumber = kPoolFieldNumber();
  public native @Cast("caffe::SPPParameter_PoolMethod") int pool();
  public native void set_pool(@Cast("caffe::SPPParameter_PoolMethod") int value);

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  public native @Cast("bool") boolean has_engine();
  public native void clear_engine();
  @MemberGetter public static native int kEngineFieldNumber();
  public static final int kEngineFieldNumber = kEngineFieldNumber();
  public native @Cast("caffe::SPPParameter_Engine") int engine();
  public native void set_engine(@Cast("caffe::SPPParameter_Engine") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class V1LayerParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public V1LayerParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public V1LayerParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public V1LayerParameter position(long position) {
        return (V1LayerParameter)super.position(position);
    }

  public V1LayerParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public V1LayerParameter(@Const @ByRef V1LayerParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef V1LayerParameter from);

  public native @ByRef @Name("operator =") V1LayerParameter put(@Const @ByRef V1LayerParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef V1LayerParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const V1LayerParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(V1LayerParameter other);
  

  // implements Message ----------------------------------------------

  public native final V1LayerParameter New();

  public native final V1LayerParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef V1LayerParameter from);
  public native void MergeFrom(@Const @ByRef V1LayerParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int NONE();
  public static final int NONE = NONE();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int ABSVAL();
  public static final int ABSVAL = ABSVAL();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int ACCURACY();
  public static final int ACCURACY = ACCURACY();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int ARGMAX();
  public static final int ARGMAX = ARGMAX();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int BNLL();
  public static final int BNLL = BNLL();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int CONCAT();
  public static final int CONCAT = CONCAT();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int CONTRASTIVE_LOSS();
  public static final int CONTRASTIVE_LOSS = CONTRASTIVE_LOSS();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int CONVOLUTION();
  public static final int CONVOLUTION = CONVOLUTION();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int DATA();
  public static final int DATA = DATA();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int DECONVOLUTION();
  public static final int DECONVOLUTION = DECONVOLUTION();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int DROPOUT();
  public static final int DROPOUT = DROPOUT();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int DUMMY_DATA();
  public static final int DUMMY_DATA = DUMMY_DATA();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int EUCLIDEAN_LOSS();
  public static final int EUCLIDEAN_LOSS = EUCLIDEAN_LOSS();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int ELTWISE();
  public static final int ELTWISE = ELTWISE();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int EXP();
  public static final int EXP = EXP();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int FLATTEN();
  public static final int FLATTEN = FLATTEN();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int HDF5_DATA();
  public static final int HDF5_DATA = HDF5_DATA();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int HDF5_OUTPUT();
  public static final int HDF5_OUTPUT = HDF5_OUTPUT();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int HINGE_LOSS();
  public static final int HINGE_LOSS = HINGE_LOSS();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int IM2COL();
  public static final int IM2COL = IM2COL();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int IMAGE_DATA();
  public static final int IMAGE_DATA = IMAGE_DATA();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int INFOGAIN_LOSS();
  public static final int INFOGAIN_LOSS = INFOGAIN_LOSS();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int INNER_PRODUCT();
  public static final int INNER_PRODUCT = INNER_PRODUCT();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int LRN();
  public static final int LRN = LRN();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int MEMORY_DATA();
  public static final int MEMORY_DATA = MEMORY_DATA();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int MULTINOMIAL_LOGISTIC_LOSS();
  public static final int MULTINOMIAL_LOGISTIC_LOSS = MULTINOMIAL_LOGISTIC_LOSS();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int MVN();
  public static final int MVN = MVN();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int POOLING();
  public static final int POOLING = POOLING();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int POWER();
  public static final int POWER = POWER();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int RELU();
  public static final int RELU = RELU();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int SIGMOID();
  public static final int SIGMOID = SIGMOID();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int SIGMOID_CROSS_ENTROPY_LOSS();
  public static final int SIGMOID_CROSS_ENTROPY_LOSS = SIGMOID_CROSS_ENTROPY_LOSS();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int SILENCE();
  public static final int SILENCE = SILENCE();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int SOFTMAX();
  public static final int SOFTMAX = SOFTMAX();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int SOFTMAX_LOSS();
  public static final int SOFTMAX_LOSS = SOFTMAX_LOSS();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int SPLIT();
  public static final int SPLIT = SPLIT();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int SLICE();
  public static final int SLICE = SLICE();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int TANH();
  public static final int TANH = TANH();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int WINDOW_DATA();
  public static final int WINDOW_DATA = WINDOW_DATA();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int THRESHOLD();
  public static final int THRESHOLD = THRESHOLD();
  public static native @Cast("bool") boolean LayerType_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int LayerType_MIN();
  public static final int LayerType_MIN = LayerType_MIN();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::LayerType") int LayerType_MAX();
  public static final int LayerType_MAX = LayerType_MAX();
  @MemberGetter public static native int LayerType_ARRAYSIZE();
  public static final int LayerType_ARRAYSIZE = LayerType_ARRAYSIZE();
  public static native @Const EnumDescriptor LayerType_descriptor();
  public static native @StdString BytePointer LayerType_Name(@Cast("caffe::V1LayerParameter::LayerType") int value);
  public static native @Cast("bool") boolean LayerType_Parse(@StdString BytePointer name,
        @Cast("caffe::V1LayerParameter::LayerType*") IntPointer value);
  public static native @Cast("bool") boolean LayerType_Parse(@StdString String name,
        @Cast("caffe::V1LayerParameter::LayerType*") IntBuffer value);
  public static native @Cast("bool") boolean LayerType_Parse(@StdString BytePointer name,
        @Cast("caffe::V1LayerParameter::LayerType*") int[] value);
  public static native @Cast("bool") boolean LayerType_Parse(@StdString String name,
        @Cast("caffe::V1LayerParameter::LayerType*") IntPointer value);
  public static native @Cast("bool") boolean LayerType_Parse(@StdString BytePointer name,
        @Cast("caffe::V1LayerParameter::LayerType*") IntBuffer value);
  public static native @Cast("bool") boolean LayerType_Parse(@StdString String name,
        @Cast("caffe::V1LayerParameter::LayerType*") int[] value);
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::DimCheckMode") int STRICT();
  public static final int STRICT = STRICT();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::DimCheckMode") int PERMISSIVE();
  public static final int PERMISSIVE = PERMISSIVE();
  public static native @Cast("bool") boolean DimCheckMode_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::DimCheckMode") int DimCheckMode_MIN();
  public static final int DimCheckMode_MIN = DimCheckMode_MIN();
  @MemberGetter public static native @Cast("const caffe::V1LayerParameter::DimCheckMode") int DimCheckMode_MAX();
  public static final int DimCheckMode_MAX = DimCheckMode_MAX();
  @MemberGetter public static native int DimCheckMode_ARRAYSIZE();
  public static final int DimCheckMode_ARRAYSIZE = DimCheckMode_ARRAYSIZE();
  public static native @Const EnumDescriptor DimCheckMode_descriptor();
  public static native @StdString BytePointer DimCheckMode_Name(@Cast("caffe::V1LayerParameter::DimCheckMode") int value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString BytePointer name,
        @Cast("caffe::V1LayerParameter::DimCheckMode*") IntPointer value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString String name,
        @Cast("caffe::V1LayerParameter::DimCheckMode*") IntBuffer value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString BytePointer name,
        @Cast("caffe::V1LayerParameter::DimCheckMode*") int[] value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString String name,
        @Cast("caffe::V1LayerParameter::DimCheckMode*") IntPointer value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString BytePointer name,
        @Cast("caffe::V1LayerParameter::DimCheckMode*") IntBuffer value);
  public static native @Cast("bool") boolean DimCheckMode_Parse(@StdString String name,
        @Cast("caffe::V1LayerParameter::DimCheckMode*") int[] value);

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  public native int bottom_size();
  public native void clear_bottom();
  @MemberGetter public static native int kBottomFieldNumber();
  public static final int kBottomFieldNumber = kBottomFieldNumber();
  public native @StdString BytePointer bottom(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_bottom(int index);
  public native void set_bottom(int index, @StdString BytePointer value);
  public native void set_bottom(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_bottom(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_bottom(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_bottom();
  public native void add_bottom(@StdString BytePointer value);
  public native void add_bottom(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_bottom(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_bottom(String value, @Cast("size_t") long size);

  // repeated string top = 3;
  public native int top_size();
  public native void clear_top();
  @MemberGetter public static native int kTopFieldNumber();
  public static final int kTopFieldNumber = kTopFieldNumber();
  public native @StdString BytePointer top(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_top(int index);
  public native void set_top(int index, @StdString BytePointer value);
  public native void set_top(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_top(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_top(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_top();
  public native void add_top(@StdString BytePointer value);
  public native void add_top(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_top(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_top(String value, @Cast("size_t") long size);

  // repeated .caffe.BlobProto blobs = 6;
  public native int blobs_size();
  public native void clear_blobs();
  @MemberGetter public static native int kBlobsFieldNumber();
  public static final int kBlobsFieldNumber = kBlobsFieldNumber();
  public native BlobProto mutable_blobs(int index);
  public native @Const @ByRef BlobProto blobs(int index);
  public native BlobProto add_blobs();

  // repeated float blobs_lr = 7;
  public native int blobs_lr_size();
  public native void clear_blobs_lr();
  @MemberGetter public static native int kBlobsLrFieldNumber();
  public static final int kBlobsLrFieldNumber = kBlobsLrFieldNumber();
  public native float blobs_lr(int index);
  public native void set_blobs_lr(int index, float value);
  public native void add_blobs_lr(float value);

  // repeated float weight_decay = 8;
  public native int weight_decay_size();
  public native void clear_weight_decay();
  @MemberGetter public static native int kWeightDecayFieldNumber();
  public static final int kWeightDecayFieldNumber = kWeightDecayFieldNumber();
  public native float weight_decay(int index);
  public native void set_weight_decay(int index, float value);
  public native void add_weight_decay(float value);

  // repeated .caffe.NetStateRule include = 32;
  public native int include_size();
  public native void clear_include();
  @MemberGetter public static native int kIncludeFieldNumber();
  public static final int kIncludeFieldNumber = kIncludeFieldNumber();
  public native NetStateRule mutable_include(int index);
  public native @Const @ByRef NetStateRule include(int index);
  public native NetStateRule add_include();

  // repeated .caffe.NetStateRule exclude = 33;
  public native int exclude_size();
  public native void clear_exclude();
  @MemberGetter public static native int kExcludeFieldNumber();
  public static final int kExcludeFieldNumber = kExcludeFieldNumber();
  public native NetStateRule mutable_exclude(int index);
  public native @Const @ByRef NetStateRule exclude(int index);
  public native NetStateRule add_exclude();

  // repeated float loss_weight = 35;
  public native int loss_weight_size();
  public native void clear_loss_weight();
  @MemberGetter public static native int kLossWeightFieldNumber();
  public static final int kLossWeightFieldNumber = kLossWeightFieldNumber();
  public native float loss_weight(int index);
  public native void set_loss_weight(int index, float value);
  public native void add_loss_weight(float value);

  // repeated string param = 1001;
  public native int param_size();
  public native void clear_param();
  @MemberGetter public static native int kParamFieldNumber();
  public static final int kParamFieldNumber = kParamFieldNumber();
  public native @StdString BytePointer param(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_param(int index);
  public native void set_param(int index, @StdString BytePointer value);
  public native void set_param(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_param(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_param(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_param();
  public native void add_param(@StdString BytePointer value);
  public native void add_param(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_param(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_param(String value, @Cast("size_t") long size);

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  public native int blob_share_mode_size();
  public native void clear_blob_share_mode();
  @MemberGetter public static native int kBlobShareModeFieldNumber();
  public static final int kBlobShareModeFieldNumber = kBlobShareModeFieldNumber();
  public native @Cast("caffe::V1LayerParameter_DimCheckMode") int blob_share_mode(int index);
  public native void set_blob_share_mode(int index, @Cast("caffe::V1LayerParameter_DimCheckMode") int value);
  public native void add_blob_share_mode(@Cast("caffe::V1LayerParameter_DimCheckMode") int value);

  // optional string name = 4;
  public native @Cast("bool") boolean has_name();
  public native void clear_name();
  @MemberGetter public static native int kNameFieldNumber();
  public static final int kNameFieldNumber = kNameFieldNumber();
  public native @StdString BytePointer name();
  public native void set_name(@StdString BytePointer value);
  public native void set_name(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_name(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_name(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_name();
  public native void set_allocated_name(@StdString @Cast({"char*", "std::string*"}) BytePointer name);

  // optional .caffe.V0LayerParameter layer = 1;
  public native @Cast("bool") boolean has_layer();
  public native void clear_layer();
  @MemberGetter public static native int kLayerFieldNumber();
  public static final int kLayerFieldNumber = kLayerFieldNumber();
  public native @Const @ByRef V0LayerParameter layer();
  public native V0LayerParameter release_layer();
  public native V0LayerParameter mutable_layer();
  public native void set_allocated_layer(V0LayerParameter layer);

  // optional .caffe.ConcatParameter concat_param = 9;
  public native @Cast("bool") boolean has_concat_param();
  public native void clear_concat_param();
  @MemberGetter public static native int kConcatParamFieldNumber();
  public static final int kConcatParamFieldNumber = kConcatParamFieldNumber();
  public native @Const @ByRef ConcatParameter concat_param();
  public native ConcatParameter release_concat_param();
  public native ConcatParameter mutable_concat_param();
  public native void set_allocated_concat_param(ConcatParameter concat_param);

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  public native @Cast("bool") boolean has_convolution_param();
  public native void clear_convolution_param();
  @MemberGetter public static native int kConvolutionParamFieldNumber();
  public static final int kConvolutionParamFieldNumber = kConvolutionParamFieldNumber();
  public native @Const @ByRef ConvolutionParameter convolution_param();
  public native ConvolutionParameter release_convolution_param();
  public native ConvolutionParameter mutable_convolution_param();
  public native void set_allocated_convolution_param(ConvolutionParameter convolution_param);

  // optional .caffe.DataParameter data_param = 11;
  public native @Cast("bool") boolean has_data_param();
  public native void clear_data_param();
  @MemberGetter public static native int kDataParamFieldNumber();
  public static final int kDataParamFieldNumber = kDataParamFieldNumber();
  public native @Const @ByRef DataParameter data_param();
  public native DataParameter release_data_param();
  public native DataParameter mutable_data_param();
  public native void set_allocated_data_param(DataParameter data_param);

  // optional .caffe.DropoutParameter dropout_param = 12;
  public native @Cast("bool") boolean has_dropout_param();
  public native void clear_dropout_param();
  @MemberGetter public static native int kDropoutParamFieldNumber();
  public static final int kDropoutParamFieldNumber = kDropoutParamFieldNumber();
  public native @Const @ByRef DropoutParameter dropout_param();
  public native DropoutParameter release_dropout_param();
  public native DropoutParameter mutable_dropout_param();
  public native void set_allocated_dropout_param(DropoutParameter dropout_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  public native @Cast("bool") boolean has_hdf5_data_param();
  public native void clear_hdf5_data_param();
  @MemberGetter public static native int kHdf5DataParamFieldNumber();
  public static final int kHdf5DataParamFieldNumber = kHdf5DataParamFieldNumber();
  public native @Const @ByRef HDF5DataParameter hdf5_data_param();
  public native HDF5DataParameter release_hdf5_data_param();
  public native HDF5DataParameter mutable_hdf5_data_param();
  public native void set_allocated_hdf5_data_param(HDF5DataParameter hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  public native @Cast("bool") boolean has_hdf5_output_param();
  public native void clear_hdf5_output_param();
  @MemberGetter public static native int kHdf5OutputParamFieldNumber();
  public static final int kHdf5OutputParamFieldNumber = kHdf5OutputParamFieldNumber();
  public native @Const @ByRef HDF5OutputParameter hdf5_output_param();
  public native HDF5OutputParameter release_hdf5_output_param();
  public native HDF5OutputParameter mutable_hdf5_output_param();
  public native void set_allocated_hdf5_output_param(HDF5OutputParameter hdf5_output_param);

  // optional .caffe.ImageDataParameter image_data_param = 15;
  public native @Cast("bool") boolean has_image_data_param();
  public native void clear_image_data_param();
  @MemberGetter public static native int kImageDataParamFieldNumber();
  public static final int kImageDataParamFieldNumber = kImageDataParamFieldNumber();
  public native @Const @ByRef ImageDataParameter image_data_param();
  public native ImageDataParameter release_image_data_param();
  public native ImageDataParameter mutable_image_data_param();
  public native void set_allocated_image_data_param(ImageDataParameter image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  public native @Cast("bool") boolean has_infogain_loss_param();
  public native void clear_infogain_loss_param();
  @MemberGetter public static native int kInfogainLossParamFieldNumber();
  public static final int kInfogainLossParamFieldNumber = kInfogainLossParamFieldNumber();
  public native @Const @ByRef InfogainLossParameter infogain_loss_param();
  public native InfogainLossParameter release_infogain_loss_param();
  public native InfogainLossParameter mutable_infogain_loss_param();
  public native void set_allocated_infogain_loss_param(InfogainLossParameter infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  public native @Cast("bool") boolean has_inner_product_param();
  public native void clear_inner_product_param();
  @MemberGetter public static native int kInnerProductParamFieldNumber();
  public static final int kInnerProductParamFieldNumber = kInnerProductParamFieldNumber();
  public native @Const @ByRef InnerProductParameter inner_product_param();
  public native InnerProductParameter release_inner_product_param();
  public native InnerProductParameter mutable_inner_product_param();
  public native void set_allocated_inner_product_param(InnerProductParameter inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 18;
  public native @Cast("bool") boolean has_lrn_param();
  public native void clear_lrn_param();
  @MemberGetter public static native int kLrnParamFieldNumber();
  public static final int kLrnParamFieldNumber = kLrnParamFieldNumber();
  public native @Const @ByRef LRNParameter lrn_param();
  public native LRNParameter release_lrn_param();
  public native LRNParameter mutable_lrn_param();
  public native void set_allocated_lrn_param(LRNParameter lrn_param);

  // optional .caffe.PoolingParameter pooling_param = 19;
  public native @Cast("bool") boolean has_pooling_param();
  public native void clear_pooling_param();
  @MemberGetter public static native int kPoolingParamFieldNumber();
  public static final int kPoolingParamFieldNumber = kPoolingParamFieldNumber();
  public native @Const @ByRef PoolingParameter pooling_param();
  public native PoolingParameter release_pooling_param();
  public native PoolingParameter mutable_pooling_param();
  public native void set_allocated_pooling_param(PoolingParameter pooling_param);

  // optional .caffe.WindowDataParameter window_data_param = 20;
  public native @Cast("bool") boolean has_window_data_param();
  public native void clear_window_data_param();
  @MemberGetter public static native int kWindowDataParamFieldNumber();
  public static final int kWindowDataParamFieldNumber = kWindowDataParamFieldNumber();
  public native @Const @ByRef WindowDataParameter window_data_param();
  public native WindowDataParameter release_window_data_param();
  public native WindowDataParameter mutable_window_data_param();
  public native void set_allocated_window_data_param(WindowDataParameter window_data_param);

  // optional .caffe.PowerParameter power_param = 21;
  public native @Cast("bool") boolean has_power_param();
  public native void clear_power_param();
  @MemberGetter public static native int kPowerParamFieldNumber();
  public static final int kPowerParamFieldNumber = kPowerParamFieldNumber();
  public native @Const @ByRef PowerParameter power_param();
  public native PowerParameter release_power_param();
  public native PowerParameter mutable_power_param();
  public native void set_allocated_power_param(PowerParameter power_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  public native @Cast("bool") boolean has_memory_data_param();
  public native void clear_memory_data_param();
  @MemberGetter public static native int kMemoryDataParamFieldNumber();
  public static final int kMemoryDataParamFieldNumber = kMemoryDataParamFieldNumber();
  public native @Const @ByRef MemoryDataParameter memory_data_param();
  public native MemoryDataParameter release_memory_data_param();
  public native MemoryDataParameter mutable_memory_data_param();
  public native void set_allocated_memory_data_param(MemoryDataParameter memory_data_param);

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  public native @Cast("bool") boolean has_argmax_param();
  public native void clear_argmax_param();
  @MemberGetter public static native int kArgmaxParamFieldNumber();
  public static final int kArgmaxParamFieldNumber = kArgmaxParamFieldNumber();
  public native @Const @ByRef ArgMaxParameter argmax_param();
  public native ArgMaxParameter release_argmax_param();
  public native ArgMaxParameter mutable_argmax_param();
  public native void set_allocated_argmax_param(ArgMaxParameter argmax_param);

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  public native @Cast("bool") boolean has_eltwise_param();
  public native void clear_eltwise_param();
  @MemberGetter public static native int kEltwiseParamFieldNumber();
  public static final int kEltwiseParamFieldNumber = kEltwiseParamFieldNumber();
  public native @Const @ByRef EltwiseParameter eltwise_param();
  public native EltwiseParameter release_eltwise_param();
  public native EltwiseParameter mutable_eltwise_param();
  public native void set_allocated_eltwise_param(EltwiseParameter eltwise_param);

  // optional .caffe.ThresholdParameter threshold_param = 25;
  public native @Cast("bool") boolean has_threshold_param();
  public native void clear_threshold_param();
  @MemberGetter public static native int kThresholdParamFieldNumber();
  public static final int kThresholdParamFieldNumber = kThresholdParamFieldNumber();
  public native @Const @ByRef ThresholdParameter threshold_param();
  public native ThresholdParameter release_threshold_param();
  public native ThresholdParameter mutable_threshold_param();
  public native void set_allocated_threshold_param(ThresholdParameter threshold_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  public native @Cast("bool") boolean has_dummy_data_param();
  public native void clear_dummy_data_param();
  @MemberGetter public static native int kDummyDataParamFieldNumber();
  public static final int kDummyDataParamFieldNumber = kDummyDataParamFieldNumber();
  public native @Const @ByRef DummyDataParameter dummy_data_param();
  public native DummyDataParameter release_dummy_data_param();
  public native DummyDataParameter mutable_dummy_data_param();
  public native void set_allocated_dummy_data_param(DummyDataParameter dummy_data_param);

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  public native @Cast("bool") boolean has_accuracy_param();
  public native void clear_accuracy_param();
  @MemberGetter public static native int kAccuracyParamFieldNumber();
  public static final int kAccuracyParamFieldNumber = kAccuracyParamFieldNumber();
  public native @Const @ByRef AccuracyParameter accuracy_param();
  public native AccuracyParameter release_accuracy_param();
  public native AccuracyParameter mutable_accuracy_param();
  public native void set_allocated_accuracy_param(AccuracyParameter accuracy_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  public native @Cast("bool") boolean has_hinge_loss_param();
  public native void clear_hinge_loss_param();
  @MemberGetter public static native int kHingeLossParamFieldNumber();
  public static final int kHingeLossParamFieldNumber = kHingeLossParamFieldNumber();
  public native @Const @ByRef HingeLossParameter hinge_loss_param();
  public native HingeLossParameter release_hinge_loss_param();
  public native HingeLossParameter mutable_hinge_loss_param();
  public native void set_allocated_hinge_loss_param(HingeLossParameter hinge_loss_param);

  // optional .caffe.ReLUParameter relu_param = 30;
  public native @Cast("bool") boolean has_relu_param();
  public native void clear_relu_param();
  @MemberGetter public static native int kReluParamFieldNumber();
  public static final int kReluParamFieldNumber = kReluParamFieldNumber();
  public native @Const @ByRef ReLUParameter relu_param();
  public native ReLUParameter release_relu_param();
  public native ReLUParameter mutable_relu_param();
  public native void set_allocated_relu_param(ReLUParameter relu_param);

  // optional .caffe.SliceParameter slice_param = 31;
  public native @Cast("bool") boolean has_slice_param();
  public native void clear_slice_param();
  @MemberGetter public static native int kSliceParamFieldNumber();
  public static final int kSliceParamFieldNumber = kSliceParamFieldNumber();
  public native @Const @ByRef SliceParameter slice_param();
  public native SliceParameter release_slice_param();
  public native SliceParameter mutable_slice_param();
  public native void set_allocated_slice_param(SliceParameter slice_param);

  // optional .caffe.MVNParameter mvn_param = 34;
  public native @Cast("bool") boolean has_mvn_param();
  public native void clear_mvn_param();
  @MemberGetter public static native int kMvnParamFieldNumber();
  public static final int kMvnParamFieldNumber = kMvnParamFieldNumber();
  public native @Const @ByRef MVNParameter mvn_param();
  public native MVNParameter release_mvn_param();
  public native MVNParameter mutable_mvn_param();
  public native void set_allocated_mvn_param(MVNParameter mvn_param);

  // optional .caffe.TransformationParameter transform_param = 36;
  public native @Cast("bool") boolean has_transform_param();
  public native void clear_transform_param();
  @MemberGetter public static native int kTransformParamFieldNumber();
  public static final int kTransformParamFieldNumber = kTransformParamFieldNumber();
  public native @Const @ByRef TransformationParameter transform_param();
  public native TransformationParameter release_transform_param();
  public native TransformationParameter mutable_transform_param();
  public native void set_allocated_transform_param(TransformationParameter transform_param);

  // optional .caffe.TanHParameter tanh_param = 37;
  public native @Cast("bool") boolean has_tanh_param();
  public native void clear_tanh_param();
  @MemberGetter public static native int kTanhParamFieldNumber();
  public static final int kTanhParamFieldNumber = kTanhParamFieldNumber();
  public native @Const @ByRef TanHParameter tanh_param();
  public native TanHParameter release_tanh_param();
  public native TanHParameter mutable_tanh_param();
  public native void set_allocated_tanh_param(TanHParameter tanh_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  public native @Cast("bool") boolean has_sigmoid_param();
  public native void clear_sigmoid_param();
  @MemberGetter public static native int kSigmoidParamFieldNumber();
  public static final int kSigmoidParamFieldNumber = kSigmoidParamFieldNumber();
  public native @Const @ByRef SigmoidParameter sigmoid_param();
  public native SigmoidParameter release_sigmoid_param();
  public native SigmoidParameter mutable_sigmoid_param();
  public native void set_allocated_sigmoid_param(SigmoidParameter sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  public native @Cast("bool") boolean has_softmax_param();
  public native void clear_softmax_param();
  @MemberGetter public static native int kSoftmaxParamFieldNumber();
  public static final int kSoftmaxParamFieldNumber = kSoftmaxParamFieldNumber();
  public native @Const @ByRef SoftmaxParameter softmax_param();
  public native SoftmaxParameter release_softmax_param();
  public native SoftmaxParameter mutable_softmax_param();
  public native void set_allocated_softmax_param(SoftmaxParameter softmax_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  public native @Cast("bool") boolean has_contrastive_loss_param();
  public native void clear_contrastive_loss_param();
  @MemberGetter public static native int kContrastiveLossParamFieldNumber();
  public static final int kContrastiveLossParamFieldNumber = kContrastiveLossParamFieldNumber();
  public native @Const @ByRef ContrastiveLossParameter contrastive_loss_param();
  public native ContrastiveLossParameter release_contrastive_loss_param();
  public native ContrastiveLossParameter mutable_contrastive_loss_param();
  public native void set_allocated_contrastive_loss_param(ContrastiveLossParameter contrastive_loss_param);

  // optional .caffe.ExpParameter exp_param = 41;
  public native @Cast("bool") boolean has_exp_param();
  public native void clear_exp_param();
  @MemberGetter public static native int kExpParamFieldNumber();
  public static final int kExpParamFieldNumber = kExpParamFieldNumber();
  public native @Const @ByRef ExpParameter exp_param();
  public native ExpParameter release_exp_param();
  public native ExpParameter mutable_exp_param();
  public native void set_allocated_exp_param(ExpParameter exp_param);

  // optional .caffe.LossParameter loss_param = 42;
  public native @Cast("bool") boolean has_loss_param();
  public native void clear_loss_param();
  @MemberGetter public static native int kLossParamFieldNumber();
  public static final int kLossParamFieldNumber = kLossParamFieldNumber();
  public native @Const @ByRef LossParameter loss_param();
  public native LossParameter release_loss_param();
  public native LossParameter mutable_loss_param();
  public native void set_allocated_loss_param(LossParameter loss_param);

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  public native @Cast("bool") boolean has_type();
  public native void clear_type();
  @MemberGetter public static native int kTypeFieldNumber();
  public static final int kTypeFieldNumber = kTypeFieldNumber();
  public native @Cast("caffe::V1LayerParameter_LayerType") int type();
  public native void set_type(@Cast("caffe::V1LayerParameter_LayerType") int value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class V0LayerParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public V0LayerParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public V0LayerParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public V0LayerParameter position(long position) {
        return (V0LayerParameter)super.position(position);
    }

  public V0LayerParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public V0LayerParameter(@Const @ByRef V0LayerParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef V0LayerParameter from);

  public native @ByRef @Name("operator =") V0LayerParameter put(@Const @ByRef V0LayerParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef V0LayerParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const V0LayerParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(V0LayerParameter other);
  

  // implements Message ----------------------------------------------

  public native final V0LayerParameter New();

  public native final V0LayerParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef V0LayerParameter from);
  public native void MergeFrom(@Const @ByRef V0LayerParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::V0LayerParameter::PoolMethod") int MAX();
  public static final int MAX = MAX();
  @MemberGetter public static native @Cast("const caffe::V0LayerParameter::PoolMethod") int AVE();
  public static final int AVE = AVE();
  @MemberGetter public static native @Cast("const caffe::V0LayerParameter::PoolMethod") int STOCHASTIC();
  public static final int STOCHASTIC = STOCHASTIC();
  public static native @Cast("bool") boolean PoolMethod_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::V0LayerParameter::PoolMethod") int PoolMethod_MIN();
  public static final int PoolMethod_MIN = PoolMethod_MIN();
  @MemberGetter public static native @Cast("const caffe::V0LayerParameter::PoolMethod") int PoolMethod_MAX();
  public static final int PoolMethod_MAX = PoolMethod_MAX();
  @MemberGetter public static native int PoolMethod_ARRAYSIZE();
  public static final int PoolMethod_ARRAYSIZE = PoolMethod_ARRAYSIZE();
  public static native @Const EnumDescriptor PoolMethod_descriptor();
  public static native @StdString BytePointer PoolMethod_Name(@Cast("caffe::V0LayerParameter::PoolMethod") int value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::V0LayerParameter::PoolMethod*") IntPointer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::V0LayerParameter::PoolMethod*") IntBuffer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::V0LayerParameter::PoolMethod*") int[] value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::V0LayerParameter::PoolMethod*") IntPointer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString BytePointer name,
        @Cast("caffe::V0LayerParameter::PoolMethod*") IntBuffer value);
  public static native @Cast("bool") boolean PoolMethod_Parse(@StdString String name,
        @Cast("caffe::V0LayerParameter::PoolMethod*") int[] value);

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 50;
  public native int blobs_size();
  public native void clear_blobs();
  @MemberGetter public static native int kBlobsFieldNumber();
  public static final int kBlobsFieldNumber = kBlobsFieldNumber();
  public native BlobProto mutable_blobs(int index);
  public native @Const @ByRef BlobProto blobs(int index);
  public native BlobProto add_blobs();

  // repeated float blobs_lr = 51;
  public native int blobs_lr_size();
  public native void clear_blobs_lr();
  @MemberGetter public static native int kBlobsLrFieldNumber();
  public static final int kBlobsLrFieldNumber = kBlobsLrFieldNumber();
  public native float blobs_lr(int index);
  public native void set_blobs_lr(int index, float value);
  public native void add_blobs_lr(float value);

  // repeated float weight_decay = 52;
  public native int weight_decay_size();
  public native void clear_weight_decay();
  @MemberGetter public static native int kWeightDecayFieldNumber();
  public static final int kWeightDecayFieldNumber = kWeightDecayFieldNumber();
  public native float weight_decay(int index);
  public native void set_weight_decay(int index, float value);
  public native void add_weight_decay(float value);

  // optional string name = 1;
  public native @Cast("bool") boolean has_name();
  public native void clear_name();
  @MemberGetter public static native int kNameFieldNumber();
  public static final int kNameFieldNumber = kNameFieldNumber();
  public native @StdString BytePointer name();
  public native void set_name(@StdString BytePointer value);
  public native void set_name(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_name(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_name(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_name();
  public native void set_allocated_name(@StdString @Cast({"char*", "std::string*"}) BytePointer name);

  // optional string type = 2;
  public native @Cast("bool") boolean has_type();
  public native void clear_type();
  @MemberGetter public static native int kTypeFieldNumber();
  public static final int kTypeFieldNumber = kTypeFieldNumber();
  public native @StdString BytePointer type();
  public native void set_type(@StdString BytePointer value);
  public native void set_type(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_type(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_type(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_type();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_type();
  public native void set_allocated_type(@StdString @Cast({"char*", "std::string*"}) BytePointer type);

  // optional string source = 16;
  public native @Cast("bool") boolean has_source();
  public native void clear_source();
  @MemberGetter public static native int kSourceFieldNumber();
  public static final int kSourceFieldNumber = kSourceFieldNumber();
  public native @StdString BytePointer source();
  public native void set_source(@StdString BytePointer value);
  public native void set_source(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_source(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_source(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_source();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_source();
  public native void set_allocated_source(@StdString @Cast({"char*", "std::string*"}) BytePointer source);

  // optional string meanfile = 18;
  public native @Cast("bool") boolean has_meanfile();
  public native void clear_meanfile();
  @MemberGetter public static native int kMeanfileFieldNumber();
  public static final int kMeanfileFieldNumber = kMeanfileFieldNumber();
  public native @StdString BytePointer meanfile();
  public native void set_meanfile(@StdString BytePointer value);
  public native void set_meanfile(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_meanfile(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_meanfile(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_meanfile();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_meanfile();
  public native void set_allocated_meanfile(@StdString @Cast({"char*", "std::string*"}) BytePointer meanfile);

  // optional string det_crop_mode = 59 [default = "warp"];
  public native @Cast("bool") boolean has_det_crop_mode();
  public native void clear_det_crop_mode();
  @MemberGetter public static native int kDetCropModeFieldNumber();
  public static final int kDetCropModeFieldNumber = kDetCropModeFieldNumber();
  public native @StdString BytePointer det_crop_mode();
  public native void set_det_crop_mode(@StdString BytePointer value);
  public native void set_det_crop_mode(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_det_crop_mode(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_det_crop_mode(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_det_crop_mode();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_det_crop_mode();
  public native void set_allocated_det_crop_mode(@StdString @Cast({"char*", "std::string*"}) BytePointer det_crop_mode);

  // optional .caffe.FillerParameter weight_filler = 5;
  public native @Cast("bool") boolean has_weight_filler();
  public native void clear_weight_filler();
  @MemberGetter public static native int kWeightFillerFieldNumber();
  public static final int kWeightFillerFieldNumber = kWeightFillerFieldNumber();
  public native @Const @ByRef FillerParameter weight_filler();
  public native FillerParameter release_weight_filler();
  public native FillerParameter mutable_weight_filler();
  public native void set_allocated_weight_filler(FillerParameter weight_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  public native @Cast("bool") boolean has_bias_filler();
  public native void clear_bias_filler();
  @MemberGetter public static native int kBiasFillerFieldNumber();
  public static final int kBiasFillerFieldNumber = kBiasFillerFieldNumber();
  public native @Const @ByRef FillerParameter bias_filler();
  public native FillerParameter release_bias_filler();
  public native FillerParameter mutable_bias_filler();
  public native void set_allocated_bias_filler(FillerParameter bias_filler);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  public native @Cast("bool") boolean has_hdf5_output_param();
  public native void clear_hdf5_output_param();
  @MemberGetter public static native int kHdf5OutputParamFieldNumber();
  public static final int kHdf5OutputParamFieldNumber = kHdf5OutputParamFieldNumber();
  public native @Const @ByRef HDF5OutputParameter hdf5_output_param();
  public native HDF5OutputParameter release_hdf5_output_param();
  public native HDF5OutputParameter mutable_hdf5_output_param();
  public native void set_allocated_hdf5_output_param(HDF5OutputParameter hdf5_output_param);

  // optional uint32 num_output = 3;
  public native @Cast("bool") boolean has_num_output();
  public native void clear_num_output();
  @MemberGetter public static native int kNumOutputFieldNumber();
  public static final int kNumOutputFieldNumber = kNumOutputFieldNumber();
  public native @Cast("google::protobuf::uint32") int num_output();
  public native void set_num_output(@Cast("google::protobuf::uint32") int value);

  // optional uint32 pad = 7 [default = 0];
  public native @Cast("bool") boolean has_pad();
  public native void clear_pad();
  @MemberGetter public static native int kPadFieldNumber();
  public static final int kPadFieldNumber = kPadFieldNumber();
  public native @Cast("google::protobuf::uint32") int pad();
  public native void set_pad(@Cast("google::protobuf::uint32") int value);

  // optional uint32 kernelsize = 8;
  public native @Cast("bool") boolean has_kernelsize();
  public native void clear_kernelsize();
  @MemberGetter public static native int kKernelsizeFieldNumber();
  public static final int kKernelsizeFieldNumber = kKernelsizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int kernelsize();
  public native void set_kernelsize(@Cast("google::protobuf::uint32") int value);

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  public native @Cast("bool") boolean has_pool();
  public native void clear_pool();
  @MemberGetter public static native int kPoolFieldNumber();
  public static final int kPoolFieldNumber = kPoolFieldNumber();
  public native @Cast("caffe::V0LayerParameter_PoolMethod") int pool();
  public native void set_pool(@Cast("caffe::V0LayerParameter_PoolMethod") int value);

  // optional uint32 batchsize = 19;
  public native @Cast("bool") boolean has_batchsize();
  public native void clear_batchsize();
  @MemberGetter public static native int kBatchsizeFieldNumber();
  public static final int kBatchsizeFieldNumber = kBatchsizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int batchsize();
  public native void set_batchsize(@Cast("google::protobuf::uint32") int value);

  // optional uint32 cropsize = 20 [default = 0];
  public native @Cast("bool") boolean has_cropsize();
  public native void clear_cropsize();
  @MemberGetter public static native int kCropsizeFieldNumber();
  public static final int kCropsizeFieldNumber = kCropsizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int cropsize();
  public native void set_cropsize(@Cast("google::protobuf::uint32") int value);

  // optional int32 new_width = 63 [default = 0];
  public native @Cast("bool") boolean has_new_width();
  public native void clear_new_width();
  @MemberGetter public static native int kNewWidthFieldNumber();
  public static final int kNewWidthFieldNumber = kNewWidthFieldNumber();
  public native @Cast("google::protobuf::int32") int new_width();
  public native void set_new_width(@Cast("google::protobuf::int32") int value);

  // optional bool mirror = 21 [default = false];
  public native @Cast("bool") boolean has_mirror();
  public native void clear_mirror();
  @MemberGetter public static native int kMirrorFieldNumber();
  public static final int kMirrorFieldNumber = kMirrorFieldNumber();
  public native @Cast("bool") boolean mirror();
  public native void set_mirror(@Cast("bool") boolean value);

  // optional bool shuffle_images = 64 [default = false];
  public native @Cast("bool") boolean has_shuffle_images();
  public native void clear_shuffle_images();
  @MemberGetter public static native int kShuffleImagesFieldNumber();
  public static final int kShuffleImagesFieldNumber = kShuffleImagesFieldNumber();
  public native @Cast("bool") boolean shuffle_images();
  public native void set_shuffle_images(@Cast("bool") boolean value);

  // optional uint32 rand_skip = 53 [default = 0];
  public native @Cast("bool") boolean has_rand_skip();
  public native void clear_rand_skip();
  @MemberGetter public static native int kRandSkipFieldNumber();
  public static final int kRandSkipFieldNumber = kRandSkipFieldNumber();
  public native @Cast("google::protobuf::uint32") int rand_skip();
  public native void set_rand_skip(@Cast("google::protobuf::uint32") int value);

  // optional uint32 det_context_pad = 58 [default = 0];
  public native @Cast("bool") boolean has_det_context_pad();
  public native void clear_det_context_pad();
  @MemberGetter public static native int kDetContextPadFieldNumber();
  public static final int kDetContextPadFieldNumber = kDetContextPadFieldNumber();
  public native @Cast("google::protobuf::uint32") int det_context_pad();
  public native void set_det_context_pad(@Cast("google::protobuf::uint32") int value);

  // optional int32 new_num = 60 [default = 0];
  public native @Cast("bool") boolean has_new_num();
  public native void clear_new_num();
  @MemberGetter public static native int kNewNumFieldNumber();
  public static final int kNewNumFieldNumber = kNewNumFieldNumber();
  public native @Cast("google::protobuf::int32") int new_num();
  public native void set_new_num(@Cast("google::protobuf::int32") int value);

  // optional int32 new_channels = 61 [default = 0];
  public native @Cast("bool") boolean has_new_channels();
  public native void clear_new_channels();
  @MemberGetter public static native int kNewChannelsFieldNumber();
  public static final int kNewChannelsFieldNumber = kNewChannelsFieldNumber();
  public native @Cast("google::protobuf::int32") int new_channels();
  public native void set_new_channels(@Cast("google::protobuf::int32") int value);

  // optional int32 new_height = 62 [default = 0];
  public native @Cast("bool") boolean has_new_height();
  public native void clear_new_height();
  @MemberGetter public static native int kNewHeightFieldNumber();
  public static final int kNewHeightFieldNumber = kNewHeightFieldNumber();
  public native @Cast("google::protobuf::int32") int new_height();
  public native void set_new_height(@Cast("google::protobuf::int32") int value);

  // optional uint32 concat_dim = 65 [default = 1];
  public native @Cast("bool") boolean has_concat_dim();
  public native void clear_concat_dim();
  @MemberGetter public static native int kConcatDimFieldNumber();
  public static final int kConcatDimFieldNumber = kConcatDimFieldNumber();
  public native @Cast("google::protobuf::uint32") int concat_dim();
  public native void set_concat_dim(@Cast("google::protobuf::uint32") int value);

  // optional bool biasterm = 4 [default = true];
  public native @Cast("bool") boolean has_biasterm();
  public native void clear_biasterm();
  @MemberGetter public static native int kBiastermFieldNumber();
  public static final int kBiastermFieldNumber = kBiastermFieldNumber();
  public native @Cast("bool") boolean biasterm();
  public native void set_biasterm(@Cast("bool") boolean value);

  // optional uint32 group = 9 [default = 1];
  public native @Cast("bool") boolean has_group();
  public native void clear_group();
  @MemberGetter public static native int kGroupFieldNumber();
  public static final int kGroupFieldNumber = kGroupFieldNumber();
  public native @Cast("google::protobuf::uint32") int group();
  public native void set_group(@Cast("google::protobuf::uint32") int value);

  // optional uint32 stride = 10 [default = 1];
  public native @Cast("bool") boolean has_stride();
  public native void clear_stride();
  @MemberGetter public static native int kStrideFieldNumber();
  public static final int kStrideFieldNumber = kStrideFieldNumber();
  public native @Cast("google::protobuf::uint32") int stride();
  public native void set_stride(@Cast("google::protobuf::uint32") int value);

  // optional float dropout_ratio = 12 [default = 0.5];
  public native @Cast("bool") boolean has_dropout_ratio();
  public native void clear_dropout_ratio();
  @MemberGetter public static native int kDropoutRatioFieldNumber();
  public static final int kDropoutRatioFieldNumber = kDropoutRatioFieldNumber();
  public native float dropout_ratio();
  public native void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  public native @Cast("bool") boolean has_local_size();
  public native void clear_local_size();
  @MemberGetter public static native int kLocalSizeFieldNumber();
  public static final int kLocalSizeFieldNumber = kLocalSizeFieldNumber();
  public native @Cast("google::protobuf::uint32") int local_size();
  public native void set_local_size(@Cast("google::protobuf::uint32") int value);

  // optional float alpha = 14 [default = 1];
  public native @Cast("bool") boolean has_alpha();
  public native void clear_alpha();
  @MemberGetter public static native int kAlphaFieldNumber();
  public static final int kAlphaFieldNumber = kAlphaFieldNumber();
  public native float alpha();
  public native void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  public native @Cast("bool") boolean has_beta();
  public native void clear_beta();
  @MemberGetter public static native int kBetaFieldNumber();
  public static final int kBetaFieldNumber = kBetaFieldNumber();
  public native float beta();
  public native void set_beta(float value);

  // optional float scale = 17 [default = 1];
  public native @Cast("bool") boolean has_scale();
  public native void clear_scale();
  @MemberGetter public static native int kScaleFieldNumber();
  public static final int kScaleFieldNumber = kScaleFieldNumber();
  public native float scale();
  public native void set_scale(float value);

  // optional float k = 22 [default = 1];
  public native @Cast("bool") boolean has_k();
  public native void clear_k();
  @MemberGetter public static native int kKFieldNumber();
  public static final int kKFieldNumber = kKFieldNumber();
  public native float k();
  public native void set_k(float value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  public native @Cast("bool") boolean has_det_fg_threshold();
  public native void clear_det_fg_threshold();
  @MemberGetter public static native int kDetFgThresholdFieldNumber();
  public static final int kDetFgThresholdFieldNumber = kDetFgThresholdFieldNumber();
  public native float det_fg_threshold();
  public native void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  public native @Cast("bool") boolean has_det_bg_threshold();
  public native void clear_det_bg_threshold();
  @MemberGetter public static native int kDetBgThresholdFieldNumber();
  public static final int kDetBgThresholdFieldNumber = kDetBgThresholdFieldNumber();
  public native float det_bg_threshold();
  public native void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  public native @Cast("bool") boolean has_det_fg_fraction();
  public native void clear_det_fg_fraction();
  @MemberGetter public static native int kDetFgFractionFieldNumber();
  public static final int kDetFgFractionFieldNumber = kDetFgFractionFieldNumber();
  public native float det_fg_fraction();
  public native void set_det_fg_fraction(float value);
}
// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset public static class PReLUParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PReLUParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PReLUParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public PReLUParameter position(long position) {
        return (PReLUParameter)super.position(position);
    }

  public PReLUParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public PReLUParameter(@Const @ByRef PReLUParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef PReLUParameter from);

  public native @ByRef @Name("operator =") PReLUParameter put(@Const @ByRef PReLUParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef PReLUParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const PReLUParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(PReLUParameter other);
  

  // implements Message ----------------------------------------------

  public native final PReLUParameter New();

  public native final PReLUParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef PReLUParameter from);
  public native void MergeFrom(@Const @ByRef PReLUParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 1;
  public native @Cast("bool") boolean has_filler();
  public native void clear_filler();
  @MemberGetter public static native int kFillerFieldNumber();
  public static final int kFillerFieldNumber = kFillerFieldNumber();
  public native @Const @ByRef FillerParameter filler();
  public native FillerParameter release_filler();
  public native FillerParameter mutable_filler();
  public native void set_allocated_filler(FillerParameter filler);

  // optional bool channel_shared = 2 [default = false];
  public native @Cast("bool") boolean has_channel_shared();
  public native void clear_channel_shared();
  @MemberGetter public static native int kChannelSharedFieldNumber();
  public static final int kChannelSharedFieldNumber = kChannelSharedFieldNumber();
  public native @Cast("bool") boolean channel_shared();
  public native void set_channel_shared(@Cast("bool") boolean value);
}
// ===================================================================


// ===================================================================

// #ifdef __GNUC__
//   #pragma GCC diagnostic push
//   #pragma GCC diagnostic ignored "-Wstrict-aliasing"
// #endif  // __GNUC__
// BlobShape

// repeated int64 dim = 1 [packed = true];








// -------------------------------------------------------------------

// BlobProto

// optional .caffe.BlobShape shape = 7;










// repeated float data = 5 [packed = true];








// repeated float diff = 6 [packed = true];








// repeated double double_data = 8 [packed = true];








// repeated double double_diff = 9 [packed = true];








// optional int32 num = 1 [default = 0];







// optional int32 channels = 2 [default = 0];







// optional int32 height = 3 [default = 0];







// optional int32 width = 4 [default = 0];







// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;








// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;







// optional int32 height = 2;







// optional int32 width = 3;







// optional bytes data = 4;






// #if LANG_CXX11
// #endif






// optional int32 label = 5;







// repeated float float_data = 6;








// optional bool encoded = 7 [default = false];







// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];






// #if LANG_CXX11
// #endif






// optional float value = 2 [default = 0];







// optional float min = 3 [default = 0];







// optional float max = 4 [default = 1];







// optional float mean = 5 [default = 0];







// optional float std = 6 [default = 1];







// optional int32 sparse = 7 [default = -1];







// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];







// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;






// #if LANG_CXX11
// #endif






// repeated string input = 3;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// repeated .caffe.BlobShape input_shape = 8;








// repeated int32 input_dim = 4;








// optional bool force_backward = 5 [default = false];







// optional .caffe.NetState state = 6;










// optional bool debug_info = 7 [default = false];







// repeated .caffe.LayerParameter layer = 100;








// repeated .caffe.V1LayerParameter layers = 2;








// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;






// #if LANG_CXX11
// #endif






// optional .caffe.NetParameter net_param = 25;










// optional string train_net = 1;






// #if LANG_CXX11
// #endif






// repeated string test_net = 2;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// optional .caffe.NetParameter train_net_param = 21;










// repeated .caffe.NetParameter test_net_param = 22;








// optional .caffe.NetState train_state = 26;










// repeated .caffe.NetState test_state = 27;








// repeated int32 test_iter = 3;








// optional int32 test_interval = 4 [default = 0];







// optional bool test_compute_loss = 19 [default = false];







// optional bool test_initialization = 32 [default = true];







// optional float base_lr = 5;







// optional int32 display = 6;







// optional int32 average_loss = 33 [default = 1];







// optional int32 max_iter = 7;







// optional int32 iter_size = 36 [default = 1];







// optional string lr_policy = 8;






// #if LANG_CXX11
// #endif






// optional float gamma = 9;







// optional float power = 10;







// optional float momentum = 11;







// optional float weight_decay = 12;







// optional string regularization_type = 29 [default = "L2"];






// #if LANG_CXX11
// #endif






// optional int32 stepsize = 13;







// repeated int32 stepvalue = 34;








// optional float clip_gradients = 35 [default = -1];







// optional int32 snapshot = 14 [default = 0];







// optional string snapshot_prefix = 15;






// #if LANG_CXX11
// #endif






// optional bool snapshot_diff = 16 [default = false];







// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];







// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];







// optional int32 device_id = 18 [default = 0];







// optional int64 random_seed = 20 [default = -1];







// optional string type = 40 [default = "SGD"];






// #if LANG_CXX11
// #endif






// optional float delta = 31 [default = 1e-08];







// optional float momentum2 = 39 [default = 0.999];







// optional float rms_decay = 38 [default = 0.99];







// optional bool debug_info = 23 [default = false];







// optional bool snapshot_after_train = 28 [default = true];







// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];







// optional bool layer_wise_reduce = 41 [default = true];







// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;







// optional string learned_net = 2;






// #if LANG_CXX11
// #endif






// repeated .caffe.BlobProto history = 3;








// optional int32 current_step = 4 [default = 0];







// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];







// optional int32 level = 2 [default = 0];







// repeated string stage = 3;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// -------------------------------------------------------------------

// NetStateRule

// optional .caffe.Phase phase = 1;







// optional int32 min_level = 2;







// optional int32 max_level = 3;







// repeated string stage = 4;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// repeated string not_stage = 5;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;






// #if LANG_CXX11
// #endif






// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;







// optional float lr_mult = 3 [default = 1];







// optional float decay_mult = 4 [default = 1];







// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;






// #if LANG_CXX11
// #endif






// optional string type = 2;






// #if LANG_CXX11
// #endif






// repeated string bottom = 3;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// repeated string top = 4;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// optional .caffe.Phase phase = 10;







// repeated float loss_weight = 5;








// repeated .caffe.ParamSpec param = 6;








// repeated .caffe.BlobProto blobs = 7;








// repeated bool propagate_down = 11;








// repeated .caffe.NetStateRule include = 8;








// repeated .caffe.NetStateRule exclude = 9;








// optional .caffe.TransformationParameter transform_param = 100;










// optional .caffe.LossParameter loss_param = 101;










// optional .caffe.AccuracyParameter accuracy_param = 102;










// optional .caffe.ArgMaxParameter argmax_param = 103;










// optional .caffe.BatchNormParameter batch_norm_param = 139;










// optional .caffe.BiasParameter bias_param = 141;










// optional .caffe.ConcatParameter concat_param = 104;










// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;










// optional .caffe.ConvolutionParameter convolution_param = 106;










// optional .caffe.CropParameter crop_param = 144;










// optional .caffe.DataParameter data_param = 107;










// optional .caffe.DropoutParameter dropout_param = 108;










// optional .caffe.DummyDataParameter dummy_data_param = 109;










// optional .caffe.EltwiseParameter eltwise_param = 110;










// optional .caffe.ELUParameter elu_param = 140;










// optional .caffe.EmbedParameter embed_param = 137;










// optional .caffe.ExpParameter exp_param = 111;










// optional .caffe.FlattenParameter flatten_param = 135;










// optional .caffe.HDF5DataParameter hdf5_data_param = 112;










// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;










// optional .caffe.HingeLossParameter hinge_loss_param = 114;










// optional .caffe.ImageDataParameter image_data_param = 115;










// optional .caffe.InfogainLossParameter infogain_loss_param = 116;










// optional .caffe.InnerProductParameter inner_product_param = 117;










// optional .caffe.InputParameter input_param = 143;










// optional .caffe.LogParameter log_param = 134;










// optional .caffe.LRNParameter lrn_param = 118;










// optional .caffe.MemoryDataParameter memory_data_param = 119;










// optional .caffe.MVNParameter mvn_param = 120;










// optional .caffe.ParameterParameter parameter_param = 145;










// optional .caffe.PoolingParameter pooling_param = 121;










// optional .caffe.PowerParameter power_param = 122;










// optional .caffe.PReLUParameter prelu_param = 131;










// optional .caffe.PythonParameter python_param = 130;










// optional .caffe.RecurrentParameter recurrent_param = 146;










// optional .caffe.ReductionParameter reduction_param = 136;










// optional .caffe.ReLUParameter relu_param = 123;










// optional .caffe.ReshapeParameter reshape_param = 133;










// optional .caffe.ScaleParameter scale_param = 142;










// optional .caffe.SigmoidParameter sigmoid_param = 124;










// optional .caffe.SoftmaxParameter softmax_param = 125;










// optional .caffe.SPPParameter spp_param = 132;










// optional .caffe.SliceParameter slice_param = 126;










// optional .caffe.TanHParameter tanh_param = 127;










// optional .caffe.ThresholdParameter threshold_param = 128;










// optional .caffe.TileParameter tile_param = 138;










// optional .caffe.WindowDataParameter window_data_param = 129;










// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];







// optional bool mirror = 2 [default = false];







// optional uint32 crop_size = 3 [default = 0];







// optional string mean_file = 4;






// #if LANG_CXX11
// #endif






// repeated float mean_value = 5;








// optional bool force_color = 6 [default = false];







// optional bool force_gray = 7 [default = false];







// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;







// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];







// optional bool normalize = 2;







// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];







// optional int32 axis = 2 [default = 1];







// optional int32 ignore_label = 3;







// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];







// optional uint32 top_k = 2 [default = 1];







// optional int32 axis = 3;







// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];







// optional uint32 concat_dim = 1 [default = 1];







// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;







// optional float moving_average_fraction = 2 [default = 0.999];







// optional float eps = 3 [default = 1e-05];







// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];







// optional int32 num_axes = 2 [default = 1];







// optional .caffe.FillerParameter filler = 3;










// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];







// optional bool legacy_version = 2 [default = false];







// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;







// optional bool bias_term = 2 [default = true];







// repeated uint32 pad = 3;








// repeated uint32 kernel_size = 4;








// repeated uint32 stride = 6;








// repeated uint32 dilation = 18;








// optional uint32 pad_h = 9 [default = 0];







// optional uint32 pad_w = 10 [default = 0];







// optional uint32 kernel_h = 11;







// optional uint32 kernel_w = 12;







// optional uint32 stride_h = 13;







// optional uint32 stride_w = 14;







// optional uint32 group = 5 [default = 1];







// optional .caffe.FillerParameter weight_filler = 7;










// optional .caffe.FillerParameter bias_filler = 8;










// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];







// optional int32 axis = 16 [default = 1];







// optional bool force_nd_im2col = 17 [default = false];







// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];







// repeated uint32 offset = 2;








// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;






// #if LANG_CXX11
// #endif






// optional uint32 batch_size = 4;







// optional uint32 rand_skip = 7 [default = 0];







// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];







// optional float scale = 2 [default = 1];







// optional string mean_file = 3;






// #if LANG_CXX11
// #endif






// optional uint32 crop_size = 5 [default = 0];







// optional bool mirror = 6 [default = false];







// optional bool force_encoded_color = 9 [default = false];







// optional uint32 prefetch = 10 [default = 4];







// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];







// -------------------------------------------------------------------

// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;








// repeated .caffe.BlobShape shape = 6;








// repeated uint32 num = 2;








// repeated uint32 channels = 3;








// repeated uint32 height = 4;








// repeated uint32 width = 5;








// -------------------------------------------------------------------

// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];







// repeated float coeff = 2;








// optional bool stable_prod_grad = 3 [default = true];







// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];







// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;







// optional uint32 input_dim = 2;







// optional bool bias_term = 3 [default = true];







// optional .caffe.FillerParameter weight_filler = 4;










// optional .caffe.FillerParameter bias_filler = 5;










// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];







// optional float scale = 2 [default = 1];







// optional float shift = 3 [default = 0];







// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];







// optional int32 end_axis = 2 [default = -1];







// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;






// #if LANG_CXX11
// #endif






// optional uint32 batch_size = 2;







// optional bool shuffle = 3 [default = false];







// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;






// #if LANG_CXX11
// #endif






// -------------------------------------------------------------------

// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];







// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;






// #if LANG_CXX11
// #endif






// optional uint32 batch_size = 4 [default = 1];







// optional uint32 rand_skip = 7 [default = 0];







// optional bool shuffle = 8 [default = false];







// optional uint32 new_height = 9 [default = 0];







// optional uint32 new_width = 10 [default = 0];







// optional bool is_color = 11 [default = true];







// optional float scale = 2 [default = 1];







// optional string mean_file = 3;






// #if LANG_CXX11
// #endif






// optional uint32 crop_size = 5 [default = 0];







// optional bool mirror = 6 [default = false];







// optional string root_folder = 12 [default = ""];






// #if LANG_CXX11
// #endif






// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;






// #if LANG_CXX11
// #endif






// optional int32 axis = 2 [default = 1];







// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;







// optional bool bias_term = 2 [default = true];







// optional .caffe.FillerParameter weight_filler = 3;










// optional .caffe.FillerParameter bias_filler = 4;










// optional int32 axis = 5 [default = 1];







// optional bool transpose = 6 [default = false];







// -------------------------------------------------------------------

// InputParameter

// repeated .caffe.BlobShape shape = 1;








// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];







// optional float scale = 2 [default = 1];







// optional float shift = 3 [default = 0];







// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];







// optional float alpha = 2 [default = 1];







// optional float beta = 3 [default = 0.75];







// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];







// optional float k = 5 [default = 1];







// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];







// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;







// optional uint32 channels = 2;







// optional uint32 height = 3;







// optional uint32 width = 4;







// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];







// optional bool across_channels = 2 [default = false];







// optional float eps = 3 [default = 1e-09];







// -------------------------------------------------------------------

// ParameterParameter

// optional .caffe.BlobShape shape = 1;










// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];







// optional uint32 pad = 4 [default = 0];







// optional uint32 pad_h = 9 [default = 0];







// optional uint32 pad_w = 10 [default = 0];







// optional uint32 kernel_size = 2;







// optional uint32 kernel_h = 5;







// optional uint32 kernel_w = 6;







// optional uint32 stride = 3 [default = 1];







// optional uint32 stride_h = 7;







// optional uint32 stride_w = 8;







// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];







// optional bool global_pooling = 12 [default = false];







// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];







// optional float scale = 2 [default = 1];







// optional float shift = 3 [default = 0];







// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;






// #if LANG_CXX11
// #endif






// optional string layer = 2;






// #if LANG_CXX11
// #endif






// optional string param_str = 3 [default = ""];






// #if LANG_CXX11
// #endif






// optional bool share_in_parallel = 4 [default = false];







// -------------------------------------------------------------------

// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];







// optional .caffe.FillerParameter weight_filler = 2;










// optional .caffe.FillerParameter bias_filler = 3;










// optional bool debug_info = 4 [default = false];







// optional bool expose_hidden = 5 [default = false];







// -------------------------------------------------------------------

// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];







// optional int32 axis = 2 [default = 0];







// optional float coeff = 3 [default = 1];







// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];







// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];







// -------------------------------------------------------------------

// ReshapeParameter

// optional .caffe.BlobShape shape = 1;










// optional int32 axis = 2 [default = 0];







// optional int32 num_axes = 3 [default = -1];







// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];







// optional int32 num_axes = 2 [default = 1];







// optional .caffe.FillerParameter filler = 3;










// optional bool bias_term = 4 [default = false];







// optional .caffe.FillerParameter bias_filler = 5;










// -------------------------------------------------------------------

// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];







// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];







// repeated uint32 slice_point = 2;








// optional uint32 slice_dim = 1 [default = 1];







// -------------------------------------------------------------------

// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];







// optional int32 axis = 2 [default = 1];







// -------------------------------------------------------------------

// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];







// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];







// optional int32 tiles = 2;







// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];







// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;






// #if LANG_CXX11
// #endif






// optional float scale = 2 [default = 1];







// optional string mean_file = 3;






// #if LANG_CXX11
// #endif






// optional uint32 batch_size = 4;







// optional uint32 crop_size = 5 [default = 0];







// optional bool mirror = 6 [default = false];







// optional float fg_threshold = 7 [default = 0.5];







// optional float bg_threshold = 8 [default = 0.5];







// optional float fg_fraction = 9 [default = 0.25];







// optional uint32 context_pad = 10 [default = 0];







// optional string crop_mode = 11 [default = "warp"];






// #if LANG_CXX11
// #endif






// optional bool cache_images = 12 [default = false];







// optional string root_folder = 13 [default = ""];






// #if LANG_CXX11
// #endif






// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;







// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];







// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];







// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// repeated string top = 3;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// optional string name = 4;






// #if LANG_CXX11
// #endif






// repeated .caffe.NetStateRule include = 32;








// repeated .caffe.NetStateRule exclude = 33;








// optional .caffe.V1LayerParameter.LayerType type = 5;







// repeated .caffe.BlobProto blobs = 6;








// repeated string param = 1001;





// #if LANG_CXX11
// #endif




// #if LANG_CXX11
// #endif





// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;








// repeated float blobs_lr = 7;








// repeated float weight_decay = 8;








// repeated float loss_weight = 35;








// optional .caffe.AccuracyParameter accuracy_param = 27;










// optional .caffe.ArgMaxParameter argmax_param = 23;










// optional .caffe.ConcatParameter concat_param = 9;










// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;










// optional .caffe.ConvolutionParameter convolution_param = 10;










// optional .caffe.DataParameter data_param = 11;










// optional .caffe.DropoutParameter dropout_param = 12;










// optional .caffe.DummyDataParameter dummy_data_param = 26;










// optional .caffe.EltwiseParameter eltwise_param = 24;










// optional .caffe.ExpParameter exp_param = 41;










// optional .caffe.HDF5DataParameter hdf5_data_param = 13;










// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;










// optional .caffe.HingeLossParameter hinge_loss_param = 29;










// optional .caffe.ImageDataParameter image_data_param = 15;










// optional .caffe.InfogainLossParameter infogain_loss_param = 16;










// optional .caffe.InnerProductParameter inner_product_param = 17;










// optional .caffe.LRNParameter lrn_param = 18;










// optional .caffe.MemoryDataParameter memory_data_param = 22;










// optional .caffe.MVNParameter mvn_param = 34;










// optional .caffe.PoolingParameter pooling_param = 19;










// optional .caffe.PowerParameter power_param = 21;










// optional .caffe.ReLUParameter relu_param = 30;










// optional .caffe.SigmoidParameter sigmoid_param = 38;










// optional .caffe.SoftmaxParameter softmax_param = 39;










// optional .caffe.SliceParameter slice_param = 31;










// optional .caffe.TanHParameter tanh_param = 37;










// optional .caffe.ThresholdParameter threshold_param = 25;










// optional .caffe.WindowDataParameter window_data_param = 20;










// optional .caffe.TransformationParameter transform_param = 36;










// optional .caffe.LossParameter loss_param = 42;










// optional .caffe.V0LayerParameter layer = 1;










// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;






// #if LANG_CXX11
// #endif






// optional string type = 2;






// #if LANG_CXX11
// #endif






// optional uint32 num_output = 3;







// optional bool biasterm = 4 [default = true];







// optional .caffe.FillerParameter weight_filler = 5;










// optional .caffe.FillerParameter bias_filler = 6;










// optional uint32 pad = 7 [default = 0];







// optional uint32 kernelsize = 8;







// optional uint32 group = 9 [default = 1];







// optional uint32 stride = 10 [default = 1];







// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];







// optional float dropout_ratio = 12 [default = 0.5];







// optional uint32 local_size = 13 [default = 5];







// optional float alpha = 14 [default = 1];







// optional float beta = 15 [default = 0.75];







// optional float k = 22 [default = 1];







// optional string source = 16;






// #if LANG_CXX11
// #endif






// optional float scale = 17 [default = 1];







// optional string meanfile = 18;






// #if LANG_CXX11
// #endif






// optional uint32 batchsize = 19;







// optional uint32 cropsize = 20 [default = 0];







// optional bool mirror = 21 [default = false];







// repeated .caffe.BlobProto blobs = 50;








// repeated float blobs_lr = 51;








// repeated float weight_decay = 52;








// optional uint32 rand_skip = 53 [default = 0];







// optional float det_fg_threshold = 54 [default = 0.5];







// optional float det_bg_threshold = 55 [default = 0.5];







// optional float det_fg_fraction = 56 [default = 0.25];







// optional uint32 det_context_pad = 58 [default = 0];







// optional string det_crop_mode = 59 [default = "warp"];






// #if LANG_CXX11
// #endif






// optional int32 new_num = 60 [default = 0];







// optional int32 new_channels = 61 [default = 0];







// optional int32 new_height = 62 [default = 0];







// optional int32 new_width = 63 [default = 0];







// optional bool shuffle_images = 64 [default = false];







// optional uint32 concat_dim = 65 [default = 1];







// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;










// -------------------------------------------------------------------

// PReLUParameter

// optional .caffe.FillerParameter filler = 1;










// optional bool channel_shared = 2 [default = false];







// #ifdef __GNUC__
//   #pragma GCC diagnostic pop
// #endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

  // namespace caffe


























  // namespace protobuf
  // namespace google

// @@protoc_insertion_point(global_scope)

// #endif  // PROTOBUF_INCLUDED_caffe_2eproto


// Parsed from caffe/util/blocking_queue.hpp

// #ifndef CAFFE_UTIL_BLOCKING_QUEUE_HPP_
// #define CAFFE_UTIL_BLOCKING_QUEUE_HPP_

// #include <queue>
// #include <string>

@Name("caffe::BlockingQueue<caffe::Datum*>") @NoOffset public static class DatumBlockingQueue extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DatumBlockingQueue(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DatumBlockingQueue(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DatumBlockingQueue position(long position) {
        return (DatumBlockingQueue)super.position(position);
    }

  public DatumBlockingQueue() { super((Pointer)null); allocate(); }
  private native void allocate();

  public native void push(@ByPtrRef Datum t);

  public native @Cast("bool") boolean try_pop(@Cast("caffe::Datum**") PointerPointer t);
  public native @Cast("bool") boolean try_pop(@ByPtrPtr Datum t);

  // This logs a message if the threads needs to be blocked
  // useful for detecting e.g. when data feeding is too slow
  public native Datum pop(@StdString BytePointer log_on_wait/*=""*/);
  public native Datum pop();
  public native Datum pop(@StdString String log_on_wait/*=""*/);

  public native @Cast("bool") boolean try_peek(@Cast("caffe::Datum**") PointerPointer t);
  public native @Cast("bool") boolean try_peek(@ByPtrPtr Datum t);

  // Return element without removing it
  public native Datum peek();

  public native @Cast("size_t") long size();
}

  // namespace caffe

// #endif


// Parsed from caffe/util/math_functions.hpp

// #ifndef CAFFE_UTIL_MATH_FUNCTIONS_H_
// #define CAFFE_UTIL_MATH_FUNCTIONS_H_

// #include <stdint.h>
// #include <cmath>  // for std::fabs and std::signbit

// #include "glog/logging.h"

// #include "caffe/common.hpp"
// #include "caffe/util/device_alternate.hpp"
// #include "caffe/util/mkl_alternate.hpp"

// Caffe gemm provides a simpler interface to the gemm functions, with the
// limitation that the data has to be contiguous in memory.
@Namespace("caffe") public static native @Name("caffe_cpu_gemm<float>") void caffe_cpu_gemm_float(@Cast("const CBLAS_TRANSPOSE") int TransA,
    @Cast("const CBLAS_TRANSPOSE") int TransB, int M, int N, int K,
    float alpha, @Const FloatPointer A, @Const FloatPointer B, float beta,
    FloatPointer C);
@Namespace("caffe") public static native @Name("caffe_cpu_gemm<float>") void caffe_cpu_gemm_float(@Cast("const CBLAS_TRANSPOSE") int TransA,
    @Cast("const CBLAS_TRANSPOSE") int TransB, int M, int N, int K,
    float alpha, @Const FloatBuffer A, @Const FloatBuffer B, float beta,
    FloatBuffer C);
@Namespace("caffe") public static native @Name("caffe_cpu_gemm<float>") void caffe_cpu_gemm_float(@Cast("const CBLAS_TRANSPOSE") int TransA,
    @Cast("const CBLAS_TRANSPOSE") int TransB, int M, int N, int K,
    float alpha, @Const float[] A, @Const float[] B, float beta,
    float[] C);
@Namespace("caffe") public static native @Name("caffe_cpu_gemm<double>") void caffe_cpu_gemm_double(@Cast("const CBLAS_TRANSPOSE") int TransA,
    @Cast("const CBLAS_TRANSPOSE") int TransB, int M, int N, int K,
    double alpha, @Const DoublePointer A, @Const DoublePointer B, double beta,
    DoublePointer C);
@Namespace("caffe") public static native @Name("caffe_cpu_gemm<double>") void caffe_cpu_gemm_double(@Cast("const CBLAS_TRANSPOSE") int TransA,
    @Cast("const CBLAS_TRANSPOSE") int TransB, int M, int N, int K,
    double alpha, @Const DoubleBuffer A, @Const DoubleBuffer B, double beta,
    DoubleBuffer C);
@Namespace("caffe") public static native @Name("caffe_cpu_gemm<double>") void caffe_cpu_gemm_double(@Cast("const CBLAS_TRANSPOSE") int TransA,
    @Cast("const CBLAS_TRANSPOSE") int TransB, int M, int N, int K,
    double alpha, @Const double[] A, @Const double[] B, double beta,
    double[] C);

@Namespace("caffe") public static native @Name("caffe_cpu_gemv<float>") void caffe_cpu_gemv_float(@Cast("const CBLAS_TRANSPOSE") int TransA, int M, int N,
    float alpha, @Const FloatPointer A, @Const FloatPointer x, float beta,
    FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_cpu_gemv<float>") void caffe_cpu_gemv_float(@Cast("const CBLAS_TRANSPOSE") int TransA, int M, int N,
    float alpha, @Const FloatBuffer A, @Const FloatBuffer x, float beta,
    FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_cpu_gemv<float>") void caffe_cpu_gemv_float(@Cast("const CBLAS_TRANSPOSE") int TransA, int M, int N,
    float alpha, @Const float[] A, @Const float[] x, float beta,
    float[] y);

@Namespace("caffe") public static native @Name("caffe_cpu_gemv<double>") void caffe_cpu_gemv_double(@Cast("const CBLAS_TRANSPOSE") int TransA, int M, int N,
    double alpha, @Const DoublePointer A, @Const DoublePointer x, double beta,
    DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_cpu_gemv<double>") void caffe_cpu_gemv_double(@Cast("const CBLAS_TRANSPOSE") int TransA, int M, int N,
    double alpha, @Const DoubleBuffer A, @Const DoubleBuffer x, double beta,
    DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_cpu_gemv<double>") void caffe_cpu_gemv_double(@Cast("const CBLAS_TRANSPOSE") int TransA, int M, int N,
    double alpha, @Const double[] A, @Const double[] x, double beta,
    double[] y);

@Namespace("caffe") public static native @Name("caffe_axpy<float>") void caffe_axpy_float(int N, float alpha, @Const FloatPointer X,
    FloatPointer Y);
@Namespace("caffe") public static native @Name("caffe_axpy<float>") void caffe_axpy_float(int N, float alpha, @Const FloatBuffer X,
    FloatBuffer Y);
@Namespace("caffe") public static native @Name("caffe_axpy<float>") void caffe_axpy_float(int N, float alpha, @Const float[] X,
    float[] Y);

@Namespace("caffe") public static native @Name("caffe_axpy<double>") void caffe_axpy_double(int N, double alpha, @Const DoublePointer X,
    DoublePointer Y);
@Namespace("caffe") public static native @Name("caffe_axpy<double>") void caffe_axpy_double(int N, double alpha, @Const DoubleBuffer X,
    DoubleBuffer Y);
@Namespace("caffe") public static native @Name("caffe_axpy<double>") void caffe_axpy_double(int N, double alpha, @Const double[] X,
    double[] Y);

@Namespace("caffe") public static native @Name("caffe_cpu_axpby<float>") void caffe_cpu_axpby_float(int N, float alpha, @Const FloatPointer X,
    float beta, FloatPointer Y);
@Namespace("caffe") public static native @Name("caffe_cpu_axpby<float>") void caffe_cpu_axpby_float(int N, float alpha, @Const FloatBuffer X,
    float beta, FloatBuffer Y);
@Namespace("caffe") public static native @Name("caffe_cpu_axpby<float>") void caffe_cpu_axpby_float(int N, float alpha, @Const float[] X,
    float beta, float[] Y);

@Namespace("caffe") public static native @Name("caffe_cpu_axpby<double>") void caffe_cpu_axpby_double(int N, double alpha, @Const DoublePointer X,
    double beta, DoublePointer Y);
@Namespace("caffe") public static native @Name("caffe_cpu_axpby<double>") void caffe_cpu_axpby_double(int N, double alpha, @Const DoubleBuffer X,
    double beta, DoubleBuffer Y);
@Namespace("caffe") public static native @Name("caffe_cpu_axpby<double>") void caffe_cpu_axpby_double(int N, double alpha, @Const double[] X,
    double beta, double[] Y);

@Namespace("caffe") public static native @Name("caffe_copy<float>") void caffe_copy_float(int N, @Const FloatPointer X, FloatPointer Y);
@Namespace("caffe") public static native @Name("caffe_copy<float>") void caffe_copy_float(int N, @Const FloatBuffer X, FloatBuffer Y);
@Namespace("caffe") public static native @Name("caffe_copy<float>") void caffe_copy_float(int N, @Const float[] X, float[] Y);

@Namespace("caffe") public static native @Name("caffe_copy<double>") void caffe_copy_double(int N, @Const DoublePointer X, DoublePointer Y);
@Namespace("caffe") public static native @Name("caffe_copy<double>") void caffe_copy_double(int N, @Const DoubleBuffer X, DoubleBuffer Y);
@Namespace("caffe") public static native @Name("caffe_copy<double>") void caffe_copy_double(int N, @Const double[] X, double[] Y);

@Namespace("caffe") public static native @Name("caffe_set<float>") void caffe_set_float(int N, float alpha, FloatPointer X);
@Namespace("caffe") public static native @Name("caffe_set<float>") void caffe_set_float(int N, float alpha, FloatBuffer X);
@Namespace("caffe") public static native @Name("caffe_set<float>") void caffe_set_float(int N, float alpha, float[] X);

@Namespace("caffe") public static native @Name("caffe_set<double>") void caffe_set_double(int N, double alpha, DoublePointer X);
@Namespace("caffe") public static native @Name("caffe_set<double>") void caffe_set_double(int N, double alpha, DoubleBuffer X);
@Namespace("caffe") public static native @Name("caffe_set<double>") void caffe_set_double(int N, double alpha, double[] X);

@Namespace("caffe") public static native void caffe_memset(@Cast("const size_t") long N, int alpha, Pointer X);

@Namespace("caffe") public static native @Name("caffe_add_scalar<float>") void caffe_add_scalar_float(int N, float alpha, FloatPointer X);
@Namespace("caffe") public static native @Name("caffe_add_scalar<float>") void caffe_add_scalar_float(int N, float alpha, FloatBuffer X);
@Namespace("caffe") public static native @Name("caffe_add_scalar<float>") void caffe_add_scalar_float(int N, float alpha, float[] X);

@Namespace("caffe") public static native @Name("caffe_add_scalar<double>") void caffe_add_scalar_double(int N, double alpha, DoublePointer X);
@Namespace("caffe") public static native @Name("caffe_add_scalar<double>") void caffe_add_scalar_double(int N, double alpha, DoubleBuffer X);
@Namespace("caffe") public static native @Name("caffe_add_scalar<double>") void caffe_add_scalar_double(int N, double alpha, double[] X);

@Namespace("caffe") public static native @Name("caffe_scal<float>") void caffe_scal_float(int N, float alpha, FloatPointer X);
@Namespace("caffe") public static native @Name("caffe_scal<float>") void caffe_scal_float(int N, float alpha, FloatBuffer X);
@Namespace("caffe") public static native @Name("caffe_scal<float>") void caffe_scal_float(int N, float alpha, float[] X);

@Namespace("caffe") public static native @Name("caffe_scal<double>") void caffe_scal_double(int N, double alpha, DoublePointer X);
@Namespace("caffe") public static native @Name("caffe_scal<double>") void caffe_scal_double(int N, double alpha, DoubleBuffer X);
@Namespace("caffe") public static native @Name("caffe_scal<double>") void caffe_scal_double(int N, double alpha, double[] X);

@Namespace("caffe") public static native @Name("caffe_sqr<float>") void caffe_sqr_float(int N, @Const FloatPointer a, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_sqr<float>") void caffe_sqr_float(int N, @Const FloatBuffer a, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_sqr<float>") void caffe_sqr_float(int N, @Const float[] a, float[] y);

@Namespace("caffe") public static native @Name("caffe_sqr<double>") void caffe_sqr_double(int N, @Const DoublePointer a, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_sqr<double>") void caffe_sqr_double(int N, @Const DoubleBuffer a, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_sqr<double>") void caffe_sqr_double(int N, @Const double[] a, double[] y);

@Namespace("caffe") public static native @Name("caffe_add<float>") void caffe_add_float(int N, @Const FloatPointer a, @Const FloatPointer b, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_add<float>") void caffe_add_float(int N, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_add<float>") void caffe_add_float(int N, @Const float[] a, @Const float[] b, float[] y);

@Namespace("caffe") public static native @Name("caffe_add<double>") void caffe_add_double(int N, @Const DoublePointer a, @Const DoublePointer b, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_add<double>") void caffe_add_double(int N, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_add<double>") void caffe_add_double(int N, @Const double[] a, @Const double[] b, double[] y);

@Namespace("caffe") public static native @Name("caffe_sub<float>") void caffe_sub_float(int N, @Const FloatPointer a, @Const FloatPointer b, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_sub<float>") void caffe_sub_float(int N, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_sub<float>") void caffe_sub_float(int N, @Const float[] a, @Const float[] b, float[] y);

@Namespace("caffe") public static native @Name("caffe_sub<double>") void caffe_sub_double(int N, @Const DoublePointer a, @Const DoublePointer b, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_sub<double>") void caffe_sub_double(int N, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_sub<double>") void caffe_sub_double(int N, @Const double[] a, @Const double[] b, double[] y);

@Namespace("caffe") public static native @Name("caffe_mul<float>") void caffe_mul_float(int N, @Const FloatPointer a, @Const FloatPointer b, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_mul<float>") void caffe_mul_float(int N, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_mul<float>") void caffe_mul_float(int N, @Const float[] a, @Const float[] b, float[] y);

@Namespace("caffe") public static native @Name("caffe_mul<double>") void caffe_mul_double(int N, @Const DoublePointer a, @Const DoublePointer b, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_mul<double>") void caffe_mul_double(int N, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_mul<double>") void caffe_mul_double(int N, @Const double[] a, @Const double[] b, double[] y);

@Namespace("caffe") public static native @Name("caffe_div<float>") void caffe_div_float(int N, @Const FloatPointer a, @Const FloatPointer b, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_div<float>") void caffe_div_float(int N, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_div<float>") void caffe_div_float(int N, @Const float[] a, @Const float[] b, float[] y);

@Namespace("caffe") public static native @Name("caffe_div<double>") void caffe_div_double(int N, @Const DoublePointer a, @Const DoublePointer b, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_div<double>") void caffe_div_double(int N, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_div<double>") void caffe_div_double(int N, @Const double[] a, @Const double[] b, double[] y);

@Namespace("caffe") public static native @Name("caffe_powx<float>") void caffe_powx_float(int n, @Const FloatPointer a, float b, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_powx<float>") void caffe_powx_float(int n, @Const FloatBuffer a, float b, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_powx<float>") void caffe_powx_float(int n, @Const float[] a, float b, float[] y);

@Namespace("caffe") public static native @Name("caffe_powx<double>") void caffe_powx_double(int n, @Const DoublePointer a, double b, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_powx<double>") void caffe_powx_double(int n, @Const DoubleBuffer a, double b, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_powx<double>") void caffe_powx_double(int n, @Const double[] a, double b, double[] y);

@Namespace("caffe") public static native @Cast("unsigned int") int caffe_rng_rand();

@Namespace("caffe") public static native @Name("caffe_nextafter<float>") float caffe_nextafter_float(float b);

@Namespace("caffe") public static native @Name("caffe_nextafter<double>") double caffe_nextafter_double(double b);

@Namespace("caffe") public static native @Name("caffe_rng_uniform<float>") void caffe_rng_uniform_float(int n, float a, float b, FloatPointer r);
@Namespace("caffe") public static native @Name("caffe_rng_uniform<float>") void caffe_rng_uniform_float(int n, float a, float b, FloatBuffer r);
@Namespace("caffe") public static native @Name("caffe_rng_uniform<float>") void caffe_rng_uniform_float(int n, float a, float b, float[] r);

@Namespace("caffe") public static native @Name("caffe_rng_uniform<double>") void caffe_rng_uniform_double(int n, double a, double b, DoublePointer r);
@Namespace("caffe") public static native @Name("caffe_rng_uniform<double>") void caffe_rng_uniform_double(int n, double a, double b, DoubleBuffer r);
@Namespace("caffe") public static native @Name("caffe_rng_uniform<double>") void caffe_rng_uniform_double(int n, double a, double b, double[] r);

@Namespace("caffe") public static native @Name("caffe_rng_gaussian<float>") void caffe_rng_gaussian_float(int n, float mu, float sigma,
                        FloatPointer r);
@Namespace("caffe") public static native @Name("caffe_rng_gaussian<float>") void caffe_rng_gaussian_float(int n, float mu, float sigma,
                        FloatBuffer r);
@Namespace("caffe") public static native @Name("caffe_rng_gaussian<float>") void caffe_rng_gaussian_float(int n, float mu, float sigma,
                        float[] r);

@Namespace("caffe") public static native @Name("caffe_rng_gaussian<double>") void caffe_rng_gaussian_double(int n, double mu, double sigma,
                        DoublePointer r);
@Namespace("caffe") public static native @Name("caffe_rng_gaussian<double>") void caffe_rng_gaussian_double(int n, double mu, double sigma,
                        DoubleBuffer r);
@Namespace("caffe") public static native @Name("caffe_rng_gaussian<double>") void caffe_rng_gaussian_double(int n, double mu, double sigma,
                        double[] r);

@Namespace("caffe") public static native @Name("caffe_rng_bernoulli<float>") void caffe_rng_bernoulli_float(int n, float p, IntPointer r);
@Namespace("caffe") public static native @Name("caffe_rng_bernoulli<float>") void caffe_rng_bernoulli_float(int n, float p, IntBuffer r);
@Namespace("caffe") public static native @Name("caffe_rng_bernoulli<float>") void caffe_rng_bernoulli_float(int n, float p, int[] r);

@Namespace("caffe") public static native @Name("caffe_rng_bernoulli<double>") void caffe_rng_bernoulli_double(int n, double p, IntPointer r);
@Namespace("caffe") public static native @Name("caffe_rng_bernoulli<double>") void caffe_rng_bernoulli_double(int n, double p, IntBuffer r);
@Namespace("caffe") public static native @Name("caffe_rng_bernoulli<double>") void caffe_rng_bernoulli_double(int n, double p, int[] r);

@Namespace("caffe") public static native @Name("caffe_exp<float>") void caffe_exp_float(int n, @Const FloatPointer a, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_exp<float>") void caffe_exp_float(int n, @Const FloatBuffer a, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_exp<float>") void caffe_exp_float(int n, @Const float[] a, float[] y);

@Namespace("caffe") public static native @Name("caffe_exp<double>") void caffe_exp_double(int n, @Const DoublePointer a, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_exp<double>") void caffe_exp_double(int n, @Const DoubleBuffer a, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_exp<double>") void caffe_exp_double(int n, @Const double[] a, double[] y);

@Namespace("caffe") public static native @Name("caffe_log<float>") void caffe_log_float(int n, @Const FloatPointer a, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_log<float>") void caffe_log_float(int n, @Const FloatBuffer a, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_log<float>") void caffe_log_float(int n, @Const float[] a, float[] y);

@Namespace("caffe") public static native @Name("caffe_log<double>") void caffe_log_double(int n, @Const DoublePointer a, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_log<double>") void caffe_log_double(int n, @Const DoubleBuffer a, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_log<double>") void caffe_log_double(int n, @Const double[] a, double[] y);

@Namespace("caffe") public static native @Name("caffe_abs<float>") void caffe_abs_float(int n, @Const FloatPointer a, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_abs<float>") void caffe_abs_float(int n, @Const FloatBuffer a, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_abs<float>") void caffe_abs_float(int n, @Const float[] a, float[] y);

@Namespace("caffe") public static native @Name("caffe_abs<double>") void caffe_abs_double(int n, @Const DoublePointer a, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_abs<double>") void caffe_abs_double(int n, @Const DoubleBuffer a, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_abs<double>") void caffe_abs_double(int n, @Const double[] a, double[] y);

@Namespace("caffe") public static native @Name("caffe_cpu_dot<float>") float caffe_cpu_dot_float(int n, @Const FloatPointer x, @Const FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_cpu_dot<float>") float caffe_cpu_dot_float(int n, @Const FloatBuffer x, @Const FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_cpu_dot<float>") float caffe_cpu_dot_float(int n, @Const float[] x, @Const float[] y);

@Namespace("caffe") public static native @Name("caffe_cpu_dot<double>") double caffe_cpu_dot_double(int n, @Const DoublePointer x, @Const DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_cpu_dot<double>") double caffe_cpu_dot_double(int n, @Const DoubleBuffer x, @Const DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_cpu_dot<double>") double caffe_cpu_dot_double(int n, @Const double[] x, @Const double[] y);

@Namespace("caffe") public static native @Name("caffe_cpu_strided_dot<float>") float caffe_cpu_strided_dot_float(int n, @Const FloatPointer x, int incx,
    @Const FloatPointer y, int incy);
@Namespace("caffe") public static native @Name("caffe_cpu_strided_dot<float>") float caffe_cpu_strided_dot_float(int n, @Const FloatBuffer x, int incx,
    @Const FloatBuffer y, int incy);
@Namespace("caffe") public static native @Name("caffe_cpu_strided_dot<float>") float caffe_cpu_strided_dot_float(int n, @Const float[] x, int incx,
    @Const float[] y, int incy);

@Namespace("caffe") public static native @Name("caffe_cpu_strided_dot<double>") double caffe_cpu_strided_dot_double(int n, @Const DoublePointer x, int incx,
    @Const DoublePointer y, int incy);
@Namespace("caffe") public static native @Name("caffe_cpu_strided_dot<double>") double caffe_cpu_strided_dot_double(int n, @Const DoubleBuffer x, int incx,
    @Const DoubleBuffer y, int incy);
@Namespace("caffe") public static native @Name("caffe_cpu_strided_dot<double>") double caffe_cpu_strided_dot_double(int n, @Const double[] x, int incx,
    @Const double[] y, int incy);

// Returns the sum of the absolute values of the elements of vector x
@Namespace("caffe") public static native @Name("caffe_cpu_asum<float>") float caffe_cpu_asum_float(int n, @Const FloatPointer x);
@Namespace("caffe") public static native @Name("caffe_cpu_asum<float>") float caffe_cpu_asum_float(int n, @Const FloatBuffer x);
@Namespace("caffe") public static native @Name("caffe_cpu_asum<float>") float caffe_cpu_asum_float(int n, @Const float[] x);
@Namespace("caffe") public static native @Name("caffe_cpu_asum<double>") double caffe_cpu_asum_double(int n, @Const DoublePointer x);
@Namespace("caffe") public static native @Name("caffe_cpu_asum<double>") double caffe_cpu_asum_double(int n, @Const DoubleBuffer x);
@Namespace("caffe") public static native @Name("caffe_cpu_asum<double>") double caffe_cpu_asum_double(int n, @Const double[] x);

// the branchless, type-safe version from
// http://stackoverflow.com/questions/1903954/is-there-a-standard-sign-function-signum-sgn-in-c-c
@Namespace("caffe") public static native @Name("caffe_sign<float>") byte caffe_sign_float(float val);
@Namespace("caffe") public static native @Name("caffe_sign<double>") byte caffe_sign_double(double val);

// The following two macros are modifications of DEFINE_VSL_UNARY_FUNC
//   in include/caffe/util/mkl_alternate.hpp authored by @Rowland Depp.
// Please refer to commit 7e8ef25c7 of the boost-eigen branch.
// Git cherry picking that commit caused a conflict hard to resolve and
//   copying that file in convenient for code reviewing.
// So they have to be pasted here temporarily.
// #define DEFINE_CAFFE_CPU_UNARY_FUNC(name, operation)
//   template<typename Dtype>
//   void caffe_cpu_##name(const int n, const Dtype* x, Dtype* y) {
//     CHECK_GT(n, 0); CHECK(x); CHECK(y);
//     for (int i = 0; i < n; ++i) {
//       operation;
//     }
//   }

// output is 1 for the positives, 0 for zero, and -1 for the negatives

// This returns a nonzero value if the input has its sign bit set.
// The name sngbit is meant to avoid conflicts with std::signbit in the macro.
// The extra parens are needed because CUDA < 6.5 defines signbit as a macro,
// and we don't want that to expand here when CUDA headers are also included.

@Namespace("caffe") public static native @Name("caffe_cpu_scale<float>") void caffe_cpu_scale_float(int n, float alpha, @Const FloatPointer x, FloatPointer y);
@Namespace("caffe") public static native @Name("caffe_cpu_scale<float>") void caffe_cpu_scale_float(int n, float alpha, @Const FloatBuffer x, FloatBuffer y);
@Namespace("caffe") public static native @Name("caffe_cpu_scale<float>") void caffe_cpu_scale_float(int n, float alpha, @Const float[] x, float[] y);

@Namespace("caffe") public static native @Name("caffe_cpu_scale<double>") void caffe_cpu_scale_double(int n, double alpha, @Const DoublePointer x, DoublePointer y);
@Namespace("caffe") public static native @Name("caffe_cpu_scale<double>") void caffe_cpu_scale_double(int n, double alpha, @Const DoubleBuffer x, DoubleBuffer y);
@Namespace("caffe") public static native @Name("caffe_cpu_scale<double>") void caffe_cpu_scale_double(int n, double alpha, @Const double[] x, double[] y);

// #ifndef CPU_ONLY  // GPU

// #endif  // !CPU_ONLY

  // namespace caffe

// #endif  // CAFFE_UTIL_MATH_FUNCTIONS_H_


// Parsed from caffe/syncedmem.hpp

// #ifndef CAFFE_SYNCEDMEM_HPP_
// #define CAFFE_SYNCEDMEM_HPP_

// #include <cstdlib>

// #ifdef USE_MKL
//   #include "mkl.h"
// #endif

// #include "caffe/common.hpp"

// If CUDA is available and in GPU mode, host memory will be allocated pinned,
// using cudaMallocHost. It avoids dynamic pinning for transfers (DMA).
// The improvement in performance seems negligible in the single GPU case,
// but might be more significant for parallel training. Most importantly,
// it improved stability for large models on many GPUs.
@Namespace("caffe") public static native void CaffeMallocHost(@Cast("void**") PointerPointer ptr, @Cast("size_t") long size, @Cast("bool*") BoolPointer use_cuda);
@Namespace("caffe") public static native void CaffeMallocHost(@Cast("void**") @ByPtrPtr Pointer ptr, @Cast("size_t") long size, @Cast("bool*") BoolPointer use_cuda);
@Namespace("caffe") public static native void CaffeMallocHost(@Cast("void**") @ByPtrPtr Pointer ptr, @Cast("size_t") long size, @Cast("bool*") boolean[] use_cuda);

@Namespace("caffe") public static native void CaffeFreeHost(Pointer ptr, @Cast("bool") boolean use_cuda);


/**
 * \brief Manages memory allocation and synchronization between the host (CPU)
 *        and device (GPU).
 *
 * TODO(dox): more thorough description.
 */
@Namespace("caffe") @NoOffset public static class SyncedMemory extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SyncedMemory(Pointer p) { super(p); }

  public SyncedMemory() { super((Pointer)null); allocate(); }
  private native void allocate();
  public SyncedMemory(@Cast("size_t") long size) { super((Pointer)null); allocate(size); }
  private native void allocate(@Cast("size_t") long size);
  public native @Const Pointer cpu_data();
  public native void set_cpu_data(Pointer data);
  public native @Const Pointer gpu_data();
  public native void set_gpu_data(Pointer data);
  public native Pointer mutable_cpu_data();
  public native Pointer mutable_gpu_data();
  /** enum caffe::SyncedMemory::SyncedHead */
  public static final int UNINITIALIZED = 0, HEAD_AT_CPU = 1, HEAD_AT_GPU = 2, SYNCED = 3;
  public native @Cast("caffe::SyncedMemory::SyncedHead") int head();
  public native @Cast("size_t") long size();
}  // class SyncedMemory

  // namespace caffe

// #endif  // CAFFE_SYNCEDMEM_HPP_


// Parsed from caffe/blob.hpp

// #ifndef CAFFE_BLOB_HPP_
// #define CAFFE_BLOB_HPP_

// #include <algorithm>
// #include <string>
// #include <vector>

// #include "caffe/common.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/syncedmem.hpp"

@MemberGetter public static native int kMaxBlobAxes();

/**
 * \brief A wrapper around SyncedMemory holders serving as the basic
 *        computational unit through which Layer%s, Net%s, and Solver%s
 *        interact.
 *
 * TODO(dox): more thorough description.
 */
@Name("caffe::Blob<float>") @NoOffset public static class FloatBlob extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBlob(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FloatBlob(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public FloatBlob position(long position) {
        return (FloatBlob)super.position(position);
    }

  public FloatBlob() { super((Pointer)null); allocate(); }
  private native void allocate();

  /** \brief Deprecated; use <code>Blob(const vector<int>& shape)</code>. */
  public FloatBlob(int num, int channels, int height,
        int width) { super((Pointer)null); allocate(num, channels, height, width); }
  private native void allocate(int num, int channels, int height,
        int width);
  public FloatBlob(@StdVector IntPointer shape) { super((Pointer)null); allocate(shape); }
  private native void allocate(@StdVector IntPointer shape);
  public FloatBlob(@StdVector IntBuffer shape) { super((Pointer)null); allocate(shape); }
  private native void allocate(@StdVector IntBuffer shape);
  public FloatBlob(@StdVector int[] shape) { super((Pointer)null); allocate(shape); }
  private native void allocate(@StdVector int[] shape);

  /** \brief Deprecated; use <code>Reshape(const vector<int>& shape)</code>. */
  public native void Reshape(int num, int channels, int height,
        int width);
  /**
   * \brief Change the dimensions of the blob, allocating new memory if
   *        necessary.
   *
   * This function can be called both to create an initial allocation
   * of memory, and to adjust the dimensions of a top blob during Layer::Reshape
   * or Layer::Forward. When changing the size of blob, memory will only be
   * reallocated if sufficient memory does not already exist, and excess memory
   * will never be freed.
   *
   * Note that reshaping an input blob and immediately calling Net::Backward is
   * an error; either Net::Forward or Net::Reshape need to be called to
   * propagate the new input shape to higher layers.
   */
  public native void Reshape(@StdVector IntPointer shape);
  public native void Reshape(@StdVector IntBuffer shape);
  public native void Reshape(@StdVector int[] shape);
  public native void Reshape(@Const @ByRef BlobShape shape);
  public native void ReshapeLike(@Const @ByRef FloatBlob other);
  public native @StdString BytePointer shape_string();
  public native @StdVector IntPointer shape();
  /**
   * \brief Returns the dimension of the index-th axis (or the negative index-th
   *        axis from the end, if index is negative).
   *
   * @param index the axis index, which may be negative as it will be
   *        "canonicalized" using CanonicalAxisIndex.
   *        Dies on out of range index.
   */
  public native int shape(int index);
  public native int num_axes();
  public native int count();

  /**
   * \brief Compute the volume of a slice; i.e., the product of dimensions
   *        among a range of axes.
   *
   * @param start_axis The first axis to include in the slice.
   *
   * @param end_axis The first axis to exclude from the slice.
   */
  public native int count(int start_axis, int end_axis);
  /**
   * \brief Compute the volume of a slice spanning from a particular first
   *        axis to the final axis.
   *
   * @param start_axis The first axis to include in the slice.
   */
  public native int count(int start_axis);

  /**
   * \brief Returns the 'canonical' version of a (usually) user-specified axis,
   *        allowing for negative indexing (e.g., -1 for the last axis).
   *
   * @param axis_index the axis index.
   *        If 0 <= index < num_axes(), return index.
   *        If -num_axes <= index <= -1, return (num_axes() - (-index)),
   *        e.g., the last axis index (num_axes() - 1) if index == -1,
   *        the second to last if index == -2, etc.
   *        Dies on out of range index.
   */
  public native int CanonicalAxisIndex(int axis_index);

  /** \brief Deprecated legacy shape accessor num: use shape(0) instead. */
  public native int num();
  /** \brief Deprecated legacy shape accessor channels: use shape(1) instead. */
  public native int channels();
  /** \brief Deprecated legacy shape accessor height: use shape(2) instead. */
  public native int height();
  /** \brief Deprecated legacy shape accessor width: use shape(3) instead. */
  public native int width();
  public native int LegacyShape(int index);

  public native int offset(int n, int c/*=0*/, int h/*=0*/,
        int w/*=0*/);
  public native int offset(int n);

  public native int offset(@StdVector IntPointer indices);
  public native int offset(@StdVector IntBuffer indices);
  public native int offset(@StdVector int[] indices);
  /**
   * \brief Copy from a source Blob.
   *
   * @param source the Blob to copy from
   * @param copy_diff if false, copy the data; if true, copy the diff
   * @param reshape if false, require this Blob to be pre-shaped to the shape
   *        of other (and die otherwise); if true, Reshape this Blob to other's
   *        shape if necessary
   */
  public native void CopyFrom(@Const @ByRef FloatBlob source, @Cast("bool") boolean copy_diff/*=false*/,
        @Cast("bool") boolean reshape/*=false*/);
  public native void CopyFrom(@Const @ByRef FloatBlob source);

  public native float data_at(int n, int c, int h,
        int w);

  public native float diff_at(int n, int c, int h,
        int w);

  public native float data_at(@StdVector IntPointer index);
  public native float data_at(@StdVector IntBuffer index);
  public native float data_at(@StdVector int[] index);

  public native float diff_at(@StdVector IntPointer index);
  public native float diff_at(@StdVector IntBuffer index);
  public native float diff_at(@StdVector int[] index);

  public native @SharedPtr SyncedMemory data();

  public native @SharedPtr SyncedMemory diff();

  public native @Const FloatPointer cpu_data();
  public native void set_cpu_data(FloatPointer data);
  public native void set_cpu_data(FloatBuffer data);
  public native void set_cpu_data(float[] data);
  public native @Const IntPointer gpu_shape();
  public native @Const FloatPointer gpu_data();
  public native void set_gpu_data(FloatPointer data);
  public native void set_gpu_data(FloatBuffer data);
  public native void set_gpu_data(float[] data);
  public native @Const FloatPointer cpu_diff();
  public native @Const FloatPointer gpu_diff();
  public native FloatPointer mutable_cpu_data();
  public native FloatPointer mutable_gpu_data();
  public native FloatPointer mutable_cpu_diff();
  public native FloatPointer mutable_gpu_diff();
  public native void Update();
  public native void FromProto(@Const @ByRef BlobProto proto, @Cast("bool") boolean reshape/*=true*/);
  public native void FromProto(@Const @ByRef BlobProto proto);
  public native void ToProto(BlobProto proto, @Cast("bool") boolean write_diff/*=false*/);
  public native void ToProto(BlobProto proto);

  /** \brief Compute the sum of absolute values (L1 norm) of the data. */
  public native float asum_data();
  /** \brief Compute the sum of absolute values (L1 norm) of the diff. */
  public native float asum_diff();
  /** \brief Compute the sum of squares (L2 norm squared) of the data. */
  public native float sumsq_data();
  /** \brief Compute the sum of squares (L2 norm squared) of the diff. */
  public native float sumsq_diff();

  /** \brief Scale the blob data by a constant factor. */
  public native void scale_data(float scale_factor);
  /** \brief Scale the blob diff by a constant factor. */
  public native void scale_diff(float scale_factor);

  /**
   * \brief Set the data_ shared_ptr to point to the SyncedMemory holding the
   *        data_ of Blob other -- useful in Layer%s which simply perform a copy
   *        in their Forward pass.
   *
   * This deallocates the SyncedMemory holding this Blob's data_, as
   * shared_ptr calls its destructor when reset with the "=" operator.
   */
  public native void ShareData(@Const @ByRef FloatBlob other);
  /**
   * \brief Set the diff_ shared_ptr to point to the SyncedMemory holding the
   *        diff_ of Blob other -- useful in Layer%s which simply perform a copy
   *        in their Forward pass.
   *
   * This deallocates the SyncedMemory holding this Blob's diff_, as
   * shared_ptr calls its destructor when reset with the "=" operator.
   */
  public native void ShareDiff(@Const @ByRef FloatBlob other);

  public native @Cast("bool") boolean ShapeEquals(@Const @ByRef BlobProto other);
}
@Name("caffe::Blob<double>") @NoOffset public static class DoubleBlob extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBlob(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DoubleBlob(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DoubleBlob position(long position) {
        return (DoubleBlob)super.position(position);
    }

  public DoubleBlob() { super((Pointer)null); allocate(); }
  private native void allocate();

  /** \brief Deprecated; use <code>Blob(const vector<int>& shape)</code>. */
  public DoubleBlob(int num, int channels, int height,
        int width) { super((Pointer)null); allocate(num, channels, height, width); }
  private native void allocate(int num, int channels, int height,
        int width);
  public DoubleBlob(@StdVector IntPointer shape) { super((Pointer)null); allocate(shape); }
  private native void allocate(@StdVector IntPointer shape);
  public DoubleBlob(@StdVector IntBuffer shape) { super((Pointer)null); allocate(shape); }
  private native void allocate(@StdVector IntBuffer shape);
  public DoubleBlob(@StdVector int[] shape) { super((Pointer)null); allocate(shape); }
  private native void allocate(@StdVector int[] shape);

  /** \brief Deprecated; use <code>Reshape(const vector<int>& shape)</code>. */
  public native void Reshape(int num, int channels, int height,
        int width);
  /**
   * \brief Change the dimensions of the blob, allocating new memory if
   *        necessary.
   *
   * This function can be called both to create an initial allocation
   * of memory, and to adjust the dimensions of a top blob during Layer::Reshape
   * or Layer::Forward. When changing the size of blob, memory will only be
   * reallocated if sufficient memory does not already exist, and excess memory
   * will never be freed.
   *
   * Note that reshaping an input blob and immediately calling Net::Backward is
   * an error; either Net::Forward or Net::Reshape need to be called to
   * propagate the new input shape to higher layers.
   */
  public native void Reshape(@StdVector IntPointer shape);
  public native void Reshape(@StdVector IntBuffer shape);
  public native void Reshape(@StdVector int[] shape);
  public native void Reshape(@Const @ByRef BlobShape shape);
  public native void ReshapeLike(@Const @ByRef DoubleBlob other);
  public native @StdString BytePointer shape_string();
  public native @StdVector IntPointer shape();
  /**
   * \brief Returns the dimension of the index-th axis (or the negative index-th
   *        axis from the end, if index is negative).
   *
   * @param index the axis index, which may be negative as it will be
   *        "canonicalized" using CanonicalAxisIndex.
   *        Dies on out of range index.
   */
  public native int shape(int index);
  public native int num_axes();
  public native int count();

  /**
   * \brief Compute the volume of a slice; i.e., the product of dimensions
   *        among a range of axes.
   *
   * @param start_axis The first axis to include in the slice.
   *
   * @param end_axis The first axis to exclude from the slice.
   */
  public native int count(int start_axis, int end_axis);
  /**
   * \brief Compute the volume of a slice spanning from a particular first
   *        axis to the final axis.
   *
   * @param start_axis The first axis to include in the slice.
   */
  public native int count(int start_axis);

  /**
   * \brief Returns the 'canonical' version of a (usually) user-specified axis,
   *        allowing for negative indexing (e.g., -1 for the last axis).
   *
   * @param axis_index the axis index.
   *        If 0 <= index < num_axes(), return index.
   *        If -num_axes <= index <= -1, return (num_axes() - (-index)),
   *        e.g., the last axis index (num_axes() - 1) if index == -1,
   *        the second to last if index == -2, etc.
   *        Dies on out of range index.
   */
  public native int CanonicalAxisIndex(int axis_index);

  /** \brief Deprecated legacy shape accessor num: use shape(0) instead. */
  public native int num();
  /** \brief Deprecated legacy shape accessor channels: use shape(1) instead. */
  public native int channels();
  /** \brief Deprecated legacy shape accessor height: use shape(2) instead. */
  public native int height();
  /** \brief Deprecated legacy shape accessor width: use shape(3) instead. */
  public native int width();
  public native int LegacyShape(int index);

  public native int offset(int n, int c/*=0*/, int h/*=0*/,
        int w/*=0*/);
  public native int offset(int n);

  public native int offset(@StdVector IntPointer indices);
  public native int offset(@StdVector IntBuffer indices);
  public native int offset(@StdVector int[] indices);
  /**
   * \brief Copy from a source Blob.
   *
   * @param source the Blob to copy from
   * @param copy_diff if false, copy the data; if true, copy the diff
   * @param reshape if false, require this Blob to be pre-shaped to the shape
   *        of other (and die otherwise); if true, Reshape this Blob to other's
   *        shape if necessary
   */
  public native void CopyFrom(@Const @ByRef DoubleBlob source, @Cast("bool") boolean copy_diff/*=false*/,
        @Cast("bool") boolean reshape/*=false*/);
  public native void CopyFrom(@Const @ByRef DoubleBlob source);

  public native double data_at(int n, int c, int h,
        int w);

  public native double diff_at(int n, int c, int h,
        int w);

  public native double data_at(@StdVector IntPointer index);
  public native double data_at(@StdVector IntBuffer index);
  public native double data_at(@StdVector int[] index);

  public native double diff_at(@StdVector IntPointer index);
  public native double diff_at(@StdVector IntBuffer index);
  public native double diff_at(@StdVector int[] index);

  public native @SharedPtr SyncedMemory data();

  public native @SharedPtr SyncedMemory diff();

  public native @Const DoublePointer cpu_data();
  public native void set_cpu_data(DoublePointer data);
  public native void set_cpu_data(DoubleBuffer data);
  public native void set_cpu_data(double[] data);
  public native @Const IntPointer gpu_shape();
  public native @Const DoublePointer gpu_data();
  public native void set_gpu_data(DoublePointer data);
  public native void set_gpu_data(DoubleBuffer data);
  public native void set_gpu_data(double[] data);
  public native @Const DoublePointer cpu_diff();
  public native @Const DoublePointer gpu_diff();
  public native DoublePointer mutable_cpu_data();
  public native DoublePointer mutable_gpu_data();
  public native DoublePointer mutable_cpu_diff();
  public native DoublePointer mutable_gpu_diff();
  public native void Update();
  public native void FromProto(@Const @ByRef BlobProto proto, @Cast("bool") boolean reshape/*=true*/);
  public native void FromProto(@Const @ByRef BlobProto proto);
  public native void ToProto(BlobProto proto, @Cast("bool") boolean write_diff/*=false*/);
  public native void ToProto(BlobProto proto);

  /** \brief Compute the sum of absolute values (L1 norm) of the data. */
  public native double asum_data();
  /** \brief Compute the sum of absolute values (L1 norm) of the diff. */
  public native double asum_diff();
  /** \brief Compute the sum of squares (L2 norm squared) of the data. */
  public native double sumsq_data();
  /** \brief Compute the sum of squares (L2 norm squared) of the diff. */
  public native double sumsq_diff();

  /** \brief Scale the blob data by a constant factor. */
  public native void scale_data(double scale_factor);
  /** \brief Scale the blob diff by a constant factor. */
  public native void scale_diff(double scale_factor);

  /**
   * \brief Set the data_ shared_ptr to point to the SyncedMemory holding the
   *        data_ of Blob other -- useful in Layer%s which simply perform a copy
   *        in their Forward pass.
   *
   * This deallocates the SyncedMemory holding this Blob's data_, as
   * shared_ptr calls its destructor when reset with the "=" operator.
   */
  public native void ShareData(@Const @ByRef DoubleBlob other);
  /**
   * \brief Set the diff_ shared_ptr to point to the SyncedMemory holding the
   *        diff_ of Blob other -- useful in Layer%s which simply perform a copy
   *        in their Forward pass.
   *
   * This deallocates the SyncedMemory holding this Blob's diff_, as
   * shared_ptr calls its destructor when reset with the "=" operator.
   */
  public native void ShareDiff(@Const @ByRef DoubleBlob other);

  public native @Cast("bool") boolean ShapeEquals(@Const @ByRef BlobProto other);
}  // class Blob

  // namespace caffe

// #endif  // CAFFE_BLOB_HPP_


// Parsed from caffe/data_transformer.hpp

// #ifndef CAFFE_DATA_TRANSFORMER_HPP
// #define CAFFE_DATA_TRANSFORMER_HPP

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/common.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Applies common transformations to the input data, such as
 * scaling, mirroring, substracting the image mean...
 */
@Name("caffe::DataTransformer<float>") @NoOffset public static class FloatDataTransformer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatDataTransformer(Pointer p) { super(p); }

  public FloatDataTransformer(@Const @ByRef TransformationParameter param, @Cast("caffe::Phase") int phase) { super((Pointer)null); allocate(param, phase); }
  private native void allocate(@Const @ByRef TransformationParameter param, @Cast("caffe::Phase") int phase);

  /**
   * \brief Initialize the Random number generations if needed by the
   *    transformation.
   */
  public native void InitRand();

  /**
   * \brief Applies the transformation defined in the data layer's
   * transform_param block to the data.
   *
   * @param datum
   *    Datum containing the data to be transformed.
   * @param transformed_blob
   *    This is destination blob. It can be part of top blob's data if
   *    set_cpu_data() is used. See data_layer.cpp for an example.
   */
  public native void Transform(@Const @ByRef Datum datum, FloatBlob transformed_blob);

  /**
   * \brief Applies the transformation defined in the data layer's
   * transform_param block to a vector of Datum.
   *
   * @param datum_vector
   *    A vector of Datum containing the data to be transformed.
   * @param transformed_blob
   *    This is destination blob. It can be part of top blob's data if
   *    set_cpu_data() is used. See memory_layer.cpp for an example.
   */
  public native void Transform(@Const @ByRef DatumVector datum_vector,
                  FloatBlob transformed_blob);

// #ifdef USE_OPENCV
  /**
   * \brief Applies the transformation defined in the data layer's
   * transform_param block to a vector of Mat.
   *
   * @param mat_vector
   *    A vector of Mat containing the data to be transformed.
   * @param transformed_blob
   *    This is destination blob. It can be part of top blob's data if
   *    set_cpu_data() is used. See memory_layer.cpp for an example.
   */
  public native void Transform(@Const @ByRef MatVector mat_vector,
                  FloatBlob transformed_blob);

  /**
   * \brief Applies the transformation defined in the data layer's
   * transform_param block to a cv::Mat
   *
   * @param cv_img
   *    cv::Mat containing the data to be transformed.
   * @param transformed_blob
   *    This is destination blob. It can be part of top blob's data if
   *    set_cpu_data() is used. See image_data_layer.cpp for an example.
   */
  public native void Transform(@Const @ByRef Mat cv_img, FloatBlob transformed_blob);
// #endif  // USE_OPENCV

  /**
   * \brief Applies the same transformation defined in the data layer's
   * transform_param block to all the num images in a input_blob.
   *
   * @param input_blob
   *    A Blob containing the data to be transformed. It applies the same
   *    transformation to all the num images in the blob.
   * @param transformed_blob
   *    This is destination blob, it will contain as many images as the
   *    input blob. It can be part of top blob's data.
   */
  public native void Transform(FloatBlob input_blob, FloatBlob transformed_blob);

  /**
   * \brief Infers the shape of transformed_blob will have when
   *    the transformation is applied to the data.
   *
   * @param datum
   *    Datum containing the data to be transformed.
   */
  public native @StdVector IntPointer InferBlobShape(@Const @ByRef Datum datum);
  /**
   * \brief Infers the shape of transformed_blob will have when
   *    the transformation is applied to the data.
   *    It uses the first element to infer the shape of the blob.
   *
   * @param datum_vector
   *    A vector of Datum containing the data to be transformed.
   */
  public native @StdVector IntPointer InferBlobShape(@Const @ByRef DatumVector datum_vector);
  /**
   * \brief Infers the shape of transformed_blob will have when
   *    the transformation is applied to the data.
   *    It uses the first element to infer the shape of the blob.
   *
   * @param mat_vector
   *    A vector of Mat containing the data to be transformed.
   */
// #ifdef USE_OPENCV
  public native @StdVector IntPointer InferBlobShape(@Const @ByRef MatVector mat_vector);
  /**
   * \brief Infers the shape of transformed_blob will have when
   *    the transformation is applied to the data.
   *
   * @param cv_img
   *    cv::Mat containing the data to be transformed.
   */
  public native @StdVector IntPointer InferBlobShape(@Const @ByRef Mat cv_img);
}
@Name("caffe::DataTransformer<double>") @NoOffset public static class DoubleDataTransformer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleDataTransformer(Pointer p) { super(p); }

  public DoubleDataTransformer(@Const @ByRef TransformationParameter param, @Cast("caffe::Phase") int phase) { super((Pointer)null); allocate(param, phase); }
  private native void allocate(@Const @ByRef TransformationParameter param, @Cast("caffe::Phase") int phase);

  /**
   * \brief Initialize the Random number generations if needed by the
   *    transformation.
   */
  public native void InitRand();

  /**
   * \brief Applies the transformation defined in the data layer's
   * transform_param block to the data.
   *
   * @param datum
   *    Datum containing the data to be transformed.
   * @param transformed_blob
   *    This is destination blob. It can be part of top blob's data if
   *    set_cpu_data() is used. See data_layer.cpp for an example.
   */
  public native void Transform(@Const @ByRef Datum datum, DoubleBlob transformed_blob);

  /**
   * \brief Applies the transformation defined in the data layer's
   * transform_param block to a vector of Datum.
   *
   * @param datum_vector
   *    A vector of Datum containing the data to be transformed.
   * @param transformed_blob
   *    This is destination blob. It can be part of top blob's data if
   *    set_cpu_data() is used. See memory_layer.cpp for an example.
   */
  public native void Transform(@Const @ByRef DatumVector datum_vector,
                  DoubleBlob transformed_blob);

// #ifdef USE_OPENCV
  /**
   * \brief Applies the transformation defined in the data layer's
   * transform_param block to a vector of Mat.
   *
   * @param mat_vector
   *    A vector of Mat containing the data to be transformed.
   * @param transformed_blob
   *    This is destination blob. It can be part of top blob's data if
   *    set_cpu_data() is used. See memory_layer.cpp for an example.
   */
  public native void Transform(@Const @ByRef MatVector mat_vector,
                  DoubleBlob transformed_blob);

  /**
   * \brief Applies the transformation defined in the data layer's
   * transform_param block to a cv::Mat
   *
   * @param cv_img
   *    cv::Mat containing the data to be transformed.
   * @param transformed_blob
   *    This is destination blob. It can be part of top blob's data if
   *    set_cpu_data() is used. See image_data_layer.cpp for an example.
   */
  public native void Transform(@Const @ByRef Mat cv_img, DoubleBlob transformed_blob);
// #endif  // USE_OPENCV

  /**
   * \brief Applies the same transformation defined in the data layer's
   * transform_param block to all the num images in a input_blob.
   *
   * @param input_blob
   *    A Blob containing the data to be transformed. It applies the same
   *    transformation to all the num images in the blob.
   * @param transformed_blob
   *    This is destination blob, it will contain as many images as the
   *    input blob. It can be part of top blob's data.
   */
  public native void Transform(DoubleBlob input_blob, DoubleBlob transformed_blob);

  /**
   * \brief Infers the shape of transformed_blob will have when
   *    the transformation is applied to the data.
   *
   * @param datum
   *    Datum containing the data to be transformed.
   */
  public native @StdVector IntPointer InferBlobShape(@Const @ByRef Datum datum);
  /**
   * \brief Infers the shape of transformed_blob will have when
   *    the transformation is applied to the data.
   *    It uses the first element to infer the shape of the blob.
   *
   * @param datum_vector
   *    A vector of Datum containing the data to be transformed.
   */
  public native @StdVector IntPointer InferBlobShape(@Const @ByRef DatumVector datum_vector);
  /**
   * \brief Infers the shape of transformed_blob will have when
   *    the transformation is applied to the data.
   *    It uses the first element to infer the shape of the blob.
   *
   * @param mat_vector
   *    A vector of Mat containing the data to be transformed.
   */
// #ifdef USE_OPENCV
  public native @StdVector IntPointer InferBlobShape(@Const @ByRef MatVector mat_vector);
  /**
   * \brief Infers the shape of transformed_blob will have when
   *    the transformation is applied to the data.
   *
   * @param cv_img
   *    cv::Mat containing the data to be transformed.
   */
  public native @StdVector IntPointer InferBlobShape(@Const @ByRef Mat cv_img);
}

  // namespace caffe

// #endif  // CAFFE_DATA_TRANSFORMER_HPP_


// Parsed from caffe/filler.hpp

// Fillers are random number generators that fills a blob using the specified
// algorithm. The expectation is that they are only going to be used during
// initialization time and will not involve any GPUs.

// #ifndef CAFFE_FILLER_HPP
// #define CAFFE_FILLER_HPP

// #include <string>

// #include "caffe/blob.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/syncedmem.hpp"
// #include "caffe/util/math_functions.hpp"

/** \brief Fills a Blob with constant or randomly-generated data. */
@Name("caffe::Filler<float>") @NoOffset public static class FloatFiller extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatFiller(Pointer p) { super(p); }

  public native void Fill(FloatBlob blob);
}
@Name("caffe::Filler<double>") @NoOffset public static class DoubleFiller extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleFiller(Pointer p) { super(p); }

  public native void Fill(DoubleBlob blob);
}  // class Filler


/** \brief Fills a Blob with constant values \f$ x = 0 \f$. */
@Name("caffe::ConstantFiller<float>") public static class FloatConstantFiller extends FloatFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatConstantFiller(Pointer p) { super(p); }

  public FloatConstantFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(FloatBlob blob);
}
@Name("caffe::ConstantFiller<double>") public static class DoubleConstantFiller extends DoubleFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleConstantFiller(Pointer p) { super(p); }

  public DoubleConstantFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(DoubleBlob blob);
}

/** \brief Fills a Blob with uniformly distributed values \f$ x\sim U(a, b) \f$. */
@Name("caffe::UniformFiller<float>") public static class FloatUniformFiller extends FloatFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatUniformFiller(Pointer p) { super(p); }

  public FloatUniformFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(FloatBlob blob);
}
@Name("caffe::UniformFiller<double>") public static class DoubleUniformFiller extends DoubleFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleUniformFiller(Pointer p) { super(p); }

  public DoubleUniformFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(DoubleBlob blob);
}

/** \brief Fills a Blob with Gaussian-distributed values \f$ x = a \f$. */
@Name("caffe::GaussianFiller<float>") @NoOffset public static class FloatGaussianFiller extends FloatFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatGaussianFiller(Pointer p) { super(p); }

  public FloatGaussianFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(FloatBlob blob);
}
@Name("caffe::GaussianFiller<double>") @NoOffset public static class DoubleGaussianFiller extends DoubleFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleGaussianFiller(Pointer p) { super(p); }

  public DoubleGaussianFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(DoubleBlob blob);
}

/** \brief Fills a Blob with values \f$ x \in [0, 1] \f$
 *         such that \f$ \forall i \sum_j x_{ij} = 1 \f$.
 */
@Name("caffe::PositiveUnitballFiller<float>") public static class FloatPositiveUnitballFiller extends FloatFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatPositiveUnitballFiller(Pointer p) { super(p); }

  public FloatPositiveUnitballFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(FloatBlob blob);
}
@Name("caffe::PositiveUnitballFiller<double>") public static class DoublePositiveUnitballFiller extends DoubleFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoublePositiveUnitballFiller(Pointer p) { super(p); }

  public DoublePositiveUnitballFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(DoubleBlob blob);
}

/**
 * \brief Fills a Blob with values \f$ x \sim U(-a, +a) \f$ where \f$ a \f$ is
 *        set inversely proportional to number of incoming nodes, outgoing
 *        nodes, or their average.
 *
 * A Filler based on the paper [Bengio and Glorot 2010]: Understanding
 * the difficulty of training deep feedforward neuralnetworks.
 *
 * It fills the incoming matrix by randomly sampling uniform data from [-scale,
 * scale] where scale = sqrt(3 / n) where n is the fan_in, fan_out, or their
 * average, depending on the variance_norm option. You should make sure the
 * input blob has shape (num, a, b, c) where a * b * c = fan_in and num * b * c
 * = fan_out. Note that this is currently not the case for inner product layers.
 *
 * TODO(dox): make notation in above comment consistent with rest & use LaTeX.
 */
@Name("caffe::XavierFiller<float>") public static class FloatXavierFiller extends FloatFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatXavierFiller(Pointer p) { super(p); }

  public FloatXavierFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(FloatBlob blob);
}
@Name("caffe::XavierFiller<double>") public static class DoubleXavierFiller extends DoubleFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleXavierFiller(Pointer p) { super(p); }

  public DoubleXavierFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(DoubleBlob blob);
}

/**
 * \brief Fills a Blob with values \f$ x \sim N(0, \sigma^2) \f$ where
 *        \f$ \sigma^2 \f$ is set inversely proportional to number of incoming
 *        nodes, outgoing nodes, or their average.
 *
 * A Filler based on the paper [He, Zhang, Ren and Sun 2015]: Specifically
 * accounts for ReLU nonlinearities.
 *
 * Aside: for another perspective on the scaling factor, see the derivation of
 * [Saxe, McClelland, and Ganguli 2013 (v3)].
 *
 * It fills the incoming matrix by randomly sampling Gaussian data with std =
 * sqrt(2 / n) where n is the fan_in, fan_out, or their average, depending on
 * the variance_norm option. You should make sure the input blob has shape (num,
 * a, b, c) where a * b * c = fan_in and num * b * c = fan_out. Note that this
 * is currently not the case for inner product layers.
 */
@Name("caffe::MSRAFiller<float>") public static class FloatMSRAFiller extends FloatFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatMSRAFiller(Pointer p) { super(p); }

  public FloatMSRAFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(FloatBlob blob);
}
@Name("caffe::MSRAFiller<double>") public static class DoubleMSRAFiller extends DoubleFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleMSRAFiller(Pointer p) { super(p); }

  public DoubleMSRAFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(DoubleBlob blob);
}

/**
\brief Fills a Blob with coefficients for bilinear interpolation.
<p>
A common use case is with the DeconvolutionLayer acting as upsampling.
You can upsample a feature map with shape of (B, C, H, W) by any integer factor
using the following proto.
<pre>{@code
layer {
  name: "upsample", type: "Deconvolution"
  bottom: "{{bottom_name}}" top: "{{top_name}}"
  convolution_param {
    kernel_size: {{2 * factor - factor % 2}} stride: {{factor}}
    num_output: {{C}} group: {{C}}
    pad: {{ceil((factor - 1) / 2.)}}
    weight_filler: { type: "bilinear" } bias_term: false
  }
  param { lr_mult: 0 decay_mult: 0 }
}
}</pre>
Please use this by replacing {@code {{}}} with your values. By specifying
{@code num_output: {{C}} group: {{C}}}, it behaves as
channel-wise convolution. The filter shape of this deconvolution layer will be
(C, 1, K, K) where K is {@code kernel_size}, and this filler will set a (K, K)
interpolation kernel for every channel of the filter identically. The resulting
shape of the top feature map will be (B, C, factor * H, factor * W).
Note that the learning rate and the
weight decay are set to 0 in order to keep coefficient values of bilinear
interpolation unchanged during training. If you apply this to an image, this
operation is equivalent to the following call in Python with Scikit.Image.
<pre>{@code {.py}
out = skimage.transform.rescale(img, factor, mode='constant', cval=0)
}</pre>
 */
@Name("caffe::BilinearFiller<float>") public static class FloatBilinearFiller extends FloatFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBilinearFiller(Pointer p) { super(p); }

  public FloatBilinearFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(FloatBlob blob);
}
@Name("caffe::BilinearFiller<double>") public static class DoubleBilinearFiller extends DoubleFiller {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBilinearFiller(Pointer p) { super(p); }

  public DoubleBilinearFiller(@Const @ByRef FillerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef FillerParameter param);
  public native void Fill(DoubleBlob blob);
}

/**
 * \brief Get a specific filler from the specification given in FillerParameter.
 *
 * Ideally this would be replaced by a factory pattern, but we will leave it
 * this way for now.
 */
@Namespace("caffe") public static native @Name("GetFiller<float>") FloatFiller GetFloatFiller(@Const @ByRef FillerParameter param);
@Namespace("caffe") public static native @Name("GetFiller<double>") DoubleFiller GetDoubleFiller(@Const @ByRef FillerParameter param);

  // namespace caffe

// #endif  // CAFFE_FILLER_HPP_


// Parsed from caffe/internal_thread.hpp

// #ifndef CAFFE_INTERNAL_THREAD_HPP_
// #define CAFFE_INTERNAL_THREAD_HPP_

// #include "caffe/common.hpp"

/**
 Forward declare boost::thread instead of including boost/thread.hpp
 to avoid a boost/NVCC issues (#1009, #1010) on OSX.
 */
@Namespace("boost") @Opaque public static class thread extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public thread() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public thread(Pointer p) { super(p); }
} 

/**
 * Virtual class encapsulate boost::thread for use in base class
 * The child class will acquire the ability to run a single thread,
 * by reimplementing the virtual function InternalThreadEntry.
 */
@Namespace("caffe") @NoOffset public static class InternalThread extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InternalThread(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InternalThread(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public InternalThread position(long position) {
        return (InternalThread)super.position(position);
    }

  public InternalThread() { super((Pointer)null); allocate(); }
  private native void allocate();

  /**
   * Caffe's thread local state will be initialized using the current
   * thread values, e.g. device id, solver index etc. The random seed
   * is initialized using caffe_rng_rand.
   */
  public native void StartInternalThread();

  /** Will not return until the internal thread has exited. */
  public native void StopInternalThread();

  public native @Cast("bool") boolean is_started();
}

  // namespace caffe

// #endif  // CAFFE_INTERNAL_THREAD_HPP_


// Parsed from caffe/util/hdf5.hpp

// #ifndef CAFFE_UTIL_HDF5_H_
// #define CAFFE_UTIL_HDF5_H_

// #include <string>

// #include "hdf5.h"
// #include "hdf5_hl.h"

// #include "caffe/blob.hpp"

@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset_helper<float>") void hdf5_load_nd_dataset_helper_float(
    @Cast("hid_t") int file_id, @Cast("const char*") BytePointer dataset_name_, int min_dim, int max_dim,
    FloatBlob blob, @Cast("bool") boolean reshape);
@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset_helper<float>") void hdf5_load_nd_dataset_helper_float(
    @Cast("hid_t") int file_id, String dataset_name_, int min_dim, int max_dim,
    FloatBlob blob, @Cast("bool") boolean reshape);

@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset_helper<double>") void hdf5_load_nd_dataset_helper_double(
    @Cast("hid_t") int file_id, @Cast("const char*") BytePointer dataset_name_, int min_dim, int max_dim,
    DoubleBlob blob, @Cast("bool") boolean reshape);
@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset_helper<double>") void hdf5_load_nd_dataset_helper_double(
    @Cast("hid_t") int file_id, String dataset_name_, int min_dim, int max_dim,
    DoubleBlob blob, @Cast("bool") boolean reshape);

@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset<float>") void hdf5_load_nd_dataset_float(
    @Cast("hid_t") int file_id, @Cast("const char*") BytePointer dataset_name_, int min_dim, int max_dim,
    FloatBlob blob, @Cast("bool") boolean reshape/*=false*/);
@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset<float>") void hdf5_load_nd_dataset_float(
    @Cast("hid_t") int file_id, @Cast("const char*") BytePointer dataset_name_, int min_dim, int max_dim,
    FloatBlob blob);
@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset<float>") void hdf5_load_nd_dataset_float(
    @Cast("hid_t") int file_id, String dataset_name_, int min_dim, int max_dim,
    FloatBlob blob, @Cast("bool") boolean reshape/*=false*/);
@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset<float>") void hdf5_load_nd_dataset_float(
    @Cast("hid_t") int file_id, String dataset_name_, int min_dim, int max_dim,
    FloatBlob blob);

@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset<double>") void hdf5_load_nd_dataset_double(
    @Cast("hid_t") int file_id, @Cast("const char*") BytePointer dataset_name_, int min_dim, int max_dim,
    DoubleBlob blob, @Cast("bool") boolean reshape/*=false*/);
@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset<double>") void hdf5_load_nd_dataset_double(
    @Cast("hid_t") int file_id, @Cast("const char*") BytePointer dataset_name_, int min_dim, int max_dim,
    DoubleBlob blob);
@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset<double>") void hdf5_load_nd_dataset_double(
    @Cast("hid_t") int file_id, String dataset_name_, int min_dim, int max_dim,
    DoubleBlob blob, @Cast("bool") boolean reshape/*=false*/);
@Namespace("caffe") public static native @Name("hdf5_load_nd_dataset<double>") void hdf5_load_nd_dataset_double(
    @Cast("hid_t") int file_id, String dataset_name_, int min_dim, int max_dim,
    DoubleBlob blob);

@Namespace("caffe") public static native @Name("hdf5_save_nd_dataset<float>") void hdf5_save_nd_dataset_float(
    @Cast("const hid_t") int file_id, @StdString BytePointer dataset_name, @Const @ByRef FloatBlob blob,
    @Cast("bool") boolean write_diff/*=false*/);
@Namespace("caffe") public static native @Name("hdf5_save_nd_dataset<float>") void hdf5_save_nd_dataset_float(
    @Cast("const hid_t") int file_id, @StdString BytePointer dataset_name, @Const @ByRef FloatBlob blob);
@Namespace("caffe") public static native @Name("hdf5_save_nd_dataset<float>") void hdf5_save_nd_dataset_float(
    @Cast("const hid_t") int file_id, @StdString String dataset_name, @Const @ByRef FloatBlob blob,
    @Cast("bool") boolean write_diff/*=false*/);
@Namespace("caffe") public static native @Name("hdf5_save_nd_dataset<float>") void hdf5_save_nd_dataset_float(
    @Cast("const hid_t") int file_id, @StdString String dataset_name, @Const @ByRef FloatBlob blob);

@Namespace("caffe") public static native @Name("hdf5_save_nd_dataset<double>") void hdf5_save_nd_dataset_double(
    @Cast("const hid_t") int file_id, @StdString BytePointer dataset_name, @Const @ByRef DoubleBlob blob,
    @Cast("bool") boolean write_diff/*=false*/);
@Namespace("caffe") public static native @Name("hdf5_save_nd_dataset<double>") void hdf5_save_nd_dataset_double(
    @Cast("const hid_t") int file_id, @StdString BytePointer dataset_name, @Const @ByRef DoubleBlob blob);
@Namespace("caffe") public static native @Name("hdf5_save_nd_dataset<double>") void hdf5_save_nd_dataset_double(
    @Cast("const hid_t") int file_id, @StdString String dataset_name, @Const @ByRef DoubleBlob blob,
    @Cast("bool") boolean write_diff/*=false*/);
@Namespace("caffe") public static native @Name("hdf5_save_nd_dataset<double>") void hdf5_save_nd_dataset_double(
    @Cast("const hid_t") int file_id, @StdString String dataset_name, @Const @ByRef DoubleBlob blob);

@Namespace("caffe") public static native int hdf5_load_int(@Cast("hid_t") int loc_id, @StdString BytePointer dataset_name);
@Namespace("caffe") public static native int hdf5_load_int(@Cast("hid_t") int loc_id, @StdString String dataset_name);
@Namespace("caffe") public static native void hdf5_save_int(@Cast("hid_t") int loc_id, @StdString BytePointer dataset_name, int i);
@Namespace("caffe") public static native void hdf5_save_int(@Cast("hid_t") int loc_id, @StdString String dataset_name, int i);
@Namespace("caffe") public static native @StdString BytePointer hdf5_load_string(@Cast("hid_t") int loc_id, @StdString BytePointer dataset_name);
@Namespace("caffe") public static native @StdString String hdf5_load_string(@Cast("hid_t") int loc_id, @StdString String dataset_name);
@Namespace("caffe") public static native void hdf5_save_string(@Cast("hid_t") int loc_id, @StdString BytePointer dataset_name,
                      @StdString BytePointer s);
@Namespace("caffe") public static native void hdf5_save_string(@Cast("hid_t") int loc_id, @StdString String dataset_name,
                      @StdString String s);

@Namespace("caffe") public static native int hdf5_get_num_links(@Cast("hid_t") int loc_id);
@Namespace("caffe") public static native @StdString BytePointer hdf5_get_name_by_idx(@Cast("hid_t") int loc_id, int idx);

  // namespace caffe

// #endif   // CAFFE_UTIL_HDF5_H_


// Parsed from caffe/layers/base_data_layer.hpp

// #ifndef CAFFE_DATA_LAYERS_HPP_
// #define CAFFE_DATA_LAYERS_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/data_transformer.hpp"
// #include "caffe/internal_thread.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/util/blocking_queue.hpp"

/**
 * \brief Provides base for data layers that feed blobs to the Net.
 *
 * TODO(dox): thorough documentation for Forward and proto params.
 */
@Name("caffe::BaseDataLayer<float>") @NoOffset public static class FloatBaseDataLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBaseDataLayer(Pointer p) { super(p); }

  public FloatBaseDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  // LayerSetUp: implements common data layer setup functionality, and calls
  // DataLayerSetUp to do special data layer setup for individual layer types.
  // This method may not be overridden except by the BasePrefetchingDataLayer.
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void DataLayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual public native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::BaseDataLayer<double>") @NoOffset public static class DoubleBaseDataLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBaseDataLayer(Pointer p) { super(p); }

  public DoubleBaseDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  // LayerSetUp: implements common data layer setup functionality, and calls
  // DataLayerSetUp to do special data layer setup for individual layer types.
  // This method may not be overridden except by the BasePrefetchingDataLayer.
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void DataLayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual public native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

@Name("caffe::Batch<float>") public static class FloatBatch extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FloatBatch() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FloatBatch(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBatch(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FloatBatch position(long position) {
        return (FloatBatch)super.position(position);
    }

  @MemberGetter public native @ByRef FloatBlob data_();
  @MemberGetter public native @ByRef FloatBlob label_();
}

@Name("caffe::Batch<double>") public static class DoubleBatch extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DoubleBatch() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DoubleBatch(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBatch(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DoubleBatch position(long position) {
        return (DoubleBatch)super.position(position);
    }

  @MemberGetter public native @ByRef DoubleBlob data_();
  @MemberGetter public native @ByRef DoubleBlob label_();
}

@Name("caffe::BasePrefetchingDataLayer<float>") @NoOffset public static class FloatBasePrefetchingDataLayer extends FloatBaseDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBasePrefetchingDataLayer(Pointer p) { super(p); }
    public InternalThread asInternalThread() { return asInternalThread(this); }
    @Namespace public static native @Name("static_cast<caffe::InternalThread*>") InternalThread asInternalThread(FloatBasePrefetchingDataLayer pointer);

  // LayerSetUp: implements common data layer setup functionality, and calls
  // DataLayerSetUp to do special data layer setup for individual layer types.
  // This method may not be overridden.
  public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual(true) protected native void load_batch(FloatBatch batch);
}

@Name("caffe::BasePrefetchingDataLayer<double>") @NoOffset public static class DoubleBasePrefetchingDataLayer extends DoubleBaseDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBasePrefetchingDataLayer(Pointer p) { super(p); }
    public InternalThread asInternalThread() { return asInternalThread(this); }
    @Namespace public static native @Name("static_cast<caffe::InternalThread*>") InternalThread asInternalThread(DoubleBasePrefetchingDataLayer pointer);

  // LayerSetUp: implements common data layer setup functionality, and calls
  // DataLayerSetUp to do special data layer setup for individual layer types.
  // This method may not be overridden.
  public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual(true) protected native void load_batch(DoubleBatch batch);
}

  // namespace caffe

// #endif  // CAFFE_DATA_LAYERS_HPP_


// Parsed from caffe/layers/data_layer.hpp

// #ifndef CAFFE_DATA_LAYER_HPP_
// #define CAFFE_DATA_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/data_transformer.hpp"
// #include "caffe/internal_thread.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/layers/base_data_layer.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/util/db.hpp"

@Name("caffe::DataLayer<float>") @NoOffset public static class FloatDataLayer extends FloatBasePrefetchingDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatDataLayer(Pointer p) { super(p); }

  public FloatDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void DataLayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  @Virtual protected native void load_batch(FloatBatch batch);
}

@Name("caffe::DataLayer<double>") @NoOffset public static class DoubleDataLayer extends DoubleBasePrefetchingDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleDataLayer(Pointer p) { super(p); }

  public DoubleDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void DataLayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  @Virtual protected native void load_batch(DoubleBatch batch);
}

  // namespace caffe

// #endif  // CAFFE_DATA_LAYER_HPP_


// Parsed from caffe/layers/dummy_data_layer.hpp

// #ifndef CAFFE_DUMMY_DATA_LAYER_HPP_
// #define CAFFE_DUMMY_DATA_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/filler.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Provides data to the Net generated by a Filler.
 *
 * TODO(dox): thorough documentation for Forward and proto params.
 */
@Name("caffe::DummyDataLayer<float>") @NoOffset public static class FloatDummyDataLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatDummyDataLayer(Pointer p) { super(p); }

  public FloatDummyDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::DummyDataLayer<double>") @NoOffset public static class DoubleDummyDataLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleDummyDataLayer(Pointer p) { super(p); }

  public DoubleDummyDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_DUMMY_DATA_LAYER_HPP_


// Parsed from caffe/layers/hdf5_data_layer.hpp

// #ifndef CAFFE_HDF5_DATA_LAYER_HPP_
// #define CAFFE_HDF5_DATA_LAYER_HPP_

// #include "hdf5.h"

// #include <string>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/base_data_layer.hpp"

/**
 * \brief Provides data to the Net from HDF5 files.
 *
 * TODO(dox): thorough documentation for Forward and proto params.
 */
@Name("caffe::HDF5DataLayer<float>") @NoOffset public static class FloatHDF5DataLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatHDF5DataLayer(Pointer p) { super(p); }

  public FloatHDF5DataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();

  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void LoadHDF5FileData(@Cast("const char*") BytePointer filename);
}
@Name("caffe::HDF5DataLayer<double>") @NoOffset public static class DoubleHDF5DataLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleHDF5DataLayer(Pointer p) { super(p); }

  public DoubleHDF5DataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();

  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void LoadHDF5FileData(@Cast("const char*") BytePointer filename);
}

  // namespace caffe

// #endif  // CAFFE_HDF5_DATA_LAYER_HPP_


// Parsed from caffe/layers/hdf5_output_layer.hpp

// #ifndef CAFFE_HDF5_OUTPUT_LAYER_HPP_
// #define CAFFE_HDF5_OUTPUT_LAYER_HPP_

// #include "hdf5.h"

// #include <string>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

public static final String HDF5_DATA_DATASET_NAME = "data";
public static final String HDF5_DATA_LABEL_NAME = "label";

/**
 * \brief Write blobs to disk as HDF5 files.
 *
 * TODO(dox): thorough documentation for Forward and proto params.
 */
@Name("caffe::HDF5OutputLayer<float>") @NoOffset public static class FloatHDF5OutputLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatHDF5OutputLayer(Pointer p) { super(p); }

  public FloatHDF5OutputLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  // TODO: no limit on the number of blobs
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();

  public native @StdString BytePointer file_name();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void SaveBlobs();
}
@Name("caffe::HDF5OutputLayer<double>") @NoOffset public static class DoubleHDF5OutputLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleHDF5OutputLayer(Pointer p) { super(p); }

  public DoubleHDF5OutputLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  // TODO: no limit on the number of blobs
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();

  public native @StdString BytePointer file_name();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void SaveBlobs();
}

  // namespace caffe

// #endif  // CAFFE_HDF5_OUTPUT_LAYER_HPP_


// Parsed from caffe/layers/image_data_layer.hpp

// #ifndef CAFFE_IMAGE_DATA_LAYER_HPP_
// #define CAFFE_IMAGE_DATA_LAYER_HPP_

// #include <string>
// #include <utility>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/data_transformer.hpp"
// #include "caffe/internal_thread.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/layers/base_data_layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Provides data to the Net from image files.
 *
 * TODO(dox): thorough documentation for Forward and proto params.
 */
@Name("caffe::ImageDataLayer<float>") @NoOffset public static class FloatImageDataLayer extends FloatBasePrefetchingDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatImageDataLayer(Pointer p) { super(p); }

  public FloatImageDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void DataLayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void ShuffleImages();
  @Virtual protected native void load_batch(FloatBatch batch);
}
@Name("caffe::ImageDataLayer<double>") @NoOffset public static class DoubleImageDataLayer extends DoubleBasePrefetchingDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleImageDataLayer(Pointer p) { super(p); }

  public DoubleImageDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void DataLayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void ShuffleImages();
  @Virtual protected native void load_batch(DoubleBatch batch);
}


  // namespace caffe

// #endif  // CAFFE_IMAGE_DATA_LAYER_HPP_


// Parsed from caffe/layers/memory_data_layer.hpp

// #ifndef CAFFE_MEMORY_DATA_LAYER_HPP_
// #define CAFFE_MEMORY_DATA_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/base_data_layer.hpp"

/**
 * \brief Provides data to the Net from memory.
 *
 * TODO(dox): thorough documentation for Forward and proto params.
 */
@Name("caffe::MemoryDataLayer<float>") @NoOffset public static class FloatMemoryDataLayer extends FloatBaseDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatMemoryDataLayer(Pointer p) { super(p); }

  public FloatMemoryDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void DataLayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();

  @Virtual public native void AddDatumVector(@Const @ByRef DatumVector datum_vector);
// #ifdef USE_OPENCV
  @Virtual public native void AddMatVector(@Const @ByRef MatVector mat_vector,
        @Cast({"int*", "std::vector<int>&"}) @StdVector IntPointer labels);
// #endif  // USE_OPENCV

  // Reset should accept const pointers, but can't, because the memory
  //  will be given to Blob, which is mutable
  public native void Reset(FloatPointer data, FloatPointer label, int n);
  public native void Reset(FloatBuffer data, FloatBuffer label, int n);
  public native void Reset(float[] data, float[] label, int n);
  public native void set_batch_size(int new_size);

  public native int batch_size();
  public native int channels();
  public native int height();
  public native int width();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
}
@Name("caffe::MemoryDataLayer<double>") @NoOffset public static class DoubleMemoryDataLayer extends DoubleBaseDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleMemoryDataLayer(Pointer p) { super(p); }

  public DoubleMemoryDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void DataLayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();

  @Virtual public native void AddDatumVector(@Const @ByRef DatumVector datum_vector);
// #ifdef USE_OPENCV
  @Virtual public native void AddMatVector(@Const @ByRef MatVector mat_vector,
        @Cast({"int*", "std::vector<int>&"}) @StdVector IntPointer labels);
// #endif  // USE_OPENCV

  // Reset should accept const pointers, but can't, because the memory
  //  will be given to Blob, which is mutable
  public native void Reset(DoublePointer data, DoublePointer label, int n);
  public native void Reset(DoubleBuffer data, DoubleBuffer label, int n);
  public native void Reset(double[] data, double[] label, int n);
  public native void set_batch_size(int new_size);

  public native int batch_size();
  public native int channels();
  public native int height();
  public native int width();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
}

  // namespace caffe

// #endif  // CAFFE_MEMORY_DATA_LAYER_HPP_


// Parsed from caffe/layers/window_data_layer.hpp

// #ifndef CAFFE_WINDOW_DATA_LAYER_HPP_
// #define CAFFE_WINDOW_DATA_LAYER_HPP_

// #include <string>
// #include <utility>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/data_transformer.hpp"
// #include "caffe/internal_thread.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/layers/base_data_layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Provides data to the Net from windows of images files, specified
 *        by a window data file. This layer is *DEPRECATED* and only kept for
 *        archival purposes for use by the original R-CNN.
 *
 * TODO(dox): thorough documentation for Forward and proto params.
 */
@Name("caffe::WindowDataLayer<float>") @NoOffset public static class FloatWindowDataLayer extends FloatBasePrefetchingDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatWindowDataLayer(Pointer p) { super(p); }

  public FloatWindowDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void DataLayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native @Cast("unsigned int") int PrefetchRand();
  @Virtual protected native void load_batch(FloatBatch batch);
}
@Name("caffe::WindowDataLayer<double>") @NoOffset public static class DoubleWindowDataLayer extends DoubleBasePrefetchingDataLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleWindowDataLayer(Pointer p) { super(p); }

  public DoubleWindowDataLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void DataLayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native @Cast("unsigned int") int PrefetchRand();
  @Virtual protected native void load_batch(DoubleBatch batch);
}

  // namespace caffe

// #endif  // CAFFE_WINDOW_DATA_LAYER_HPP_


// Parsed from caffe/layer_factory.hpp

/**
 * \brief A layer factory that allows one to register layers.
 * During runtime, registered layers can be called by passing a LayerParameter
 * protobuffer to the CreateLayer function:
 *
 *     LayerRegistry<Dtype>::CreateLayer(param);
 *
 * There are two ways to register a layer. Assuming that we have a layer like:
 *
 *   template <typename Dtype>
 *   class MyAwesomeLayer : public Layer<Dtype> {
 *     // your implementations
 *   };
 *
 * and its type is its C++ class name, but without the "Layer" at the end
 * ("MyAwesomeLayer" -> "MyAwesome").
 *
 * If the layer is going to be created simply by its constructor, in your c++
 * file, add the following line:
 *
 *    REGISTER_LAYER_CLASS(MyAwesome);
 *
 * Or, if the layer is going to be created by another creator function, in the
 * format of:
 *
 *    template <typename Dtype>
 *    Layer<Dtype*> GetMyAwesomeLayer(const LayerParameter& param) {
 *      // your implementation
 *    }
 *
 * (for example, when your layer has multiple backends, see GetConvolutionLayer
 * for a use case), then you can register the creator function instead, like
 *
 * REGISTER_LAYER_CREATOR(MyAwesome, GetMyAwesomeLayer)
 *
 * Note that each layer type should only be registered once.
 */

// #ifndef CAFFE_LAYER_FACTORY_H_
// #define CAFFE_LAYER_FACTORY_H_

// #include <map>
// #include <string>
// #include <vector>

// #include "caffe/common.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

@Name("caffe::LayerRegistry<float>") public static class FloatLayerRegistry extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatLayerRegistry(Pointer p) { super(p); }

  public static class Creator extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Creator(Pointer p) { super(p); }
      protected Creator() { allocate(); }
      private native void allocate();
      public native @Cast({"", "boost::shared_ptr<caffe::Layer<float> >"}) @SharedPtr @ByVal FloatLayer call(@Const @ByRef LayerParameter arg0);
  }

  public static native @Cast("caffe::LayerRegistry<float>::CreatorRegistry*") @ByRef FloatRegistry Registry();

  // Adds a creator.
  public static native void AddCreator(@StdString BytePointer type, Creator creator);
  public static native void AddCreator(@StdString String type, Creator creator);

  // Get a layer using a LayerParameter.
  public static native @Cast({"", "boost::shared_ptr<caffe::Layer<float> >"}) @SharedPtr @ByVal FloatLayer CreateLayer(@Const @ByRef LayerParameter param);

  public static native @ByVal StringVector LayerTypeList();
}

@Name("caffe::LayerRegistry<double>") public static class DoubleLayerRegistry extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleLayerRegistry(Pointer p) { super(p); }

  public static class Creator extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Creator(Pointer p) { super(p); }
      protected Creator() { allocate(); }
      private native void allocate();
      public native @Cast({"", "boost::shared_ptr<caffe::Layer<double> >"}) @SharedPtr @ByVal DoubleLayer call(@Const @ByRef LayerParameter arg0);
  }

  public static native @Cast("caffe::LayerRegistry<double>::CreatorRegistry*") @ByRef DoubleRegistry Registry();

  // Adds a creator.
  public static native void AddCreator(@StdString BytePointer type, Creator creator);
  public static native void AddCreator(@StdString String type, Creator creator);

  // Get a layer using a LayerParameter.
  public static native @Cast({"", "boost::shared_ptr<caffe::Layer<double> >"}) @SharedPtr @ByVal DoubleLayer CreateLayer(@Const @ByRef LayerParameter param);

  public static native @ByVal StringVector LayerTypeList();
}


@Name("caffe::LayerRegisterer<float>") public static class FloatLayerRegisterer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatLayerRegisterer(Pointer p) { super(p); }

  public static class Creator_LayerParameter extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Creator_LayerParameter(Pointer p) { super(p); }
      protected Creator_LayerParameter() { allocate(); }
      private native void allocate();
      public native @Cast({"", "boost::shared_ptr<caffe::Layer<float> >"}) @SharedPtr @ByVal FloatLayer call(@Const @ByRef LayerParameter arg0);
  }
  public FloatLayerRegisterer(@StdString BytePointer type,
                    Creator_LayerParameter creator) { super((Pointer)null); allocate(type, creator); }
  private native void allocate(@StdString BytePointer type,
                    Creator_LayerParameter creator);
  public FloatLayerRegisterer(@StdString String type,
                    Creator_LayerParameter creator) { super((Pointer)null); allocate(type, creator); }
  private native void allocate(@StdString String type,
                    Creator_LayerParameter creator);
}


@Name("caffe::LayerRegisterer<double>") public static class DoubleLayerRegisterer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleLayerRegisterer(Pointer p) { super(p); }

  public static class Creator_LayerParameter extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Creator_LayerParameter(Pointer p) { super(p); }
      protected Creator_LayerParameter() { allocate(); }
      private native void allocate();
      public native @Cast({"", "boost::shared_ptr<caffe::Layer<double> >"}) @SharedPtr @ByVal DoubleLayer call(@Const @ByRef LayerParameter arg0);
  }
  public DoubleLayerRegisterer(@StdString BytePointer type,
                    Creator_LayerParameter creator) { super((Pointer)null); allocate(type, creator); }
  private native void allocate(@StdString BytePointer type,
                    Creator_LayerParameter creator);
  public DoubleLayerRegisterer(@StdString String type,
                    Creator_LayerParameter creator) { super((Pointer)null); allocate(type, creator); }
  private native void allocate(@StdString String type,
                    Creator_LayerParameter creator);
}


// #define REGISTER_LAYER_CREATOR(type, creator)
//   static LayerRegisterer<float> g_creator_f_##type(#type, creator<float>);
//   static LayerRegisterer<double> g_creator_d_##type(#type, creator<double>)    

// #define REGISTER_LAYER_CLASS(type)
//   template <typename Dtype>
//   shared_ptr<Layer<Dtype> > Creator_##type##Layer(const LayerParameter& param)
//   {
//     return shared_ptr<Layer<Dtype> >(new type##Layer<Dtype>(param));
//   }
//   REGISTER_LAYER_CREATOR(type, Creator_##type##Layer)

  // namespace caffe

// #endif  // CAFFE_LAYER_FACTORY_H_


// Parsed from caffe/layer.hpp

// #ifndef CAFFE_LAYER_H_
// #define CAFFE_LAYER_H_

// #include <algorithm>
// #include <string>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/common.hpp"
// #include "caffe/layer_factory.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/util/math_functions.hpp"

/**
 Forward declare boost::thread instead of including boost/thread.hpp
 to avoid a boost/NVCC issues (#1009, #1010) on OSX.
 */ 

/**
 * \brief An interface for the units of computation which can be composed into a
 *        Net.
 *
 * Layer%s must implement a Forward function, in which they take their input
 * (bottom) Blob%s (if any) and compute their output Blob%s (if any).
 * They may also implement a Backward function, in which they compute the error
 * gradients with respect to their input Blob%s, given the error gradients with
 * their output Blob%s.
 */
@Name("caffe::Layer<float>") @NoOffset public static class FloatLayer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatLayer(Pointer p) { super(p); }

  /**
   * You should not implement your own constructor. Any set up code should go
   * to SetUp(), where the dimensions of the bottom blobs are provided to the
   * layer.
   */

  /**
   * \brief Implements common layer setup functionality.
   *
   * @param bottom the preshaped input blobs
   * @param top
   *     the allocated but unshaped output blobs, to be shaped by Reshape
   *
   * Checks that the number of bottom and top blobs is correct.
   * Calls LayerSetUp to do special layer setup for individual layer types,
   * followed by Reshape to set up sizes of top blobs and internal buffers.
   * Sets up the loss weight multiplier blobs for any non-zero loss weights.
   * This method may not be overridden.
   */
  public native void SetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  /**
   * \brief Does layer-specific setup: your layer should implement this function
   *        as well as Reshape.
   *
   * @param bottom
   *     the preshaped input blobs, whose data fields store the input data for
   *     this layer
   * @param top
   *     the allocated but unshaped output blobs
   *
   * This method should do one-time layer specific setup. This includes reading
   * and processing relevent parameters from the <code>layer_param_</code>.
   * Setting up the shapes of top blobs and internal buffers should be done in
   * <code>Reshape</code>, which will be called before the forward pass to
   * adjust the top blob sizes.
   */
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  /**
   * \brief Adjust the shapes of top blobs and internal buffers to accommodate
   *        the shapes of the bottom blobs.
   *
   * @param bottom the input blobs, with the requested input shapes
   * @param top the top blobs, which should be reshaped as needed
   *
   * This method should reshape top blobs as needed according to the shapes
   * of the bottom (input) blobs, as well as reshaping any internal buffers
   * and making any other necessary adjustments so that the layer can
   * accommodate the bottom blobs.
   */
  @Virtual(true) public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  /**
   * \brief Given the bottom blobs, compute the top blobs and the loss.
   *
   * @param bottom
   *     the input blobs, whose data fields store the input data for this layer
   * @param top
   *     the preshaped output blobs, whose data fields will store this layers'
   *     outputs
   * @return The total loss from the layer.
   *
   * The Forward wrapper calls the relevant device wrapper function
   * (Forward_cpu or Forward_gpu) to compute the top blob values given the
   * bottom blobs.  If the layer has any non-zero loss_weights, the wrapper
   * then computes and returns the loss.
   *
   * Your layer should implement Forward_cpu and (optionally) Forward_gpu.
   */
  public native float Forward(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  /**
   * \brief Given the top blob error gradients, compute the bottom blob error
   *        gradients.
   *
   * @param top
   *     the output blobs, whose diff fields store the gradient of the error
   *     with respect to themselves
   * @param propagate_down
   *     a vector with equal length to bottom, with each index indicating
   *     whether to propagate the error gradients down to the bottom blob at
   *     the corresponding index
   * @param bottom
   *     the input blobs, whose diff fields will store the gradient of the error
   *     with respect to themselves after Backward is run
   *
   * The Backward wrapper calls the relevant device wrapper function
   * (Backward_cpu or Backward_gpu) to compute the bottom blob diffs given the
   * top blob diffs.
   *
   * Your layer should implement Backward_cpu and (optionally) Backward_gpu.
   */
  public native void Backward(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down,
        @Const @ByRef FloatBlobVector bottom);

  /**
   * \brief Returns the vector of learnable parameter blobs.
   */
  public native @ByRef FloatBlobSharedVector blobs();

  /**
   * \brief Returns the layer parameter.
   */
  public native @Const @ByRef LayerParameter layer_param();

  /**
   * \brief Writes the layer parameter to a protocol buffer
   */
  @Virtual public native void ToProto(LayerParameter param, @Cast("bool") boolean write_diff/*=false*/);

  /**
   * \brief Returns the scalar loss associated with a top blob at a given index.
   */
  public native float loss(@Const int top_index);

  /**
   * \brief Sets the loss associated with a top blob at a given index.
   */
  public native void set_loss(@Const int top_index, @Const float value);

  /**
   * \brief Returns the layer type.
   */
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();

  /**
   * \brief Returns the exact number of bottom blobs required by the layer,
   *        or -1 if no exact number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some exact number of bottom blobs.
   */
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  /**
   * \brief Returns the minimum number of bottom blobs required by the layer,
   *        or -1 if no minimum number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some minimum number of bottom blobs.
   */
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  /**
   * \brief Returns the maximum number of bottom blobs required by the layer,
   *        or -1 if no maximum number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some maximum number of bottom blobs.
   */
  @Virtual public native @Const({false, false, true}) int MaxBottomBlobs();
  /**
   * \brief Returns the exact number of top blobs required by the layer,
   *        or -1 if no exact number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some exact number of top blobs.
   */
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  /**
   * \brief Returns the minimum number of top blobs required by the layer,
   *        or -1 if no minimum number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some minimum number of top blobs.
   */
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  /**
   * \brief Returns the maximum number of top blobs required by the layer,
   *        or -1 if no maximum number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some maximum number of top blobs.
   */
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  /**
   * \brief Returns true if the layer requires an equal number of bottom and
   *        top blobs.
   *
   * This method should be overridden to return true if your layer expects an
   * equal number of bottom and top blobs.
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean EqualNumBottomTopBlobs();

  /**
   * \brief Return whether "anonymous" top blobs are created automatically
   *        by the layer.
   *
   * If this method returns true, Net::Init will create enough "anonymous" top
   * blobs to fulfill the requirement specified by ExactNumTopBlobs() or
   * MinTopBlobs().
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AutoTopBlobs();

  /**
   * \brief Return whether to allow force_backward for a given bottom blob
   *        index.
   *
   * If AllowForceBackward(i) == false, we will ignore the force_backward
   * setting and backpropagate to blob i only if it needs gradient information
   * (as is done when force_backward == false).
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);

  /**
   * \brief Specifies whether the layer should compute gradients w.r.t. a
   *        parameter at a particular index given by param_id.
   *
   * You can safely ignore false values and always compute gradients
   * for all parameters, but possibly with wasteful computation.
   */
  public native @Cast("bool") boolean param_propagate_down(@Const int param_id);
  /**
   * \brief Sets whether the layer should compute gradients w.r.t. a
   *        parameter at a particular index given by param_id.
   */
  public native void set_param_propagate_down(@Const int param_id, @Cast("const bool") boolean value);
  @Virtual(true) protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual(true) protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down,
        @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down,
        @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void CheckBlobCounts(@Const @ByRef FloatBlobVector bottom,
                                 @Const @ByRef FloatBlobVector top);
}
@Name("caffe::Layer<double>") @NoOffset public static class DoubleLayer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleLayer(Pointer p) { super(p); }

  /**
   * You should not implement your own constructor. Any set up code should go
   * to SetUp(), where the dimensions of the bottom blobs are provided to the
   * layer.
   */

  /**
   * \brief Implements common layer setup functionality.
   *
   * @param bottom the preshaped input blobs
   * @param top
   *     the allocated but unshaped output blobs, to be shaped by Reshape
   *
   * Checks that the number of bottom and top blobs is correct.
   * Calls LayerSetUp to do special layer setup for individual layer types,
   * followed by Reshape to set up sizes of top blobs and internal buffers.
   * Sets up the loss weight multiplier blobs for any non-zero loss weights.
   * This method may not be overridden.
   */
  public native void SetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  /**
   * \brief Does layer-specific setup: your layer should implement this function
   *        as well as Reshape.
   *
   * @param bottom
   *     the preshaped input blobs, whose data fields store the input data for
   *     this layer
   * @param top
   *     the allocated but unshaped output blobs
   *
   * This method should do one-time layer specific setup. This includes reading
   * and processing relevent parameters from the <code>layer_param_</code>.
   * Setting up the shapes of top blobs and internal buffers should be done in
   * <code>Reshape</code>, which will be called before the forward pass to
   * adjust the top blob sizes.
   */
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  /**
   * \brief Adjust the shapes of top blobs and internal buffers to accommodate
   *        the shapes of the bottom blobs.
   *
   * @param bottom the input blobs, with the requested input shapes
   * @param top the top blobs, which should be reshaped as needed
   *
   * This method should reshape top blobs as needed according to the shapes
   * of the bottom (input) blobs, as well as reshaping any internal buffers
   * and making any other necessary adjustments so that the layer can
   * accommodate the bottom blobs.
   */
  @Virtual(true) public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  /**
   * \brief Given the bottom blobs, compute the top blobs and the loss.
   *
   * @param bottom
   *     the input blobs, whose data fields store the input data for this layer
   * @param top
   *     the preshaped output blobs, whose data fields will store this layers'
   *     outputs
   * @return The total loss from the layer.
   *
   * The Forward wrapper calls the relevant device wrapper function
   * (Forward_cpu or Forward_gpu) to compute the top blob values given the
   * bottom blobs.  If the layer has any non-zero loss_weights, the wrapper
   * then computes and returns the loss.
   *
   * Your layer should implement Forward_cpu and (optionally) Forward_gpu.
   */
  public native double Forward(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  /**
   * \brief Given the top blob error gradients, compute the bottom blob error
   *        gradients.
   *
   * @param top
   *     the output blobs, whose diff fields store the gradient of the error
   *     with respect to themselves
   * @param propagate_down
   *     a vector with equal length to bottom, with each index indicating
   *     whether to propagate the error gradients down to the bottom blob at
   *     the corresponding index
   * @param bottom
   *     the input blobs, whose diff fields will store the gradient of the error
   *     with respect to themselves after Backward is run
   *
   * The Backward wrapper calls the relevant device wrapper function
   * (Backward_cpu or Backward_gpu) to compute the bottom blob diffs given the
   * top blob diffs.
   *
   * Your layer should implement Backward_cpu and (optionally) Backward_gpu.
   */
  public native void Backward(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down,
        @Const @ByRef DoubleBlobVector bottom);

  /**
   * \brief Returns the vector of learnable parameter blobs.
   */
  public native @ByRef DoubleBlobSharedVector blobs();

  /**
   * \brief Returns the layer parameter.
   */
  public native @Const @ByRef LayerParameter layer_param();

  /**
   * \brief Writes the layer parameter to a protocol buffer
   */
  @Virtual public native void ToProto(LayerParameter param, @Cast("bool") boolean write_diff/*=false*/);

  /**
   * \brief Returns the scalar loss associated with a top blob at a given index.
   */
  public native double loss(@Const int top_index);

  /**
   * \brief Sets the loss associated with a top blob at a given index.
   */
  public native void set_loss(@Const int top_index, @Const double value);

  /**
   * \brief Returns the layer type.
   */
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();

  /**
   * \brief Returns the exact number of bottom blobs required by the layer,
   *        or -1 if no exact number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some exact number of bottom blobs.
   */
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  /**
   * \brief Returns the minimum number of bottom blobs required by the layer,
   *        or -1 if no minimum number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some minimum number of bottom blobs.
   */
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  /**
   * \brief Returns the maximum number of bottom blobs required by the layer,
   *        or -1 if no maximum number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some maximum number of bottom blobs.
   */
  @Virtual public native @Const({false, false, true}) int MaxBottomBlobs();
  /**
   * \brief Returns the exact number of top blobs required by the layer,
   *        or -1 if no exact number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some exact number of top blobs.
   */
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  /**
   * \brief Returns the minimum number of top blobs required by the layer,
   *        or -1 if no minimum number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some minimum number of top blobs.
   */
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  /**
   * \brief Returns the maximum number of top blobs required by the layer,
   *        or -1 if no maximum number is required.
   *
   * This method should be overridden to return a non-negative value if your
   * layer expects some maximum number of top blobs.
   */
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  /**
   * \brief Returns true if the layer requires an equal number of bottom and
   *        top blobs.
   *
   * This method should be overridden to return true if your layer expects an
   * equal number of bottom and top blobs.
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean EqualNumBottomTopBlobs();

  /**
   * \brief Return whether "anonymous" top blobs are created automatically
   *        by the layer.
   *
   * If this method returns true, Net::Init will create enough "anonymous" top
   * blobs to fulfill the requirement specified by ExactNumTopBlobs() or
   * MinTopBlobs().
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AutoTopBlobs();

  /**
   * \brief Return whether to allow force_backward for a given bottom blob
   *        index.
   *
   * If AllowForceBackward(i) == false, we will ignore the force_backward
   * setting and backpropagate to blob i only if it needs gradient information
   * (as is done when force_backward == false).
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);

  /**
   * \brief Specifies whether the layer should compute gradients w.r.t. a
   *        parameter at a particular index given by param_id.
   *
   * You can safely ignore false values and always compute gradients
   * for all parameters, but possibly with wasteful computation.
   */
  public native @Cast("bool") boolean param_propagate_down(@Const int param_id);
  /**
   * \brief Sets whether the layer should compute gradients w.r.t. a
   *        parameter at a particular index given by param_id.
   */
  public native void set_param_propagate_down(@Const int param_id, @Cast("const bool") boolean value);
  @Virtual(true) protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual(true) protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down,
        @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down,
        @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void CheckBlobCounts(@Const @ByRef DoubleBlobVector bottom,
                                 @Const @ByRef DoubleBlobVector top);
}  // class Layer

// Forward and backward wrappers. You should implement the cpu and
// gpu specific implementations instead, and should not change these
// functions.




// Serialize LayerParameter to protocol buffer


  // namespace caffe

// #endif  // CAFFE_LAYER_H_


// Parsed from caffe/layers/accuracy_layer.hpp

// #ifndef CAFFE_ACCURACY_LAYER_HPP_
// #define CAFFE_ACCURACY_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/loss_layer.hpp"

/**
 * \brief Computes the classification accuracy for a one-of-many
 *        classification task.
 */
@Name("caffe::AccuracyLayer<float>") @NoOffset public static class FloatAccuracyLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatAccuracyLayer(Pointer p) { super(p); }

  /**
   * @param param provides AccuracyParameter accuracy_param,
   *     with AccuracyLayer options:
   *   - top_k (\b optional, default 1).
   *     Sets the maximum rank \f$ k \f$ at which a prediction is considered
   *     correct.  For example, if \f$ k = 5 \f$, a prediction is counted
   *     correct if the correct label is among the top 5 predicted labels.
   */
  public FloatAccuracyLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();

  // If there are two top blobs, then the second blob will contain
  // accuracies per class.
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::AccuracyLayer<double>") @NoOffset public static class DoubleAccuracyLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleAccuracyLayer(Pointer p) { super(p); }

  /**
   * @param param provides AccuracyParameter accuracy_param,
   *     with AccuracyLayer options:
   *   - top_k (\b optional, default 1).
   *     Sets the maximum rank \f$ k \f$ at which a prediction is considered
   *     correct.  For example, if \f$ k = 5 \f$, a prediction is counted
   *     correct if the correct label is among the top 5 predicted labels.
   */
  public DoubleAccuracyLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();

  // If there are two top blobs, then the second blob will contain
  // accuracies per class.
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_ACCURACY_LAYER_HPP_


// Parsed from caffe/layers/loss_layer.hpp

// #ifndef CAFFE_LOSS_LAYER_HPP_
// #define CAFFE_LOSS_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

@Namespace("caffe") @MemberGetter public static native float kLOG_THRESHOLD();

/**
 * \brief An interface for Layer%s that take two Blob%s as input -- usually
 *        (1) predictions and (2) ground-truth labels -- and output a
 *        singleton Blob representing the loss.
 *
 * LossLayers are typically only capable of backpropagating to their first input
 * -- the predictions.
 */
@Name("caffe::LossLayer<float>") public static class FloatLossLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatLossLayer(Pointer p) { super(p); }

  public FloatLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(
        @Const @ByRef FloatBlobVector bottom, @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(
        @Const @ByRef FloatBlobVector bottom, @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();

  /**
   * \brief For convenience and backwards compatibility, instruct the Net to
   *        automatically allocate a single top Blob for LossLayers, into which
   *        they output their singleton loss, (even if the user didn't specify
   *        one in the prototxt, etc.).
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AutoTopBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  /**
   * We usually cannot backpropagate to the labels; ignore force_backward for
   * these inputs.
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);
}
@Name("caffe::LossLayer<double>") public static class DoubleLossLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleLossLayer(Pointer p) { super(p); }

  public DoubleLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(
        @Const @ByRef DoubleBlobVector bottom, @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(
        @Const @ByRef DoubleBlobVector bottom, @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();

  /**
   * \brief For convenience and backwards compatibility, instruct the Net to
   *        automatically allocate a single top Blob for LossLayers, into which
   *        they output their singleton loss, (even if the user didn't specify
   *        one in the prototxt, etc.).
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AutoTopBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  /**
   * We usually cannot backpropagate to the labels; ignore force_backward for
   * these inputs.
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);
}

  // namespace caffe

// #endif  // CAFFE_LOSS_LAYER_HPP_


// Parsed from caffe/layers/contrastive_loss_layer.hpp

// #ifndef CAFFE_CONTRASTIVE_LOSS_LAYER_HPP_
// #define CAFFE_CONTRASTIVE_LOSS_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/loss_layer.hpp"

/**
 * \brief Computes the contrastive loss \f$
 *          E = \frac{1}{2N} \sum\limits_{n=1}^N \left(y\right) d^2 +
 *              \left(1-y\right) \max \left(margin-d, 0\right)^2
 *          \f$ where \f$
 *          d = \left| \left| a_n - b_n \right| \right|_2 \f$. This can be
 *          used to train siamese networks.
 *
 * @param bottom input Blob vector (length 3)
 *   -# \f$ (N \times C \times 1 \times 1) \f$
 *      the features \f$ a \in [-\infty, +\infty]\f$
 *   -# \f$ (N \times C \times 1 \times 1) \f$
 *      the features \f$ b \in [-\infty, +\infty]\f$
 *   -# \f$ (N \times 1 \times 1 \times 1) \f$
 *      the binary similarity \f$ s \in [0, 1]\f$
 * @param top output Blob vector (length 1)
 *   -# \f$ (1 \times 1 \times 1 \times 1) \f$
 *      the computed contrastive loss: \f$ E =
 *          \frac{1}{2N} \sum\limits_{n=1}^N \left(y\right) d^2 +
 *          \left(1-y\right) \max \left(margin-d, 0\right)^2
 *          \f$ where \f$
 *          d = \left| \left| a_n - b_n \right| \right|_2 \f$.
 * This can be used to train siamese networks.
 */
@Name("caffe::ContrastiveLossLayer<float>") @NoOffset public static class FloatContrastiveLossLayer extends FloatLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatContrastiveLossLayer(Pointer p) { super(p); }

  public FloatContrastiveLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  /**
   * Unlike most loss layers, in the ContrastiveLossLayer we can backpropagate
   * to the first two inputs.
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::ContrastiveLossLayer<double>") @NoOffset public static class DoubleContrastiveLossLayer extends DoubleLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleContrastiveLossLayer(Pointer p) { super(p); }

  public DoubleContrastiveLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  /**
   * Unlike most loss layers, in the ContrastiveLossLayer we can backpropagate
   * to the first two inputs.
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_CONTRASTIVE_LOSS_LAYER_HPP_


// Parsed from caffe/layers/euclidean_loss_layer.hpp

// #ifndef CAFFE_EUCLIDEAN_LOSS_LAYER_HPP_
// #define CAFFE_EUCLIDEAN_LOSS_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/loss_layer.hpp"

/**
 * \brief Computes the Euclidean (L2) loss \f$
 *          E = \frac{1}{2N} \sum\limits_{n=1}^N \left| \left| \hat{y}_n - y_n
 *        \right| \right|_2^2 \f$ for real-valued regression tasks.
 *
 * @param bottom input Blob vector (length 2)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the predictions \f$ \hat{y} \in [-\infty, +\infty]\f$
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the targets \f$ y \in [-\infty, +\infty]\f$
 * @param top output Blob vector (length 1)
 *   -# \f$ (1 \times 1 \times 1 \times 1) \f$
 *      the computed Euclidean loss: \f$ E =
 *          \frac{1}{2n} \sum\limits_{n=1}^N \left| \left| \hat{y}_n - y_n
 *        \right| \right|_2^2 \f$
 *
 * This can be used for least-squares regression tasks.  An InnerProductLayer
 * input to a EuclideanLossLayer exactly formulates a linear least squares
 * regression problem. With non-zero weight decay the problem becomes one of
 * ridge regression -- see src/caffe/test/test_sgd_solver.cpp for a concrete
 * example wherein we check that the gradients computed for a Net with exactly
 * this structure match hand-computed gradient formulas for ridge regression.
 *
 * (Note: Caffe, and SGD in general, is certainly \b not the best way to solve
 * linear least squares problems! We use it only as an instructive example.)
 */
@Name("caffe::EuclideanLossLayer<float>") @NoOffset public static class FloatEuclideanLossLayer extends FloatLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatEuclideanLossLayer(Pointer p) { super(p); }

  public FloatEuclideanLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  /**
   * Unlike most loss layers, in the EuclideanLossLayer we can backpropagate
   * to both inputs -- override to return true and always allow force_backward.
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::EuclideanLossLayer<double>") @NoOffset public static class DoubleEuclideanLossLayer extends DoubleLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleEuclideanLossLayer(Pointer p) { super(p); }

  public DoubleEuclideanLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  /**
   * Unlike most loss layers, in the EuclideanLossLayer we can backpropagate
   * to both inputs -- override to return true and always allow force_backward.
   */
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_EUCLIDEAN_LOSS_LAYER_HPP_


// Parsed from caffe/layers/hinge_loss_layer.hpp

// #ifndef CAFFE_HINGE_LOSS_LAYER_HPP_
// #define CAFFE_HINGE_LOSS_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/loss_layer.hpp"

/**
 * \brief Computes the hinge loss for a one-of-many classification task.
 *
 * @param bottom input Blob vector (length 2)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the predictions \f$ t \f$, a Blob with values in
 *      \f$ [-\infty, +\infty] \f$ indicating the predicted score for each of
 *      the \f$ K = CHW \f$ classes. In an SVM, \f$ t \f$ is the result of
 *      taking the inner product \f$ X^T W \f$ of the D-dimensional features
 *      \f$ X \in \mathcal{R}^{D \times N} \f$ and the learned hyperplane
 *      parameters \f$ W \in \mathcal{R}^{D \times K} \f$, so a Net with just
 *      an InnerProductLayer (with num_output = D) providing predictions to a
 *      HingeLossLayer and no other learnable parameters or losses is
 *      equivalent to an SVM.
 *   -# \f$ (N \times 1 \times 1 \times 1) \f$
 *      the labels \f$ l \f$, an integer-valued Blob with values
 *      \f$ l_n \in [0, 1, 2, ..., K - 1] \f$
 *      indicating the correct class label among the \f$ K \f$ classes
 * @param top output Blob vector (length 1)
 *   -# \f$ (1 \times 1 \times 1 \times 1) \f$
 *      the computed hinge loss: \f$ E =
 *        \frac{1}{N} \sum\limits_{n=1}^N \sum\limits_{k=1}^K
 *        [\max(0, 1 - \delta\{l_n = k\} t_{nk})] ^ p
 *      \f$, for the \f$ L^p \f$ norm
 *      (defaults to \f$ p = 1 \f$, the L1 norm; L2 norm, as in L2-SVM,
 *      is also available), and \f$
 *      \delta\{\mathrm{condition}\} = \left\{
 *         \begin{array}{lr}
 *            1 & \mbox{if condition} \\
 *           -1 & \mbox{otherwise}
 *         \end{array} \right.
 *      \f$
 *
 * In an SVM, \f$ t \in \mathcal{R}^{N \times K} \f$ is the result of taking
 * the inner product \f$ X^T W \f$ of the features
 * \f$ X \in \mathcal{R}^{D \times N} \f$
 * and the learned hyperplane parameters
 * \f$ W \in \mathcal{R}^{D \times K} \f$. So, a Net with just an
 * InnerProductLayer (with num_output = \f$k\f$) providing predictions to a
 * HingeLossLayer is equivalent to an SVM (assuming it has no other learned
 * outside the InnerProductLayer and no other losses outside the
 * HingeLossLayer).
 */
@Name("caffe::HingeLossLayer<float>") public static class FloatHingeLossLayer extends FloatLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatHingeLossLayer(Pointer p) { super(p); }

  public FloatHingeLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::HingeLossLayer<double>") public static class DoubleHingeLossLayer extends DoubleLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleHingeLossLayer(Pointer p) { super(p); }

  public DoubleHingeLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}


  // namespace caffe

// #endif  // CAFFE_HINGE_LOSS_LAYER_HPP_


// Parsed from caffe/layers/infogain_loss_layer.hpp

// #ifndef CAFFE_INFOGAIN_LOSS_LAYER_HPP_
// #define CAFFE_INFOGAIN_LOSS_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/loss_layer.hpp"
// #include "caffe/layers/softmax_layer.hpp"

/**
 * \brief A generalization of MultinomialLogisticLossLayer that takes an
 *        "information gain" (infogain) matrix specifying the "value" of all label
 *        pairs.
 *
 * Equivalent to the MultinomialLogisticLossLayer if the infogain matrix is the
 * identity.
 *
 * @param bottom input Blob vector (length 2-3)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the predictions \f$ \hat{p} \f$, a Blob with values in
 *      \f$ [0, 1] \f$ indicating the predicted probability of each of the
 *      \f$ K = CHW \f$ classes.  Each prediction vector \f$ \hat{p}_n \f$
 *      should sum to 1 as in a probability distribution: \f$
 *      \forall n \sum\limits_{k=1}^K \hat{p}_{nk} = 1 \f$.
 *   -# \f$ (N \times 1 \times 1 \times 1) \f$
 *      the labels \f$ l \f$, an integer-valued Blob with values
 *      \f$ l_n \in [0, 1, 2, ..., K - 1] \f$
 *      indicating the correct class label among the \f$ K \f$ classes
 *   -# \f$ (1 \times 1 \times K \times K) \f$
 *      (\b optional) the infogain matrix \f$ H \f$.  This must be provided as
 *      the third bottom blob input if not provided as the infogain_mat in the
 *      InfogainLossParameter. If \f$ H = I \f$, this layer is equivalent to the
 *      MultinomialLogisticLossLayer.
 * @param top output Blob vector (length 1)
 *   -# \f$ (1 \times 1 \times 1 \times 1) \f$
 *      the computed infogain multinomial logistic loss: \f$ E =
 *        \frac{-1}{N} \sum\limits_{n=1}^N H_{l_n} \log(\hat{p}_n) =
 *        \frac{-1}{N} \sum\limits_{n=1}^N \sum\limits_{k=1}^{K} H_{l_n,k}
 *        \log(\hat{p}_{n,k})
 *      \f$, where \f$ H_{l_n} \f$ denotes row \f$l_n\f$ of \f$H\f$.
 */
@Name("caffe::InfogainLossLayer<float>") @NoOffset public static class FloatInfogainLossLayer extends FloatLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatInfogainLossLayer(Pointer p) { super(p); }

  public FloatInfogainLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  // InfogainLossLayer takes 2-3 bottom Blobs; if there are 3 the third should
  // be the infogain matrix.  (Otherwise the infogain matrix is loaded from a
  // file specified by LayerParameter.)
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MaxBottomBlobs();

  // InfogainLossLayer computes softmax prob internally.
  // optional second "top" outputs the softmax prob
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native float get_normalizer(
        @Cast("caffe::LossParameter_NormalizationMode") int normalization_mode, int valid_count);
  @Virtual protected native void sum_rows_of_H(@Const FloatBlob H);
}
@Name("caffe::InfogainLossLayer<double>") @NoOffset public static class DoubleInfogainLossLayer extends DoubleLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleInfogainLossLayer(Pointer p) { super(p); }

  public DoubleInfogainLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  // InfogainLossLayer takes 2-3 bottom Blobs; if there are 3 the third should
  // be the infogain matrix.  (Otherwise the infogain matrix is loaded from a
  // file specified by LayerParameter.)
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MaxBottomBlobs();

  // InfogainLossLayer computes softmax prob internally.
  // optional second "top" outputs the softmax prob
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native double get_normalizer(
        @Cast("caffe::LossParameter_NormalizationMode") int normalization_mode, int valid_count);
  @Virtual protected native void sum_rows_of_H(@Const DoubleBlob H);
}

  // namespace caffe

// #endif  // CAFFE_INFOGAIN_LOSS_LAYER_HPP_


// Parsed from caffe/layers/multinomial_logistic_loss_layer.hpp

// #ifndef CAFFE_MULTINOMIAL_LOGISTIC_LOSS_LAYER_HPP_
// #define CAFFE_MULTINOMIAL_LOGISTIC_LOSS_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/loss_layer.hpp"

/**
 * \brief Computes the multinomial logistic loss for a one-of-many
 *        classification task, directly taking a predicted probability
 *        distribution as input.
 *
 * When predictions are not already a probability distribution, you should
 * instead use the SoftmaxWithLossLayer, which maps predictions to a
 * distribution using the SoftmaxLayer, before computing the multinomial
 * logistic loss. The SoftmaxWithLossLayer should be preferred over separate
 * SoftmaxLayer + MultinomialLogisticLossLayer
 * as its gradient computation is more numerically stable.
 *
 * @param bottom input Blob vector (length 2)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the predictions \f$ \hat{p} \f$, a Blob with values in
 *      \f$ [0, 1] \f$ indicating the predicted probability of each of the
 *      \f$ K = CHW \f$ classes.  Each prediction vector \f$ \hat{p}_n \f$
 *      should sum to 1 as in a probability distribution: \f$
 *      \forall n \sum\limits_{k=1}^K \hat{p}_{nk} = 1 \f$.
 *   -# \f$ (N \times 1 \times 1 \times 1) \f$
 *      the labels \f$ l \f$, an integer-valued Blob with values
 *      \f$ l_n \in [0, 1, 2, ..., K - 1] \f$
 *      indicating the correct class label among the \f$ K \f$ classes
 * @param top output Blob vector (length 1)
 *   -# \f$ (1 \times 1 \times 1 \times 1) \f$
 *      the computed multinomial logistic loss: \f$ E =
 *        \frac{-1}{N} \sum\limits_{n=1}^N \log(\hat{p}_{n,l_n})
 *      \f$
 */
@Name("caffe::MultinomialLogisticLossLayer<float>") public static class FloatMultinomialLogisticLossLayer extends FloatLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatMultinomialLogisticLossLayer(Pointer p) { super(p); }

  public FloatMultinomialLogisticLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::MultinomialLogisticLossLayer<double>") public static class DoubleMultinomialLogisticLossLayer extends DoubleLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleMultinomialLogisticLossLayer(Pointer p) { super(p); }

  public DoubleMultinomialLogisticLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_MULTINOMIAL_LOGISTIC_LOSS_LAYER_HPP_


// Parsed from caffe/layers/sigmoid_cross_entropy_loss_layer.hpp

// #ifndef CAFFE_SIGMOID_CROSS_ENTROPY_LOSS_LAYER_HPP_
// #define CAFFE_SIGMOID_CROSS_ENTROPY_LOSS_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/loss_layer.hpp"
// #include "caffe/layers/sigmoid_layer.hpp"

/**
 * \brief Computes the cross-entropy (logistic) loss \f$
 *          E = \frac{-1}{n} \sum\limits_{n=1}^N \left[
 *                  p_n \log \hat{p}_n +
 *                  (1 - p_n) \log(1 - \hat{p}_n)
 *              \right]
 *        \f$, often used for predicting targets interpreted as probabilities.
 *
 * This layer is implemented rather than separate
 * SigmoidLayer + CrossEntropyLayer
 * as its gradient computation is more numerically stable.
 * At test time, this layer can be replaced simply by a SigmoidLayer.
 *
 * @param bottom input Blob vector (length 2)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the scores \f$ x \in [-\infty, +\infty]\f$,
 *      which this layer maps to probability predictions
 *      \f$ \hat{p}_n = \sigma(x_n) \in [0, 1] \f$
 *      using the sigmoid function \f$ \sigma(.) \f$ (see SigmoidLayer).
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the targets \f$ y \in [0, 1] \f$
 * @param top output Blob vector (length 1)
 *   -# \f$ (1 \times 1 \times 1 \times 1) \f$
 *      the computed cross-entropy loss: \f$
 *          E = \frac{-1}{n} \sum\limits_{n=1}^N \left[
 *                  p_n \log \hat{p}_n + (1 - p_n) \log(1 - \hat{p}_n)
 *              \right]
 *      \f$
 */
@Name("caffe::SigmoidCrossEntropyLossLayer<float>") @NoOffset public static class FloatSigmoidCrossEntropyLossLayer extends FloatLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSigmoidCrossEntropyLossLayer(Pointer p) { super(p); }

  public FloatSigmoidCrossEntropyLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native float get_normalizer(
        @Cast("caffe::LossParameter_NormalizationMode") int normalization_mode, int valid_count);
}
@Name("caffe::SigmoidCrossEntropyLossLayer<double>") @NoOffset public static class DoubleSigmoidCrossEntropyLossLayer extends DoubleLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSigmoidCrossEntropyLossLayer(Pointer p) { super(p); }

  public DoubleSigmoidCrossEntropyLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native double get_normalizer(
        @Cast("caffe::LossParameter_NormalizationMode") int normalization_mode, int valid_count);
}

  // namespace caffe

// #endif  // CAFFE_SIGMOID_CROSS_ENTROPY_LOSS_LAYER_HPP_


// Parsed from caffe/layers/softmax_loss_layer.hpp

// #ifndef CAFFE_SOFTMAX_WITH_LOSS_LAYER_HPP_
// #define CAFFE_SOFTMAX_WITH_LOSS_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/loss_layer.hpp"
// #include "caffe/layers/softmax_layer.hpp"

/**
 * \brief Computes the multinomial logistic loss for a one-of-many
 *        classification task, passing real-valued predictions through a
 *        softmax to get a probability distribution over classes.
 *
 * This layer should be preferred over separate
 * SoftmaxLayer + MultinomialLogisticLossLayer
 * as its gradient computation is more numerically stable.
 * At test time, this layer can be replaced simply by a SoftmaxLayer.
 *
 * @param bottom input Blob vector (length 2)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the predictions \f$ x \f$, a Blob with values in
 *      \f$ [-\infty, +\infty] \f$ indicating the predicted score for each of
 *      the \f$ K = CHW \f$ classes. This layer maps these scores to a
 *      probability distribution over classes using the softmax function
 *      \f$ \hat{p}_{nk} = \exp(x_{nk}) /
 *      \left[\sum_{k'} \exp(x_{nk'})\right] \f$ (see SoftmaxLayer).
 *   -# \f$ (N \times 1 \times 1 \times 1) \f$
 *      the labels \f$ l \f$, an integer-valued Blob with values
 *      \f$ l_n \in [0, 1, 2, ..., K - 1] \f$
 *      indicating the correct class label among the \f$ K \f$ classes
 * @param top output Blob vector (length 1)
 *   -# \f$ (1 \times 1 \times 1 \times 1) \f$
 *      the computed cross-entropy classification loss: \f$ E =
 *        \frac{-1}{N} \sum\limits_{n=1}^N \log(\hat{p}_{n,l_n})
 *      \f$, for softmax output class probabilites \f$ \hat{p} \f$
 */
@Name("caffe::SoftmaxWithLossLayer<float>") @NoOffset public static class FloatSoftmaxWithLossLayer extends FloatLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSoftmaxWithLossLayer(Pointer p) { super(p); }

   /**
    * @param param provides LossParameter loss_param, with options:
    *  - ignore_label (optional)
    *    Specify a label value that should be ignored when computing the loss.
    *  - normalize (optional, default true)
    *    If true, the loss is normalized by the number of (nonignored) labels
    *    present; otherwise the loss is simply summed over spatial locations.
    */
  public FloatSoftmaxWithLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native float get_normalizer(
        @Cast("caffe::LossParameter_NormalizationMode") int normalization_mode, int valid_count);
}
@Name("caffe::SoftmaxWithLossLayer<double>") @NoOffset public static class DoubleSoftmaxWithLossLayer extends DoubleLossLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSoftmaxWithLossLayer(Pointer p) { super(p); }

   /**
    * @param param provides LossParameter loss_param, with options:
    *  - ignore_label (optional)
    *    Specify a label value that should be ignored when computing the loss.
    *  - normalize (optional, default true)
    *    If true, the loss is normalized by the number of (nonignored) labels
    *    present; otherwise the loss is simply summed over spatial locations.
    */
  public DoubleSoftmaxWithLossLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native double get_normalizer(
        @Cast("caffe::LossParameter_NormalizationMode") int normalization_mode, int valid_count);
}

  // namespace caffe

// #endif  // CAFFE_SOFTMAX_WITH_LOSS_LAYER_HPP_


// Parsed from caffe/layers/neuron_layer.hpp

// #ifndef CAFFE_NEURON_LAYER_HPP_
// #define CAFFE_NEURON_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief An interface for layers that take one blob as input (\f$ x \f$)
 *        and produce one equally-sized blob as output (\f$ y \f$), where
 *        each element of the output depends only on the corresponding input
 *        element.
 */
@Name("caffe::NeuronLayer<float>") public static class FloatNeuronLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatNeuronLayer(Pointer p) { super(p); }

  public FloatNeuronLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
}
@Name("caffe::NeuronLayer<double>") public static class DoubleNeuronLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleNeuronLayer(Pointer p) { super(p); }

  public DoubleNeuronLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
}

  // namespace caffe

// #endif  // CAFFE_NEURON_LAYER_HPP_


// Parsed from caffe/layers/absval_layer.hpp

// #ifndef CAFFE_ABSVAL_LAYER_HPP_
// #define CAFFE_ABSVAL_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Computes \f$ y = |x| \f$
 *
 * @param bottom input Blob vector (length 1)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the inputs \f$ x \f$
 * @param top output Blob vector (length 1)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the computed outputs \f$ y = |x| \f$
 */
@Name("caffe::AbsValLayer<float>") public static class FloatAbsValLayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatAbsValLayer(Pointer p) { super(p); }

  public FloatAbsValLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::AbsValLayer<double>") public static class DoubleAbsValLayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleAbsValLayer(Pointer p) { super(p); }

  public DoubleAbsValLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_ABSVAL_LAYER_HPP_


// Parsed from caffe/layers/bnll_layer.hpp

// #ifndef CAFFE_BNLL_LAYER_HPP_
// #define CAFFE_BNLL_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Computes \f$ y = x + \log(1 + \exp(-x)) \f$ if \f$ x > 0 \f$;
 *        \f$ y = \log(1 + \exp(x)) \f$ otherwise.
 *
 * @param bottom input Blob vector (length 1)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the inputs \f$ x \f$
 * @param top output Blob vector (length 1)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the computed outputs \f$
 *      y = \left\{
 *         \begin{array}{ll}
 *            x + \log(1 + \exp(-x)) & \mbox{if } x > 0 \\
 *            \log(1 + \exp(x)) & \mbox{otherwise}
 *         \end{array} \right.
 *      \f$
 */
@Name("caffe::BNLLLayer<float>") public static class FloatBNLLLayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBNLLLayer(Pointer p) { super(p); }

  public FloatBNLLLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::BNLLLayer<double>") public static class DoubleBNLLLayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBNLLLayer(Pointer p) { super(p); }

  public DoubleBNLLLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_BNLL_LAYER_HPP_


// Parsed from caffe/layers/dropout_layer.hpp

// #ifndef CAFFE_DROPOUT_LAYER_HPP_
// #define CAFFE_DROPOUT_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief During training only, sets a random portion of \f$x\f$ to 0, adjusting
 *        the rest of the vector magnitude accordingly.
 *
 * @param bottom input Blob vector (length 1)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the inputs \f$ x \f$
 * @param top output Blob vector (length 1)
 *   -# \f$ (N \times C \times H \times W) \f$
 *      the computed outputs \f$ y = |x| \f$
 */
@Name("caffe::DropoutLayer<float>") @NoOffset public static class FloatDropoutLayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatDropoutLayer(Pointer p) { super(p); }

  /**
   * @param param provides DropoutParameter dropout_param,
   *     with DropoutLayer options:
   *   - dropout_ratio (\b optional, default 0.5).
   *     Sets the probability \f$ p \f$ that any given unit is dropped.
   */
  public FloatDropoutLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::DropoutLayer<double>") @NoOffset public static class DoubleDropoutLayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleDropoutLayer(Pointer p) { super(p); }

  /**
   * @param param provides DropoutParameter dropout_param,
   *     with DropoutLayer options:
   *   - dropout_ratio (\b optional, default 0.5).
   *     Sets the probability \f$ p \f$ that any given unit is dropped.
   */
  public DoubleDropoutLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_DROPOUT_LAYER_HPP_


// Parsed from caffe/layers/exp_layer.hpp

// #ifndef CAFFE_EXP_LAYER_HPP_
// #define CAFFE_EXP_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Computes \f$ y = \gamma ^ {\alpha x + \beta} \f$,
 *        as specified by the scale \f$ \alpha \f$, shift \f$ \beta \f$,
 *        and base \f$ \gamma \f$.
 */
@Name("caffe::ExpLayer<float>") @NoOffset public static class FloatExpLayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatExpLayer(Pointer p) { super(p); }

  /**
   * @param param provides ExpParameter exp_param,
   *     with ExpLayer options:
   *   - scale (\b optional, default 1) the scale \f$ \alpha \f$
   *   - shift (\b optional, default 0) the shift \f$ \beta \f$
   *   - base (\b optional, default -1 for a value of \f$ e \approx 2.718 \f$)
   *         the base \f$ \gamma \f$
   */
  public FloatExpLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::ExpLayer<double>") @NoOffset public static class DoubleExpLayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleExpLayer(Pointer p) { super(p); }

  /**
   * @param param provides ExpParameter exp_param,
   *     with ExpLayer options:
   *   - scale (\b optional, default 1) the scale \f$ \alpha \f$
   *   - shift (\b optional, default 0) the shift \f$ \beta \f$
   *   - base (\b optional, default -1 for a value of \f$ e \approx 2.718 \f$)
   *         the base \f$ \gamma \f$
   */
  public DoubleExpLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_EXP_LAYER_HPP_


// Parsed from caffe/layers/log_layer.hpp

// #ifndef CAFFE_LOG_LAYER_HPP_
// #define CAFFE_LOG_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Computes \f$ y = log_{\gamma}(\alpha x + \beta) \f$,
 *        as specified by the scale \f$ \alpha \f$, shift \f$ \beta \f$,
 *        and base \f$ \gamma \f$.
 */

  // namespace caffe

// #endif  // CAFFE_LOG_LAYER_HPP_


// Parsed from caffe/layers/power_layer.hpp

// #ifndef CAFFE_POWER_LAYER_HPP_
// #define CAFFE_POWER_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Computes \f$ y = (\alpha x + \beta) ^ \gamma \f$,
 *        as specified by the scale \f$ \alpha \f$, shift \f$ \beta \f$,
 *        and power \f$ \gamma \f$.
 */
@Name("caffe::PowerLayer<float>") @NoOffset public static class FloatPowerLayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatPowerLayer(Pointer p) { super(p); }

  /**
   * @param param provides PowerParameter power_param,
   *     with PowerLayer options:
   *   - scale (\b optional, default 1) the scale \f$ \alpha \f$
   *   - shift (\b optional, default 0) the shift \f$ \beta \f$
   *   - power (\b optional, default 1) the power \f$ \gamma \f$
   */
  public FloatPowerLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::PowerLayer<double>") @NoOffset public static class DoublePowerLayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoublePowerLayer(Pointer p) { super(p); }

  /**
   * @param param provides PowerParameter power_param,
   *     with PowerLayer options:
   *   - scale (\b optional, default 1) the scale \f$ \alpha \f$
   *   - shift (\b optional, default 0) the shift \f$ \beta \f$
   *   - power (\b optional, default 1) the power \f$ \gamma \f$
   */
  public DoublePowerLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_POWER_LAYER_HPP_


// Parsed from caffe/layers/relu_layer.hpp

// #ifndef CAFFE_RELU_LAYER_HPP_
// #define CAFFE_RELU_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Rectified Linear Unit non-linearity \f$ y = \max(0, x) \f$.
 *        The simple max is fast to compute, and the function does not saturate.
 */
@Name("caffe::ReLULayer<float>") public static class FloatReLULayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatReLULayer(Pointer p) { super(p); }

  /**
   * @param param provides ReLUParameter relu_param,
   *     with ReLULayer options:
   *   - negative_slope (\b optional, default 0).
   *     the value \f$ \nu \f$ by which negative values are multiplied.
   */
  public FloatReLULayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::ReLULayer<double>") public static class DoubleReLULayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleReLULayer(Pointer p) { super(p); }

  /**
   * @param param provides ReLUParameter relu_param,
   *     with ReLULayer options:
   *   - negative_slope (\b optional, default 0).
   *     the value \f$ \nu \f$ by which negative values are multiplied.
   */
  public DoubleReLULayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_RELU_LAYER_HPP_


// Parsed from caffe/layers/cudnn_relu_layer.hpp

// #ifndef CAFFE_CUDNN_RELU_LAYER_HPP_
// #define CAFFE_CUDNN_RELU_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"
// #include "caffe/layers/relu_layer.hpp"

// #ifdef USE_CUDNN
/**
 * \brief CuDNN acceleration of ReLULayer.
 */
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNReLULayer<float>") @NoOffset public static class FloatCuDNNReLULayer extends FloatReLULayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCuDNNReLULayer(Pointer p) { super(p); }

  public FloatCuDNNReLULayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNReLULayer<double>") @NoOffset public static class DoubleCuDNNReLULayer extends DoubleReLULayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCuDNNReLULayer(Pointer p) { super(p); }

  public DoubleCuDNNReLULayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
// #endif

  // namespace caffe

// #endif  // CAFFE_CUDNN_RELU_LAYER_HPP_


// Parsed from caffe/layers/sigmoid_layer.hpp

// #ifndef CAFFE_SIGMOID_LAYER_HPP_
// #define CAFFE_SIGMOID_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Sigmoid function non-linearity \f$
 *         y = (1 + \exp(-x))^{-1}
 *     \f$, a classic choice in neural networks.
 *
 * Note that the gradient vanishes as the values move away from 0.
 * The ReLULayer is often a better choice for this reason.
 */
@Name("caffe::SigmoidLayer<float>") public static class FloatSigmoidLayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSigmoidLayer(Pointer p) { super(p); }

  public FloatSigmoidLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::SigmoidLayer<double>") public static class DoubleSigmoidLayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSigmoidLayer(Pointer p) { super(p); }

  public DoubleSigmoidLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_SIGMOID_LAYER_HPP_


// Parsed from caffe/layers/cudnn_sigmoid_layer.hpp

// #ifndef CAFFE_CUDNN_SIGMOID_LAYER_HPP_
// #define CAFFE_CUDNN_SIGMOID_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"
// #include "caffe/layers/sigmoid_layer.hpp"

// #ifdef USE_CUDNN
/**
 * \brief CuDNN acceleration of SigmoidLayer.
 */
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNSigmoidLayer<float>") @NoOffset public static class FloatCuDNNSigmoidLayer extends FloatSigmoidLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCuDNNSigmoidLayer(Pointer p) { super(p); }

  public FloatCuDNNSigmoidLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNSigmoidLayer<double>") @NoOffset public static class DoubleCuDNNSigmoidLayer extends DoubleSigmoidLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCuDNNSigmoidLayer(Pointer p) { super(p); }

  public DoubleCuDNNSigmoidLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
// #endif

  // namespace caffe

// #endif  // CAFFE_CUDNN_SIGMOID_LAYER_HPP_


// Parsed from caffe/layers/tanh_layer.hpp

// #ifndef CAFFE_TANH_LAYER_HPP_
// #define CAFFE_TANH_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief TanH hyperbolic tangent non-linearity \f$
 *         y = \frac{\exp(2x) - 1}{\exp(2x) + 1}
 *     \f$, popular in auto-encoders.
 *
 * Note that the gradient vanishes as the values move away from 0.
 * The ReLULayer is often a better choice for this reason.
 */
@Name("caffe::TanHLayer<float>") public static class FloatTanHLayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatTanHLayer(Pointer p) { super(p); }

  public FloatTanHLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::TanHLayer<double>") public static class DoubleTanHLayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleTanHLayer(Pointer p) { super(p); }

  public DoubleTanHLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_TANH_LAYER_HPP_


// Parsed from caffe/layers/cudnn_tanh_layer.hpp

// #ifndef CAFFE_CUDNN_TANH_LAYER_HPP_
// #define CAFFE_CUDNN_TANH_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"
// #include "caffe/layers/tanh_layer.hpp"

// #ifdef USE_CUDNN
/**
 * \brief CuDNN acceleration of TanHLayer.
 */
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNTanHLayer<float>") @NoOffset public static class FloatCuDNNTanHLayer extends FloatTanHLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCuDNNTanHLayer(Pointer p) { super(p); }

  public FloatCuDNNTanHLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNTanHLayer<double>") @NoOffset public static class DoubleCuDNNTanHLayer extends DoubleTanHLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCuDNNTanHLayer(Pointer p) { super(p); }

  public DoubleCuDNNTanHLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
// #endif

  // namespace caffe

// #endif  // CAFFE_CUDNN_TANH_LAYER_HPP_


// Parsed from caffe/layers/threshold_layer.hpp

// #ifndef CAFFE_THRESHOLD_LAYER_HPP_
// #define CAFFE_THRESHOLD_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Tests whether the input exceeds a threshold: outputs 1 for inputs
 *        above threshold; 0 otherwise.
 */
@Name("caffe::ThresholdLayer<float>") @NoOffset public static class FloatThresholdLayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatThresholdLayer(Pointer p) { super(p); }

  /**
   * @param param provides ThresholdParameter threshold_param,
   *     with ThresholdLayer options:
   *   - threshold (\b optional, default 0).
   *     the threshold value \f$ t \f$ to which the input values are compared.
   */
  public FloatThresholdLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::ThresholdLayer<double>") @NoOffset public static class DoubleThresholdLayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleThresholdLayer(Pointer p) { super(p); }

  /**
   * @param param provides ThresholdParameter threshold_param,
   *     with ThresholdLayer options:
   *   - threshold (\b optional, default 0).
   *     the threshold value \f$ t \f$ to which the input values are compared.
   */
  public DoubleThresholdLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_THRESHOLD_LAYER_HPP_


// Parsed from caffe/layers/prelu_layer.hpp

// #ifndef CAFFE_PRELU_LAYER_HPP_
// #define CAFFE_PRELU_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/neuron_layer.hpp"

/**
 * \brief Parameterized Rectified Linear Unit non-linearity \f$
 *        y_i = \max(0, x_i) + a_i \min(0, x_i)
 *        \f$. The differences from ReLULayer are 1) negative slopes are
 *        learnable though backprop and 2) negative slopes can vary across
 *        channels. The number of axes of input blob should be greater than or
 *        equal to 2. The 1st axis (0-based) is seen as channels.
 */
@Name("caffe::PReLULayer<float>") @NoOffset public static class FloatPReLULayer extends FloatNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatPReLULayer(Pointer p) { super(p); }

  /**
   * @param param provides PReLUParameter prelu_param,
   *     with PReLULayer options:
   *   - filler (\b optional, FillerParameter,
   *     default {'type': constant 'value':0.25}).
   *   - channel_shared (\b optional, default false).
   *     negative slopes are shared across channels.
   */
  public FloatPReLULayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::PReLULayer<double>") @NoOffset public static class DoublePReLULayer extends DoubleNeuronLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoublePReLULayer(Pointer p) { super(p); }

  /**
   * @param param provides PReLUParameter prelu_param,
   *     with PReLULayer options:
   *   - filler (\b optional, FillerParameter,
   *     default {'type': constant 'value':0.25}).
   *   - channel_shared (\b optional, default false).
   *     negative slopes are shared across channels.
   */
  public DoublePReLULayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_PRELU_LAYER_HPP_


// Parsed from caffe/layers/argmax_layer.hpp

// #ifndef CAFFE_ARGMAX_LAYER_HPP_
// #define CAFFE_ARGMAX_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Compute the index of the \f$ K \f$ max values for each datum across
 *        all dimensions \f$ (C \times H \times W) \f$.
 *
 * Intended for use after a classification layer to produce a prediction.
 * If parameter out_max_val is set to true, output is a vector of pairs
 * (max_ind, max_val) for each image. The axis parameter specifies an axis
 * along which to maximise.
 *
 * NOTE: does not implement Backwards operation.
 */
@Name("caffe::ArgMaxLayer<float>") @NoOffset public static class FloatArgMaxLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatArgMaxLayer(Pointer p) { super(p); }

  /**
   * @param param provides ArgMaxParameter argmax_param,
   *     with ArgMaxLayer options:
   *   - top_k (\b optional uint, default 1).
   *     the number \f$ K \f$ of maximal items to output.
   *   - out_max_val (\b optional bool, default false).
   *     if set, output a vector of pairs (max_ind, max_val) unless axis is set then
   *     output max_val along the specified axis.
   *   - axis (\b optional int).
   *     if set, maximise along the specified axis else maximise the flattened
   *     trailing dimensions for each index of the first / num dimension.
   */
  public FloatArgMaxLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::ArgMaxLayer<double>") @NoOffset public static class DoubleArgMaxLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleArgMaxLayer(Pointer p) { super(p); }

  /**
   * @param param provides ArgMaxParameter argmax_param,
   *     with ArgMaxLayer options:
   *   - top_k (\b optional uint, default 1).
   *     the number \f$ K \f$ of maximal items to output.
   *   - out_max_val (\b optional bool, default false).
   *     if set, output a vector of pairs (max_ind, max_val) unless axis is set then
   *     output max_val along the specified axis.
   *   - axis (\b optional int).
   *     if set, maximise along the specified axis else maximise the flattened
   *     trailing dimensions for each index of the first / num dimension.
   */
  public DoubleArgMaxLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_ARGMAX_LAYER_HPP_


// Parsed from caffe/layers/batch_norm_layer.hpp

// #ifndef CAFFE_BATCHNORM_LAYER_HPP_
// #define CAFFE_BATCHNORM_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Normalizes the input to have 0-mean and/or unit (1) variance across
 *        the batch.
 *
 * This layer computes Batch Normalization as described in [1]. For each channel
 * in the data (i.e. axis 1), it subtracts the mean and divides by the variance,
 * where both statistics are computed across both spatial dimensions and across
 * the different examples in the batch.
 *
 * By default, during training time, the network is computing global
 * mean/variance statistics via a running average, which is then used at test
 * time to allow deterministic outputs for each input. You can manually toggle
 * whether the network is accumulating or using the statistics via the
 * use_global_stats option. For reference, these statistics are kept in the
 * layer's three blobs: (0) mean, (1) variance, and (2) moving average factor.
 *
 * Note that the original paper also included a per-channel learned bias and
 * scaling factor. To implement this in Caffe, define a {@code ScaleLayer} configured
 * with {@code bias_term: true} after each {@code BatchNormLayer} to handle both the bias
 * and scaling factor.
 *
 * [1] S. Ioffe and C. Szegedy, "Batch Normalization: Accelerating Deep Network
 *     Training by Reducing Internal Covariate Shift." arXiv preprint
 *     arXiv:1502.03167 (2015).
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::BatchNormLayer<float>") @NoOffset public static class FloatBatchNormLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBatchNormLayer(Pointer p) { super(p); }

  public FloatBatchNormLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
       @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::BatchNormLayer<double>") @NoOffset public static class DoubleBatchNormLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBatchNormLayer(Pointer p) { super(p); }

  public DoubleBatchNormLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
       @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_BATCHNORM_LAYER_HPP_


// Parsed from caffe/layers/batch_reindex_layer.hpp

// #ifndef CAFFE_BATCHREINDEX_LAYER_HPP_
// #define CAFFE_BATCHREINDEX_LAYER_HPP_

// #include <utility>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Index into the input blob along its first axis.
 *
 * This layer can be used to select, reorder, and even replicate examples in a
 * batch.  The second blob is cast to int and treated as an index into the
 * first axis of the first blob.
 */
@Name("caffe::BatchReindexLayer<float>") public static class FloatBatchReindexLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBatchReindexLayer(Pointer p) { super(p); }

  public FloatBatchReindexLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::BatchReindexLayer<double>") public static class DoubleBatchReindexLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBatchReindexLayer(Pointer p) { super(p); }

  public DoubleBatchReindexLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_BATCHREINDEX_LAYER_HPP_


// Parsed from caffe/layers/concat_layer.hpp

// #ifndef CAFFE_CONCAT_LAYER_HPP_
// #define CAFFE_CONCAT_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Takes at least two Blob%s and concatenates them along either the num
 *        or channel dimension, outputting the result.
 */
@Name("caffe::ConcatLayer<float>") @NoOffset public static class FloatConcatLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatConcatLayer(Pointer p) { super(p); }

  public FloatConcatLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::ConcatLayer<double>") @NoOffset public static class DoubleConcatLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleConcatLayer(Pointer p) { super(p); }

  public DoubleConcatLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_CONCAT_LAYER_HPP_


// Parsed from caffe/layers/eltwise_layer.hpp

// #ifndef CAFFE_ELTWISE_LAYER_HPP_
// #define CAFFE_ELTWISE_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Compute elementwise operations, such as product and sum,
 *        along multiple input Blobs.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::EltwiseLayer<float>") @NoOffset public static class FloatEltwiseLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatEltwiseLayer(Pointer p) { super(p); }

  public FloatEltwiseLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::EltwiseLayer<double>") @NoOffset public static class DoubleEltwiseLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleEltwiseLayer(Pointer p) { super(p); }

  public DoubleEltwiseLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_ELTWISE_LAYER_HPP_


// Parsed from caffe/layers/embed_layer.hpp

// #ifndef CAFFE_EMBED_LAYER_HPP_
// #define CAFFE_EMBED_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief A layer for learning "embeddings" of one-hot vector input.
 *        Equivalent to an InnerProductLayer with one-hot vectors as input, but
 *        for efficiency the input is the "hot" index of each column itself.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::EmbedLayer<float>") @NoOffset public static class FloatEmbedLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatEmbedLayer(Pointer p) { super(p); }

  public FloatEmbedLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::EmbedLayer<double>") @NoOffset public static class DoubleEmbedLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleEmbedLayer(Pointer p) { super(p); }

  public DoubleEmbedLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_EMBED_LAYER_HPP_


// Parsed from caffe/layers/filter_layer.hpp

// #ifndef CAFFE_FILTER_LAYER_HPP_
// #define CAFFE_FILTER_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Takes two+ Blobs, interprets last Blob as a selector and
 *  filter remaining Blobs accordingly with selector data (0 means that
 * the corresponding item has to be filtered, non-zero means that corresponding
 * item needs to stay).
 */
@Name("caffe::FilterLayer<float>") @NoOffset public static class FloatFilterLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatFilterLayer(Pointer p) { super(p); }

  public FloatFilterLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
      @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
      @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::FilterLayer<double>") @NoOffset public static class DoubleFilterLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleFilterLayer(Pointer p) { super(p); }

  public DoubleFilterLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
      @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
      @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_FILTER_LAYER_HPP_


// Parsed from caffe/layers/flatten_layer.hpp

// #ifndef CAFFE_FLATTEN_LAYER_HPP_
// #define CAFFE_FLATTEN_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Reshapes the input Blob into flat vectors.
 *
 * Note: because this layer does not change the input values -- merely the
 * dimensions -- it can simply copy the input. The copy happens "virtually"
 * (thus taking effectively 0 real time) by setting, in Forward, the data
 * pointer of the top Blob to that of the bottom Blob (see Blob::ShareData),
 * and in Backward, the diff pointer of the bottom Blob to that of the top Blob
 * (see Blob::ShareDiff).
 */
@Name("caffe::FlattenLayer<float>") public static class FloatFlattenLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatFlattenLayer(Pointer p) { super(p); }

  public FloatFlattenLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::FlattenLayer<double>") public static class DoubleFlattenLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleFlattenLayer(Pointer p) { super(p); }

  public DoubleFlattenLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_FLATTEN_LAYER_HPP_


// Parsed from caffe/layers/inner_product_layer.hpp

// #ifndef CAFFE_INNER_PRODUCT_LAYER_HPP_
// #define CAFFE_INNER_PRODUCT_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Also known as a "fully-connected" layer, computes an inner product
 *        with a set of learned weights, and (optionally) adds biases.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::InnerProductLayer<float>") @NoOffset public static class FloatInnerProductLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatInnerProductLayer(Pointer p) { super(p); }

  public FloatInnerProductLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::InnerProductLayer<double>") @NoOffset public static class DoubleInnerProductLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleInnerProductLayer(Pointer p) { super(p); }

  public DoubleInnerProductLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_INNER_PRODUCT_LAYER_HPP_


// Parsed from caffe/layers/mvn_layer.hpp

// #ifndef CAFFE_MVN_LAYER_HPP_
// #define CAFFE_MVN_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Normalizes the input to have 0-mean and/or unit (1) variance.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::MVNLayer<float>") @NoOffset public static class FloatMVNLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatMVNLayer(Pointer p) { super(p); }

  public FloatMVNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
       @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::MVNLayer<double>") @NoOffset public static class DoubleMVNLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleMVNLayer(Pointer p) { super(p); }

  public DoubleMVNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
       @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_MVN_LAYER_HPP_


// Parsed from caffe/layers/reshape_layer.hpp

// #ifndef CAFFE_XXX_LAYER_HPP_
// #define CAFFE_XXX_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/*
 * @brief Reshapes the input Blob into an arbitrary-sized output Blob.
 *
 * Note: similarly to FlattenLayer, this layer does not change the input values
 * (see FlattenLayer, Blob::ShareData and Blob::ShareDiff).
 */
@Name("caffe::ReshapeLayer<float>") @NoOffset public static class FloatReshapeLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatReshapeLayer(Pointer p) { super(p); }

  public FloatReshapeLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::ReshapeLayer<double>") @NoOffset public static class DoubleReshapeLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleReshapeLayer(Pointer p) { super(p); }

  public DoubleReshapeLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_XXX_LAYER_HPP_


// Parsed from caffe/layers/reduction_layer.hpp

// #ifndef CAFFE_REDUCTION_LAYER_HPP_
// #define CAFFE_REDUCTION_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Compute "reductions" -- operations that return a scalar output Blob
 *        for an input Blob of arbitrary size, such as the sum, absolute sum,
 *        and sum of squares.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::ReductionLayer<float>") @NoOffset public static class FloatReductionLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatReductionLayer(Pointer p) { super(p); }

  public FloatReductionLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::ReductionLayer<double>") @NoOffset public static class DoubleReductionLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleReductionLayer(Pointer p) { super(p); }

  public DoubleReductionLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_REDUCTION_LAYER_HPP_


// Parsed from caffe/layers/silence_layer.hpp

// #ifndef CAFFE_SILENCE_LAYER_HPP_
// #define CAFFE_SILENCE_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Ignores bottom blobs while producing no top blobs. (This is useful
 *        to suppress outputs during testing.)
 */
@Name("caffe::SilenceLayer<float>") public static class FloatSilenceLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSilenceLayer(Pointer p) { super(p); }

  public FloatSilenceLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::SilenceLayer<double>") public static class DoubleSilenceLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSilenceLayer(Pointer p) { super(p); }

  public DoubleSilenceLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_SILENCE_LAYER_HPP_


// Parsed from caffe/layers/softmax_layer.hpp

// #ifndef CAFFE_SOFTMAX_LAYER_HPP_
// #define CAFFE_SOFTMAX_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Computes the softmax function.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::SoftmaxLayer<float>") @NoOffset public static class FloatSoftmaxLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSoftmaxLayer(Pointer p) { super(p); }

  public FloatSoftmaxLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
       @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::SoftmaxLayer<double>") @NoOffset public static class DoubleSoftmaxLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSoftmaxLayer(Pointer p) { super(p); }

  public DoubleSoftmaxLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
       @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_SOFTMAX_LAYER_HPP_


// Parsed from caffe/layers/cudnn_softmax_layer.hpp

// #ifndef CAFFE_CUDNN_SOFTMAX_LAYER_HPP_
// #define CAFFE_CUDNN_SOFTMAX_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/softmax_layer.hpp"

// #ifdef USE_CUDNN
/**
 * \brief cuDNN implementation of SoftmaxLayer.
 *        Fallback to SoftmaxLayer for CPU mode.
 */
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNSoftmaxLayer<float>") @NoOffset public static class FloatCuDNNSoftmaxLayer extends FloatSoftmaxLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCuDNNSoftmaxLayer(Pointer p) { super(p); }

  public FloatCuDNNSoftmaxLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
       @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNSoftmaxLayer<double>") @NoOffset public static class DoubleCuDNNSoftmaxLayer extends DoubleSoftmaxLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCuDNNSoftmaxLayer(Pointer p) { super(p); }

  public DoubleCuDNNSoftmaxLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
       @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
// #endif

  // namespace caffe

// #endif  // CAFFE_CUDNN_SOFTMAX_LAYER_HPP_


// Parsed from caffe/layers/split_layer.hpp

// #ifndef CAFFE_SPLIT_LAYER_HPP_
// #define CAFFE_SPLIT_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Creates a "split" path in the network by copying the bottom Blob
 *        into multiple top Blob%s to be used by multiple consuming layers.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::SplitLayer<float>") @NoOffset public static class FloatSplitLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSplitLayer(Pointer p) { super(p); }

  public FloatSplitLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::SplitLayer<double>") @NoOffset public static class DoubleSplitLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSplitLayer(Pointer p) { super(p); }

  public DoubleSplitLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_SPLIT_LAYER_HPP_


// Parsed from caffe/layers/slice_layer.hpp

// #ifndef CAFFE_SLICE_LAYER_HPP_
// #define CAFFE_SLICE_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Takes a Blob and slices it along either the num or channel dimension,
 *        outputting multiple sliced Blob results.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::SliceLayer<float>") @NoOffset public static class FloatSliceLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSliceLayer(Pointer p) { super(p); }

  public FloatSliceLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::SliceLayer<double>") @NoOffset public static class DoubleSliceLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSliceLayer(Pointer p) { super(p); }

  public DoubleSliceLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_SLICE_LAYER_HPP_


// Parsed from caffe/layers/tile_layer.hpp

// #ifndef CAFFE_TILE_LAYER_HPP_
// #define CAFFE_TILE_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Copy a Blob along specified dimensions.
 */
@Name("caffe::TileLayer<float>") @NoOffset public static class FloatTileLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatTileLayer(Pointer p) { super(p); }

  public FloatTileLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::TileLayer<double>") @NoOffset public static class DoubleTileLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleTileLayer(Pointer p) { super(p); }

  public DoubleTileLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_TILE_LAYER_HPP_


// Parsed from caffe/net.hpp

// #ifndef CAFFE_NET_HPP_
// #define CAFFE_NET_HPP_

// #include <map>
// #include <set>
// #include <string>
// #include <utility>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/common.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Connects Layer%s together into a directed acyclic graph (DAG)
 *        specified by a NetParameter.
 *
 * TODO(dox): more thorough description.
 */
@Name("caffe::Net<float>") @NoOffset public static class FloatNet extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatNet(Pointer p) { super(p); }

  public FloatNet(@Const @ByRef NetParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef NetParameter param);
  public FloatNet(@StdString BytePointer param_file, @Cast("caffe::Phase") int phase,
        int level/*=0*/, @Const StringVector stages/*=NULL*/) { super((Pointer)null); allocate(param_file, phase, level, stages); }
  private native void allocate(@StdString BytePointer param_file, @Cast("caffe::Phase") int phase,
        int level/*=0*/, @Const StringVector stages/*=NULL*/);
  public FloatNet(@StdString BytePointer param_file, @Cast("caffe::Phase") int phase) { super((Pointer)null); allocate(param_file, phase); }
  private native void allocate(@StdString BytePointer param_file, @Cast("caffe::Phase") int phase);
  public FloatNet(@StdString String param_file, @Cast("caffe::Phase") int phase,
        int level/*=0*/, @Const StringVector stages/*=NULL*/) { super((Pointer)null); allocate(param_file, phase, level, stages); }
  private native void allocate(@StdString String param_file, @Cast("caffe::Phase") int phase,
        int level/*=0*/, @Const StringVector stages/*=NULL*/);
  public FloatNet(@StdString String param_file, @Cast("caffe::Phase") int phase) { super((Pointer)null); allocate(param_file, phase); }
  private native void allocate(@StdString String param_file, @Cast("caffe::Phase") int phase);

  /** \brief Initialize a network with a NetParameter. */
  public native void Init(@Const @ByRef NetParameter param);

  /**
   * \brief Run Forward and return the result.
   *
   */
  public native @Const @ByRef FloatBlobVector Forward(FloatPointer loss/*=NULL*/);
  public native @Const @ByRef FloatBlobVector Forward();
  public native @Const @ByRef FloatBlobVector Forward(FloatBuffer loss/*=NULL*/);
  public native @Const @ByRef FloatBlobVector Forward(float[] loss/*=NULL*/);
  /** \brief DEPRECATED; use Forward() instead. */
  public native @Const @ByRef FloatBlobVector ForwardPrefilled(FloatPointer loss/*=NULL*/);
  public native @Const @ByRef FloatBlobVector ForwardPrefilled();
  public native @Const @ByRef FloatBlobVector ForwardPrefilled(FloatBuffer loss/*=NULL*/);
  public native @Const @ByRef FloatBlobVector ForwardPrefilled(float[] loss/*=NULL*/);

  /**
   * The From and To variants of Forward and Backward operate on the
   * (topological) ordering by which the net is specified. For general DAG
   * networks, note that (1) computing from one layer to another might entail
   * extra computation on unrelated branches, and (2) computation starting in
   * the middle may be incorrect if all of the layers of a fan-in are not
   * included.
   */
  public native float ForwardFromTo(int start, int end);
  public native float ForwardFrom(int start);
  public native float ForwardTo(int end);
  /** \brief DEPRECATED; set input blobs then use Forward() instead. */
  public native @Const @ByRef FloatBlobVector Forward(@Const @ByRef FloatBlobVector bottom,
        FloatPointer loss/*=NULL*/);
  public native @Const @ByRef FloatBlobVector Forward(@Const @ByRef FloatBlobVector bottom);
  public native @Const @ByRef FloatBlobVector Forward(@Const @ByRef FloatBlobVector bottom,
        FloatBuffer loss/*=NULL*/);
  public native @Const @ByRef FloatBlobVector Forward(@Const @ByRef FloatBlobVector bottom,
        float[] loss/*=NULL*/);

  /**
   * \brief Zeroes out the diffs of all net parameters.
   *        Should be run before Backward.
   */
  public native void ClearParamDiffs();

  /**
   * The network backward should take no input and output, since it solely
   * computes the gradient w.r.t the parameters, and the data has already been
   * provided during the forward pass.
   */
  public native void Backward();
  public native void BackwardFromTo(int start, int end);
  public native void BackwardFrom(int start);
  public native void BackwardTo(int end);

  /**
   * \brief Reshape all layers from bottom to top.
   *
   * This is useful to propagate changes to layer sizes without running
   * a forward pass, e.g. to compute output feature size.
   */
  public native void Reshape();

  public native float ForwardBackward();

  /** \brief Updates the network weights based on the diff values computed. */
  public native void Update();
  /**
   * \brief Shares weight data of owner blobs with shared blobs.
   *
   * Note: this is called by Net::Init, and thus should normally not be
   * called manually.
   */
  public native void ShareWeights();

  /**
   * \brief For an already initialized net, implicitly copies (i.e., using no
   *        additional memory) the pre-trained layers from another Net.
   */
  public native void ShareTrainedLayersWith(@Const FloatNet other);
  // For an already initialized net, CopyTrainedLayersFrom() copies the already
  // trained layers from another net parameter instance.
  /**
   * \brief For an already initialized net, copies the pre-trained layers from
   *        another Net.
   */
  public native void CopyTrainedLayersFrom(@Const @ByRef NetParameter param);
  public native void CopyTrainedLayersFrom(@StdString BytePointer trained_filename);
  public native void CopyTrainedLayersFrom(@StdString String trained_filename);
  public native void CopyTrainedLayersFromBinaryProto(@StdString BytePointer trained_filename);
  public native void CopyTrainedLayersFromBinaryProto(@StdString String trained_filename);
  public native void CopyTrainedLayersFromHDF5(@StdString BytePointer trained_filename);
  public native void CopyTrainedLayersFromHDF5(@StdString String trained_filename);
  /** \brief Writes the net to a proto. */
  public native void ToProto(NetParameter param, @Cast("bool") boolean write_diff/*=false*/);
  public native void ToProto(NetParameter param);
  /** \brief Writes the net to an HDF5 file. */
  public native void ToHDF5(@StdString BytePointer filename, @Cast("bool") boolean write_diff/*=false*/);
  public native void ToHDF5(@StdString BytePointer filename);
  public native void ToHDF5(@StdString String filename, @Cast("bool") boolean write_diff/*=false*/);
  public native void ToHDF5(@StdString String filename);

  /** \brief returns the network name. */
  public native @StdString BytePointer name();
  /** \brief returns the layer names */
  public native @Const @ByRef StringVector layer_names();
  /** \brief returns the blob names */
  public native @Const @ByRef StringVector blob_names();
  /** \brief returns the blobs */
  public native @Const @ByRef FloatBlobSharedVector blobs();
  /** \brief returns the layers */
  public native @Const @ByRef FloatLayerSharedVector layers();
  /** \brief returns the phase: TRAIN or TEST */
  public native @Cast("caffe::Phase") int phase();
  /**
   * \brief returns the bottom vecs for each layer -- usually you won't
   *        need this unless you do per-layer checks such as gradients.
   */
  public native @Const @ByRef FloatBlobVectorVector bottom_vecs();
  /**
   * \brief returns the top vecs for each layer -- usually you won't
   *        need this unless you do per-layer checks such as gradients.
   */
  public native @Const @ByRef FloatBlobVectorVector top_vecs();
  /** \brief returns the ids of the top blobs of layer i */
  public native @StdVector IntPointer top_ids(int i);
  /** \brief returns the ids of the bottom blobs of layer i */
  public native @StdVector IntPointer bottom_ids(int i);
  public native @Const @ByRef BoolVectorVector bottom_need_backward();
  public native @StdVector FloatPointer blob_loss_weights();
  public native @Const @ByRef BoolVector layer_need_backward();
  /** \brief returns the parameters */
  public native @Const @ByRef FloatBlobSharedVector params();
  public native @Const @ByRef FloatBlobVector learnable_params();
  /** \brief returns the learnable parameter learning rate multipliers */
  public native @StdVector FloatPointer params_lr();
  public native @Const @ByRef BoolVector has_params_lr();
  /** \brief returns the learnable parameter decay multipliers */
  public native @StdVector FloatPointer params_weight_decay();
  public native @Const @ByRef BoolVector has_params_decay();
  public native @Const @ByRef StringIntMap param_names_index();
  public native @StdVector IntPointer param_owners();
  public native @Const @ByRef StringVector param_display_names();
  /** \brief Input and output blob numbers */
  public native int num_inputs();
  public native int num_outputs();
  public native @Const @ByRef FloatBlobVector input_blobs();
  public native @Const @ByRef FloatBlobVector output_blobs();
  public native @StdVector IntPointer input_blob_indices();
  public native @StdVector IntPointer output_blob_indices();
  public native @Cast("bool") boolean has_blob(@StdString BytePointer blob_name);
  public native @Cast("bool") boolean has_blob(@StdString String blob_name);
  public native @Const @SharedPtr @ByVal FloatBlob blob_by_name(@StdString BytePointer blob_name);
  public native @Const @SharedPtr @ByVal FloatBlob blob_by_name(@StdString String blob_name);
  public native @Cast("bool") boolean has_layer(@StdString BytePointer layer_name);
  public native @Cast("bool") boolean has_layer(@StdString String layer_name);
  public FloatLayer layer_by_name(BytePointer layer_name) { return layer_by_name(FloatLayer.class, layer_name); }
  public FloatLayer layer_by_name(String layer_name) { return layer_by_name(FloatLayer.class, layer_name); };
  public native @Const @Cast({"", "boost::shared_ptr<caffe::Layer<float> >"}) @SharedPtr @ByVal <L extends FloatLayer> L layer_by_name(Class<L> cls, @StdString BytePointer layer_name);
  public native @Const @Cast({"", "boost::shared_ptr<caffe::Layer<float> >"}) @SharedPtr @ByVal <L extends FloatLayer> L layer_by_name(Class<L> cls, @StdString String layer_name);

  public native void set_debug_info(@Cast("const bool") boolean value);

  // Helpers for Init.
  /**
   * \brief Remove layers that the user specified should be excluded given the current
   *        phase, level, and stage.
   */
  public static native void FilterNet(@Const @ByRef NetParameter param,
        NetParameter param_filtered);
  /** \brief return whether NetState state meets NetStateRule rule */
  public static native @Cast("bool") boolean StateMeetsRule(@Const @ByRef NetState state, @Const @ByRef NetStateRule rule,
        @StdString BytePointer layer_name);
  public static native @Cast("bool") boolean StateMeetsRule(@Const @ByRef NetState state, @Const @ByRef NetStateRule rule,
        @StdString String layer_name);

  // Invoked at specific points during an iteration
  public static class Callback extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Callback(Pointer p) { super(p); }
  
  }
  public native @Cast("caffe::Net<float>::Callback**") @StdVector PointerPointer before_forward();
  public native void add_before_forward(Callback value);
  public native @Cast("caffe::Net<float>::Callback**") @StdVector PointerPointer after_forward();
  public native void add_after_forward(Callback value);
  public native @Cast("caffe::Net<float>::Callback**") @StdVector PointerPointer before_backward();
  public native void add_before_backward(Callback value);
  public native @Cast("caffe::Net<float>::Callback**") @StdVector PointerPointer after_backward();
  public native void add_after_backward(Callback value);
}
@Name("caffe::Net<double>") @NoOffset public static class DoubleNet extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleNet(Pointer p) { super(p); }

  public DoubleNet(@Const @ByRef NetParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef NetParameter param);
  public DoubleNet(@StdString BytePointer param_file, @Cast("caffe::Phase") int phase,
        int level/*=0*/, @Const StringVector stages/*=NULL*/) { super((Pointer)null); allocate(param_file, phase, level, stages); }
  private native void allocate(@StdString BytePointer param_file, @Cast("caffe::Phase") int phase,
        int level/*=0*/, @Const StringVector stages/*=NULL*/);
  public DoubleNet(@StdString BytePointer param_file, @Cast("caffe::Phase") int phase) { super((Pointer)null); allocate(param_file, phase); }
  private native void allocate(@StdString BytePointer param_file, @Cast("caffe::Phase") int phase);
  public DoubleNet(@StdString String param_file, @Cast("caffe::Phase") int phase,
        int level/*=0*/, @Const StringVector stages/*=NULL*/) { super((Pointer)null); allocate(param_file, phase, level, stages); }
  private native void allocate(@StdString String param_file, @Cast("caffe::Phase") int phase,
        int level/*=0*/, @Const StringVector stages/*=NULL*/);
  public DoubleNet(@StdString String param_file, @Cast("caffe::Phase") int phase) { super((Pointer)null); allocate(param_file, phase); }
  private native void allocate(@StdString String param_file, @Cast("caffe::Phase") int phase);

  /** \brief Initialize a network with a NetParameter. */
  public native void Init(@Const @ByRef NetParameter param);

  /**
   * \brief Run Forward and return the result.
   *
   */
  public native @Const @ByRef DoubleBlobVector Forward(DoublePointer loss/*=NULL*/);
  public native @Const @ByRef DoubleBlobVector Forward();
  public native @Const @ByRef DoubleBlobVector Forward(DoubleBuffer loss/*=NULL*/);
  public native @Const @ByRef DoubleBlobVector Forward(double[] loss/*=NULL*/);
  /** \brief DEPRECATED; use Forward() instead. */
  public native @Const @ByRef DoubleBlobVector ForwardPrefilled(DoublePointer loss/*=NULL*/);
  public native @Const @ByRef DoubleBlobVector ForwardPrefilled();
  public native @Const @ByRef DoubleBlobVector ForwardPrefilled(DoubleBuffer loss/*=NULL*/);
  public native @Const @ByRef DoubleBlobVector ForwardPrefilled(double[] loss/*=NULL*/);

  /**
   * The From and To variants of Forward and Backward operate on the
   * (topological) ordering by which the net is specified. For general DAG
   * networks, note that (1) computing from one layer to another might entail
   * extra computation on unrelated branches, and (2) computation starting in
   * the middle may be incorrect if all of the layers of a fan-in are not
   * included.
   */
  public native double ForwardFromTo(int start, int end);
  public native double ForwardFrom(int start);
  public native double ForwardTo(int end);
  /** \brief DEPRECATED; set input blobs then use Forward() instead. */
  public native @Const @ByRef DoubleBlobVector Forward(@Const @ByRef DoubleBlobVector bottom,
        DoublePointer loss/*=NULL*/);
  public native @Const @ByRef DoubleBlobVector Forward(@Const @ByRef DoubleBlobVector bottom);
  public native @Const @ByRef DoubleBlobVector Forward(@Const @ByRef DoubleBlobVector bottom,
        DoubleBuffer loss/*=NULL*/);
  public native @Const @ByRef DoubleBlobVector Forward(@Const @ByRef DoubleBlobVector bottom,
        double[] loss/*=NULL*/);

  /**
   * \brief Zeroes out the diffs of all net parameters.
   *        Should be run before Backward.
   */
  public native void ClearParamDiffs();

  /**
   * The network backward should take no input and output, since it solely
   * computes the gradient w.r.t the parameters, and the data has already been
   * provided during the forward pass.
   */
  public native void Backward();
  public native void BackwardFromTo(int start, int end);
  public native void BackwardFrom(int start);
  public native void BackwardTo(int end);

  /**
   * \brief Reshape all layers from bottom to top.
   *
   * This is useful to propagate changes to layer sizes without running
   * a forward pass, e.g. to compute output feature size.
   */
  public native void Reshape();

  public native double ForwardBackward();

  /** \brief Updates the network weights based on the diff values computed. */
  public native void Update();
  /**
   * \brief Shares weight data of owner blobs with shared blobs.
   *
   * Note: this is called by Net::Init, and thus should normally not be
   * called manually.
   */
  public native void ShareWeights();

  /**
   * \brief For an already initialized net, implicitly copies (i.e., using no
   *        additional memory) the pre-trained layers from another Net.
   */
  public native void ShareTrainedLayersWith(@Const DoubleNet other);
  // For an already initialized net, CopyTrainedLayersFrom() copies the already
  // trained layers from another net parameter instance.
  /**
   * \brief For an already initialized net, copies the pre-trained layers from
   *        another Net.
   */
  public native void CopyTrainedLayersFrom(@Const @ByRef NetParameter param);
  public native void CopyTrainedLayersFrom(@StdString BytePointer trained_filename);
  public native void CopyTrainedLayersFrom(@StdString String trained_filename);
  public native void CopyTrainedLayersFromBinaryProto(@StdString BytePointer trained_filename);
  public native void CopyTrainedLayersFromBinaryProto(@StdString String trained_filename);
  public native void CopyTrainedLayersFromHDF5(@StdString BytePointer trained_filename);
  public native void CopyTrainedLayersFromHDF5(@StdString String trained_filename);
  /** \brief Writes the net to a proto. */
  public native void ToProto(NetParameter param, @Cast("bool") boolean write_diff/*=false*/);
  public native void ToProto(NetParameter param);
  /** \brief Writes the net to an HDF5 file. */
  public native void ToHDF5(@StdString BytePointer filename, @Cast("bool") boolean write_diff/*=false*/);
  public native void ToHDF5(@StdString BytePointer filename);
  public native void ToHDF5(@StdString String filename, @Cast("bool") boolean write_diff/*=false*/);
  public native void ToHDF5(@StdString String filename);

  /** \brief returns the network name. */
  public native @StdString BytePointer name();
  /** \brief returns the layer names */
  public native @Const @ByRef StringVector layer_names();
  /** \brief returns the blob names */
  public native @Const @ByRef StringVector blob_names();
  /** \brief returns the blobs */
  public native @Const @ByRef DoubleBlobSharedVector blobs();
  /** \brief returns the layers */
  public native @Const @ByRef DoubleLayerSharedVector layers();
  /** \brief returns the phase: TRAIN or TEST */
  public native @Cast("caffe::Phase") int phase();
  /**
   * \brief returns the bottom vecs for each layer -- usually you won't
   *        need this unless you do per-layer checks such as gradients.
   */
  public native @Const @ByRef DoubleBlobVectorVector bottom_vecs();
  /**
   * \brief returns the top vecs for each layer -- usually you won't
   *        need this unless you do per-layer checks such as gradients.
   */
  public native @Const @ByRef DoubleBlobVectorVector top_vecs();
  /** \brief returns the ids of the top blobs of layer i */
  public native @StdVector IntPointer top_ids(int i);
  /** \brief returns the ids of the bottom blobs of layer i */
  public native @StdVector IntPointer bottom_ids(int i);
  public native @Const @ByRef BoolVectorVector bottom_need_backward();
  public native @StdVector DoublePointer blob_loss_weights();
  public native @Const @ByRef BoolVector layer_need_backward();
  /** \brief returns the parameters */
  public native @Const @ByRef DoubleBlobSharedVector params();
  public native @Const @ByRef DoubleBlobVector learnable_params();
  /** \brief returns the learnable parameter learning rate multipliers */
  public native @StdVector FloatPointer params_lr();
  public native @Const @ByRef BoolVector has_params_lr();
  /** \brief returns the learnable parameter decay multipliers */
  public native @StdVector FloatPointer params_weight_decay();
  public native @Const @ByRef BoolVector has_params_decay();
  public native @Const @ByRef StringIntMap param_names_index();
  public native @StdVector IntPointer param_owners();
  public native @Const @ByRef StringVector param_display_names();
  /** \brief Input and output blob numbers */
  public native int num_inputs();
  public native int num_outputs();
  public native @Const @ByRef DoubleBlobVector input_blobs();
  public native @Const @ByRef DoubleBlobVector output_blobs();
  public native @StdVector IntPointer input_blob_indices();
  public native @StdVector IntPointer output_blob_indices();
  public native @Cast("bool") boolean has_blob(@StdString BytePointer blob_name);
  public native @Cast("bool") boolean has_blob(@StdString String blob_name);
  public native @Const @SharedPtr @ByVal DoubleBlob blob_by_name(@StdString BytePointer blob_name);
  public native @Const @SharedPtr @ByVal DoubleBlob blob_by_name(@StdString String blob_name);
  public native @Cast("bool") boolean has_layer(@StdString BytePointer layer_name);
  public native @Cast("bool") boolean has_layer(@StdString String layer_name);
  public DoubleLayer layer_by_name(BytePointer layer_name) { return layer_by_name(DoubleLayer.class, layer_name); }
  public DoubleLayer layer_by_name(String layer_name) { return layer_by_name(DoubleLayer.class, layer_name); };
  public native @Const @Cast({"", "boost::shared_ptr<caffe::Layer<double> >"}) @SharedPtr @ByVal <L extends DoubleLayer> L layer_by_name(Class<L> cls, @StdString BytePointer layer_name);
  public native @Const @Cast({"", "boost::shared_ptr<caffe::Layer<double> >"}) @SharedPtr @ByVal <L extends DoubleLayer> L layer_by_name(Class<L> cls, @StdString String layer_name);

  public native void set_debug_info(@Cast("const bool") boolean value);

  // Helpers for Init.
  /**
   * \brief Remove layers that the user specified should be excluded given the current
   *        phase, level, and stage.
   */
  public static native void FilterNet(@Const @ByRef NetParameter param,
        NetParameter param_filtered);
  /** \brief return whether NetState state meets NetStateRule rule */
  public static native @Cast("bool") boolean StateMeetsRule(@Const @ByRef NetState state, @Const @ByRef NetStateRule rule,
        @StdString BytePointer layer_name);
  public static native @Cast("bool") boolean StateMeetsRule(@Const @ByRef NetState state, @Const @ByRef NetStateRule rule,
        @StdString String layer_name);

  // Invoked at specific points during an iteration
  public static class Callback extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Callback(Pointer p) { super(p); }
  
  }
  public native @Cast("caffe::Net<double>::Callback**") @StdVector PointerPointer before_forward();
  public native void add_before_forward(Callback value);
  public native @Cast("caffe::Net<double>::Callback**") @StdVector PointerPointer after_forward();
  public native void add_after_forward(Callback value);
  public native @Cast("caffe::Net<double>::Callback**") @StdVector PointerPointer before_backward();
  public native void add_before_backward(Callback value);
  public native @Cast("caffe::Net<double>::Callback**") @StdVector PointerPointer after_backward();
  public native void add_after_backward(Callback value);
}


  // namespace caffe

// #endif  // CAFFE_NET_HPP_


// Parsed from caffe/parallel.hpp

// #ifndef CAFFE_PARALLEL_HPP_
// #define CAFFE_PARALLEL_HPP_

// #ifdef USE_NCCL

// #include <boost/thread.hpp>

// #include <string>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/common.hpp"
// #include "caffe/internal_thread.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/solver.hpp"
// #include "caffe/syncedmem.hpp"
// #include "caffe/util/blocking_queue.hpp"
// #include "caffe/util/nccl.hpp"

// Represents a net parameters. Once a net is created, its parameter buffers can
// be replaced by ones from Params, to allow parallelization. Params ensures
// parameters are allocated in one consecutive array.

// Params stored in GPU memory.

  // namespace caffe

// #endif  // USE_NCCL
// #endif  // header


// Parsed from caffe/solver.hpp

// #ifndef CAFFE_SOLVER_HPP_
// #define CAFFE_SOLVER_HPP_
// #include <boost/function.hpp>
// #include <string>
// #include <vector>

// #include "caffe/net.hpp"
// #include "caffe/solver_factory.hpp"
// #include "caffe/util/benchmark.hpp"

/**
  * \brief Enumeration of actions that a client of the Solver may request by
  * implementing the Solver's action request function, which a
  * client may optionally provide in order to request early termination
  * or saving a snapshot without exiting. In the executable caffe, this
  * mechanism is used to allow the snapshot to be saved when stopping
  * execution with a SIGINT (Ctrl-C).
  */
    /** enum caffe::SolverAction::Enum */
    public static final int
      NONE = 0,  // Take no special action.
      STOP = 1,  // Stop training. snapshot_after_train controls whether a
                 // snapshot is created.
      SNAPSHOT = 2;  // Take a snapshot, and keep training.
  

/**
 * \brief Type of a function that returns a Solver Action enumeration.
 */

/**
 * \brief An interface for classes that perform optimization on Net%s.
 *
 * Requires implementation of ApplyUpdate to compute a parameter update
 * given the current state of the Net parameters.
 */
@Name("caffe::Solver<float>") @NoOffset public static class FloatSolver extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSolver(Pointer p) { super(p); }

  public native void Init(@Const @ByRef SolverParameter param);
  public native void InitTrainNet();
  public native void InitTestNets();

  // Client of the Solver optionally may call this in order to set the function
  // that the solver uses to see what action it should take (e.g. snapshot or
  // exit training early).
  public native void SetActionFunction(@ByVal ActionCallback func);
  public native @Cast("caffe::SolverAction::Enum") int GetRequestedAction();
  // The main entry of the solver function. In default, iter will be zero. Pass
  // in a non-zero iter number to resume training for a pre-trained net.
  @Virtual public native void Solve(@Cast("const char*") BytePointer resume_file/*=NULL*/);
  public void Solve(String resume_file) { Solve(new BytePointer(resume_file)); }
  public void Solve() { Solve((BytePointer)null); }
  public native void Step(int iters);
  // The Restore method simply dispatches to one of the
  // RestoreSolverStateFrom___ protected methods. You should implement these
  // methods to restore the state from the appropriate snapshot type.
  public native void Restore(@Cast("const char*") BytePointer resume_file);
  public native void Restore(String resume_file);
  // The Solver::Snapshot function implements the basic snapshotting utility
  // that stores the learned net. You should implement the SnapshotSolverState()
  // function that produces a SolverState protocol buffer that needs to be
  // written to disk together with the learned net.
  public native void Snapshot();
  public native @Const @ByRef SolverParameter param();
  public native @SharedPtr @ByVal FloatNet net();
  public native @Const @ByRef FloatNetSharedVector test_nets();
  public native int iter();

  // Invoked at specific points during an iteration
  public static class Callback extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Callback(Pointer p) { super(p); }
  
  }
  public native @Const @ByRef FloatCallbackVector callbacks();
  public native void add_callback(Callback value);

  public native void CheckSnapshotWritePermissions();
  /**
   * \brief Returns the solver type.
   */
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual(true) protected native void ApplyUpdate();
  @Virtual(true) protected native void SnapshotSolverState(@Const @StdString @ByRef BytePointer model_filename);
  @Virtual(true) protected native void RestoreSolverStateFromHDF5(@Const @StdString @ByRef BytePointer state_file);
  @Virtual(true) protected native void RestoreSolverStateFromBinaryProto(@Const @StdString @ByRef BytePointer state_file);
}
@Name("caffe::Solver<double>") @NoOffset public static class DoubleSolver extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSolver(Pointer p) { super(p); }

  public native void Init(@Const @ByRef SolverParameter param);
  public native void InitTrainNet();
  public native void InitTestNets();

  // Client of the Solver optionally may call this in order to set the function
  // that the solver uses to see what action it should take (e.g. snapshot or
  // exit training early).
  public native void SetActionFunction(@ByVal ActionCallback func);
  public native @Cast("caffe::SolverAction::Enum") int GetRequestedAction();
  // The main entry of the solver function. In default, iter will be zero. Pass
  // in a non-zero iter number to resume training for a pre-trained net.
  @Virtual public native void Solve(@Cast("const char*") BytePointer resume_file/*=NULL*/);
  public void Solve(String resume_file) { Solve(new BytePointer(resume_file)); }
  public void Solve() { Solve((BytePointer)null); }
  public native void Step(int iters);
  // The Restore method simply dispatches to one of the
  // RestoreSolverStateFrom___ protected methods. You should implement these
  // methods to restore the state from the appropriate snapshot type.
  public native void Restore(@Cast("const char*") BytePointer resume_file);
  public native void Restore(String resume_file);
  // The Solver::Snapshot function implements the basic snapshotting utility
  // that stores the learned net. You should implement the SnapshotSolverState()
  // function that produces a SolverState protocol buffer that needs to be
  // written to disk together with the learned net.
  public native void Snapshot();
  public native @Const @ByRef SolverParameter param();
  public native @SharedPtr @ByVal DoubleNet net();
  public native @Const @ByRef DoubleNetSharedVector test_nets();
  public native int iter();

  // Invoked at specific points during an iteration
  public static class Callback extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Callback(Pointer p) { super(p); }
  
  }
  public native @Const @ByRef DoubleCallbackVector callbacks();
  public native void add_callback(Callback value);

  public native void CheckSnapshotWritePermissions();
  /**
   * \brief Returns the solver type.
   */
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual(true) protected native void ApplyUpdate();
  @Virtual(true) protected native void SnapshotSolverState(@Const @StdString @ByRef BytePointer model_filename);
  @Virtual(true) protected native void RestoreSolverStateFromHDF5(@Const @StdString @ByRef BytePointer state_file);
  @Virtual(true) protected native void RestoreSolverStateFromBinaryProto(@Const @StdString @ByRef BytePointer state_file);
}

  // namespace caffe

// #endif  // CAFFE_SOLVER_HPP_


// Parsed from caffe/solver_factory.hpp

/**
 * \brief A solver factory that allows one to register solvers, similar to
 * layer factory. During runtime, registered solvers could be called by passing
 * a SolverParameter protobuffer to the CreateSolver function:
 *
 *     SolverRegistry<Dtype>::CreateSolver(param);
 *
 * There are two ways to register a solver. Assuming that we have a solver like:
 *
 *   template <typename Dtype>
 *   class MyAwesomeSolver : public Solver<Dtype> {
 *     // your implementations
 *   };
 *
 * and its type is its C++ class name, but without the "Solver" at the end
 * ("MyAwesomeSolver" -> "MyAwesome").
 *
 * If the solver is going to be created simply by its constructor, in your C++
 * file, add the following line:
 *
 *    REGISTER_SOLVER_CLASS(MyAwesome);
 *
 * Or, if the solver is going to be created by another creator function, in the
 * format of:
 *
 *    template <typename Dtype>
 *    Solver<Dtype*> GetMyAwesomeSolver(const SolverParameter& param) {
 *      // your implementation
 *    }
 *
 * then you can register the creator function instead, like
 *
 * REGISTER_SOLVER_CREATOR(MyAwesome, GetMyAwesomeSolver)
 *
 * Note that each solver type should only be registered once.
 */

// #ifndef CAFFE_SOLVER_FACTORY_H_
// #define CAFFE_SOLVER_FACTORY_H_

// #include <map>
// #include <string>
// #include <vector>

// #include "caffe/common.hpp"
// #include "caffe/proto/caffe.pb.h"

@Name("caffe::SolverRegistry<float>") public static class FloatSolverRegistry extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSolverRegistry(Pointer p) { super(p); }

  public static class Creator extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Creator(Pointer p) { super(p); }
      protected Creator() { allocate(); }
      private native void allocate();
      public native FloatSolver call(@Const @ByRef SolverParameter arg0);
  }

  public static native @Cast("caffe::SolverRegistry<float>::CreatorRegistry*") @ByRef FloatRegistry Registry();

  // Adds a creator.
  public static native void AddCreator(@StdString BytePointer type, Creator creator);
  public static native void AddCreator(@StdString String type, Creator creator);

  // Get a solver using a SolverParameter.
  public static native FloatSolver CreateSolver(@Const @ByRef SolverParameter param);

  public static native @ByVal StringVector SolverTypeList();
}

@Name("caffe::SolverRegistry<double>") public static class DoubleSolverRegistry extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSolverRegistry(Pointer p) { super(p); }

  public static class Creator extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Creator(Pointer p) { super(p); }
      protected Creator() { allocate(); }
      private native void allocate();
      public native DoubleSolver call(@Const @ByRef SolverParameter arg0);
  }

  public static native @Cast("caffe::SolverRegistry<double>::CreatorRegistry*") @ByRef FloatRegistry Registry();

  // Adds a creator.
  public static native void AddCreator(@StdString BytePointer type, Creator creator);
  public static native void AddCreator(@StdString String type, Creator creator);

  // Get a solver using a SolverParameter.
  public static native DoubleSolver CreateSolver(@Const @ByRef SolverParameter param);

  public static native @ByVal StringVector SolverTypeList();
}


@Name("caffe::SolverRegisterer<float>") public static class FloatSolverRegisterer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSolverRegisterer(Pointer p) { super(p); }

  public static class Creator_SolverParameter extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Creator_SolverParameter(Pointer p) { super(p); }
      protected Creator_SolverParameter() { allocate(); }
      private native void allocate();
      public native FloatSolver call(@Const @ByRef SolverParameter arg0);
  }
  public FloatSolverRegisterer(@StdString BytePointer type,
        Creator_SolverParameter creator) { super((Pointer)null); allocate(type, creator); }
  private native void allocate(@StdString BytePointer type,
        Creator_SolverParameter creator);
  public FloatSolverRegisterer(@StdString String type,
        Creator_SolverParameter creator) { super((Pointer)null); allocate(type, creator); }
  private native void allocate(@StdString String type,
        Creator_SolverParameter creator);
}


@Name("caffe::SolverRegisterer<double>") public static class DoubleSolverRegisterer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSolverRegisterer(Pointer p) { super(p); }

  public static class Creator_SolverParameter extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Creator_SolverParameter(Pointer p) { super(p); }
      protected Creator_SolverParameter() { allocate(); }
      private native void allocate();
      public native DoubleSolver call(@Const @ByRef SolverParameter arg0);
  }
  public DoubleSolverRegisterer(@StdString BytePointer type,
        Creator_SolverParameter creator) { super((Pointer)null); allocate(type, creator); }
  private native void allocate(@StdString BytePointer type,
        Creator_SolverParameter creator);
  public DoubleSolverRegisterer(@StdString String type,
        Creator_SolverParameter creator) { super((Pointer)null); allocate(type, creator); }
  private native void allocate(@StdString String type,
        Creator_SolverParameter creator);
}


// #define REGISTER_SOLVER_CREATOR(type, creator)
//   static SolverRegisterer<float> g_creator_f_##type(#type, creator<float>);
//   static SolverRegisterer<double> g_creator_d_##type(#type, creator<double>)   

// #define REGISTER_SOLVER_CLASS(type)
//   template <typename Dtype>
//   Solver<Dtype>* Creator_##type##Solver(
//       const SolverParameter& param)
//   {
//     return new type##Solver<Dtype>(param);
//   }
//   REGISTER_SOLVER_CREATOR(type, Creator_##type##Solver)

  // namespace caffe

// #endif  // CAFFE_SOLVER_FACTORY_H_


// Parsed from caffe/sgd_solvers.hpp

// #ifndef CAFFE_SGD_SOLVERS_HPP_
// #define CAFFE_SGD_SOLVERS_HPP_

// #include <string>
// #include <vector>

// #include "caffe/solver.hpp"

/**
 * \brief Optimizes the parameters of a Net using
 *        stochastic gradient descent (SGD) with momentum.
 */
@Name("caffe::SGDSolver<float>") @NoOffset public static class FloatSGDSolver extends FloatSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSGDSolver(Pointer p) { super(p); }

  public FloatSGDSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public FloatSGDSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public FloatSGDSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();

  public native @Const @ByRef FloatBlobSharedVector history();
  @Virtual protected native void ApplyUpdate();
  @Virtual protected native void Normalize(int param_id);
  @Virtual protected native void Regularize(int param_id);
  @Virtual protected native void ComputeUpdateValue(int param_id, float rate);
  @Virtual protected native void ClipGradients();
  @Virtual protected native void SnapshotSolverState(@Const @StdString @ByRef BytePointer model_filename);
  @Virtual protected native void SnapshotSolverStateToBinaryProto(@Const @StdString @ByRef BytePointer model_filename);
  @Virtual protected native void SnapshotSolverStateToHDF5(@Const @StdString @ByRef BytePointer model_filename);
  @Virtual protected native void RestoreSolverStateFromHDF5(@Const @StdString @ByRef BytePointer state_file);
  @Virtual protected native void RestoreSolverStateFromBinaryProto(@Const @StdString @ByRef BytePointer state_file);
}
@Name("caffe::SGDSolver<double>") @NoOffset public static class DoubleSGDSolver extends DoubleSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSGDSolver(Pointer p) { super(p); }

  public DoubleSGDSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public DoubleSGDSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public DoubleSGDSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();

  public native @Const @ByRef DoubleBlobSharedVector history();
  @Virtual protected native void ApplyUpdate();
  @Virtual protected native void Normalize(int param_id);
  @Virtual protected native void Regularize(int param_id);
  @Virtual protected native void ComputeUpdateValue(int param_id, double rate);
  @Virtual protected native void ClipGradients();
  @Virtual protected native void SnapshotSolverState(@Const @StdString @ByRef BytePointer model_filename);
  @Virtual protected native void SnapshotSolverStateToBinaryProto(@Const @StdString @ByRef BytePointer model_filename);
  @Virtual protected native void SnapshotSolverStateToHDF5(@Const @StdString @ByRef BytePointer model_filename);
  @Virtual protected native void RestoreSolverStateFromHDF5(@Const @StdString @ByRef BytePointer state_file);
  @Virtual protected native void RestoreSolverStateFromBinaryProto(@Const @StdString @ByRef BytePointer state_file);
}

@Name("caffe::NesterovSolver<float>") public static class FloatNesterovSolver extends FloatSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatNesterovSolver(Pointer p) { super(p); }

  public FloatNesterovSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public FloatNesterovSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public FloatNesterovSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, float rate);
}

@Name("caffe::NesterovSolver<double>") public static class DoubleNesterovSolver extends DoubleSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleNesterovSolver(Pointer p) { super(p); }

  public DoubleNesterovSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public DoubleNesterovSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public DoubleNesterovSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, double rate);
}

@Name("caffe::AdaGradSolver<float>") public static class FloatAdaGradSolver extends FloatSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatAdaGradSolver(Pointer p) { super(p); }

  public FloatAdaGradSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public FloatAdaGradSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public FloatAdaGradSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, float rate);
}

@Name("caffe::AdaGradSolver<double>") public static class DoubleAdaGradSolver extends DoubleSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleAdaGradSolver(Pointer p) { super(p); }

  public DoubleAdaGradSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public DoubleAdaGradSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public DoubleAdaGradSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, double rate);
}


@Name("caffe::RMSPropSolver<float>") public static class FloatRMSPropSolver extends FloatSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatRMSPropSolver(Pointer p) { super(p); }

  public FloatRMSPropSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public FloatRMSPropSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public FloatRMSPropSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, float rate);
}


@Name("caffe::RMSPropSolver<double>") public static class DoubleRMSPropSolver extends DoubleSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleRMSPropSolver(Pointer p) { super(p); }

  public DoubleRMSPropSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public DoubleRMSPropSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public DoubleRMSPropSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, double rate);
}

@Name("caffe::AdaDeltaSolver<float>") public static class FloatAdaDeltaSolver extends FloatSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatAdaDeltaSolver(Pointer p) { super(p); }

  public FloatAdaDeltaSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public FloatAdaDeltaSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public FloatAdaDeltaSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, float rate);
}

@Name("caffe::AdaDeltaSolver<double>") public static class DoubleAdaDeltaSolver extends DoubleSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleAdaDeltaSolver(Pointer p) { super(p); }

  public DoubleAdaDeltaSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public DoubleAdaDeltaSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public DoubleAdaDeltaSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, double rate);
}

/**
 * \brief AdamSolver, an algorithm for first-order gradient-based optimization
 *        of stochastic objective functions, based on adaptive estimates of
 *        lower-order moments. Described in [1].
 *
 * [1] D. P. Kingma and J. L. Ba, "ADAM: A Method for Stochastic Optimization."
 *     arXiv preprint arXiv:1412.6980v8 (2014).
 */
@Name("caffe::AdamSolver<float>") public static class FloatAdamSolver extends FloatSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatAdamSolver(Pointer p) { super(p); }

  public FloatAdamSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public FloatAdamSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public FloatAdamSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, float rate);
}
@Name("caffe::AdamSolver<double>") public static class DoubleAdamSolver extends DoubleSGDSolver {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleAdamSolver(Pointer p) { super(p); }

  public DoubleAdamSolver(@Const @ByRef SolverParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef SolverParameter param);
  public DoubleAdamSolver(@Const @StdString @ByRef BytePointer param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef BytePointer param_file);
  public DoubleAdamSolver(@Const @StdString @ByRef String param_file) { super((Pointer)null); allocate(param_file); }
  private native void allocate(@Const @StdString @ByRef String param_file);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void ComputeUpdateValue(int param_id, double rate);
}

  // namespace caffe

// #endif  // CAFFE_SGD_SOLVERS_HPP_


// Parsed from caffe/layers/input_layer.hpp

// #ifndef CAFFE_INPUT_LAYER_HPP_
// #define CAFFE_INPUT_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Provides data to the Net by assigning tops directly.
 *
 * This data layer is a container that merely holds the data assigned to it;
 * forward, backward, and reshape are all no-ops.
 */
@Name("caffe::InputLayer<float>") public static class FloatInputLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatInputLayer(Pointer p) { super(p); }

  public FloatInputLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::InputLayer<double>") public static class DoubleInputLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleInputLayer(Pointer p) { super(p); }

  public DoubleInputLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  // Data layers have no bottoms, so reshaping is trivial.
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_INPUT_LAYER_HPP_


// Parsed from caffe/layers/parameter_layer.hpp

// #ifndef CAFFE_PARAMETER_LAYER_HPP_
// #define CAFFE_PARAMETER_LAYER_HPP_

// #include <vector>

// #include "caffe/layer.hpp"

@Name("caffe::ParameterLayer<float>") public static class FloatParameterLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatParameterLayer(Pointer p) { super(p); }

  public FloatParameterLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}

@Name("caffe::ParameterLayer<double>") public static class DoubleParameterLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleParameterLayer(Pointer p) { super(p); }

  public DoubleParameterLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif


// Parsed from caffe/layers/base_conv_layer.hpp

// #ifndef CAFFE_BASE_CONVOLUTION_LAYER_HPP_
// #define CAFFE_BASE_CONVOLUTION_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/util/im2col.hpp"

/**
 * \brief Abstract base class that factors out the BLAS code common to
 *        ConvolutionLayer and DeconvolutionLayer.
 */
@Name("caffe::BaseConvolutionLayer<float>") @NoOffset public static class FloatBaseConvolutionLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatBaseConvolutionLayer(Pointer p) { super(p); }

  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean EqualNumBottomTopBlobs();
  @Virtual(true) protected native @Cast("bool") boolean reverse_dimensions();
  @Virtual(true) protected native void compute_output_shape();
}
@Name("caffe::BaseConvolutionLayer<double>") @NoOffset public static class DoubleBaseConvolutionLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleBaseConvolutionLayer(Pointer p) { super(p); }

  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean EqualNumBottomTopBlobs();
  @Virtual(true) protected native @Cast("bool") boolean reverse_dimensions();
  @Virtual(true) protected native void compute_output_shape();
}

  // namespace caffe

// #endif  // CAFFE_BASE_CONVOLUTION_LAYER_HPP_


// Parsed from caffe/layers/conv_layer.hpp

// #ifndef CAFFE_CONV_LAYER_HPP_
// #define CAFFE_CONV_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/base_conv_layer.hpp"

/**
 * \brief Convolves the input image with a bank of learned filters,
 *        and (optionally) adds biases.
 *
 *   Caffe convolves by reduction to matrix multiplication. This achieves
 *   high-throughput and generality of input and filter dimensions but comes at
 *   the cost of memory for matrices. This makes use of efficiency in BLAS.
 *
 *   The input is "im2col" transformed to a channel K' x H x W data matrix
 *   for multiplication with the N x K' x H x W filter matrix to yield a
 *   N' x H x W output matrix that is then "col2im" restored. K' is the
 *   input channel * kernel height * kernel width dimension of the unrolled
 *   inputs so that the im2col matrix has a column for each input region to
 *   be filtered. col2im restores the output spatial structure by rolling up
 *   the output channel N' columns of the output matrix.
 */
@Name("caffe::ConvolutionLayer<float>") public static class FloatConvolutionLayer extends FloatBaseConvolutionLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatConvolutionLayer(Pointer p) { super(p); }

  /**
   * @param param provides ConvolutionParameter convolution_param,
   *    with ConvolutionLayer options:
   *  - num_output. The number of filters.
   *  - kernel_size / kernel_h / kernel_w. The filter dimensions, given by
   *  kernel_size for square filters or kernel_h and kernel_w for rectangular
   *  filters.
   *  - stride / stride_h / stride_w (\b optional, default 1). The filter
   *  stride, given by stride_size for equal dimensions or stride_h and stride_w
   *  for different strides. By default the convolution is dense with stride 1.
   *  - pad / pad_h / pad_w (\b optional, default 0). The zero-padding for
   *  convolution, given by pad for equal dimensions or pad_h and pad_w for
   *  different padding. Input padding is computed implicitly instead of
   *  actually padding.
   *  - dilation (\b optional, default 1). The filter
   *  dilation, given by dilation_size for equal dimensions for different
   *  dilation. By default the convolution has dilation 1.
   *  - group (\b optional, default 1). The number of filter groups. Group
   *  convolution is a method for reducing parameterization by selectively
   *  connecting input and output channels. The input and output channel dimensions must be divisible
   *  by the number of groups. For group \f$ \geq 1 \f$, the
   *  convolutional filters' input and output channels are separated s.t. each
   *  group takes 1 / group of the input channels and makes 1 / group of the
   *  output channels. Concretely 4 input channels, 8 output channels, and
   *  2 groups separate input channels 1-2 and output channels 1-4 into the
   *  first group and input channels 3-4 and output channels 5-8 into the second
   *  group.
   *  - bias_term (\b optional, default true). Whether to have a bias.
   *  - engine: convolution has CAFFE (matrix multiplication) and CUDNN (library
   *    kernels + stream parallelism) engines.
   */
  public FloatConvolutionLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native @Cast("bool") boolean reverse_dimensions();
  @Virtual protected native void compute_output_shape();
}
@Name("caffe::ConvolutionLayer<double>") public static class DoubleConvolutionLayer extends DoubleBaseConvolutionLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleConvolutionLayer(Pointer p) { super(p); }

  /**
   * @param param provides ConvolutionParameter convolution_param,
   *    with ConvolutionLayer options:
   *  - num_output. The number of filters.
   *  - kernel_size / kernel_h / kernel_w. The filter dimensions, given by
   *  kernel_size for square filters or kernel_h and kernel_w for rectangular
   *  filters.
   *  - stride / stride_h / stride_w (\b optional, default 1). The filter
   *  stride, given by stride_size for equal dimensions or stride_h and stride_w
   *  for different strides. By default the convolution is dense with stride 1.
   *  - pad / pad_h / pad_w (\b optional, default 0). The zero-padding for
   *  convolution, given by pad for equal dimensions or pad_h and pad_w for
   *  different padding. Input padding is computed implicitly instead of
   *  actually padding.
   *  - dilation (\b optional, default 1). The filter
   *  dilation, given by dilation_size for equal dimensions for different
   *  dilation. By default the convolution has dilation 1.
   *  - group (\b optional, default 1). The number of filter groups. Group
   *  convolution is a method for reducing parameterization by selectively
   *  connecting input and output channels. The input and output channel dimensions must be divisible
   *  by the number of groups. For group \f$ \geq 1 \f$, the
   *  convolutional filters' input and output channels are separated s.t. each
   *  group takes 1 / group of the input channels and makes 1 / group of the
   *  output channels. Concretely 4 input channels, 8 output channels, and
   *  2 groups separate input channels 1-2 and output channels 1-4 into the
   *  first group and input channels 3-4 and output channels 5-8 into the second
   *  group.
   *  - bias_term (\b optional, default true). Whether to have a bias.
   *  - engine: convolution has CAFFE (matrix multiplication) and CUDNN (library
   *    kernels + stream parallelism) engines.
   */
  public DoubleConvolutionLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native @Cast("bool") boolean reverse_dimensions();
  @Virtual protected native void compute_output_shape();
}

  // namespace caffe

// #endif  // CAFFE_CONV_LAYER_HPP_


// Parsed from caffe/layers/crop_layer.hpp

// #ifndef CAFFE_CROP_LAYER_HPP_
// #define CAFFE_CROP_LAYER_HPP_

// #include <utility>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Takes a Blob and crop it, to the shape specified by the second input
 *  Blob, across all dimensions after the specified axis.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */

@Name("caffe::CropLayer<float>") @NoOffset public static class FloatCropLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCropLayer(Pointer p) { super(p); }

  public FloatCropLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}

@Name("caffe::CropLayer<double>") @NoOffset public static class DoubleCropLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCropLayer(Pointer p) { super(p); }

  public DoubleCropLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
  // namespace caffe

// #endif  // CAFFE_CROP_LAYER_HPP_


// Parsed from caffe/layers/deconv_layer.hpp

// #ifndef CAFFE_DECONV_LAYER_HPP_
// #define CAFFE_DECONV_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/base_conv_layer.hpp"

/**
 * \brief Convolve the input with a bank of learned filters, and (optionally)
 *        add biases, treating filters and convolution parameters in the
 *        opposite sense as ConvolutionLayer.
 *
 *   ConvolutionLayer computes each output value by dotting an input window with
 *   a filter; DeconvolutionLayer multiplies each input value by a filter
 *   elementwise, and sums over the resulting output windows. In other words,
 *   DeconvolutionLayer is ConvolutionLayer with the forward and backward passes
 *   reversed. DeconvolutionLayer reuses ConvolutionParameter for its
 *   parameters, but they take the opposite sense as in ConvolutionLayer (so
 *   padding is removed from the output rather than added to the input, and
 *   stride results in upsampling rather than downsampling).
 */
@Name("caffe::DeconvolutionLayer<float>") public static class FloatDeconvolutionLayer extends FloatBaseConvolutionLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatDeconvolutionLayer(Pointer p) { super(p); }

  public FloatDeconvolutionLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native @Cast("bool") boolean reverse_dimensions();
  @Virtual protected native void compute_output_shape();
}
@Name("caffe::DeconvolutionLayer<double>") public static class DoubleDeconvolutionLayer extends DoubleBaseConvolutionLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleDeconvolutionLayer(Pointer p) { super(p); }

  public DoubleDeconvolutionLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native @Cast("bool") boolean reverse_dimensions();
  @Virtual protected native void compute_output_shape();
}

  // namespace caffe

// #endif  // CAFFE_DECONV_LAYER_HPP_


// Parsed from caffe/layers/cudnn_conv_layer.hpp

// #ifndef CAFFE_CUDNN_CONV_LAYER_HPP_
// #define CAFFE_CUDNN_CONV_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/conv_layer.hpp"

// #ifdef USE_CUDNN
/*
 * @brief cuDNN implementation of ConvolutionLayer.
 *        Fallback to ConvolutionLayer for CPU mode.
 *
 * cuDNN accelerates convolution through forward kernels for filtering and bias
 * plus backward kernels for the gradient w.r.t. the filters, biases, and
 * inputs. Caffe + cuDNN further speeds up the computation through forward
 * parallelism across groups and backward parallelism across gradients.
 *
 * The CUDNN engine does not have memory overhead for matrix buffers. For many
 * input and filter regimes the CUDNN engine is faster than the CAFFE engine,
 * but for fully-convolutional models and large inputs the CAFFE engine can be
 * faster as long as it fits in memory.
*/
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNConvolutionLayer<float>") @NoOffset public static class FloatCuDNNConvolutionLayer extends FloatConvolutionLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCuDNNConvolutionLayer(Pointer p) { super(p); }

  public FloatCuDNNConvolutionLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNConvolutionLayer<double>") @NoOffset public static class DoubleCuDNNConvolutionLayer extends DoubleConvolutionLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCuDNNConvolutionLayer(Pointer p) { super(p); }

  public DoubleCuDNNConvolutionLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
// #endif

  // namespace caffe

// #endif  // CAFFE_CUDNN_CONV_LAYER_HPP_


// Parsed from caffe/layers/im2col_layer.hpp

// #ifndef CAFFE_IM2COL_LAYER_HPP_
// #define CAFFE_IM2COL_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief A helper for image operations that rearranges image regions into
 *        column vectors.  Used by ConvolutionLayer to perform convolution
 *        by matrix multiplication.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::Im2colLayer<float>") @NoOffset public static class FloatIm2colLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatIm2colLayer(Pointer p) { super(p); }

  public FloatIm2colLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::Im2colLayer<double>") @NoOffset public static class DoubleIm2colLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleIm2colLayer(Pointer p) { super(p); }

  public DoubleIm2colLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_IM2COL_LAYER_HPP_


// Parsed from caffe/layers/lrn_layer.hpp

// #ifndef CAFFE_LRN_LAYER_HPP_
// #define CAFFE_LRN_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/eltwise_layer.hpp"
// #include "caffe/layers/pooling_layer.hpp"
// #include "caffe/layers/power_layer.hpp"
// #include "caffe/layers/split_layer.hpp"

/**
 * \brief Normalize the input in a local region across or within feature maps.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::LRNLayer<float>") @NoOffset public static class FloatLRNLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatLRNLayer(Pointer p) { super(p); }

  public FloatLRNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);

  @Virtual protected native void CrossChannelForward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void CrossChannelForward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void WithinChannelForward(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void CrossChannelBackward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void CrossChannelBackward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void WithinChannelBackward(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::LRNLayer<double>") @NoOffset public static class DoubleLRNLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleLRNLayer(Pointer p) { super(p); }

  public DoubleLRNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);

  @Virtual protected native void CrossChannelForward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void CrossChannelForward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void WithinChannelForward(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void CrossChannelBackward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void CrossChannelBackward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void WithinChannelBackward(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_LRN_LAYER_HPP_


// Parsed from caffe/layers/cudnn_lrn_layer.hpp

// #ifndef CAFFE_CUDNN_LRN_LAYER_HPP_
// #define CAFFE_CUDNN_LRN_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/lrn_layer.hpp"

// #ifdef USE_CUDNN
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNLRNLayer<float>") @NoOffset public static class FloatCuDNNLRNLayer extends FloatLRNLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCuDNNLRNLayer(Pointer p) { super(p); }

  public FloatCuDNNLRNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNLRNLayer<double>") @NoOffset public static class DoubleCuDNNLRNLayer extends DoubleLRNLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCuDNNLRNLayer(Pointer p) { super(p); }

  public DoubleCuDNNLRNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
// #endif

  // namespace caffe

// #endif  // CAFFE_CUDNN_LRN_LAYER_HPP_


// Parsed from caffe/layers/cudnn_lcn_layer.hpp

// #ifndef CAFFE_CUDNN_LCN_LAYER_HPP_
// #define CAFFE_CUDNN_LCN_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/lrn_layer.hpp"
// #include "caffe/layers/power_layer.hpp"

// #ifdef USE_CUDNN
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNLCNLayer<float>") @NoOffset public static class FloatCuDNNLCNLayer extends FloatLRNLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCuDNNLCNLayer(Pointer p) { super(p); }

  public FloatCuDNNLCNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNLCNLayer<double>") @NoOffset public static class DoubleCuDNNLCNLayer extends DoubleLRNLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCuDNNLCNLayer(Pointer p) { super(p); }

  public DoubleCuDNNLCNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
// #endif

  // namespace caffe

// #endif  // CAFFE_CUDNN_LCN_LAYER_HPP_


// Parsed from caffe/layers/pooling_layer.hpp

// #ifndef CAFFE_POOLING_LAYER_HPP_
// #define CAFFE_POOLING_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Pools the input image by taking the max, average, etc. within regions.
 *
 * TODO(dox): thorough documentation for Forward, Backward, and proto params.
 */
@Name("caffe::PoolingLayer<float>") @NoOffset public static class FloatPoolingLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatPoolingLayer(Pointer p) { super(p); }

  public FloatPoolingLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  // MAX POOL layers can output an extra top blob for the mask;
  // others can only output the pooled inputs.
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::PoolingLayer<double>") @NoOffset public static class DoublePoolingLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoublePoolingLayer(Pointer p) { super(p); }

  public DoublePoolingLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  // MAX POOL layers can output an extra top blob for the mask;
  // others can only output the pooled inputs.
  @Virtual public native @Const({false, false, true}) int MaxTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_POOLING_LAYER_HPP_


// Parsed from caffe/layers/cudnn_pooling_layer.hpp

// #ifndef CAFFE_CUDNN_POOLING_LAYER_HPP_
// #define CAFFE_CUDNN_POOLING_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

// #include "caffe/layers/pooling_layer.hpp"

// #ifdef USE_CUDNN
/*
 * @brief cuDNN implementation of PoolingLayer.
 *        Fallback to PoolingLayer for CPU mode.
*/
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNPoolingLayer<float>") @NoOffset public static class FloatCuDNNPoolingLayer extends FloatPoolingLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatCuDNNPoolingLayer(Pointer p) { super(p); }

  public FloatCuDNNPoolingLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  // Currently, cuDNN does not support the extra top blob.
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") @Name("caffe::CuDNNPoolingLayer<double>") @NoOffset public static class DoubleCuDNNPoolingLayer extends DoublePoolingLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleCuDNNPoolingLayer(Pointer p) { super(p); }

  public DoubleCuDNNPoolingLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native @Platform(value = {"linux-x86_64", "macosx-x86_64"}, extension = "-gpu") void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  // Currently, cuDNN does not support the extra top blob.
  @Virtual public native @Const({false, false, true}) int MinTopBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_gpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}
// #endif

  // namespace caffe

// #endif  // CAFFE_CUDNN_POOLING_LAYER_HPP_


// Parsed from caffe/layers/spp_layer.hpp

// #ifndef CAFFE_SPP_LAYER_HPP_
// #define CAFFE_SPP_LAYER_HPP_

// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Does spatial pyramid pooling on the input image
 *        by taking the max, average, etc. within regions
 *        so that the result vector of different sized
 *        images are of the same size.
 */
@Name("caffe::SPPLayer<float>") @NoOffset public static class FloatSPPLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatSPPLayer(Pointer p) { super(p); }

  public FloatSPPLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
  @Virtual protected native @ByVal LayerParameter GetPoolingParam(@Const int pyramid_level,
        @Const int bottom_h, @Const int bottom_w, @Const @ByVal SPPParameter spp_param);
}
@Name("caffe::SPPLayer<double>") @NoOffset public static class DoubleSPPLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleSPPLayer(Pointer p) { super(p); }

  public DoubleSPPLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);
  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int ExactNumBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
  @Virtual protected native @ByVal LayerParameter GetPoolingParam(@Const int pyramid_level,
        @Const int bottom_h, @Const int bottom_w, @Const @ByVal SPPParameter spp_param);
}

  // namespace caffe

// #endif  // CAFFE_SPP_LAYER_HPP_


// Parsed from caffe/layers/recurrent_layer.hpp

// #ifndef CAFFE_RECURRENT_LAYER_HPP_
// #define CAFFE_RECURRENT_LAYER_HPP_

// #include <string>
// #include <utility>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/common.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/net.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/util/format.hpp"

/**
 * \brief An abstract class for implementing recurrent behavior inside of an
 *        unrolled network.  This Layer type cannot be instantiated -- instead,
 *        you should use one of its implementations which defines the recurrent
 *        architecture, such as RNNLayer or LSTMLayer.
 */
@Name("caffe::RecurrentLayer<float>") @NoOffset public static class FloatRecurrentLayer extends FloatLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatRecurrentLayer(Pointer p) { super(p); }

  @Virtual public native void LayerSetUp(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual public native void Reset();

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MaxBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();

  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);
  @Virtual(true) protected native @Const({false, false, true}) void FillUnrolledNet(NetParameter net_param);
  @Virtual(true) protected native @Const({false, false, true}) void RecurrentInputBlobNames(StringVector names);
  @Virtual(true) protected native @Const({false, false, true}) void RecurrentInputShapes(@Cast({"caffe::BlobShape*", "std::vector<caffe::BlobShape>*"}) @StdVector BlobShape shapes);
  @Virtual(true) protected native @Const({false, false, true}) void RecurrentOutputBlobNames(StringVector names);
  @Virtual(true) protected native @Const({false, false, true}) void OutputBlobNames(StringVector names);
  @Virtual protected native void Forward_cpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef FloatBlobVector bottom,
        @Const @ByRef FloatBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef FloatBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef FloatBlobVector bottom);
}
@Name("caffe::RecurrentLayer<double>") @NoOffset public static class DoubleRecurrentLayer extends DoubleLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleRecurrentLayer(Pointer p) { super(p); }

  @Virtual public native void LayerSetUp(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reshape(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual public native void Reset();

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual public native @Const({false, false, true}) int MinBottomBlobs();
  @Virtual public native @Const({false, false, true}) int MaxBottomBlobs();
  @Virtual public native @Const({false, false, true}) int ExactNumTopBlobs();

  @Virtual public native @Cast("bool") @Const({false, false, true}) boolean AllowForceBackward(@Const int bottom_index);
  @Virtual(true) protected native @Const({false, false, true}) void FillUnrolledNet(NetParameter net_param);
  @Virtual(true) protected native @Const({false, false, true}) void RecurrentInputBlobNames(StringVector names);
  @Virtual(true) protected native @Const({false, false, true}) void RecurrentInputShapes(@Cast({"caffe::BlobShape*", "std::vector<caffe::BlobShape>*"}) @StdVector BlobShape shapes);
  @Virtual(true) protected native @Const({false, false, true}) void RecurrentOutputBlobNames(StringVector names);
  @Virtual(true) protected native @Const({false, false, true}) void OutputBlobNames(StringVector names);
  @Virtual protected native void Forward_cpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Forward_gpu(@Const @ByRef DoubleBlobVector bottom,
        @Const @ByRef DoubleBlobVector top);
  @Virtual protected native void Backward_cpu(@Const @ByRef DoubleBlobVector top,
        @Const @ByRef BoolVector propagate_down, @Const @ByRef DoubleBlobVector bottom);
}

  // namespace caffe

// #endif  // CAFFE_RECURRENT_LAYER_HPP_


// Parsed from caffe/layers/lstm_layer.hpp

// #ifndef CAFFE_LSTM_LAYER_HPP_
// #define CAFFE_LSTM_LAYER_HPP_

// #include <string>
// #include <utility>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/common.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/layers/recurrent_layer.hpp"
// #include "caffe/net.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Processes sequential inputs using a "Long Short-Term Memory" (LSTM)
 *        [1] style recurrent neural network (RNN). Implemented by unrolling
 *        the LSTM computation through time.
 *
 * The specific architecture used in this implementation is as described in
 * "Learning to Execute" [2], reproduced below:
 *     i_t := \sigmoid[ W_{hi} * h_{t-1} + W_{xi} * x_t + b_i ]
 *     f_t := \sigmoid[ W_{hf} * h_{t-1} + W_{xf} * x_t + b_f ]
 *     o_t := \sigmoid[ W_{ho} * h_{t-1} + W_{xo} * x_t + b_o ]
 *     g_t :=    \tanh[ W_{hg} * h_{t-1} + W_{xg} * x_t + b_g ]
 *     c_t := (f_t .* c_{t-1}) + (i_t .* g_t)
 *     h_t := o_t .* \tanh[c_t]
 * In the implementation, the i, f, o, and g computations are performed as a
 * single inner product.
 *
 * Notably, this implementation lacks the "diagonal" gates, as used in the
 * LSTM architectures described by Alex Graves [3] and others.
 *
 * [1] Hochreiter, Sepp, and Schmidhuber, Jürgen. "Long short-term memory."
 *     Neural Computation 9, no. 8 (1997): 1735-1780.
 *
 * [2] Zaremba, Wojciech, and Sutskever, Ilya. "Learning to execute."
 *     arXiv preprint arXiv:1410.4615 (2014).
 *
 * [3] Graves, Alex. "Generating sequences with recurrent neural networks."
 *     arXiv preprint arXiv:1308.0850 (2013).
 */
@Name("caffe::LSTMLayer<float>") public static class FloatLSTMLayer extends FloatRecurrentLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatLSTMLayer(Pointer p) { super(p); }

  public FloatLSTMLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native @Const({false, false, true}) void FillUnrolledNet(NetParameter net_param);
  @Virtual protected native @Const({false, false, true}) void RecurrentInputBlobNames(StringVector names);
  @Virtual protected native @Const({false, false, true}) void RecurrentOutputBlobNames(StringVector names);
  @Virtual protected native @Const({false, false, true}) void RecurrentInputShapes(@Cast({"caffe::BlobShape*", "std::vector<caffe::BlobShape>*"}) @StdVector BlobShape shapes);
  @Virtual protected native @Const({false, false, true}) void OutputBlobNames(StringVector names);
}
@Name("caffe::LSTMLayer<double>") public static class DoubleLSTMLayer extends DoubleRecurrentLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleLSTMLayer(Pointer p) { super(p); }

  public DoubleLSTMLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native @Const({false, false, true}) void FillUnrolledNet(NetParameter net_param);
  @Virtual protected native @Const({false, false, true}) void RecurrentInputBlobNames(StringVector names);
  @Virtual protected native @Const({false, false, true}) void RecurrentOutputBlobNames(StringVector names);
  @Virtual protected native @Const({false, false, true}) void RecurrentInputShapes(@Cast({"caffe::BlobShape*", "std::vector<caffe::BlobShape>*"}) @StdVector BlobShape shapes);
  @Virtual protected native @Const({false, false, true}) void OutputBlobNames(StringVector names);
}

/**
 * \brief A helper for LSTMLayer: computes a single timestep of the
 *        non-linearity of the LSTM, producing the updated cell and hidden
 *        states.
 */

  // namespace caffe

// #endif  // CAFFE_LSTM_LAYER_HPP_


// Parsed from caffe/layers/rnn_layer.hpp

// #ifndef CAFFE_RNN_LAYER_HPP_
// #define CAFFE_RNN_LAYER_HPP_

// #include <string>
// #include <utility>
// #include <vector>

// #include "caffe/blob.hpp"
// #include "caffe/common.hpp"
// #include "caffe/layer.hpp"
// #include "caffe/layers/recurrent_layer.hpp"
// #include "caffe/net.hpp"
// #include "caffe/proto/caffe.pb.h"

/**
 * \brief Processes time-varying inputs using a simple recurrent neural network
 *        (RNN). Implemented as a network unrolling the RNN computation in time.
 *
 * Given time-varying inputs \f$ x_t \f$, computes hidden state \f$
 *     h_t := \tanh[ W_{hh} h_{t_1} + W_{xh} x_t + b_h ]
 * \f$, and outputs \f$
 *     o_t := \tanh[ W_{ho} h_t + b_o ]
 * \f$.
 */
@Name("caffe::RNNLayer<float>") public static class FloatRNNLayer extends FloatRecurrentLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FloatRNNLayer(Pointer p) { super(p); }

  public FloatRNNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native @Const({false, false, true}) void FillUnrolledNet(NetParameter net_param);
  @Virtual protected native @Const({false, false, true}) void RecurrentInputBlobNames(StringVector names);
  @Virtual protected native @Const({false, false, true}) void RecurrentOutputBlobNames(StringVector names);
  @Virtual protected native @Const({false, false, true}) void RecurrentInputShapes(@Cast({"caffe::BlobShape*", "std::vector<caffe::BlobShape>*"}) @StdVector BlobShape shapes);
  @Virtual protected native @Const({false, false, true}) void OutputBlobNames(StringVector names);
}
@Name("caffe::RNNLayer<double>") public static class DoubleRNNLayer extends DoubleRecurrentLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DoubleRNNLayer(Pointer p) { super(p); }

  public DoubleRNNLayer(@Const @ByRef LayerParameter param) { super((Pointer)null); allocate(param); }
  private native void allocate(@Const @ByRef LayerParameter param);

  @Virtual public native @Const({false, false, true}) @Cast("const char*") BytePointer type();
  @Virtual protected native @Const({false, false, true}) void FillUnrolledNet(NetParameter net_param);
  @Virtual protected native @Const({false, false, true}) void RecurrentInputBlobNames(StringVector names);
  @Virtual protected native @Const({false, false, true}) void RecurrentOutputBlobNames(StringVector names);
  @Virtual protected native @Const({false, false, true}) void RecurrentInputShapes(@Cast({"caffe::BlobShape*", "std::vector<caffe::BlobShape>*"}) @StdVector BlobShape shapes);
  @Virtual protected native @Const({false, false, true}) void OutputBlobNames(StringVector names);
}

  // namespace caffe

// #endif  // CAFFE_RNN_LAYER_HPP_


// Parsed from caffe/util/benchmark.hpp

// #ifndef CAFFE_UTIL_BENCHMARK_H_
// #define CAFFE_UTIL_BENCHMARK_H_

// #include <boost/date_time/posix_time/posix_time.hpp>

// #include "caffe/util/device_alternate.hpp"

@Namespace("caffe") @NoOffset public static class Timer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Timer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Timer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Timer position(long position) {
        return (Timer)super.position(position);
    }

  public Timer() { super((Pointer)null); allocate(); }
  private native void allocate();
  public native void Start();
  public native void Stop();
  public native float MilliSeconds();
  public native float MicroSeconds();
  public native float Seconds();

  public native @Cast("bool") boolean initted();
  public native @Cast("bool") boolean running();
  public native @Cast("bool") boolean has_run_at_least_once();
}

@Namespace("caffe") public static class CPUTimer extends Timer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CPUTimer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CPUTimer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public CPUTimer position(long position) {
        return (CPUTimer)super.position(position);
    }

  public CPUTimer() { super((Pointer)null); allocate(); }
  private native void allocate();
  public native void Start();
  public native void Stop();
  public native float MilliSeconds();
  public native float MicroSeconds();
}

  // namespace caffe

// #endif   // CAFFE_UTIL_BENCHMARK_H_


// Parsed from caffe/util/db.hpp

// #ifndef CAFFE_UTIL_DB_HPP
// #define CAFFE_UTIL_DB_HPP

// #include <string>

// #include "caffe/common.hpp"
// #include "caffe/proto/caffe.pb.h"

/** enum caffe::db::Mode */
public static final int READ = 0, WRITE = 1, NEW = 2;

@Namespace("caffe::db") public static class Cursor extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Cursor(Pointer p) { super(p); }

  public native void SeekToFirst();
  public native void Next();
  public native @StdString BytePointer key();
  public native @StdString BytePointer value();
  public native @Cast("bool") boolean valid();
}

@Namespace("caffe::db") public static class Transaction extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Transaction(Pointer p) { super(p); }

  public native void Put(@StdString BytePointer key, @StdString BytePointer value);
  public native void Put(@StdString String key, @StdString String value);
  public native void Commit();
}

@Namespace("caffe::db") public static class DB extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DB(Pointer p) { super(p); }

  public native void Open(@StdString BytePointer source, @Cast("caffe::db::Mode") int mode);
  public native void Open(@StdString String source, @Cast("caffe::db::Mode") int mode);
  public native void Close();
  public native Cursor NewCursor();
  public native Transaction NewTransaction();
}

@Namespace("caffe::db") public static native DB GetDB(@Cast("caffe::DataParameter::DB") int backend);
@Namespace("caffe::db") public static native DB GetDB(@StdString BytePointer backend);
@Namespace("caffe::db") public static native DB GetDB(@StdString String backend);

  // namespace db
  // namespace caffe

// #endif  // CAFFE_UTIL_DB_HPP


// Parsed from caffe/util/db_leveldb.hpp

// #ifdef USE_LEVELDB
// #ifndef CAFFE_UTIL_DB_LEVELDB_HPP
// #define CAFFE_UTIL_DB_LEVELDB_HPP

// #include <string>

// #include "leveldb/db.h"
// #include "leveldb/write_batch.h"

// #include "caffe/util/db.hpp"

@Namespace("caffe::db") @NoOffset public static class LevelDBCursor extends Cursor {
    static { Loader.load(); }

  public LevelDBCursor(@Cast("leveldb::Iterator*") Pointer iter) { super((Pointer)null); allocate(iter); }
  private native void allocate(@Cast("leveldb::Iterator*") Pointer iter);
  public native void SeekToFirst();
  public native void Next();
  public native @StdString BytePointer key();
  public native @StdString BytePointer value();
  public native @Cast("bool") boolean valid();
}

@Namespace("caffe::db") @NoOffset public static class LevelDBTransaction extends Transaction {
    static { Loader.load(); }

  public LevelDBTransaction(@Cast("leveldb::DB*") Pointer db) { super((Pointer)null); allocate(db); }
  private native void allocate(@Cast("leveldb::DB*") Pointer db);
  public native void Put(@StdString BytePointer key, @StdString BytePointer value);
  public native void Put(@StdString String key, @StdString String value);
  public native void Commit();
}

@Namespace("caffe::db") @NoOffset public static class LevelDB extends DB {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LevelDB(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LevelDB(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LevelDB position(long position) {
        return (LevelDB)super.position(position);
    }

  public LevelDB() { super((Pointer)null); allocate(); }
  private native void allocate();
  public native void Open(@StdString BytePointer source, @Cast("caffe::db::Mode") int mode);
  public native void Open(@StdString String source, @Cast("caffe::db::Mode") int mode);
  public native void Close();
  public native LevelDBCursor NewCursor();
  public native LevelDBTransaction NewTransaction();
}


  // namespace db
  // namespace caffe

// #endif  // CAFFE_UTIL_DB_LEVELDB_HPP
// #endif  // USE_LEVELDB


// Parsed from caffe/util/db_lmdb.hpp

// #ifdef USE_LMDB
// #ifndef CAFFE_UTIL_DB_LMDB_HPP
// #define CAFFE_UTIL_DB_LMDB_HPP

// #include <string>
// #include <vector>

// #include "lmdb.h"

// #include "caffe/util/db.hpp"

@Namespace("caffe::db") public static native void MDB_CHECK(int mdb_status);

@Namespace("caffe::db") @NoOffset public static class LMDBCursor extends Cursor {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LMDBCursor(Pointer p) { super(p); }

  public LMDBCursor(@Cast("MDB_txn*") Pointer mdb_txn, @Cast("MDB_cursor*") Pointer mdb_cursor) { super((Pointer)null); allocate(mdb_txn, mdb_cursor); }
  private native void allocate(@Cast("MDB_txn*") Pointer mdb_txn, @Cast("MDB_cursor*") Pointer mdb_cursor);
  public native void SeekToFirst();
  public native void Next();
  public native @StdString BytePointer key();
  public native @StdString BytePointer value();
  public native @Cast("bool") boolean valid();
}

@Namespace("caffe::db") @NoOffset public static class LMDBTransaction extends Transaction {
    static { Loader.load(); }

  public LMDBTransaction(@Cast("MDB_env*") Pointer mdb_env) { super((Pointer)null); allocate(mdb_env); }
  private native void allocate(@Cast("MDB_env*") Pointer mdb_env);
  public native void Put(@StdString BytePointer key, @StdString BytePointer value);
  public native void Put(@StdString String key, @StdString String value);
  public native void Commit();
}

@Namespace("caffe::db") @NoOffset public static class LMDB extends DB {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LMDB(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LMDB(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public LMDB position(long position) {
        return (LMDB)super.position(position);
    }

  public LMDB() { super((Pointer)null); allocate(); }
  private native void allocate();
  public native void Open(@StdString BytePointer source, @Cast("caffe::db::Mode") int mode);
  public native void Open(@StdString String source, @Cast("caffe::db::Mode") int mode);
  public native void Close();
  public native LMDBCursor NewCursor();
  public native LMDBTransaction NewTransaction();
}

  // namespace db
  // namespace caffe

// #endif  // CAFFE_UTIL_DB_LMDB_HPP
// #endif  // USE_LMDB


// Parsed from caffe/util/io.hpp

// #ifndef CAFFE_UTIL_IO_H_
// #define CAFFE_UTIL_IO_H_

// #include <boost/filesystem.hpp>
// #include <iomanip>
// #include <iostream>  // NOLINT(readability/streams)
// #include <string>

// #include "google/protobuf/message.h"

// #include "caffe/common.hpp"
// #include "caffe/proto/caffe.pb.h"
// #include "caffe/util/format.hpp"

// #ifndef CAFFE_TMP_DIR_RETRIES
public static final int CAFFE_TMP_DIR_RETRIES = 100;
// #endif

@Namespace("caffe") public static native void MakeTempDir(@StdString @Cast({"char*", "std::string*"}) BytePointer temp_dirname);

@Namespace("caffe") public static native void MakeTempFilename(@StdString @Cast({"char*", "std::string*"}) BytePointer temp_filename);

@Namespace("caffe") public static native @Cast("bool") boolean ReadProtoFromTextFile(@Cast("const char*") BytePointer filename, Message proto);
@Namespace("caffe") public static native @Cast("bool") boolean ReadProtoFromTextFile(String filename, Message proto);

@Namespace("caffe") public static native void ReadProtoFromTextFileOrDie(@Cast("const char*") BytePointer filename, Message proto);
@Namespace("caffe") public static native void ReadProtoFromTextFileOrDie(String filename, Message proto);

@Namespace("caffe") public static native void WriteProtoToTextFile(@Const @ByRef Message proto, @Cast("const char*") BytePointer filename);
@Namespace("caffe") public static native void WriteProtoToTextFile(@Const @ByRef Message proto, String filename);

@Namespace("caffe") public static native @Cast("bool") boolean ReadProtoFromBinaryFile(@Cast("const char*") BytePointer filename, Message proto);
@Namespace("caffe") public static native @Cast("bool") boolean ReadProtoFromBinaryFile(String filename, Message proto);

@Namespace("caffe") public static native void ReadProtoFromBinaryFileOrDie(@Cast("const char*") BytePointer filename, Message proto);
@Namespace("caffe") public static native void ReadProtoFromBinaryFileOrDie(String filename, Message proto);


@Namespace("caffe") public static native void WriteProtoToBinaryFile(@Const @ByRef Message proto, @Cast("const char*") BytePointer filename);
@Namespace("caffe") public static native void WriteProtoToBinaryFile(@Const @ByRef Message proto, String filename);

@Namespace("caffe") public static native @Cast("bool") boolean ReadFileToDatum(@StdString BytePointer filename, int label, Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean ReadFileToDatum(@StdString String filename, int label, Datum datum);

@Namespace("caffe") public static native @Cast("bool") boolean ReadFileToDatum(@StdString BytePointer filename, Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean ReadFileToDatum(@StdString String filename, Datum datum);

@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString BytePointer filename, int label,
    int height, int width, @Cast("const bool") boolean is_color,
    @StdString BytePointer encoding, Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString String filename, int label,
    int height, int width, @Cast("const bool") boolean is_color,
    @StdString String encoding, Datum datum);

@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString BytePointer filename, int label,
    int height, int width, @Cast("const bool") boolean is_color, Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString String filename, int label,
    int height, int width, @Cast("const bool") boolean is_color, Datum datum);

@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString BytePointer filename, int label,
    int height, int width, Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString String filename, int label,
    int height, int width, Datum datum);

@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString BytePointer filename, int label,
    @Cast("const bool") boolean is_color, Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString String filename, int label,
    @Cast("const bool") boolean is_color, Datum datum);

@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString BytePointer filename, int label,
    Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString String filename, int label,
    Datum datum);

@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString BytePointer filename, int label,
    @StdString BytePointer encoding, Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean ReadImageToDatum(@StdString String filename, int label,
    @StdString String encoding, Datum datum);

@Namespace("caffe") public static native @Cast("bool") boolean DecodeDatumNative(Datum datum);
@Namespace("caffe") public static native @Cast("bool") boolean DecodeDatum(Datum datum, @Cast("bool") boolean is_color);

// #ifdef USE_OPENCV
@Namespace("caffe") public static native @ByVal Mat ReadImageToCVMat(@StdString BytePointer filename,
    int height, int width, @Cast("const bool") boolean is_color);
@Namespace("caffe") public static native @ByVal Mat ReadImageToCVMat(@StdString String filename,
    int height, int width, @Cast("const bool") boolean is_color);

@Namespace("caffe") public static native @ByVal Mat ReadImageToCVMat(@StdString BytePointer filename,
    int height, int width);
@Namespace("caffe") public static native @ByVal Mat ReadImageToCVMat(@StdString String filename,
    int height, int width);

@Namespace("caffe") public static native @ByVal Mat ReadImageToCVMat(@StdString BytePointer filename,
    @Cast("const bool") boolean is_color);
@Namespace("caffe") public static native @ByVal Mat ReadImageToCVMat(@StdString String filename,
    @Cast("const bool") boolean is_color);

@Namespace("caffe") public static native @ByVal Mat ReadImageToCVMat(@StdString BytePointer filename);
@Namespace("caffe") public static native @ByVal Mat ReadImageToCVMat(@StdString String filename);

@Namespace("caffe") public static native @ByVal Mat DecodeDatumToCVMatNative(@Const @ByRef Datum datum);
@Namespace("caffe") public static native @ByVal Mat DecodeDatumToCVMat(@Const @ByRef Datum datum, @Cast("bool") boolean is_color);

@Namespace("caffe") public static native void CVMatToDatum(@Const @ByRef Mat cv_img, Datum datum);
// #endif  // USE_OPENCV

  // namespace caffe

// #endif   // CAFFE_UTIL_IO_H_


// Parsed from caffe/util/rng.hpp

// #ifndef CAFFE_RNG_CPP_HPP_
// #define CAFFE_RNG_CPP_HPP_

// #include <algorithm>
// #include <iterator>

// #include "boost/random/mersenne_twister.hpp"
// #include "boost/random/uniform_int.hpp"

// #include "caffe/common.hpp"

@Namespace("caffe") public static native @Cast("caffe::rng_t*") Pointer caffe_rng();

// Fisher–Yates algorithm
  // namespace caffe

// #endif  // CAFFE_RNG_HPP_


// Parsed from caffe/util/im2col.hpp

// #ifndef _CAFFE_UTIL_IM2COL_HPP_
// #define _CAFFE_UTIL_IM2COL_HPP_

@Namespace("caffe") public static native @Name("im2col_nd_cpu<float>") void im2col_nd_cpu_float(@Const FloatPointer data_im, int num_spatial_axes,
    @Const IntPointer im_shape, @Const IntPointer col_shape,
    @Const IntPointer kernel_shape, @Const IntPointer pad, @Const IntPointer stride,
    @Const IntPointer dilation, FloatPointer data_col);
@Namespace("caffe") public static native @Name("im2col_nd_cpu<float>") void im2col_nd_cpu_float(@Const FloatBuffer data_im, int num_spatial_axes,
    @Const IntBuffer im_shape, @Const IntBuffer col_shape,
    @Const IntBuffer kernel_shape, @Const IntBuffer pad, @Const IntBuffer stride,
    @Const IntBuffer dilation, FloatBuffer data_col);
@Namespace("caffe") public static native @Name("im2col_nd_cpu<float>") void im2col_nd_cpu_float(@Const float[] data_im, int num_spatial_axes,
    @Const int[] im_shape, @Const int[] col_shape,
    @Const int[] kernel_shape, @Const int[] pad, @Const int[] stride,
    @Const int[] dilation, float[] data_col);

@Namespace("caffe") public static native @Name("im2col_nd_cpu<double>") void im2col_nd_cpu_double(@Const DoublePointer data_im, int num_spatial_axes,
    @Const IntPointer im_shape, @Const IntPointer col_shape,
    @Const IntPointer kernel_shape, @Const IntPointer pad, @Const IntPointer stride,
    @Const IntPointer dilation, DoublePointer data_col);
@Namespace("caffe") public static native @Name("im2col_nd_cpu<double>") void im2col_nd_cpu_double(@Const DoubleBuffer data_im, int num_spatial_axes,
    @Const IntBuffer im_shape, @Const IntBuffer col_shape,
    @Const IntBuffer kernel_shape, @Const IntBuffer pad, @Const IntBuffer stride,
    @Const IntBuffer dilation, DoubleBuffer data_col);
@Namespace("caffe") public static native @Name("im2col_nd_cpu<double>") void im2col_nd_cpu_double(@Const double[] data_im, int num_spatial_axes,
    @Const int[] im_shape, @Const int[] col_shape,
    @Const int[] kernel_shape, @Const int[] pad, @Const int[] stride,
    @Const int[] dilation, double[] data_col);

@Namespace("caffe") public static native @Name("im2col_cpu<float>") void im2col_cpu_float(@Const FloatPointer data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    FloatPointer data_col);
@Namespace("caffe") public static native @Name("im2col_cpu<float>") void im2col_cpu_float(@Const FloatBuffer data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    FloatBuffer data_col);
@Namespace("caffe") public static native @Name("im2col_cpu<float>") void im2col_cpu_float(@Const float[] data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    float[] data_col);

@Namespace("caffe") public static native @Name("im2col_cpu<double>") void im2col_cpu_double(@Const DoublePointer data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    DoublePointer data_col);
@Namespace("caffe") public static native @Name("im2col_cpu<double>") void im2col_cpu_double(@Const DoubleBuffer data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    DoubleBuffer data_col);
@Namespace("caffe") public static native @Name("im2col_cpu<double>") void im2col_cpu_double(@Const double[] data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    double[] data_col);

@Namespace("caffe") public static native @Name("col2im_nd_cpu<float>") void col2im_nd_cpu_float(@Const FloatPointer data_col, int num_spatial_axes,
    @Const IntPointer im_shape, @Const IntPointer col_shape,
    @Const IntPointer kernel_shape, @Const IntPointer pad, @Const IntPointer stride,
    @Const IntPointer dilation, FloatPointer data_im);
@Namespace("caffe") public static native @Name("col2im_nd_cpu<float>") void col2im_nd_cpu_float(@Const FloatBuffer data_col, int num_spatial_axes,
    @Const IntBuffer im_shape, @Const IntBuffer col_shape,
    @Const IntBuffer kernel_shape, @Const IntBuffer pad, @Const IntBuffer stride,
    @Const IntBuffer dilation, FloatBuffer data_im);
@Namespace("caffe") public static native @Name("col2im_nd_cpu<float>") void col2im_nd_cpu_float(@Const float[] data_col, int num_spatial_axes,
    @Const int[] im_shape, @Const int[] col_shape,
    @Const int[] kernel_shape, @Const int[] pad, @Const int[] stride,
    @Const int[] dilation, float[] data_im);

@Namespace("caffe") public static native @Name("col2im_nd_cpu<double>") void col2im_nd_cpu_double(@Const DoublePointer data_col, int num_spatial_axes,
    @Const IntPointer im_shape, @Const IntPointer col_shape,
    @Const IntPointer kernel_shape, @Const IntPointer pad, @Const IntPointer stride,
    @Const IntPointer dilation, DoublePointer data_im);
@Namespace("caffe") public static native @Name("col2im_nd_cpu<double>") void col2im_nd_cpu_double(@Const DoubleBuffer data_col, int num_spatial_axes,
    @Const IntBuffer im_shape, @Const IntBuffer col_shape,
    @Const IntBuffer kernel_shape, @Const IntBuffer pad, @Const IntBuffer stride,
    @Const IntBuffer dilation, DoubleBuffer data_im);
@Namespace("caffe") public static native @Name("col2im_nd_cpu<double>") void col2im_nd_cpu_double(@Const double[] data_col, int num_spatial_axes,
    @Const int[] im_shape, @Const int[] col_shape,
    @Const int[] kernel_shape, @Const int[] pad, @Const int[] stride,
    @Const int[] dilation, double[] data_im);

@Namespace("caffe") public static native @Name("col2im_cpu<float>") void col2im_cpu_float(@Const FloatPointer data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    FloatPointer data_im);
@Namespace("caffe") public static native @Name("col2im_cpu<float>") void col2im_cpu_float(@Const FloatBuffer data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    FloatBuffer data_im);
@Namespace("caffe") public static native @Name("col2im_cpu<float>") void col2im_cpu_float(@Const float[] data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    float[] data_im);

@Namespace("caffe") public static native @Name("col2im_cpu<double>") void col2im_cpu_double(@Const DoublePointer data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    DoublePointer data_im);
@Namespace("caffe") public static native @Name("col2im_cpu<double>") void col2im_cpu_double(@Const DoubleBuffer data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    DoubleBuffer data_im);
@Namespace("caffe") public static native @Name("col2im_cpu<double>") void col2im_cpu_double(@Const double[] data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    double[] data_im);

@Namespace("caffe") public static native @Name("im2col_nd_gpu<float>") void im2col_nd_gpu_float(@Const FloatPointer data_im, int num_spatial_axes,
    int col_size, @Const IntPointer im_shape, @Const IntPointer col_shape,
    @Const IntPointer kernel_shape, @Const IntPointer pad, @Const IntPointer stride,
    @Const IntPointer dilation, FloatPointer data_col);
@Namespace("caffe") public static native @Name("im2col_nd_gpu<float>") void im2col_nd_gpu_float(@Const FloatBuffer data_im, int num_spatial_axes,
    int col_size, @Const IntBuffer im_shape, @Const IntBuffer col_shape,
    @Const IntBuffer kernel_shape, @Const IntBuffer pad, @Const IntBuffer stride,
    @Const IntBuffer dilation, FloatBuffer data_col);
@Namespace("caffe") public static native @Name("im2col_nd_gpu<float>") void im2col_nd_gpu_float(@Const float[] data_im, int num_spatial_axes,
    int col_size, @Const int[] im_shape, @Const int[] col_shape,
    @Const int[] kernel_shape, @Const int[] pad, @Const int[] stride,
    @Const int[] dilation, float[] data_col);

@Namespace("caffe") public static native @Name("im2col_nd_gpu<double>") void im2col_nd_gpu_double(@Const DoublePointer data_im, int num_spatial_axes,
    int col_size, @Const IntPointer im_shape, @Const IntPointer col_shape,
    @Const IntPointer kernel_shape, @Const IntPointer pad, @Const IntPointer stride,
    @Const IntPointer dilation, DoublePointer data_col);
@Namespace("caffe") public static native @Name("im2col_nd_gpu<double>") void im2col_nd_gpu_double(@Const DoubleBuffer data_im, int num_spatial_axes,
    int col_size, @Const IntBuffer im_shape, @Const IntBuffer col_shape,
    @Const IntBuffer kernel_shape, @Const IntBuffer pad, @Const IntBuffer stride,
    @Const IntBuffer dilation, DoubleBuffer data_col);
@Namespace("caffe") public static native @Name("im2col_nd_gpu<double>") void im2col_nd_gpu_double(@Const double[] data_im, int num_spatial_axes,
    int col_size, @Const int[] im_shape, @Const int[] col_shape,
    @Const int[] kernel_shape, @Const int[] pad, @Const int[] stride,
    @Const int[] dilation, double[] data_col);

@Namespace("caffe") public static native @Name("im2col_gpu<float>") void im2col_gpu_float(@Const FloatPointer data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    FloatPointer data_col);
@Namespace("caffe") public static native @Name("im2col_gpu<float>") void im2col_gpu_float(@Const FloatBuffer data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    FloatBuffer data_col);
@Namespace("caffe") public static native @Name("im2col_gpu<float>") void im2col_gpu_float(@Const float[] data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    float[] data_col);

@Namespace("caffe") public static native @Name("im2col_gpu<double>") void im2col_gpu_double(@Const DoublePointer data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    DoublePointer data_col);
@Namespace("caffe") public static native @Name("im2col_gpu<double>") void im2col_gpu_double(@Const DoubleBuffer data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    DoubleBuffer data_col);
@Namespace("caffe") public static native @Name("im2col_gpu<double>") void im2col_gpu_double(@Const double[] data_im, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    double[] data_col);

@Namespace("caffe") public static native @Name("col2im_nd_gpu<float>") void col2im_nd_gpu_float(@Const FloatPointer data_col, int num_spatial_axes,
    int im_size, @Const IntPointer im_shape, @Const IntPointer col_shape,
    @Const IntPointer kernel_shape, @Const IntPointer pad, @Const IntPointer stride,
    @Const IntPointer dilation, FloatPointer data_im);
@Namespace("caffe") public static native @Name("col2im_nd_gpu<float>") void col2im_nd_gpu_float(@Const FloatBuffer data_col, int num_spatial_axes,
    int im_size, @Const IntBuffer im_shape, @Const IntBuffer col_shape,
    @Const IntBuffer kernel_shape, @Const IntBuffer pad, @Const IntBuffer stride,
    @Const IntBuffer dilation, FloatBuffer data_im);
@Namespace("caffe") public static native @Name("col2im_nd_gpu<float>") void col2im_nd_gpu_float(@Const float[] data_col, int num_spatial_axes,
    int im_size, @Const int[] im_shape, @Const int[] col_shape,
    @Const int[] kernel_shape, @Const int[] pad, @Const int[] stride,
    @Const int[] dilation, float[] data_im);

@Namespace("caffe") public static native @Name("col2im_nd_gpu<double>") void col2im_nd_gpu_double(@Const DoublePointer data_col, int num_spatial_axes,
    int im_size, @Const IntPointer im_shape, @Const IntPointer col_shape,
    @Const IntPointer kernel_shape, @Const IntPointer pad, @Const IntPointer stride,
    @Const IntPointer dilation, DoublePointer data_im);
@Namespace("caffe") public static native @Name("col2im_nd_gpu<double>") void col2im_nd_gpu_double(@Const DoubleBuffer data_col, int num_spatial_axes,
    int im_size, @Const IntBuffer im_shape, @Const IntBuffer col_shape,
    @Const IntBuffer kernel_shape, @Const IntBuffer pad, @Const IntBuffer stride,
    @Const IntBuffer dilation, DoubleBuffer data_im);
@Namespace("caffe") public static native @Name("col2im_nd_gpu<double>") void col2im_nd_gpu_double(@Const double[] data_col, int num_spatial_axes,
    int im_size, @Const int[] im_shape, @Const int[] col_shape,
    @Const int[] kernel_shape, @Const int[] pad, @Const int[] stride,
    @Const int[] dilation, double[] data_im);

@Namespace("caffe") public static native @Name("col2im_gpu<float>") void col2im_gpu_float(@Const FloatPointer data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    FloatPointer data_im);
@Namespace("caffe") public static native @Name("col2im_gpu<float>") void col2im_gpu_float(@Const FloatBuffer data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    FloatBuffer data_im);
@Namespace("caffe") public static native @Name("col2im_gpu<float>") void col2im_gpu_float(@Const float[] data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    float[] data_im);

@Namespace("caffe") public static native @Name("col2im_gpu<double>") void col2im_gpu_double(@Const DoublePointer data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    DoublePointer data_im);
@Namespace("caffe") public static native @Name("col2im_gpu<double>") void col2im_gpu_double(@Const DoubleBuffer data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    DoubleBuffer data_im);
@Namespace("caffe") public static native @Name("col2im_gpu<double>") void col2im_gpu_double(@Const double[] data_col, int channels,
    int height, int width, int kernel_h, int kernel_w,
    int pad_h, int pad_w, int stride_h,
    int stride_w, int dilation_h, int dilation_w,
    double[] data_im);

  // namespace caffe

// #endif  // CAFFE_UTIL_IM2COL_HPP_


// Parsed from caffe/util/insert_splits.hpp

// #ifndef _CAFFE_UTIL_INSERT_SPLITS_HPP_
// #define _CAFFE_UTIL_INSERT_SPLITS_HPP_

// #include <string>

// #include "caffe/proto/caffe.pb.h"

// Copy NetParameters with SplitLayers added to replace any shared bottom
// blobs with unique bottom blobs provided by the SplitLayer.
@Namespace("caffe") public static native void InsertSplits(@Const @ByRef NetParameter param, NetParameter param_split);

@Namespace("caffe") public static native void ConfigureSplitLayer(@StdString BytePointer layer_name, @StdString BytePointer blob_name,
    int blob_idx, int split_count, float loss_weight,
    LayerParameter split_layer_param);
@Namespace("caffe") public static native void ConfigureSplitLayer(@StdString String layer_name, @StdString String blob_name,
    int blob_idx, int split_count, float loss_weight,
    LayerParameter split_layer_param);

@Namespace("caffe") public static native @StdString BytePointer SplitLayerName(@StdString BytePointer layer_name, @StdString BytePointer blob_name,
    int blob_idx);
@Namespace("caffe") public static native @StdString String SplitLayerName(@StdString String layer_name, @StdString String blob_name,
    int blob_idx);

@Namespace("caffe") public static native @StdString BytePointer SplitBlobName(@StdString BytePointer layer_name, @StdString BytePointer blob_name,
    int blob_idx, int split_idx);
@Namespace("caffe") public static native @StdString String SplitBlobName(@StdString String layer_name, @StdString String blob_name,
    int blob_idx, int split_idx);

  // namespace caffe

// #endif  // CAFFE_UTIL_INSERT_SPLITS_HPP_


// Parsed from caffe/util/mkl_alternate.hpp

// #ifndef CAFFE_UTIL_MKL_ALTERNATE_H_
// #define CAFFE_UTIL_MKL_ALTERNATE_H_

// #ifdef USE_MKL

// #include <mkl.h>

// #else  // If use MKL, simply include the MKL header

// #ifdef USE_ACCELERATE
// #include <Accelerate/Accelerate.h>
// #else
// #include <cblas.h>
// #endif  // USE_ACCELERATE

// #include <math.h>

// Functions that caffe uses but are not present if MKL is not linked.

// A simple way to define the vsl unary functions. The operation should
// be in the form e.g. y[i] = sqrt(a[i])
// #define DEFINE_VSL_UNARY_FUNC(name, operation)
//   template<typename Dtype>
//   void v##name(const int n, const Dtype* a, Dtype* y) {
//     CHECK_GT(n, 0); CHECK(a); CHECK(y);
//     for (int i = 0; i < n; ++i) { operation; }
//   }
//   inline void vs##name(
//     const int n, const float* a, float* y) {
//     v##name<float>(n, a, y);
//   }
//   inline void vd##name(
//       const int n, const double* a, double* y) {
//     v##name<double>(n, a, y);
//   }
  public static native void vsSqr(
      int n, @Const FloatPointer a, FloatPointer y);
  public static native void vsSqr(
      int n, @Const FloatBuffer a, FloatBuffer y);
  public static native void vsSqr(
      int n, @Const float[] a, float[] y);
  public static native void vdSqr(
        int n, @Const DoublePointer a, DoublePointer y);
  public static native void vdSqr(
        int n, @Const DoubleBuffer a, DoubleBuffer y);
  public static native void vdSqr(
        int n, @Const double[] a, double[] y);
  public static native void vsSqrt(
      int n, @Const FloatPointer a, FloatPointer y);
  public static native void vsSqrt(
      int n, @Const FloatBuffer a, FloatBuffer y);
  public static native void vsSqrt(
      int n, @Const float[] a, float[] y);
  public static native void vdSqrt(
        int n, @Const DoublePointer a, DoublePointer y);
  public static native void vdSqrt(
        int n, @Const DoubleBuffer a, DoubleBuffer y);
  public static native void vdSqrt(
        int n, @Const double[] a, double[] y);
  public static native void vsExp(
      int n, @Const FloatPointer a, FloatPointer y);
  public static native void vsExp(
      int n, @Const FloatBuffer a, FloatBuffer y);
  public static native void vsExp(
      int n, @Const float[] a, float[] y);
  public static native void vdExp(
        int n, @Const DoublePointer a, DoublePointer y);
  public static native void vdExp(
        int n, @Const DoubleBuffer a, DoubleBuffer y);
  public static native void vdExp(
        int n, @Const double[] a, double[] y);
  public static native void vsLn(
      int n, @Const FloatPointer a, FloatPointer y);
  public static native void vsLn(
      int n, @Const FloatBuffer a, FloatBuffer y);
  public static native void vsLn(
      int n, @Const float[] a, float[] y);
  public static native void vdLn(
        int n, @Const DoublePointer a, DoublePointer y);
  public static native void vdLn(
        int n, @Const DoubleBuffer a, DoubleBuffer y);
  public static native void vdLn(
        int n, @Const double[] a, double[] y);
  public static native void vsAbs(
      int n, @Const FloatPointer a, FloatPointer y);
  public static native void vsAbs(
      int n, @Const FloatBuffer a, FloatBuffer y);
  public static native void vsAbs(
      int n, @Const float[] a, float[] y);
  public static native void vdAbs(
        int n, @Const DoublePointer a, DoublePointer y);
  public static native void vdAbs(
        int n, @Const DoubleBuffer a, DoubleBuffer y);
  public static native void vdAbs(
        int n, @Const double[] a, double[] y);

// A simple way to define the vsl unary functions with singular parameter b.
// The operation should be in the form e.g. y[i] = pow(a[i], b)
// #define DEFINE_VSL_UNARY_FUNC_WITH_PARAM(name, operation)
//   template<typename Dtype>
//   void v##name(const int n, const Dtype* a, const Dtype b, Dtype* y) {
//     CHECK_GT(n, 0); CHECK(a); CHECK(y);
//     for (int i = 0; i < n; ++i) { operation; }
//   }
//   inline void vs##name(
//     const int n, const float* a, const float b, float* y) {
//     v##name<float>(n, a, b, y);
//   }
//   inline void vd##name(
//       const int n, const double* a, const float b, double* y) {
//     v##name<double>(n, a, b, y);
//   }
  public static native void vsPowx(
      int n, @Const FloatPointer a, float b, FloatPointer y);
  public static native void vsPowx(
      int n, @Const FloatBuffer a, float b, FloatBuffer y);
  public static native void vsPowx(
      int n, @Const float[] a, float b, float[] y);
  public static native void vdPowx(
        int n, @Const DoublePointer a, float b, DoublePointer y);
  public static native void vdPowx(
        int n, @Const DoubleBuffer a, float b, DoubleBuffer y);
  public static native void vdPowx(
        int n, @Const double[] a, float b, double[] y);

// A simple way to define the vsl binary functions. The operation should
// be in the form e.g. y[i] = a[i] + b[i]
// #define DEFINE_VSL_BINARY_FUNC(name, operation)
//   template<typename Dtype>
//   void v##name(const int n, const Dtype* a, const Dtype* b, Dtype* y) {
//     CHECK_GT(n, 0); CHECK(a); CHECK(b); CHECK(y);
//     for (int i = 0; i < n; ++i) { operation; }
//   }
//   inline void vs##name(
//     const int n, const float* a, const float* b, float* y) {
//     v##name<float>(n, a, b, y);
//   }
//   inline void vd##name(
//       const int n, const double* a, const double* b, double* y) {
//     v##name<double>(n, a, b, y);
//   }
  public static native void vsAdd(
      int n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer y);
  public static native void vsAdd(
      int n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer y);
  public static native void vsAdd(
      int n, @Const float[] a, @Const float[] b, float[] y);
  public static native void vdAdd(
        int n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer y);
  public static native void vdAdd(
        int n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer y);
  public static native void vdAdd(
        int n, @Const double[] a, @Const double[] b, double[] y);
  public static native void vsSub(
      int n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer y);
  public static native void vsSub(
      int n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer y);
  public static native void vsSub(
      int n, @Const float[] a, @Const float[] b, float[] y);
  public static native void vdSub(
        int n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer y);
  public static native void vdSub(
        int n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer y);
  public static native void vdSub(
        int n, @Const double[] a, @Const double[] b, double[] y);
  public static native void vsMul(
      int n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer y);
  public static native void vsMul(
      int n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer y);
  public static native void vsMul(
      int n, @Const float[] a, @Const float[] b, float[] y);
  public static native void vdMul(
        int n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer y);
  public static native void vdMul(
        int n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer y);
  public static native void vdMul(
        int n, @Const double[] a, @Const double[] b, double[] y);
  public static native void vsDiv(
      int n, @Const FloatPointer a, @Const FloatPointer b, FloatPointer y);
  public static native void vsDiv(
      int n, @Const FloatBuffer a, @Const FloatBuffer b, FloatBuffer y);
  public static native void vsDiv(
      int n, @Const float[] a, @Const float[] b, float[] y);
  public static native void vdDiv(
        int n, @Const DoublePointer a, @Const DoublePointer b, DoublePointer y);
  public static native void vdDiv(
        int n, @Const DoubleBuffer a, @Const DoubleBuffer b, DoubleBuffer y);
  public static native void vdDiv(
        int n, @Const double[] a, @Const double[] b, double[] y);

// In addition, MKL comes with an additional function axpby that is not present
// in standard blas. We will simply use a two-step (inefficient, of course) way
// to mimic that.



// #endif  // USE_MKL
// #endif  // CAFFE_UTIL_MKL_ALTERNATE_H_


// Parsed from caffe/util/upgrade_proto.hpp

// #ifndef CAFFE_UTIL_UPGRADE_PROTO_H_
// #define CAFFE_UTIL_UPGRADE_PROTO_H_

// #include <string>

// #include "caffe/proto/caffe.pb.h"

// Return true iff the net is not the current version.
@Namespace("caffe") public static native @Cast("bool") boolean NetNeedsUpgrade(@Const @ByRef NetParameter net_param);

// Check for deprecations and upgrade the NetParameter as needed.
@Namespace("caffe") public static native @Cast("bool") boolean UpgradeNetAsNeeded(@StdString BytePointer param_file, NetParameter param);
@Namespace("caffe") public static native @Cast("bool") boolean UpgradeNetAsNeeded(@StdString String param_file, NetParameter param);

// Read parameters from a file into a NetParameter proto message.
@Namespace("caffe") public static native void ReadNetParamsFromTextFileOrDie(@StdString BytePointer param_file,
                                    NetParameter param);
@Namespace("caffe") public static native void ReadNetParamsFromTextFileOrDie(@StdString String param_file,
                                    NetParameter param);
@Namespace("caffe") public static native void ReadNetParamsFromBinaryFileOrDie(@StdString BytePointer param_file,
                                      NetParameter param);
@Namespace("caffe") public static native void ReadNetParamsFromBinaryFileOrDie(@StdString String param_file,
                                      NetParameter param);

// Return true iff any layer contains parameters specified using
// deprecated V0LayerParameter.
@Namespace("caffe") public static native @Cast("bool") boolean NetNeedsV0ToV1Upgrade(@Const @ByRef NetParameter net_param);

// Perform all necessary transformations to upgrade a V0NetParameter into a
// NetParameter (including upgrading padding layers and LayerParameters).
@Namespace("caffe") public static native @Cast("bool") boolean UpgradeV0Net(@Const @ByRef NetParameter v0_net_param, NetParameter net_param);

// Upgrade NetParameter with padding layers to pad-aware conv layers.
// For any padding layer, remove it and put its pad parameter in any layers
// taking its top blob as input.
// Error if any of these above layers are not-conv layers.
@Namespace("caffe") public static native void UpgradeV0PaddingLayers(@Const @ByRef NetParameter param,
                            NetParameter param_upgraded_pad);

// Upgrade a single V0LayerConnection to the V1LayerParameter format.
@Namespace("caffe") public static native @Cast("bool") boolean UpgradeV0LayerParameter(@Const @ByRef V1LayerParameter v0_layer_connection,
                             V1LayerParameter layer_param);

@Namespace("caffe") public static native @Cast("caffe::V1LayerParameter_LayerType") int UpgradeV0LayerType(@StdString BytePointer type);
@Namespace("caffe") public static native @Cast("caffe::V1LayerParameter_LayerType") int UpgradeV0LayerType(@StdString String type);

// Return true iff any layer contains deprecated data transformation parameters.
@Namespace("caffe") public static native @Cast("bool") boolean NetNeedsDataUpgrade(@Const @ByRef NetParameter net_param);

// Perform all necessary transformations to upgrade old transformation fields
// into a TransformationParameter.
@Namespace("caffe") public static native void UpgradeNetDataTransformation(NetParameter net_param);

// Return true iff the Net contains any layers specified as V1LayerParameters.
@Namespace("caffe") public static native @Cast("bool") boolean NetNeedsV1ToV2Upgrade(@Const @ByRef NetParameter net_param);

// Perform all necessary transformations to upgrade a NetParameter with
// deprecated V1LayerParameters.
@Namespace("caffe") public static native @Cast("bool") boolean UpgradeV1Net(@Const @ByRef NetParameter v1_net_param, NetParameter net_param);

@Namespace("caffe") public static native @Cast("bool") boolean UpgradeV1LayerParameter(@Const @ByRef V1LayerParameter v1_layer_param,
                             LayerParameter layer_param);

@Namespace("caffe") public static native @Cast("const char*") BytePointer UpgradeV1LayerType(@Cast("const caffe::V1LayerParameter_LayerType") int type);

// Return true iff the Net contains input fields.
@Namespace("caffe") public static native @Cast("bool") boolean NetNeedsInputUpgrade(@Const @ByRef NetParameter net_param);

// Perform all necessary transformations to upgrade input fields into layers.
@Namespace("caffe") public static native void UpgradeNetInput(NetParameter net_param);

// Return true iff the Net contains batch norm layers with manual local LRs.
@Namespace("caffe") public static native @Cast("bool") boolean NetNeedsBatchNormUpgrade(@Const @ByRef NetParameter net_param);

// Perform all necessary transformations to upgrade batch norm layers.
@Namespace("caffe") public static native void UpgradeNetBatchNorm(NetParameter net_param);

// Return true iff the solver contains any old solver_type specified as enums
@Namespace("caffe") public static native @Cast("bool") boolean SolverNeedsTypeUpgrade(@Const @ByRef SolverParameter solver_param);

@Namespace("caffe") public static native @Cast("bool") boolean UpgradeSolverType(SolverParameter solver_param);

// Check for deprecations and upgrade the SolverParameter as needed.
@Namespace("caffe") public static native @Cast("bool") boolean UpgradeSolverAsNeeded(@StdString BytePointer param_file, SolverParameter param);
@Namespace("caffe") public static native @Cast("bool") boolean UpgradeSolverAsNeeded(@StdString String param_file, SolverParameter param);

// Read parameters from a file into a SolverParameter proto message.
@Namespace("caffe") public static native void ReadSolverParamsFromTextFileOrDie(@StdString BytePointer param_file,
                                       SolverParameter param);
@Namespace("caffe") public static native void ReadSolverParamsFromTextFileOrDie(@StdString String param_file,
                                       SolverParameter param);

  // namespace caffe

// #endif   // CAFFE_UTIL_UPGRADE_PROTO_H_


}
