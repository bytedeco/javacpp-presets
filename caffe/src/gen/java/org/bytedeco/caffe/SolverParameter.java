// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.caffe;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import org.bytedeco.opencv.opencv_videoio.*;
import static org.bytedeco.opencv.global.opencv_videoio.*;
import org.bytedeco.opencv.opencv_highgui.*;
import static org.bytedeco.opencv.global.opencv_highgui.*;
import org.bytedeco.hdf5.*;
import static org.bytedeco.hdf5.global.hdf5.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.caffe.global.caffe.*;

// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset @Properties(inherit = org.bytedeco.caffe.presets.caffe.class)
public class SolverParameter extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SolverParameter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SolverParameter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SolverParameter position(long position) {
        return (SolverParameter)super.position(position);
    }

  public SolverParameter() { super((Pointer)null); allocate(); }
  private native void allocate();

  public SolverParameter(@Const @ByRef SolverParameter from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef SolverParameter from);

  public native @ByRef @Name("operator =") SolverParameter put(@Const @ByRef SolverParameter from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef SolverParameter default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const SolverParameter internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(SolverParameter other);
  

  // implements Message ----------------------------------------------

  public native final SolverParameter New();

  public native final SolverParameter New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef SolverParameter from);
  public native void MergeFrom(@Const @ByRef SolverParameter from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SnapshotFormat") int HDF5();
  public static final int HDF5 = HDF5();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SnapshotFormat") int BINARYPROTO();
  public static final int BINARYPROTO = BINARYPROTO();
  public static native @Cast("bool") boolean SnapshotFormat_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SnapshotFormat") int SnapshotFormat_MIN();
  public static final int SnapshotFormat_MIN = SnapshotFormat_MIN();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SnapshotFormat") int SnapshotFormat_MAX();
  public static final int SnapshotFormat_MAX = SnapshotFormat_MAX();
  @MemberGetter public static native int SnapshotFormat_ARRAYSIZE();
  public static final int SnapshotFormat_ARRAYSIZE = SnapshotFormat_ARRAYSIZE();
  public static native @Const EnumDescriptor SnapshotFormat_descriptor();
  public static native @StdString BytePointer SnapshotFormat_Name(@Cast("caffe::SolverParameter::SnapshotFormat") int value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") IntPointer value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") IntBuffer value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") int[] value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") IntPointer value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") IntBuffer value);
  public static native @Cast("bool") boolean SnapshotFormat_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SnapshotFormat*") int[] value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverMode") int CPU();
  public static final int CPU = CPU();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverMode") int GPU();
  public static final int GPU = GPU();
  public static native @Cast("bool") boolean SolverMode_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverMode") int SolverMode_MIN();
  public static final int SolverMode_MIN = SolverMode_MIN();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverMode") int SolverMode_MAX();
  public static final int SolverMode_MAX = SolverMode_MAX();
  @MemberGetter public static native int SolverMode_ARRAYSIZE();
  public static final int SolverMode_ARRAYSIZE = SolverMode_ARRAYSIZE();
  public static native @Const EnumDescriptor SolverMode_descriptor();
  public static native @StdString BytePointer SolverMode_Name(@Cast("caffe::SolverParameter::SolverMode") int value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverMode*") IntPointer value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverMode*") IntBuffer value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverMode*") int[] value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverMode*") IntPointer value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverMode*") IntBuffer value);
  public static native @Cast("bool") boolean SolverMode_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverMode*") int[] value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int SGD();
  public static final int SGD = SGD();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int NESTEROV();
  public static final int NESTEROV = NESTEROV();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int ADAGRAD();
  public static final int ADAGRAD = ADAGRAD();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int RMSPROP();
  public static final int RMSPROP = RMSPROP();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int ADADELTA();
  public static final int ADADELTA = ADADELTA();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int ADAM();
  public static final int ADAM = ADAM();
  public static native @Cast("bool") boolean SolverType_IsValid(int value);
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int SolverType_MIN();
  public static final int SolverType_MIN = SolverType_MIN();
  @MemberGetter public static native @Cast("const caffe::SolverParameter::SolverType") int SolverType_MAX();
  public static final int SolverType_MAX = SolverType_MAX();
  @MemberGetter public static native int SolverType_ARRAYSIZE();
  public static final int SolverType_ARRAYSIZE = SolverType_ARRAYSIZE();
  public static native @Const EnumDescriptor SolverType_descriptor();
  public static native @StdString BytePointer SolverType_Name(@Cast("caffe::SolverParameter::SolverType") int value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverType*") IntPointer value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverType*") IntBuffer value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverType*") int[] value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverType*") IntPointer value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString BytePointer name,
        @Cast("caffe::SolverParameter::SolverType*") IntBuffer value);
  public static native @Cast("bool") boolean SolverType_Parse(@StdString String name,
        @Cast("caffe::SolverParameter::SolverType*") int[] value);

  // accessors -------------------------------------------------------

  // repeated string test_net = 2;
  public native int test_net_size();
  public native void clear_test_net();
  @MemberGetter public static native int kTestNetFieldNumber();
  public static final int kTestNetFieldNumber = kTestNetFieldNumber();
  public native @StdString BytePointer test_net(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_test_net(int index);
  public native void set_test_net(int index, @StdString BytePointer value);
  public native void set_test_net(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_test_net(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_test_net(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_test_net();
  public native void add_test_net(@StdString BytePointer value);
  public native void add_test_net(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_test_net(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_test_net(String value, @Cast("size_t") long size);

  // repeated int32 test_iter = 3;
  public native int test_iter_size();
  public native void clear_test_iter();
  @MemberGetter public static native int kTestIterFieldNumber();
  public static final int kTestIterFieldNumber = kTestIterFieldNumber();
  public native @Cast("google::protobuf::int32") int test_iter(int index);
  public native void set_test_iter(int index, @Cast("google::protobuf::int32") int value);
  public native void add_test_iter(@Cast("google::protobuf::int32") int value);

  // repeated .caffe.NetParameter test_net_param = 22;
  public native int test_net_param_size();
  public native void clear_test_net_param();
  @MemberGetter public static native int kTestNetParamFieldNumber();
  public static final int kTestNetParamFieldNumber = kTestNetParamFieldNumber();
  public native NetParameter mutable_test_net_param(int index);
  public native @Const @ByRef NetParameter test_net_param(int index);
  public native NetParameter add_test_net_param();

  // repeated .caffe.NetState test_state = 27;
  public native int test_state_size();
  public native void clear_test_state();
  @MemberGetter public static native int kTestStateFieldNumber();
  public static final int kTestStateFieldNumber = kTestStateFieldNumber();
  public native NetState mutable_test_state(int index);
  public native @Const @ByRef NetState test_state(int index);
  public native NetState add_test_state();

  // repeated int32 stepvalue = 34;
  public native int stepvalue_size();
  public native void clear_stepvalue();
  @MemberGetter public static native int kStepvalueFieldNumber();
  public static final int kStepvalueFieldNumber = kStepvalueFieldNumber();
  public native @Cast("google::protobuf::int32") int stepvalue(int index);
  public native void set_stepvalue(int index, @Cast("google::protobuf::int32") int value);
  public native void add_stepvalue(@Cast("google::protobuf::int32") int value);

  // optional string train_net = 1;
  public native @Cast("bool") boolean has_train_net();
  public native void clear_train_net();
  @MemberGetter public static native int kTrainNetFieldNumber();
  public static final int kTrainNetFieldNumber = kTrainNetFieldNumber();
  public native @StdString BytePointer train_net();
  public native void set_train_net(@StdString BytePointer value);
  public native void set_train_net(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_train_net(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_train_net(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_train_net();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_train_net();
  public native void set_allocated_train_net(@StdString @Cast({"char*", "std::string*"}) BytePointer train_net);

  // optional string lr_policy = 8;
  public native @Cast("bool") boolean has_lr_policy();
  public native void clear_lr_policy();
  @MemberGetter public static native int kLrPolicyFieldNumber();
  public static final int kLrPolicyFieldNumber = kLrPolicyFieldNumber();
  public native @StdString BytePointer lr_policy();
  public native void set_lr_policy(@StdString BytePointer value);
  public native void set_lr_policy(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_lr_policy(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_lr_policy(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_lr_policy();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_lr_policy();
  public native void set_allocated_lr_policy(@StdString @Cast({"char*", "std::string*"}) BytePointer lr_policy);

  // optional string snapshot_prefix = 15;
  public native @Cast("bool") boolean has_snapshot_prefix();
  public native void clear_snapshot_prefix();
  @MemberGetter public static native int kSnapshotPrefixFieldNumber();
  public static final int kSnapshotPrefixFieldNumber = kSnapshotPrefixFieldNumber();
  public native @StdString BytePointer snapshot_prefix();
  public native void set_snapshot_prefix(@StdString BytePointer value);
  public native void set_snapshot_prefix(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_snapshot_prefix(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_snapshot_prefix(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_snapshot_prefix();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_snapshot_prefix();
  public native void set_allocated_snapshot_prefix(@StdString @Cast({"char*", "std::string*"}) BytePointer snapshot_prefix);

  // optional string net = 24;
  public native @Cast("bool") boolean has_net();
  public native void clear_net();
  @MemberGetter public static native int kNetFieldNumber();
  public static final int kNetFieldNumber = kNetFieldNumber();
  public native @StdString BytePointer net();
  public native void set_net(@StdString BytePointer value);
  public native void set_net(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_net(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_net(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_net();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_net();
  public native void set_allocated_net(@StdString @Cast({"char*", "std::string*"}) BytePointer net);

  // optional string regularization_type = 29 [default = "L2"];
  public native @Cast("bool") boolean has_regularization_type();
  public native void clear_regularization_type();
  @MemberGetter public static native int kRegularizationTypeFieldNumber();
  public static final int kRegularizationTypeFieldNumber = kRegularizationTypeFieldNumber();
  public native @StdString BytePointer regularization_type();
  public native void set_regularization_type(@StdString BytePointer value);
  public native void set_regularization_type(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_regularization_type(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_regularization_type(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_regularization_type();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_regularization_type();
  public native void set_allocated_regularization_type(@StdString @Cast({"char*", "std::string*"}) BytePointer regularization_type);

  // optional string type = 40 [default = "SGD"];
  public native @Cast("bool") boolean has_type();
  public native void clear_type();
  @MemberGetter public static native int kTypeFieldNumber();
  public static final int kTypeFieldNumber = kTypeFieldNumber();
  public native @StdString BytePointer type();
  public native void set_type(@StdString BytePointer value);
  public native void set_type(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_type(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_type(String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_type();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_type();
  public native void set_allocated_type(@StdString @Cast({"char*", "std::string*"}) BytePointer type);

  // optional .caffe.NetParameter train_net_param = 21;
  public native @Cast("bool") boolean has_train_net_param();
  public native void clear_train_net_param();
  @MemberGetter public static native int kTrainNetParamFieldNumber();
  public static final int kTrainNetParamFieldNumber = kTrainNetParamFieldNumber();
  public native @Const @ByRef NetParameter train_net_param();
  public native NetParameter release_train_net_param();
  public native NetParameter mutable_train_net_param();
  public native void set_allocated_train_net_param(NetParameter train_net_param);

  // optional .caffe.NetParameter net_param = 25;
  public native @Cast("bool") boolean has_net_param();
  public native void clear_net_param();
  @MemberGetter public static native int kNetParamFieldNumber();
  public static final int kNetParamFieldNumber = kNetParamFieldNumber();
  public native @Const @ByRef NetParameter net_param();
  public native NetParameter release_net_param();
  public native NetParameter mutable_net_param();
  public native void set_allocated_net_param(NetParameter net_param);

  // optional .caffe.NetState train_state = 26;
  public native @Cast("bool") boolean has_train_state();
  public native void clear_train_state();
  @MemberGetter public static native int kTrainStateFieldNumber();
  public static final int kTrainStateFieldNumber = kTrainStateFieldNumber();
  public native @Const @ByRef NetState train_state();
  public native NetState release_train_state();
  public native NetState mutable_train_state();
  public native void set_allocated_train_state(NetState train_state);

  // optional int32 test_interval = 4 [default = 0];
  public native @Cast("bool") boolean has_test_interval();
  public native void clear_test_interval();
  @MemberGetter public static native int kTestIntervalFieldNumber();
  public static final int kTestIntervalFieldNumber = kTestIntervalFieldNumber();
  public native @Cast("google::protobuf::int32") int test_interval();
  public native void set_test_interval(@Cast("google::protobuf::int32") int value);

  // optional float base_lr = 5;
  public native @Cast("bool") boolean has_base_lr();
  public native void clear_base_lr();
  @MemberGetter public static native int kBaseLrFieldNumber();
  public static final int kBaseLrFieldNumber = kBaseLrFieldNumber();
  public native float base_lr();
  public native void set_base_lr(float value);

  // optional int32 display = 6;
  public native @Cast("bool") boolean has_display();
  public native void clear_display();
  @MemberGetter public static native int kDisplayFieldNumber();
  public static final int kDisplayFieldNumber = kDisplayFieldNumber();
  public native @Cast("google::protobuf::int32") int display();
  public native void set_display(@Cast("google::protobuf::int32") int value);

  // optional int32 max_iter = 7;
  public native @Cast("bool") boolean has_max_iter();
  public native void clear_max_iter();
  @MemberGetter public static native int kMaxIterFieldNumber();
  public static final int kMaxIterFieldNumber = kMaxIterFieldNumber();
  public native @Cast("google::protobuf::int32") int max_iter();
  public native void set_max_iter(@Cast("google::protobuf::int32") int value);

  // optional float gamma = 9;
  public native @Cast("bool") boolean has_gamma();
  public native void clear_gamma();
  @MemberGetter public static native int kGammaFieldNumber();
  public static final int kGammaFieldNumber = kGammaFieldNumber();
  public native float gamma();
  public native void set_gamma(float value);

  // optional float power = 10;
  public native @Cast("bool") boolean has_power();
  public native void clear_power();
  @MemberGetter public static native int kPowerFieldNumber();
  public static final int kPowerFieldNumber = kPowerFieldNumber();
  public native float power();
  public native void set_power(float value);

  // optional float momentum = 11;
  public native @Cast("bool") boolean has_momentum();
  public native void clear_momentum();
  @MemberGetter public static native int kMomentumFieldNumber();
  public static final int kMomentumFieldNumber = kMomentumFieldNumber();
  public native float momentum();
  public native void set_momentum(float value);

  // optional float weight_decay = 12;
  public native @Cast("bool") boolean has_weight_decay();
  public native void clear_weight_decay();
  @MemberGetter public static native int kWeightDecayFieldNumber();
  public static final int kWeightDecayFieldNumber = kWeightDecayFieldNumber();
  public native float weight_decay();
  public native void set_weight_decay(float value);

  // optional int32 stepsize = 13;
  public native @Cast("bool") boolean has_stepsize();
  public native void clear_stepsize();
  @MemberGetter public static native int kStepsizeFieldNumber();
  public static final int kStepsizeFieldNumber = kStepsizeFieldNumber();
  public native @Cast("google::protobuf::int32") int stepsize();
  public native void set_stepsize(@Cast("google::protobuf::int32") int value);

  // optional int32 snapshot = 14 [default = 0];
  public native @Cast("bool") boolean has_snapshot();
  public native void clear_snapshot();
  @MemberGetter public static native int kSnapshotFieldNumber();
  public static final int kSnapshotFieldNumber = kSnapshotFieldNumber();
  public native @Cast("google::protobuf::int32") int snapshot();
  public native void set_snapshot(@Cast("google::protobuf::int32") int value);

  // optional int32 device_id = 18 [default = 0];
  public native @Cast("bool") boolean has_device_id();
  public native void clear_device_id();
  @MemberGetter public static native int kDeviceIdFieldNumber();
  public static final int kDeviceIdFieldNumber = kDeviceIdFieldNumber();
  public native @Cast("google::protobuf::int32") int device_id();
  public native void set_device_id(@Cast("google::protobuf::int32") int value);

  // optional bool test_compute_loss = 19 [default = false];
  public native @Cast("bool") boolean has_test_compute_loss();
  public native void clear_test_compute_loss();
  @MemberGetter public static native int kTestComputeLossFieldNumber();
  public static final int kTestComputeLossFieldNumber = kTestComputeLossFieldNumber();
  public native @Cast("bool") boolean test_compute_loss();
  public native void set_test_compute_loss(@Cast("bool") boolean value);

  // optional bool snapshot_diff = 16 [default = false];
  public native @Cast("bool") boolean has_snapshot_diff();
  public native void clear_snapshot_diff();
  @MemberGetter public static native int kSnapshotDiffFieldNumber();
  public static final int kSnapshotDiffFieldNumber = kSnapshotDiffFieldNumber();
  public native @Cast("bool") boolean snapshot_diff();
  public native void set_snapshot_diff(@Cast("bool") boolean value);

  // optional bool debug_info = 23 [default = false];
  public native @Cast("bool") boolean has_debug_info();
  public native void clear_debug_info();
  @MemberGetter public static native int kDebugInfoFieldNumber();
  public static final int kDebugInfoFieldNumber = kDebugInfoFieldNumber();
  public native @Cast("bool") boolean debug_info();
  public native void set_debug_info(@Cast("bool") boolean value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  public native @Cast("bool") boolean has_solver_type();
  public native void clear_solver_type();
  @MemberGetter public static native int kSolverTypeFieldNumber();
  public static final int kSolverTypeFieldNumber = kSolverTypeFieldNumber();
  public native @Cast("caffe::SolverParameter_SolverType") int solver_type();
  public native void set_solver_type(@Cast("caffe::SolverParameter_SolverType") int value);

  // optional float momentum2 = 39 [default = 0.999];
  public native @Cast("bool") boolean has_momentum2();
  public native void clear_momentum2();
  @MemberGetter public static native int kMomentum2FieldNumber();
  public static final int kMomentum2FieldNumber = kMomentum2FieldNumber();
  public native float momentum2();
  public native void set_momentum2(float value);

  // optional int64 random_seed = 20 [default = -1];
  public native @Cast("bool") boolean has_random_seed();
  public native void clear_random_seed();
  @MemberGetter public static native int kRandomSeedFieldNumber();
  public static final int kRandomSeedFieldNumber = kRandomSeedFieldNumber();
  public native @Cast("google::protobuf::int64") long random_seed();
  public native void set_random_seed(@Cast("google::protobuf::int64") long value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  public native @Cast("bool") boolean has_solver_mode();
  public native void clear_solver_mode();
  @MemberGetter public static native int kSolverModeFieldNumber();
  public static final int kSolverModeFieldNumber = kSolverModeFieldNumber();
  public native @Cast("caffe::SolverParameter_SolverMode") int solver_mode();
  public native void set_solver_mode(@Cast("caffe::SolverParameter_SolverMode") int value);

  // optional float delta = 31 [default = 1e-08];
  public native @Cast("bool") boolean has_delta();
  public native void clear_delta();
  @MemberGetter public static native int kDeltaFieldNumber();
  public static final int kDeltaFieldNumber = kDeltaFieldNumber();
  public native float delta();
  public native void set_delta(float value);

  // optional int32 average_loss = 33 [default = 1];
  public native @Cast("bool") boolean has_average_loss();
  public native void clear_average_loss();
  @MemberGetter public static native int kAverageLossFieldNumber();
  public static final int kAverageLossFieldNumber = kAverageLossFieldNumber();
  public native @Cast("google::protobuf::int32") int average_loss();
  public native void set_average_loss(@Cast("google::protobuf::int32") int value);

  // optional bool test_initialization = 32 [default = true];
  public native @Cast("bool") boolean has_test_initialization();
  public native void clear_test_initialization();
  @MemberGetter public static native int kTestInitializationFieldNumber();
  public static final int kTestInitializationFieldNumber = kTestInitializationFieldNumber();
  public native @Cast("bool") boolean test_initialization();
  public native void set_test_initialization(@Cast("bool") boolean value);

  // optional bool snapshot_after_train = 28 [default = true];
  public native @Cast("bool") boolean has_snapshot_after_train();
  public native void clear_snapshot_after_train();
  @MemberGetter public static native int kSnapshotAfterTrainFieldNumber();
  public static final int kSnapshotAfterTrainFieldNumber = kSnapshotAfterTrainFieldNumber();
  public native @Cast("bool") boolean snapshot_after_train();
  public native void set_snapshot_after_train(@Cast("bool") boolean value);

  // optional bool layer_wise_reduce = 41 [default = true];
  public native @Cast("bool") boolean has_layer_wise_reduce();
  public native void clear_layer_wise_reduce();
  @MemberGetter public static native int kLayerWiseReduceFieldNumber();
  public static final int kLayerWiseReduceFieldNumber = kLayerWiseReduceFieldNumber();
  public native @Cast("bool") boolean layer_wise_reduce();
  public native void set_layer_wise_reduce(@Cast("bool") boolean value);

  // optional float clip_gradients = 35 [default = -1];
  public native @Cast("bool") boolean has_clip_gradients();
  public native void clear_clip_gradients();
  @MemberGetter public static native int kClipGradientsFieldNumber();
  public static final int kClipGradientsFieldNumber = kClipGradientsFieldNumber();
  public native float clip_gradients();
  public native void set_clip_gradients(float value);

  // optional int32 iter_size = 36 [default = 1];
  public native @Cast("bool") boolean has_iter_size();
  public native void clear_iter_size();
  @MemberGetter public static native int kIterSizeFieldNumber();
  public static final int kIterSizeFieldNumber = kIterSizeFieldNumber();
  public native @Cast("google::protobuf::int32") int iter_size();
  public native void set_iter_size(@Cast("google::protobuf::int32") int value);

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  public native @Cast("bool") boolean has_snapshot_format();
  public native void clear_snapshot_format();
  @MemberGetter public static native int kSnapshotFormatFieldNumber();
  public static final int kSnapshotFormatFieldNumber = kSnapshotFormatFieldNumber();
  public native @Cast("caffe::SolverParameter_SnapshotFormat") int snapshot_format();
  public native void set_snapshot_format(@Cast("caffe::SolverParameter_SnapshotFormat") int value);

  // optional float rms_decay = 38 [default = 0.99];
  public native @Cast("bool") boolean has_rms_decay();
  public native void clear_rms_decay();
  @MemberGetter public static native int kRmsDecayFieldNumber();
  public static final int kRmsDecayFieldNumber = kRmsDecayFieldNumber();
  public native float rms_decay();
  public native void set_rms_decay(float value);
}
