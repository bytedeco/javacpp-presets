// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.caffe;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import org.bytedeco.opencv.opencv_videoio.*;
import static org.bytedeco.opencv.global.opencv_videoio.*;
import org.bytedeco.opencv.opencv_highgui.*;
import static org.bytedeco.opencv.global.opencv_highgui.*;
import org.bytedeco.hdf5.*;
import static org.bytedeco.hdf5.global.hdf5.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.caffe.global.caffe.*;



/**
 * \brief Manages memory allocation and synchronization between the host (CPU)
 *        and device (GPU).
 *
 * TODO(dox): more thorough description.
 */
@Namespace("caffe") @NoOffset @Properties(inherit = org.bytedeco.caffe.presets.caffe.class)
public class SyncedMemory extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SyncedMemory(Pointer p) { super(p); }

  public SyncedMemory() { super((Pointer)null); allocate(); }
  private native void allocate();
  public SyncedMemory(@Cast("size_t") long size) { super((Pointer)null); allocate(size); }
  private native void allocate(@Cast("size_t") long size);
  public native @Const Pointer cpu_data();
  public native void set_cpu_data(Pointer data);
  public native @Const Pointer gpu_data();
  public native void set_gpu_data(Pointer data);
  public native Pointer mutable_cpu_data();
  public native Pointer mutable_gpu_data();
  /** enum caffe::SyncedMemory::SyncedHead */
  public static final int UNINITIALIZED = 0, HEAD_AT_CPU = 1, HEAD_AT_GPU = 2, SYNCED = 3;
  public native @Cast("caffe::SyncedMemory::SyncedHead") int head();
  public native @Cast("size_t") long size();
}
