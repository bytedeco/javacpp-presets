// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.caffe;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import org.bytedeco.opencv.opencv_videoio.*;
import static org.bytedeco.opencv.global.opencv_videoio.*;
import org.bytedeco.opencv.opencv_highgui.*;
import static org.bytedeco.opencv.global.opencv_highgui.*;
import org.bytedeco.hdf5.*;
import static org.bytedeco.hdf5.global.hdf5.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.caffe.global.caffe.*;


@Namespace("google::protobuf::internal") @NoOffset @Properties(inherit = org.bytedeco.caffe.presets.caffe.class)
public class AuxillaryParseTableField extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AuxillaryParseTableField(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AuxillaryParseTableField(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public AuxillaryParseTableField position(long position) {
        return (AuxillaryParseTableField)super.position(position);
    }

  public static class EnumValidator extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    EnumValidator(Pointer p) { super(p); }
      protected EnumValidator() { allocate(); }
      private native void allocate();
      public native @Cast("bool") boolean call(int arg0);
  }

  // Enums
  public static class enum_aux extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public enum_aux() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public enum_aux(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public enum_aux(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public enum_aux position(long position) {
          return (enum_aux)super.position(position);
      }
  
    public native EnumValidator validator(); public native enum_aux validator(EnumValidator validator);
  }
  public native @ByRef enum_aux enums(); public native AuxillaryParseTableField enums(enum_aux enums);
  // Group, messages
  public static class message_aux extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public message_aux() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public message_aux(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public message_aux(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public message_aux position(long position) {
          return (message_aux)super.position(position);
      }
  
    // ExplicitlyInitialized<T> -> T requires a reinterpret_cast, which prevents
    // the tables from being constructed as a constexpr.  We use void to avoid
    // the cast.
    @MemberGetter public native @Const Pointer default_message_void();
    public native @Const MessageLite default_message();
  }
  public native @ByRef message_aux messages(); public native AuxillaryParseTableField messages(message_aux messages);
  // Strings
  public static class string_aux extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public string_aux() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public string_aux(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public string_aux(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public string_aux position(long position) {
          return (string_aux)super.position(position);
      }
  
    @MemberGetter public native @Const Pointer default_ptr();
    @MemberGetter public native @Cast("const char*") BytePointer field_name();
  }
  public native @ByRef string_aux strings(); public native AuxillaryParseTableField strings(string_aux strings);

  public static class map_aux extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public map_aux() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public map_aux(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public map_aux(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public map_aux position(long position) {
          return (map_aux)super.position(position);
      }
  
    public static class Parse_map_CodedInputStream_Pointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Parse_map_CodedInputStream_Pointer(Pointer p) { super(p); }
        protected Parse_map_CodedInputStream_Pointer() { allocate(); }
        private native void allocate();
        public native @Cast("bool") boolean call(CodedInputStream arg0, Pointer arg1);
    }
    public native Parse_map_CodedInputStream_Pointer parse_map(); public native map_aux parse_map(Parse_map_CodedInputStream_Pointer parse_map);
  }
  public native @ByRef map_aux maps(); public native AuxillaryParseTableField maps(map_aux maps);

  public AuxillaryParseTableField() { super((Pointer)null); allocate(); }
  private native void allocate();
  public AuxillaryParseTableField(@ByVal enum_aux e) { super((Pointer)null); allocate(e); }
  private native void allocate(@ByVal enum_aux e);
  public AuxillaryParseTableField(@ByVal message_aux m) { super((Pointer)null); allocate(m); }
  private native void allocate(@ByVal message_aux m);
  public AuxillaryParseTableField(@ByVal string_aux s) { super((Pointer)null); allocate(s); }
  private native void allocate(@ByVal string_aux s);
  public AuxillaryParseTableField(@ByVal map_aux m) { super((Pointer)null); allocate(m); }
  private native void allocate(@ByVal map_aux m);
}
