// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.caffe;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import org.bytedeco.opencv.opencv_videoio.*;
import static org.bytedeco.opencv.global.opencv_videoio.*;
import org.bytedeco.opencv.opencv_highgui.*;
import static org.bytedeco.opencv.global.opencv_highgui.*;
import org.bytedeco.hdf5.*;
import static org.bytedeco.hdf5.global.hdf5.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.caffe.global.caffe.*;

// -------------------------------------------------------------------

@Namespace("caffe") @NoOffset @Properties(inherit = org.bytedeco.caffe.presets.caffe.class)
public class NetStateRule extends Message {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NetStateRule(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NetStateRule(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public NetStateRule position(long position) {
        return (NetStateRule)super.position(position);
    }

  public NetStateRule() { super((Pointer)null); allocate(); }
  private native void allocate();

  public NetStateRule(@Const @ByRef NetStateRule from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef NetStateRule from);

  public native @ByRef @Name("operator =") NetStateRule put(@Const @ByRef NetStateRule from);
//   #if LANG_CXX11
//   #endif
  public native @Const @ByRef UnknownFieldSet unknown_fields();
  public native UnknownFieldSet mutable_unknown_fields();

  public static native @Const Descriptor descriptor();
  public static native @Const @ByRef NetStateRule default_instance();

  public static native void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  public static native @Const NetStateRule internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  public native void Swap(NetStateRule other);
  

  // implements Message ----------------------------------------------

  public native final NetStateRule New();

  public native final NetStateRule New(Arena arena);
  public native final void CopyFrom(@Const @ByRef Message from);
  public native final void MergeFrom(@Const @ByRef Message from);
  public native void CopyFrom(@Const @ByRef NetStateRule from);
  public native void MergeFrom(@Const @ByRef NetStateRule from);
  public native final void Clear();
  public native @Cast("bool") final boolean IsInitialized();

  public native @Cast("size_t") final long ByteSizeLong();
  public native @Cast("bool") final boolean MergePartialFromCodedStream(
        CodedInputStream input);
  public native final void SerializeWithCachedSizes(
        CodedOutputStream output);
  public native @Cast("google::protobuf::uint8*") final BytePointer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") BytePointer target);
  public native @Cast("google::protobuf::uint8*") final ByteBuffer InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") ByteBuffer target);
  public native @Cast("google::protobuf::uint8*") final byte[] InternalSerializeWithCachedSizesToArray(
        @Cast("bool") boolean deterministic, @Cast("google::protobuf::uint8*") byte[] target);
  public native final int GetCachedSize();

  public native @ByVal final Metadata GetMetadata();

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string stage = 4;
  public native int stage_size();
  public native void clear_stage();
  @MemberGetter public static native int kStageFieldNumber();
  public static final int kStageFieldNumber = kStageFieldNumber();
  public native @StdString BytePointer stage(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_stage(int index);
  public native void set_stage(int index, @StdString BytePointer value);
  public native void set_stage(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_stage(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_stage(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_stage();
  public native void add_stage(@StdString BytePointer value);
  public native void add_stage(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_stage(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_stage(String value, @Cast("size_t") long size);

  // repeated string not_stage = 5;
  public native int not_stage_size();
  public native void clear_not_stage();
  @MemberGetter public static native int kNotStageFieldNumber();
  public static final int kNotStageFieldNumber = kNotStageFieldNumber();
  public native @StdString BytePointer not_stage(int index);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_not_stage(int index);
  public native void set_not_stage(int index, @StdString BytePointer value);
  public native void set_not_stage(int index, @StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void set_not_stage(int index, @Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void set_not_stage(int index, String value, @Cast("size_t") long size);
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer add_not_stage();
  public native void add_not_stage(@StdString BytePointer value);
  public native void add_not_stage(@StdString String value);
//   #if LANG_CXX11
//   #endif
  public native void add_not_stage(@Cast("const char*") BytePointer value, @Cast("size_t") long size);
  public native void add_not_stage(String value, @Cast("size_t") long size);

  // optional .caffe.Phase phase = 1;
  public native @Cast("bool") boolean has_phase();
  public native void clear_phase();
  @MemberGetter public static native int kPhaseFieldNumber();
  public static final int kPhaseFieldNumber = kPhaseFieldNumber();
  public native @Cast("caffe::Phase") int phase();
  public native void set_phase(@Cast("caffe::Phase") int value);

  // optional int32 min_level = 2;
  public native @Cast("bool") boolean has_min_level();
  public native void clear_min_level();
  @MemberGetter public static native int kMinLevelFieldNumber();
  public static final int kMinLevelFieldNumber = kMinLevelFieldNumber();
  public native @Cast("google::protobuf::int32") int min_level();
  public native void set_min_level(@Cast("google::protobuf::int32") int value);

  // optional int32 max_level = 3;
  public native @Cast("bool") boolean has_max_level();
  public native void clear_max_level();
  @MemberGetter public static native int kMaxLevelFieldNumber();
  public static final int kMaxLevelFieldNumber = kMaxLevelFieldNumber();
  public native @Cast("google::protobuf::int32") int max_level();
  public native void set_max_level(@Cast("google::protobuf::int32") int value);
}
