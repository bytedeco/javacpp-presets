// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnx;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.onnx.global.onnx.*;


@Namespace("onnx") @NoOffset @Properties(inherit = org.bytedeco.onnx.presets.onnx.class)
public class ShapeInferenceOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ShapeInferenceOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ShapeInferenceOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ShapeInferenceOptions position(long position) {
        return (ShapeInferenceOptions)super.position(position);
    }
    @Override public ShapeInferenceOptions getPointer(long i) {
        return new ShapeInferenceOptions((Pointer)this).offsetAddress(i);
    }

  // Checks the type-equality for input and output
  public native @Cast("bool") boolean check_type(); public native ShapeInferenceOptions check_type(boolean setter);
  // 1: Will throw any node level shape infer errors
  // 0: Won't throw node-level shape infer errors, but other errors
  // like merging existing shape with inferred etc are thrown
  public native int error_mode(); public native ShapeInferenceOptions error_mode(int setter);
  // Enables data propagation for limited operators
  // to perform shape computation
  public native @Cast("bool") boolean enable_data_propagation(); public native ShapeInferenceOptions enable_data_propagation(boolean setter);
  public ShapeInferenceOptions(@Cast("bool") boolean check_type_val/*=false*/,
      int strict_mode_val/*=0*/,@Cast("bool") boolean data_prop_val/*=false*/) { super((Pointer)null); allocate(check_type_val, strict_mode_val, data_prop_val); }
  private native void allocate(@Cast("bool") boolean check_type_val/*=false*/,
      int strict_mode_val/*=0*/,@Cast("bool") boolean data_prop_val/*=false*/);
  public ShapeInferenceOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
}
