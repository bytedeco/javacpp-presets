// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnx;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.onnx.global.onnx.*;


// Base class for all optimizations within ONNX. A pass must contain the
// annotations described above. Furthermore each pass is given the ability to
// initialize and finalize it's pass. Each pass must have a unique name that
// pass managers/registry will use as identification. Finally the pass
// implements runPass which completes the pass inplace.
@Namespace("onnx::optimization") @NoOffset @Properties(inherit = org.bytedeco.onnx.presets.onnx.class)
public class Pass extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Pass(Pointer p) { super(p); }


  public native @Cast("onnx::optimization::PassType") int getPassType();
  public native @Cast("onnx::optimization::PassEfficiency") int getPassEfficiency();
  public native @Cast("onnx::optimization::PassOptimizationType") int getPassOptimizationType();
  public native @Cast("onnx::optimization::PassAnalysisType") int getPassAnalysisType();
  public native @StdString BytePointer getPassName();

  public native @Cast("bool") boolean initializePass(@ByRef Graph arg0);
  public native @Cast("bool") boolean finalizePass(@ByRef Graph arg0);
  public native @SharedPtr PostPassAnalysis runPass(@ByRef Graph graph);
}
