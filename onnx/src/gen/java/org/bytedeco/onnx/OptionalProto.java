// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.onnx;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.onnx.global.onnx.*;

// -------------------------------------------------------------------

@Namespace("onnx") @NoOffset @Properties(inherit = org.bytedeco.onnx.presets.onnx.class)
public class OptionalProto extends MessageLite {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalProto(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalProto(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalProto position(long position) {
        return (OptionalProto)super.position(position);
    }
    @Override public OptionalProto getPointer(long i) {
        return new OptionalProto((Pointer)this).offsetAddress(i);
    }

  public OptionalProto() { super((Pointer)null); allocate(); }
  private native void allocate();

  public OptionalProto(@Const @ByRef OptionalProto from) { super((Pointer)null); allocate(from); }
  private native void allocate(@Const @ByRef OptionalProto from);

  public native @ByRef @Name("operator =") OptionalProto put(@Const @ByRef OptionalProto from);

  public native @StdString BytePointer unknown_fields();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_unknown_fields();

  public static native @Const @ByRef OptionalProto default_instance();
  public static native @Const OptionalProto internal_default_instance();
  @MemberGetter public static native int kIndexInFileMessages();
  public static final int kIndexInFileMessages = kIndexInFileMessages();

  
  public native void Swap(OptionalProto other);
  public native void UnsafeArenaSwap(OptionalProto other);

  // implements Message ----------------------------------------------

  public native OptionalProto New(Arena arena/*=nullptr*/);
  public native OptionalProto New();
  public native void CheckTypeAndMergeFrom(@Const @ByRef MessageLite from);
  public native void CopyFrom(@Const @ByRef OptionalProto from);
  public native void MergeFrom(@Const @ByRef OptionalProto from);
  public native void Clear();
  public native @Cast("bool") boolean IsInitialized();

  public native @Cast("size_t") long ByteSizeLong();
  public native @Cast("const char*") BytePointer _InternalParse(@Cast("const char*") BytePointer ptr, ParseContext ctx);
  public native String _InternalParse(String ptr, ParseContext ctx);
  public native int GetCachedSize();

  public native @StdString BytePointer GetTypeName();

  // nested types ----------------------------------------------------
  @MemberGetter public static native @Cast("const onnx::OptionalProto::DataType") int UNDEFINED();
  public static final int UNDEFINED = UNDEFINED();
  @MemberGetter public static native @Cast("const onnx::OptionalProto::DataType") int TENSOR();
  public static final int TENSOR = TENSOR();
  @MemberGetter public static native @Cast("const onnx::OptionalProto::DataType") int SPARSE_TENSOR();
  public static final int SPARSE_TENSOR = SPARSE_TENSOR();
  @MemberGetter public static native @Cast("const onnx::OptionalProto::DataType") int SEQUENCE();
  public static final int SEQUENCE = SEQUENCE();
  @MemberGetter public static native @Cast("const onnx::OptionalProto::DataType") int MAP();
  public static final int MAP = MAP();
  @MemberGetter public static native @Cast("const onnx::OptionalProto::DataType") int OPTIONAL();
  public static final int OPTIONAL = OPTIONAL();
  public static native @Cast("bool") boolean DataType_IsValid(int value);
  @MemberGetter public static native @Cast("const onnx::OptionalProto::DataType") int DataType_MIN();
  public static final int DataType_MIN = DataType_MIN();
  @MemberGetter public static native @Cast("const onnx::OptionalProto::DataType") int DataType_MAX();
  public static final int DataType_MAX = DataType_MAX();
  @MemberGetter public static native int DataType_ARRAYSIZE();
  public static final int DataType_ARRAYSIZE = DataType_ARRAYSIZE();
  public static native @Cast("bool") boolean DataType_Parse(@StdString BytePointer name,
        @Cast("onnx::OptionalProto::DataType*") IntPointer value);
  public static native @Cast("bool") boolean DataType_Parse(@StdString String name,
        @Cast("onnx::OptionalProto::DataType*") IntBuffer value);
  public static native @Cast("bool") boolean DataType_Parse(@StdString BytePointer name,
        @Cast("onnx::OptionalProto::DataType*") int... value);
  public static native @Cast("bool") boolean DataType_Parse(@StdString String name,
        @Cast("onnx::OptionalProto::DataType*") IntPointer value);
  public static native @Cast("bool") boolean DataType_Parse(@StdString BytePointer name,
        @Cast("onnx::OptionalProto::DataType*") IntBuffer value);
  public static native @Cast("bool") boolean DataType_Parse(@StdString String name,
        @Cast("onnx::OptionalProto::DataType*") int... value);

  // accessors -------------------------------------------------------

  /** enum onnx::OptionalProto:: */
  public static final int
    kNameFieldNumber = 1,
    kTensorValueFieldNumber = 3,
    kSparseTensorValueFieldNumber = 4,
    kSequenceValueFieldNumber = 5,
    kMapValueFieldNumber = 6,
    kOptionalValueFieldNumber = 7,
    kElemTypeFieldNumber = 2;
  // optional string name = 1;
  public native @Cast("bool") boolean has_name();
  public native void clear_name();
  public native @StdString BytePointer name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer mutable_name();
  public native @StdString @Cast({"char*", "std::string*"}) BytePointer release_name();
  public native void set_allocated_name(@StdString @Cast({"char*", "std::string*"}) BytePointer name);

  // optional .onnx.TensorProto tensor_value = 3;
  public native @Cast("bool") boolean has_tensor_value();
  public native void clear_tensor_value();
  public native @Const @ByRef TensorProto tensor_value();
  public native TensorProto release_tensor_value();
  public native TensorProto mutable_tensor_value();
  public native void set_allocated_tensor_value(TensorProto tensor_value);
  public native void unsafe_arena_set_allocated_tensor_value(
        TensorProto tensor_value);
  public native TensorProto unsafe_arena_release_tensor_value();

  // optional .onnx.SparseTensorProto sparse_tensor_value = 4;
  public native @Cast("bool") boolean has_sparse_tensor_value();
  public native void clear_sparse_tensor_value();
  public native @Const @ByRef SparseTensorProto sparse_tensor_value();
  public native SparseTensorProto release_sparse_tensor_value();
  public native SparseTensorProto mutable_sparse_tensor_value();
  public native void set_allocated_sparse_tensor_value(SparseTensorProto sparse_tensor_value);
  public native void unsafe_arena_set_allocated_sparse_tensor_value(
        SparseTensorProto sparse_tensor_value);
  public native SparseTensorProto unsafe_arena_release_sparse_tensor_value();

  // optional .onnx.SequenceProto sequence_value = 5;
  public native @Cast("bool") boolean has_sequence_value();
  public native void clear_sequence_value();
  public native @Const @ByRef SequenceProto sequence_value();
  public native SequenceProto release_sequence_value();
  public native SequenceProto mutable_sequence_value();
  public native void set_allocated_sequence_value(SequenceProto sequence_value);
  public native void unsafe_arena_set_allocated_sequence_value(
        SequenceProto sequence_value);
  public native SequenceProto unsafe_arena_release_sequence_value();

  // optional .onnx.MapProto map_value = 6;
  public native @Cast("bool") boolean has_map_value();
  public native void clear_map_value();
  public native @Const @ByRef MapProto map_value();
  public native MapProto release_map_value();
  public native MapProto mutable_map_value();
  public native void set_allocated_map_value(MapProto map_value);
  public native void unsafe_arena_set_allocated_map_value(
        MapProto map_value);
  public native MapProto unsafe_arena_release_map_value();

  // optional .onnx.OptionalProto optional_value = 7;
  public native @Cast("bool") boolean has_optional_value();
  public native void clear_optional_value();
  public native @Const @ByRef OptionalProto optional_value();
  public native OptionalProto release_optional_value();
  public native OptionalProto mutable_optional_value();
  public native void set_allocated_optional_value(OptionalProto optional_value);
  public native void unsafe_arena_set_allocated_optional_value(
        OptionalProto optional_value);
  public native OptionalProto unsafe_arena_release_optional_value();

  // optional int32 elem_type = 2;
  public native @Cast("bool") boolean has_elem_type();
  public native void clear_elem_type();
  public native int elem_type();
  public native void set_elem_type(int value);
}
