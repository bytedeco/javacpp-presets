--- schema.h.orig	2018-06-18 20:29:53.671752983 -0600
+++ schema.h	2018-06-18 20:26:00.474308829 -0600
@@ -19,7 +19,7 @@
 
 #include "data_type_utils.h"
 
-namespace ONNX_NAMESPACE {
+namespace onnx {
 
 using OperatorSetVersion = int;
 
@@ -185,12 +185,10 @@
    * with SinceVersion(6).
    */
   OpSchema& SinceVersion(OperatorSetVersion n); // aka int
-
   /**
    * @brief Input could be one of the values specified in allowed_input_nums.
    */
   OpSchema& NumInputs(std::set<int> allowed_input_nums);
-
   /**
    * @brief Output could be one of the values specified in allowed_output_nums.
    */
@@ -249,10 +247,9 @@
     AttributeProto::AttributeType type;
     bool required;
     AttributeProto default_value;
-  };
+};
 
   OpSchema& Attr(const Attribute& attr);
-
 // Register "optional" attribute with default value.
 #define ATTR_SETTER_WITH_DEFAULT_VALUE(TypeName) \
   OpSchema& Attr(                                \
@@ -282,6 +279,7 @@
 
   // Type constraint.
   struct TypeConstraintParam {
+    TypeConstraintParam(): description("default description") {}
     TypeConstraintParam(
         const std::string& type_param_str_,
         const std::vector<std::string>& allowed_type_strs_,
@@ -426,9 +424,9 @@
   int max_output() const {
     return max_output_;
   }
-  std::pair<UseType, int> consumed(int i) const {
-    return consumed_(i);
-  }
+//  std::pair<UseType, int> consumed(int i) const {
+//    return consumed_(i);
+//  }
 
  private:
   friend class OpSchemaRegistry;
@@ -447,8 +445,10 @@
   std::string doc_;
   // Default domain value ("") means it's ONNX domain.
   std::string domain_ = ONNX_DOMAIN;
+
   std::map<std::string, Attribute> attributes_{};
   bool allows_unchecked_attributes_ = false;
+
   std::vector<FormalParameter> inputs_;
   std::vector<FormalParameter> outputs_;
   std::vector<TypeConstraintParam> type_constraint_params_;
@@ -530,7 +530,6 @@
                   << schema.file() << " line " << schema.line() << std::endl;
         abort();
       }
-
       auto ver_range_map = DomainToVersionRange::Instance().Map();
       auto ver_range_it = ver_range_map.find(op_domain);
       if (ver_range_it == ver_range_map.end()) {
@@ -599,9 +598,9 @@
     }
   }
 
- private:
+// private:
   // OpSchemaRegistry should not need to be instantiated.
-  OpSchemaRegistry() = delete;
+//  OpSchemaRegistry() = delete;
 
   /**
    * @brief Returns the underlying string to OpSchema map.
@@ -640,14 +639,15 @@
   }
 };
 
+
 #define ONNX_OPERATOR_SCHEMA(name) ONNX_OPERATOR_SCHEMA_UNIQ_HELPER(__COUNTER__, name)
 #define ONNX_OPERATOR_SCHEMA_UNIQ_HELPER(Counter, name) \
   ONNX_OPERATOR_SCHEMA_UNIQ(Counter, name)
 #define ONNX_OPERATOR_SCHEMA_UNIQ(Counter, name)            \
-  static ONNX_NAMESPACE::OpSchemaRegistry::OpSchemaRegisterOnce( \
+  static onnx::OpSchemaRegistry::OpSchemaRegisterOnce( \
       op_schema_register_once##name##Counter) =        \
       OpSchema(#name, __FILE__, __LINE__)
 
 // Helper function
-size_t ReplaceAll(std::string& s, const char* from, const char* to);
-} // namespace ONNX_NAMESPACE
+//size_t ReplaceAll(std::string& s, const char* from, const char* to);
+} // namespace onnx
