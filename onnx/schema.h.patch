--- schema.h.orig.v1.2.2	2018-06-18 21:14:51.997909899 -0600
+++ schema.h	2018-07-05 16:56:13.415450102 -0600
@@ -226,11 +226,11 @@
   //
   // Note that signatures are defined to allow for forward-declaring
   // any structs used from ir.h
-  OpSchema& TypeAndShapeInferenceFunction(InferenceFunction inferenceFunction);
-  InferenceFunction GetTypeAndShapeInferenceFunction() const {
-    return tensor_inference_function_ ? tensor_inference_function_
-                                      : dummyInferenceFunction;
-  }
+//  OpSchema& TypeAndShapeInferenceFunction(InferenceFunction inferenceFunction);
+//  InferenceFunction GetTypeAndShapeInferenceFunction() const {
+//    return tensor_inference_function_ ? tensor_inference_function_
+//                                      : dummyInferenceFunction;
+//  }
 
   // Set the support level for the op schema.
   OpSchema& SetSupportLevel(SupportType supportType);
@@ -336,6 +336,7 @@
 
   // Type constraint.
   struct TypeConstraintParam final {
+    TypeConstraintParam(): description("default description") {}
     TypeConstraintParam(
         std::string type_param_str_,
         std::vector<std::string> allowed_type_strs_,
@@ -768,7 +769,7 @@
   }
 };
 
-void RegisterSchema(OpSchema&& schema);
+void RegisterSchema(OpSchema schema);
 
 // Registers all schema of a given operator set
 template <class T>
@@ -839,7 +840,7 @@
   name##_##domain##_ver##ver
 
 // Helper function
-size_t ReplaceAll(std::string& s, const char* from, const char* to);
+//size_t ReplaceAll(std::string& s, const char* from, const char* to);
 
 // Legacy macros to register schema at static initialization
 #define ONNX_OPERATOR_SCHEMA(name) \
@@ -852,7 +853,7 @@
       OpSchema(#name, __FILE__, __LINE__)
 
 // Helper function
-size_t ReplaceAll(std::string& s, const char* from, const char* to);
+//size_t ReplaceAll(std::string& s, const char* from, const char* to);
 
 inline std::string GenerateOptionalArgumentsDoc() {
   return "This operator has **optional** inputs/outputs. "
