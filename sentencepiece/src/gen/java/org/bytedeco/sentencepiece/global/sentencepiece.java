// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.sentencepiece.global;

import org.bytedeco.sentencepiece.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class sentencepiece extends org.bytedeco.sentencepiece.presets.sentencepiece {
    static { Loader.load(); }

// Targeting ../StringVector.java


// Targeting ../IntVector.java


// Targeting ../StringVectorFloatPairVector.java


// Targeting ../IntVectorFloatPairVector.java


// Targeting ../StringStringMap.java


// Parsed from <sentencepiece_processor.h>

// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.!

// #ifndef SENTENCEPIECE_PROCESSOR_H_
// #define SENTENCEPIECE_PROCESSOR_H_

// #include <cstring>
// #include <memory>
// #include <string>
// #include <string_view>
// #include <utility>
// #include <vector>

// #ifndef SWIG
  // namespace absl
// #endif  // SWIG

/** enum class sentencepiece::util::StatusCode */
public static final int
  kOk = 0,
  kCancelled = 1,
  kUnknown = 2,
  kInvalidArgument = 3,
  kDeadlineExceeded = 4,
  kNotFound = 5,
  kAlreadyExists = 6,
  kPermissionDenied = 7,
  kResourceExhausted = 8,
  kFailedPrecondition = 9,
  kAborted = 10,
  kOutOfRange = 11,
  kUnimplemented = 12,
  kInternal = 13,
  kUnavailable = 14,
  kDataLoss = 15,
  kUnauthenticated = 16;
// Targeting ../Status.java



// Targeting ../NBestSentencePieceText.java


// Targeting ../SentencePieceText.java


// Targeting ../ModelProto.java


  // namespace normalizer

// #ifndef SWIGGO
// Redefine std::string for serialized_proto interface as Python's string is
// a Unicode string. We can enforce the return value to be raw byte sequence
// with SWIG's typemap.
  // namespace util
// #endif  // SWIGGO
// Targeting ../SentencePieceText_SentencePiece.java


// Targeting ../ImmutableSentencePieceText_ImmutableSentencePiece.java


// Targeting ../ImmutableSentencePieceText.java


// Targeting ../ImmutableNBestSentencePieceText.java


// Targeting ../SentencePieceProcessor.java



// Set seed value of random generator.
// Do not set static_cast<unique_int>(-1),
// as this seed is reserved for initializing from
// std::random_device.
@Namespace("sentencepiece") public static native void SetRandomGeneratorSeed(@Cast("unsigned int") int seed);

// IO related functions to absorb model formats.
// Loads `model_proto` from `filename`.
// We can instantiate SentencePieceProcessor as follows:
//
//  auto model_proto = absl::make_unique<ModelProto>();
//  io::LoadModelProto("//path/spm.model", model_proto.get());
//  SentencePieceProcessor sp;
//  CHECK_OK(sp.Load(std::move(model_proto)));
@Namespace("sentencepiece::io") public static native @ByVal Status LoadModelProto(@StdString String arg0, ModelProto model_proto);

// Saves `model_proto` as `filename`.
@Namespace("sentencepiece::io") public static native @ByVal Status SaveModelProto(@StdString String arg0, @Const @ByRef ModelProto model_proto);
  // namespace io
  // namespace sentencepiece
// #endif  // SENTENCEPIECE_PROCESSOR_H_


// Parsed from <sentencepiece_trainer.h>

// Copyright 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.!

// #ifndef SENTENCEPIECE_TRAINER_H_
// #define SENTENCEPIECE_TRAINER_H_

// #include <string>
// #include <unordered_map>

// #include "sentencepiece_processor.h"
// Targeting ../TrainerSpec.java


// Targeting ../NormalizerSpec.java


// Targeting ../PretokenizerForTrainingInterface.java



// Targeting ../SentenceIterator.java


// Targeting ../SentencePieceTrainer.java



  // namespace sentencepiece

// #endif  // SENTENCEPIECE_TRAINER_H_


}
