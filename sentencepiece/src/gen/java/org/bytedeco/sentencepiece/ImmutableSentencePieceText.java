// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.sentencepiece;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.sentencepiece.global.sentencepiece.*;


@Namespace("sentencepiece") @NoOffset @Properties(inherit = org.bytedeco.sentencepiece.presets.sentencepiece.class)
public class ImmutableSentencePieceText extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ImmutableSentencePieceText(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ImmutableSentencePieceText(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ImmutableSentencePieceText position(long position) {
        return (ImmutableSentencePieceText)super.position(position);
    }
    @Override public ImmutableSentencePieceText getPointer(long i) {
        return new ImmutableSentencePieceText((Pointer)this).offsetAddress(i);
    }

  public ImmutableSentencePieceText() { super((Pointer)null); allocate(); }
  private native void allocate();

  public native @StdVector ImmutableSentencePieceText_ImmutableSentencePiece pieces();

  public native @Cast("size_t") long pieces_size();
  public native @ByVal ImmutableSentencePieceText_ImmutableSentencePiece pieces(int index);

  public native @StdString String text();
  public native float score();

  public native @StdString String SerializeAsString();

  // Returns the actual mutable proto.
  // Do not use this outside of SentencePieceProcessor, as
  // it returns the raw pointer managed by the shared_ptr.
  public native SentencePieceText mutable_proto();

  // Converts the utf8 byte spans into Unicode char span.
  public native void ConvertToUnicodeSpans();
}
