// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** <summary>
 *  Options for the OpenVINO provider that are passed to SessionOptionsAppendExecutionProvider_OpenVINO
 *  </summary> */
@NoOffset @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtOpenVINOProviderOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtOpenVINOProviderOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtOpenVINOProviderOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OrtOpenVINOProviderOptions position(long position) {
        return (OrtOpenVINOProviderOptions)super.position(position);
    }
    @Override public OrtOpenVINOProviderOptions getPointer(long i) {
        return new OrtOpenVINOProviderOptions((Pointer)this).position(position + i);
    }

// #ifdef __cplusplus
  public OrtOpenVINOProviderOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
// #endif
  public native @Cast("const char*") BytePointer device_type(); public native OrtOpenVINOProviderOptions device_type(BytePointer setter);                // CPU_FP32, GPU_FP32, GPU_FP16, MYRIAD_FP16, VAD-M_FP16 or VAD-F_FP32
  public native @Cast("unsigned char") byte enable_vpu_fast_compile(); public native OrtOpenVINOProviderOptions enable_vpu_fast_compile(byte setter);  // 0 = false, nonzero = true
  public native @Cast("const char*") BytePointer device_id(); public native OrtOpenVINOProviderOptions device_id(BytePointer setter);
  public native @Cast("size_t") long num_of_threads(); public native OrtOpenVINOProviderOptions num_of_threads(long setter);  // 0 uses default number of threads
}
