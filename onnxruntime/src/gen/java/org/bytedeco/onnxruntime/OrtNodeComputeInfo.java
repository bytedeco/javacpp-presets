// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/**
 * \brief The OrtNodeComputeInfo struct provides functions that an OrtEp implements to specify the compute
 * function for a compiled OrtGraph instance.
 * @since Version 1.23.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtNodeComputeInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtNodeComputeInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtNodeComputeInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtNodeComputeInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtNodeComputeInfo position(long position) {
        return (OrtNodeComputeInfo)super.position(position);
    }
    @Override public OrtNodeComputeInfo getPointer(long i) {
        return new OrtNodeComputeInfo((Pointer)this).offsetAddress(i);
    }

  /** \brief The ONNX Runtime version the OrtNodeComputeInfo was compiled with.
   *
   * Implementation should set to ORT_API_VERSION.
   * ORT will use this to ensure it does not call functions that were not available when the EP library was compiled.
   *
   * @since Version 1.23.
   */
  public native @Cast("uint32_t") int ort_version_supported(); public native OrtNodeComputeInfo ort_version_supported(int setter);

  /** \brief Creates an opaque compute state object that is then passed to the Compute() function during inference.
   * @param this_ptr [in] The OrtNodeComputeInfo instance.
   * @param compute_context [in] OrtNodeComputeContext instance that contains compiled/fused node's name and host
   *                            memory allocation functions. Can optionally be used to build the compute state.
   * @param compute_state [out] Output parameter that is assigned the opaque computation state. ONNX Runtime calls
   *                           ReleaseState() (after calling Compute()) to allow the implementer to release the
   *                           compute state.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public static class CreateState_OrtNodeComputeInfo_OrtNodeComputeContext_PointerPointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    CreateState_OrtNodeComputeInfo_OrtNodeComputeContext_PointerPointer(Pointer p) { super(p); }
      protected CreateState_OrtNodeComputeInfo_OrtNodeComputeContext_PointerPointer() { allocate(); }
      private native void allocate();
      public native OrtStatus call(OrtNodeComputeInfo this_ptr,
                                          OrtNodeComputeContext compute_context,
                                          @Cast("void**") PointerPointer compute_state);
  }
  public native CreateState_OrtNodeComputeInfo_OrtNodeComputeContext_PointerPointer CreateState(); public native OrtNodeComputeInfo CreateState(CreateState_OrtNodeComputeInfo_OrtNodeComputeContext_PointerPointer setter);

  /** \brief Computation function called to execute the fused node compiled by an OrtEp instance.
   * @param this_ptr [in] The OrtNodeComputeInfo instance.
   * @param compute_state [in] The opaque computation state returned by CreateState().
   * @param kernel_context [in] The OrtKernelContext instance used to access inputs/outputs.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public static class Compute_OrtNodeComputeInfo_Pointer_OrtKernelContext extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Compute_OrtNodeComputeInfo_Pointer_OrtKernelContext(Pointer p) { super(p); }
      protected Compute_OrtNodeComputeInfo_Pointer_OrtKernelContext() { allocate(); }
      private native void allocate();
      public native OrtStatus call(OrtNodeComputeInfo this_ptr, Pointer compute_state,
                                      OrtKernelContext kernel_context);
  }
  public native Compute_OrtNodeComputeInfo_Pointer_OrtKernelContext Compute(); public native OrtNodeComputeInfo Compute(Compute_OrtNodeComputeInfo_Pointer_OrtKernelContext setter);

  /** \brief Releases the compute state returned by CreateState().
   * @param this_ptr [in] The OrtNodeComputeInfo instance.
   * @param compute_state [inout] The opaque compute state returned by CreateState().
   *
   * @since Version 1.23.
   */
  public static class ReleaseState_OrtNodeComputeInfo_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    ReleaseState_OrtNodeComputeInfo_Pointer(Pointer p) { super(p); }
      protected ReleaseState_OrtNodeComputeInfo_Pointer() { allocate(); }
      private native void allocate();
      public native void call(OrtNodeComputeInfo this_ptr, Pointer compute_state);
  }
  public native ReleaseState_OrtNodeComputeInfo_Pointer ReleaseState(); public native OrtNodeComputeInfo ReleaseState(ReleaseState_OrtNodeComputeInfo_Pointer setter);
}
