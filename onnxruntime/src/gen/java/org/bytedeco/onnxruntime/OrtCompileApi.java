// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/**
 * \brief The OrtCompileApi struct provides functions to compile ONNX models.
 *
 * Execution providers that support compilation fuse a subgraph into an EPContext node that wraps a provider-specific
 * binary representation of the subgraph.
 * For more details about the EPContext design, refer to:
 *  \htmlonly
 *  <a href="https://onnxruntime.ai/docs/execution-providers/EP-Context-Design.html">EPContext design document.</a>
 *  \endhtmlonly
 *
 * Example (error handling not shown):
 *   OrtStatus* status = NULL;
 *   OrtCompileApi* compile_api = ort_api->GetCompileApi();
 *   OrtModelCompilationOptions* compile_options = NULL;
 *
 *   status = compile_api->CreateModelCompilationOptionsFromSessionOptions(env, session_options, &compile_options);
 *   status = compile_api->ModelCompilationOptions_SetInputModelPath(compile_options, ORT_TSTR("model.onnx"));
 *   status = compile_api->ModelCompilationOptions_SetOutputModelPath(compile_options, ORT_TSTR("model.compiled.onnx"));
 *   status = compile_api->CompileModel(env, compile_options);
 *   compile_api->ReleaseModelCompilationOptions(compile_options);
 *
 * @since Version 1.22.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtCompileApi extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtCompileApi() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtCompileApi(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtCompileApi(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtCompileApi position(long position) {
        return (OrtCompileApi)super.position(position);
    }
    @Override public OrtCompileApi getPointer(long i) {
        return new OrtCompileApi((Pointer)this).offsetAddress(i);
    }

  /** \name OrtModelCompilationOptions
   *  \{ */
  public native void ReleaseModelCompilationOptions(OrtModelCompilationOptions input);

  /** \brief Creates an OrtModelCompilationOptions object from an existing OrtSessionOptions object.
   *
   * An OrtModelCompilationOptions object contains the settings used to generate a compiled ONNX model.
   * The OrtSessionOptions object has the execution providers with which the model will be compiled.
   *
   * ReleaseOrtModelCompilationsOptions must be called to free the OrtModelCompilationOptions after calling
   * CompileModel.
   *
   * \note By default, the GraphOptimizationLevel is set to ORT_DISABLE_ALL. Use
   * ModelCompilationOptions_SetGraphOptimizationLevel to enable graph optimizations.
   *
   * @param env [in] OrtEnv object.
   * @param session_options [in] The OrtSessionOptions instance from which to create the OrtModelCompilationOptions.
   * @param out [out] The created OrtModelCompilationOptions instance.
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus CreateModelCompilationOptionsFromSessionOptions( @Const OrtEnv env,
                    @Const OrtSessionOptions session_options, @Cast("OrtModelCompilationOptions**") PointerPointer out);
  public native OrtStatus CreateModelCompilationOptionsFromSessionOptions( @Const OrtEnv env,
                    @Const OrtSessionOptions session_options, @ByPtrPtr OrtModelCompilationOptions out);

  /** \brief Sets the file path to the input ONNX model to compile.
   *
   * The input model's location (e.g., file path or memory buffer) must be set with either
   * ModelCompilationOptions_SetInputModelPath or ModelCompilationOptions_SetInputModelFromBuffer.
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param input_model_path [in] Null terminated string of the path (wchar on Windows, char otherwise).
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus ModelCompilationOptions_SetInputModelPath( OrtModelCompilationOptions model_compile_options,
                    @Cast("const ORTCHAR_T*") Pointer input_model_path);

  /** \brief Sets the buffer that stores the bytes of the loaded ONNX model to compile.
   *
   * The input model's location (e.g., file path or memory buffer) must be set with either
   * ModelCompilationOptions_SetInputModelPath or ModelCompilationOptions_SetInputModelFromBuffer.
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param input_model_data [in] Buffer containing the loaded ONNX model bytes.
   * @param input_model_data_size [in] The number of bytes in the {@code input_model_data} buffer.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus ModelCompilationOptions_SetInputModelFromBuffer(
                    OrtModelCompilationOptions model_compile_options,
                    @Const Pointer input_model_data,
                    @Cast("size_t") long input_model_data_size);

  /** \brief Sets the file path for the output ONNX model generated by CompileModel.
   *
   * The output model's location (e.g., file path or memory buffer) can be set with either
   * ModelCompilationOptions_SetOutputModelPath or ModelCompilationOptions_SetOutputModelBuffer.
   *
   * If the output model's location is not set, ONNX Runtime will generate an output file with a path based on
   * the input model's file path. Examples:
   *   /Path/my_model.onnx -> /Path/my_model_ctx.onnx
   *   /Path/my_model -> /Path/my_model_ctx.onnx
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param output_model_path [in] Null terminated string of the path (wchar on Windows, char otherwise).
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus ModelCompilationOptions_SetOutputModelPath( OrtModelCompilationOptions model_compile_options,
                    @Cast("const ORTCHAR_T*") Pointer output_model_path);

  /** \brief Optionally sets the file that should store external initializers for the compiled ONNX model.
   * If not set, initializers are stored within the model.
   *
   * Only initializers for nodes that were not compiled are stored in the external initializers file.
   * Compiled nodes contain their initializer data within the {@code ep_cache_context} attribute of EPContext nodes.
   * Refer to ModelCompilationOptions_SetEpContextEmbedMode.
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param external_initializers_file_path [in] Null terminated string of the path to the file.
   * @param external_initializers_size_threshold [in] Initializers larger than this threshold are stored in the file.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus ModelCompilationOptions_SetOutputModelExternalInitializersFile(
                    OrtModelCompilationOptions model_compile_options,
                    @Cast("const ORTCHAR_T*") Pointer external_initializers_file_path,
                    @Cast("size_t") long external_initializers_size_threshold);

  /** \brief Configures model compilation to store the output compiled ONNX model in a buffer.
   *
   * The caller passes an OrtAllocator that ONNX Runtime uses to allocate memory for the buffer.
   *
   * The output model's location (e.g., file path or memory buffer) can be set with either
   * ModelCompilationOptions_SetOutputModelPath or ModelCompilationOptions_SetOutputModelBuffer.
   *
   * If the output model's location is not set, ONNX Runtime will generate an output file with a path based on
   * the input model's file path. Examples:
   *   /Path/my_model.onnx -> /Path/my_model_ctx.onnx
   *   /Path/my_model -> /Path/my_model_ctx.onnx
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param allocator [in] The allocator used to allocate the buffer for the compiled model.
   * @param output_model_buffer_ptr [out] Pointer to the buffer that stores the compiled model.
   * @param output_model_buffer_size_ptr [out] Pointer set to the size of output model in bytes.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus ModelCompilationOptions_SetOutputModelBuffer(
                    OrtModelCompilationOptions model_compile_options,
                    OrtAllocator allocator,
                    @Cast("void**") PointerPointer output_model_buffer_ptr,
                    @Cast("size_t*") SizeTPointer output_model_buffer_size_ptr);
  public native OrtStatus ModelCompilationOptions_SetOutputModelBuffer(
                    OrtModelCompilationOptions model_compile_options,
                    OrtAllocator allocator,
                    @Cast("void**") @ByPtrPtr Pointer output_model_buffer_ptr,
                    @Cast("size_t*") SizeTPointer output_model_buffer_size_ptr);

  /** \brief Enables or disables the embedding of EPContext binary data into the {@code ep_cache_context} attribute
   * of EPContext nodes. Defaults to false.
   *
   * If enabled, the {@code ep_cache_context} attribute of EPContext nodes will store the context binary data, which may
   * include weights for compiled subgraphs.
   *
   * If disabled, the {@code ep_cache_context} attribute of EPContext nodes will contain the path to the file containing the
   * context binary data. The path is set by the execution provider creating the EPContext node.
   *
   * More details relate to EPContext design refers to:
   *  \htmlonly
   *  <a href="https://onnxruntime.ai/docs/execution-providers/EP-Context-Design.html">EPContext design document.</a>
   *  \endhtmlonly
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param embed_ep_context_in_model [in] True to embed EPContext binary data into the EPContext node
   *                                      {@code ep_cache_context} attributes.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus ModelCompilationOptions_SetEpContextEmbedMode( OrtModelCompilationOptions model_compile_options,
                    @Cast("bool") boolean embed_ep_context_in_model);

  /** \brief Compiles an input ONNX model with the given compilation options.
   *
   * @param env [in] OrtEnv object.
   * @param model_options [in] The compilation options that defines compilation options for a model.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus CompileModel( @Const OrtEnv env, @Const OrtModelCompilationOptions model_options);

  /** \brief Sets flags from OrtCompileApiFlags that represent one or more boolean options to enable.
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param flags [in] bitwise OR of flags in OrtCompileApiFlags to enable.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus ModelCompilationOptions_SetFlags( OrtModelCompilationOptions model_compile_options,
                    @Cast("uint32_t") int flags);

  /** Sets information related to EP context binary file.
   *
   * EP uses this information to decide the location and context binary file name.
   * Used while compiling model with input and output in memory buffer
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param output_directory [in] Null terminated string of the path (wchar on Windows, char otherwise).
   * @param model_name [in] Null terminated string of the model name (wchar on Windows, char otherwise).
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus ModelCompilationOptions_SetEpContextBinaryInformation(
                    OrtModelCompilationOptions model_compile_options,
                    @Cast("const ORTCHAR_T*") Pointer output_directory,
                    @Cast("const ORTCHAR_T*") Pointer model_name);

  /** Set the graph optimization level.
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param graph_optimization_level [in] The graph optimization level.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus ModelCompilationOptions_SetGraphOptimizationLevel(
                    OrtModelCompilationOptions model_compile_options,
                    @Cast("GraphOptimizationLevel") int graph_optimization_level);

  /** \brief Sets a OrtWriteBufferFunc function that is called by ORT to write out the output model's serialized
   * ONNX bytes.
   *
   * The provided write function may be called repeatedly until then entire output model has been written out. Each call
   * to the write function is expected to consume the entire input buffer.
   *
   * The output model's destination (e.g., file path, memory buffer, or stream) can be set with any of the functions
   * that begin with ModelCompilationOptions_SetOutputModel____.
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param write_func [in] The OrtWriteBufferFunc function called by ORT when writing out the model.
   * @param state [in] Opaque state passed as the first argument to OrtWriteBufferFunc. Can be NULL.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus ModelCompilationOptions_SetOutputModelWriteFunc(
                    OrtModelCompilationOptions model_compile_options,
                    OrtWriteBufferFunc write_func, Pointer state);

  /** \brief Sets a OrtGetInitializerLocationFunc function that is called by ORT for every initializer in the generated
   * model. Allows implementer to specify whether initializers should be stored within the model or externally.
   *
   * @param model_compile_options [in] The OrtModelCompilationOptions instance.
   * @param get_initializer_location_func [in] The OrtGetInitializerLocationFunc function called by ORT when
   *                                          to determine the location of the initializer.
   * @param state [in] Opaque state passed as the first argument to OrtGetInitializerLocationFunc. Can be NULL.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus ModelCompilationOptions_SetOutputModelGetInitializerLocationFunc(
                    OrtModelCompilationOptions model_compile_options,
                    OrtGetInitializerLocationFunc get_initializer_location_func, Pointer state);
}
