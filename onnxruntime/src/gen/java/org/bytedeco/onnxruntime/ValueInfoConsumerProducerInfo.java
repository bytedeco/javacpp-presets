// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


// Return struct for some of ValueInfo APIs.
// Must be declared after ConstNode is available.
@Namespace("Ort") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class ValueInfoConsumerProducerInfo extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ValueInfoConsumerProducerInfo() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ValueInfoConsumerProducerInfo(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ValueInfoConsumerProducerInfo(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ValueInfoConsumerProducerInfo position(long position) {
        return (ValueInfoConsumerProducerInfo)super.position(position);
    }
    @Override public ValueInfoConsumerProducerInfo getPointer(long i) {
        return new ValueInfoConsumerProducerInfo((Pointer)this).offsetAddress(i);
    }

  public native @ByRef @Cast("Ort::ConstNode*") ConstNodeImpl node(); public native ValueInfoConsumerProducerInfo node(ConstNodeImpl setter);
  // either producer output or consumer output index
  // producer is unsigned only, output can be -1
  public native @Cast("int64_t") long index(); public native ValueInfoConsumerProducerInfo index(long setter);
}
