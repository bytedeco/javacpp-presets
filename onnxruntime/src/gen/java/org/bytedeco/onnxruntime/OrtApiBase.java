// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief The helper interface to get the right version of OrtApi
 *
 * Get a pointer to this structure through ::OrtGetApiBase
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtApiBase extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtApiBase() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtApiBase(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtApiBase(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtApiBase position(long position) {
        return (OrtApiBase)super.position(position);
    }
    @Override public OrtApiBase getPointer(long i) {
        return new OrtApiBase((Pointer)this).offsetAddress(i);
    }

  /** \brief Get a pointer to the requested version of the ::OrtApi
   *
   * @param version [in] Must be ::ORT_API_VERSION
   * @return The ::OrtApi for the version requested, nullptr will be returned if this version is unsupported, for example when using a runtime
   *   older than the version created with this header file.
   */
  public static class GetApi_int extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetApi_int(Pointer p) { super(p); }
      protected GetApi_int() { allocate(); }
      private native void allocate();
      public native @Const OrtApi call(@Cast("uint32_t") int version);
  }
  public native GetApi_int GetApi(); public native OrtApiBase GetApi(GetApi_int setter);
  public static class Pointer_GetVersionString extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Pointer_GetVersionString(Pointer p) { super(p); }
      protected Pointer_GetVersionString() { allocate(); }
      private native void allocate();
      public native @Cast("const ORTCHAR_T*") Pointer call();
  }
  /** Returns a null terminated string of the version of the Onnxruntime library (eg: "1.8.1") */
  public native Pointer_GetVersionString GetVersionString(); public native OrtApiBase GetVersionString(Pointer_GetVersionString setter);
  public static class Pointer_GetBuildInfoString extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Pointer_GetBuildInfoString(Pointer p) { super(p); }
      protected Pointer_GetBuildInfoString() { allocate(); }
      private native void allocate();
      public native @Cast("const ORTCHAR_T*") Pointer call();
  }
  /** Returns a null terminated string of the build info including git info and cxx flags */
  public native Pointer_GetBuildInfoString GetBuildInfoString(); public native OrtApiBase GetBuildInfoString(Pointer_GetBuildInfoString setter);
}
