// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief The Status that holds ownership of OrtStatus received from C API
 *  Use it to safely destroy OrtStatus* returned from the C API. Use appropriate
 *  constructors to construct an instance of a Status object from exceptions.
 */
@Namespace("Ort") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class Status extends BaseStatus {
    static { Loader.load(); }

  /** Takes ownership of OrtStatus instance returned from the C API. */
  public Status(OrtStatus status) { super((Pointer)null); allocate(status); }
  @NoException(true) private native void allocate(OrtStatus status);
  /** Creates status instance out of exception */
  public Status(@Const @ByRef OrtException arg0) { super((Pointer)null); allocate(arg0); }
  @NoException(true) private native void allocate(@Const @ByRef OrtException arg0);
  /** Creates status instance out of exception */
  public Status(@Cast("const std::exception*") @ByRef Pointer arg0) { super((Pointer)null); allocate(arg0); }
  @NoException(true) private native void allocate(@Cast("const std::exception*") @ByRef Pointer arg0);
  /** Creates status instance out of null-terminated string message. */
  public Status(@Cast("const char*") BytePointer message, @Cast("OrtErrorCode") int code) { super((Pointer)null); allocate(message, code); }
  @NoException(true) private native void allocate(@Cast("const char*") BytePointer message, @Cast("OrtErrorCode") int code);
  public Status(String message, @Cast("OrtErrorCode") int code) { super((Pointer)null); allocate(message, code); }
  @NoException(true) private native void allocate(String message, @Cast("OrtErrorCode") int code);
  public native @StdString BytePointer GetErrorMessage();
  public native @Cast("OrtErrorCode") int GetErrorCode();
  /** Returns true if instance represents an OK (non-error) status. */
  public native @Cast("bool") @NoException(true) boolean IsOK();
}
