// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Wrapper around ::OrtExternalInitializerInfo
 *
 */
@Namespace("Ort") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class ExternalInitializerInfo extends ConstExternalInitializerInfoImpl {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ExternalInitializerInfo(Pointer p) { super(p); }

  public ExternalInitializerInfo(OrtExternalInitializerInfo p) { super((Pointer)null); allocate(p); }
  private native void allocate(OrtExternalInitializerInfo p);

  
  
  /** Wraps OrtApi::CreateExternalInitializerInfo */
  public native @ByVal @Cast("Ort::ConstExternalInitializerInfo*") ConstExternalInitializerInfoImpl GetConst();
  
  
  /** Wrapper around CreateExternalInitializerInfo that does not throw an exception. */
  public ExternalInitializerInfo(@Cast("const ORTCHAR_T*") Pointer filepath, @Cast("int64_t") long file_offset, @Cast("size_t") long byte_size) { super((Pointer)null); allocate(filepath, file_offset, byte_size); }
  private native void allocate(@Cast("const ORTCHAR_T*") Pointer filepath, @Cast("int64_t") long file_offset, @Cast("size_t") long byte_size);
  public static native @ByVal Status Create(@Cast("const ORTCHAR_T*") Pointer filepath, @Cast("int64_t") long file_offset, @Cast("size_t") long byte_size, @ByRef ExternalInitializerInfo out);
}
