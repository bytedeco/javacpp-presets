// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** <summary>
 *  This class represents an ONNX Runtime logger that can be used to log information with an
 *  associated severity level and source code location (file path, line number, function name).
 * 
 *  A Logger can be obtained from within custom operators by calling Ort::KernelInfo::GetLogger().
 *  Instances of Ort::Logger are the size of two pointers and can be passed by value.
 * 
 *  Use the ORT_CXX_LOG macros to ensure the source code location is set properly from the callsite
 *  and to take advantage of a cached logging severity level that can bypass calls to the underlying C API.
 *  </summary> */
@Namespace("Ort") @NoOffset @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class Logger extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Logger(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Logger(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Logger position(long position) {
        return (Logger)super.position(position);
    }
    @Override public Logger getPointer(long i) {
        return new Logger((Pointer)this).offsetAddress(i);
    }

  /**
   * Creates an empty Ort::Logger. Must be initialized from a valid Ort::Logger before use.
   */
  public Logger() { super((Pointer)null); allocate(); }
  private native void allocate();

  /**
   * Creates an empty Ort::Logger. Must be initialized from a valid Ort::Logger before use.
   */

  /**
   * Creates a logger from an ::OrtLogger instance. Caches the logger's current severity level by calling
   * OrtApi::Logger_GetLoggingSeverityLevel. Throws an exception if OrtApi::Logger_GetLoggingSeverityLevel fails.
   *
   * @param logger The ::OrtLogger to wrap.
   */
  public Logger(@Const OrtLogger logger) { super((Pointer)null); allocate(logger); }
  private native void allocate(@Const OrtLogger logger);

  public Logger(@Const @ByRef Logger arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@Const @ByRef Logger arg0);
  public native @ByRef @Name("operator =") Logger put(@Const @ByRef Logger arg0);

  /**
   * Returns the logger's current severity level from the cached member.
   *
   * @return The current ::OrtLoggingLevel.
   */
  public native @Cast("OrtLoggingLevel") @NoException(true) int GetLoggingSeverityLevel();

  /**
   * Logs the provided message via OrtApi::Logger_LogMessage. Use the ORT_CXX_LOG or ORT_CXX_LOG_NOEXCEPT
   * macros to properly set the source code location and to use the cached severity level to potentially bypass
   * calls to the underlying C API.
   *
   * @param log_severity_level The message's logging severity level.
   * @param file_path The filepath of the file in which the message is logged. Usually the value of ORT_FILE.
   * @param line_number The file line number in which the message is logged. Usually the value of __LINE__.
   * @param func_name The name of the function in which the message is logged. Usually the value of __FUNCTION__.
   * @param message The message to log.
   * @return A Ort::Status value to indicate error or success.
   */
  public native @ByVal @NoException(true) Status LogMessage(@Cast("OrtLoggingLevel") int log_severity_level, @Cast("const ORTCHAR_T*") Pointer file_path, int line_number,
                      @Cast("const char*") BytePointer func_name, @Cast("const char*") BytePointer message);
  public native @ByVal @NoException(true) Status LogMessage(@Cast("OrtLoggingLevel") int log_severity_level, @Cast("const ORTCHAR_T*") Pointer file_path, int line_number,
                      String func_name, String message);

  /**
   * Logs a printf-like formatted message via OrtApi::Logger_LogMessage. Use the ORT_CXX_LOGF or ORT_CXX_LOGF_NOEXCEPT
   * macros to properly set the source code location and to use the cached severity level to potentially bypass
   * calls to the underlying C API. Returns an error status if a formatting error occurs.
   *
   * @param log_severity_level The message's logging severity level.
   * @param file_path The filepath of the file in which the message is logged. Usually the value of ORT_FILE.
   * @param line_number The file line number in which the message is logged. Usually the value of __LINE__.
   * @param func_name The name of the function in which the message is logged. Usually the value of __FUNCTION__.
   * @param format A null-terminated UTF-8 format string forwarded to a printf-like function.
   *               Refer to https://en.cppreference.com/w/cpp/io/c/fprintf for information on valid formats.
   * @param args Zero or more variadic arguments referenced by the format string.
   * @return A Ort::Status value to indicate error or success.
   */
}
