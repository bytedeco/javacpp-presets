// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief The function signature that ORT will call to create OrtEpFactory instances.
 *
 * This must be available in a function called 'CreateEpFactories' in the execution provider library.
 *
 * @param registered_name [in] The name the execution library is registered with by RegisterExecutionProviderLibrary
 * @param ort_api_base [in] The OrtApiBase instance that is used by the factory to get the OrtApi instance for the
 *                         version of ORT that the library was compiled against.
 * @param default_logger [in] The default ORT logger that can be used for logging outside of an inference session.
 * @param factories [in,out] The implementation should create and add OrtEpFactory instances to this
 *                          pre-allocated array.
 *                          i.e. usage is {@code factories[0] = new MyEpFactory();}
 * @param max_factories [in] The maximum number of OrtEpFactory instances that can be added to {@code factories}.
 *                          Current default is to allow 4 factories. This can be increased in the future if needed.
 * @param num_factories [out] The number of OrtEpFactory instances created by the factory and added to {@code factories}.
 *
 * \snippet{doc} snippets.dox OrtStatus Return Value
 *
 * @since Version 1.22.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class CreateEpApiFactoriesFn extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    CreateEpApiFactoriesFn(Pointer p) { super(p); }
    protected CreateEpApiFactoriesFn() { allocate(); }
    private native void allocate();
    public native OrtStatus call(@Cast("const char*") BytePointer registered_name, @Const OrtApiBase ort_api_base,
                                             @Const OrtLogger default_logger,
                                             @Cast("OrtEpFactory**") PointerPointer factories, @Cast("size_t") long max_factories,
                                             @Cast("size_t*") SizeTPointer num_factories);
}
