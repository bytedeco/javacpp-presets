// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Function called by ORT to allow user to specify how an initializer should be saved, that is, either
 * written to an external file or stored within the model. ORT calls this function for every initializer when
 * generating a model.
 *
 * If the function implementation sets the {@code new_external_info} output parameter to NULL, ORT stores the initializer data
 * within the generated model.
 *
 * Otherwise, if the function implementation sets {@code new_external_info} to a valid OrtExternalInitializerInfo instance,
 * ORT assumes that this function stores the initializer data in a file. In this case, ORT configures the model's
 * initializer to point to the location specified by the {@code new_external_info} output parameter.
 *
 * @param state [in] Opaque pointer holding the user's state.
 * @param initializer_name [in] The initializer's name as a null-terminated string.
 * @param initializer_value [in] OrtValue containing the initializer's data, type, and shape.
 * @param external_info [in] If the initializer is originally stored in an external file, {@code external_info} contains
 *                          the file path, file offset, and the data's byte size within the file. Otherwise,
 *                          {@code external_info} is NULL if the initializer is not originally stored in a file.
 * @param new_external_info [out] Output parameter set to a new OrtExternalInitializerInfo instance indicating the
 *                               location where the function implementation stored the initializer data.
 *                               The function implementation must use {@code OrtApi::CreateExternalInitializerInfo()} to
 *                               create the instance.
 *                               If the function implementation sets {@code new_external_info} to NULL,
 *                               ORT stores the initializers within the model.
 *
 * \note ORT takes ownership of the {@code new_external_info} output parameter.
 *
 * @return OrtStatus* Write status. Return nullptr on success.
 *                    Use CreateStatus to provide error info. Use ORT_FAIL as the error code.
 *                    ORT will release the OrtStatus* if not null.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtGetInitializerLocationFunc extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    OrtGetInitializerLocationFunc(Pointer p) { super(p); }
    protected OrtGetInitializerLocationFunc() { allocate(); }
    private native void allocate();
    public native OrtStatus call(
    Pointer state,
    @Cast("const char*") BytePointer initializer_name,
    @Const OrtValue initializer_value,
    @Const OrtExternalInitializerInfo external_info,
    @Cast("OrtExternalInitializerInfo**") PointerPointer new_external_info);
}
