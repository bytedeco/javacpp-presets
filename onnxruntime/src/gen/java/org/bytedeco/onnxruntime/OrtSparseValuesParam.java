// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;

// This structure is used to feed  sparse tensor values
// information for use with FillSparseTensor<Format>() API
// if the data type for the sparse tensor values is numeric
// use data.p_data, otherwise, use data.str pointer to feed
// values. data.str is an array of const char* that are zero terminated.
// number of strings in the array must match shape size.
// For fully sparse tensors use shape {0} and set p_data/str
// to nullptr.
@Namespace("Ort::detail") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtSparseValuesParam extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtSparseValuesParam() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtSparseValuesParam(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtSparseValuesParam(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtSparseValuesParam position(long position) {
        return (OrtSparseValuesParam)super.position(position);
    }
    @Override public OrtSparseValuesParam getPointer(long i) {
        return new OrtSparseValuesParam((Pointer)this).offsetAddress(i);
    }

  public native @Cast("const int64_t*") LongPointer values_shape(); public native OrtSparseValuesParam values_shape(LongPointer setter);
  public native @Cast("size_t") long values_shape_len(); public native OrtSparseValuesParam values_shape_len(long setter);
    @Name("data.p_data") public native @Const Pointer data_p_data(); public native OrtSparseValuesParam data_p_data(Pointer setter);
    @Name("data.str") public native @Cast("const char*") BytePointer data_str(int i); public native OrtSparseValuesParam data_str(int i, BytePointer setter);
    @Name("data.str") @MemberGetter public native @Cast("const char**") PointerPointer data_str();
}
