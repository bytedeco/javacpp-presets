// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;

@Name("Ort::detail::Base<OrtGraph>") @NoOffset @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class BaseGraph extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BaseGraph(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BaseGraph(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public BaseGraph position(long position) {
        return (BaseGraph)super.position(position);
    }
    @Override public BaseGraph getPointer(long i) {
        return new BaseGraph((Pointer)this).offsetAddress(i);
    }


  public BaseGraph() { super((Pointer)null); allocate(); }
  private native void allocate();
  public BaseGraph(@Cast("Ort::detail::Base<OrtGraph>::contained_type*") OrtGraph p) { super((Pointer)null); allocate(p); }
  @NoException(true) private native void allocate(@Cast("Ort::detail::Base<OrtGraph>::contained_type*") OrtGraph p);

  
  

  public BaseGraph(@ByRef(true) BaseGraph v) { super((Pointer)null); allocate(v); }
  @NoException(true) private native void allocate(@ByRef(true) BaseGraph v);
  public native @ByRef @Name("operator =") @NoException(true) BaseGraph put(@ByRef(true) BaseGraph v);

  public native @Cast("Ort::detail::Base<OrtGraph>::contained_type*") @Name("operator Ort::detail::Base<OrtGraph>::contained_type*") @NoException(true) OrtGraph asOrtGraph();
  public native @Cast("const Ort::detail::Base<OrtGraph>::contained_type*") @ByRef @Name("operator *") @NoException(true) OrtGraph multiply();

  /** \brief Relinquishes ownership of the contained C object pointer
   *  The underlying object is not destroyed */
  public native @Cast("Ort::detail::Base<OrtGraph>::contained_type*") OrtGraph release();
}
