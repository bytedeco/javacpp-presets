// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Delegate to allow providing custom OrtEpDevice selection logic
 *
 * This delegate is called by the EP selection code to allow the user to provide custom device selection logic.
 * The user can use this to select OrtEpDevice instances from the list of available devices.
 *
 * @param ep_devices The list of available devices.
 * @param num_devices The number of available devices.
 * @param model_metadata The model metadata.
 * @param runtime_metadata The runtime metadata. May be nullptr.
 * @param selected Pre-allocated array to populate with selected OrtEpDevice pointers from ep_devices.
 * @param max_selected The maximum number of devices that can be selected in the pre-allocated array.
                       Currently the maximum is 8.
 * @param num_selected The number of selected devices.
 * @param state Opaque pointer. Required to use the delegate from other languages like C# and python.
 *
 * @return OrtStatus* Selection status. Return nullptr on success.
 *                    Use CreateStatus to provide error info. Use ORT_FAIL as the error code.
 *                    ORT will release the OrtStatus* if not null.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class EpSelectionDelegate extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    EpSelectionDelegate(Pointer p) { super(p); }
    protected EpSelectionDelegate() { allocate(); }
    private native void allocate();
    public native OrtStatus call(@Cast("const OrtEpDevice**") PointerPointer ep_devices,
                                                      @Cast("size_t") long num_devices,
                                                      @Const OrtKeyValuePairs model_metadata,
                                                      @Const OrtKeyValuePairs runtime_metadata,
                                                      @Cast("const OrtEpDevice**") PointerPointer selected,
                                                      @Cast("size_t") long max_selected,
                                                      @Cast("size_t*") SizeTPointer num_selected,
                                                      Pointer state);
}
