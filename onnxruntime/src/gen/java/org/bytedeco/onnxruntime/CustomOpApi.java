// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


//
// Custom OPs (only needed to implement custom OPs)
//

@Namespace("Ort") @NoOffset @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class CustomOpApi extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CustomOpApi(Pointer p) { super(p); }

  public CustomOpApi(@Const @ByRef OrtApi api) { super((Pointer)null); allocate(api); }
  private native void allocate(@Const @ByRef OrtApi api);

  public native OrtTensorTypeAndShapeInfo GetTensorTypeAndShape(@Const OrtValue value);
  public native @Cast("size_t") long GetTensorShapeElementCount(@Const OrtTensorTypeAndShapeInfo info);
  public native @Cast("ONNXTensorElementDataType") int GetTensorElementType(@Const OrtTensorTypeAndShapeInfo info);
  public native @Cast("size_t") long GetDimensionsCount(@Const OrtTensorTypeAndShapeInfo info);
  public native void GetDimensions(@Const OrtTensorTypeAndShapeInfo info, @Cast("int64_t*") LongPointer dim_values, @Cast("size_t") long dim_values_length);
  public native void GetDimensions(@Const OrtTensorTypeAndShapeInfo info, @Cast("int64_t*") LongBuffer dim_values, @Cast("size_t") long dim_values_length);
  public native void GetDimensions(@Const OrtTensorTypeAndShapeInfo info, @Cast("int64_t*") long[] dim_values, @Cast("size_t") long dim_values_length);
  public native void SetDimensions(OrtTensorTypeAndShapeInfo info, @Cast("const int64_t*") LongPointer dim_values, @Cast("size_t") long dim_count);
  public native void SetDimensions(OrtTensorTypeAndShapeInfo info, @Cast("const int64_t*") LongBuffer dim_values, @Cast("size_t") long dim_count);
  public native void SetDimensions(OrtTensorTypeAndShapeInfo info, @Cast("const int64_t*") long[] dim_values, @Cast("size_t") long dim_count);

  public native @Cast("int64_t*") @StdVector LongPointer GetTensorShape(@Const OrtTensorTypeAndShapeInfo info);
  public native void ReleaseTensorTypeAndShapeInfo(OrtTensorTypeAndShapeInfo input);
  public native @Cast("size_t") long KernelContext_GetInputCount(@Const OrtKernelContext context);
  public native @Const OrtValue KernelContext_GetInput(@Const OrtKernelContext context, @Cast("size_t") long index);
  public native @Cast("size_t") long KernelContext_GetOutputCount(@Const OrtKernelContext context);
  public native OrtValue KernelContext_GetOutput(OrtKernelContext context, @Cast("size_t") long index, @Cast("const int64_t*") LongPointer dim_values, @Cast("size_t") long dim_count);
  public native OrtValue KernelContext_GetOutput(OrtKernelContext context, @Cast("size_t") long index, @Cast("const int64_t*") LongBuffer dim_values, @Cast("size_t") long dim_count);
  public native OrtValue KernelContext_GetOutput(OrtKernelContext context, @Cast("size_t") long index, @Cast("const int64_t*") long[] dim_values, @Cast("size_t") long dim_count);

  public native void ThrowOnError(OrtStatus result);
}
