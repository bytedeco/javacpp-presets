// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;

// #endif

/** \brief Memory allocation interface
 *
 * Structure of function pointers that defines a memory allocator. This can be created and filled in by the user for custom allocators.
 *
 * When an allocator is passed to any function, be sure that the allocator object is not destroyed until the last allocated object using it is freed.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtAllocator extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtAllocator() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtAllocator(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtAllocator(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtAllocator position(long position) {
        return (OrtAllocator)super.position(position);
    }
    @Override public OrtAllocator getPointer(long i) {
        return new OrtAllocator((Pointer)this).offsetAddress(i);
    }

  /** Must be initialized to ORT_API_VERSION */
  public native @Cast("uint32_t") int version(); public native OrtAllocator version(int setter);

  /** Returns a pointer to an allocated block of {@code size} bytes */
  public static class Alloc_OrtAllocator_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Alloc_OrtAllocator_long(Pointer p) { super(p); }
      protected Alloc_OrtAllocator_long() { allocate(); }
      private native void allocate();
      public native Pointer call(OrtAllocator this_, @Cast("size_t") long size);
  }
  public native Alloc_OrtAllocator_long Alloc(); public native OrtAllocator Alloc(Alloc_OrtAllocator_long setter);

  /** Free a block of memory previously allocated with OrtAllocator::Alloc */
  public static class Free_OrtAllocator_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Free_OrtAllocator_Pointer(Pointer p) { super(p); }
      protected Free_OrtAllocator_Pointer() { allocate(); }
      private native void allocate();
      public native void call(OrtAllocator this_, Pointer p);
  }
  public native Free_OrtAllocator_Pointer Free(); public native OrtAllocator Free(Free_OrtAllocator_Pointer setter);

  /** Return a pointer to an ::OrtMemoryInfo that describes this allocator */
  public static class Info_OrtAllocator extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Info_OrtAllocator(Pointer p) { super(p); }
      protected Info_OrtAllocator() { allocate(); }
      private native void allocate();
      public native @Const OrtMemoryInfo call(@Const OrtAllocator this_);
  }
  public native Info_OrtAllocator Info(); public native OrtAllocator Info(Info_OrtAllocator setter);
  /**
   * \brief Optional allocation function to use for memory allocations made during session initialization.
   * Use this function if you want to separate allocations made by ORT during Run() calls from
   * those made during session initialization. This allows for separate memory management strategies for these
   * allocations.
   *
   * @return pointer to an allocated block of {@code size} bytes. nullptr if size was 0 or allocation failed.
   *
   * @since 1.18
   */
  public static class Reserve_OrtAllocator_long extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Reserve_OrtAllocator_long(Pointer p) { super(p); }
      protected Reserve_OrtAllocator_long() { allocate(); }
      private native void allocate();
      public native Pointer call(OrtAllocator this_, @Cast("size_t") long size);
  }
  public native Reserve_OrtAllocator_long Reserve(); public native OrtAllocator Reserve(Reserve_OrtAllocator_long setter);

  /**
   * \brief Function used to get the statistics of the allocator.
   *
   * Return a pointer to the OrtKeyValuePairs structure that contains the statistics of the allocator.
   * The user should call OrtApi::ReleaseKeyValuePairs when done.
   *
   * Current known keys are:
   * - Limit: Bytes limit of the allocator. -1 if no limit is set.
   * - InUse: Number of bytes in use.
   * - TotalAllocated: The total number of allocated bytes by the allocator.
   * - MaxInUse: The maximum bytes in use.
   * - NumAllocs: Number of allocations.
   * - NumReserves: Number of reserves. (Number of calls to Reserve() in arena-based allocators)
   * - NumArenaExtensions: Number of arena extensions (Relevant only for arena based allocators)
   * - NumArenaShrinkages: Number of arena shrinkages (Relevant only for arena based allocators)
   * - MaxAllocSize: The max single allocation seen.
   *
   * The allocator is free to add other entries as appropriate.
   *
   * \note Implementation of this function is optional and GetStats may be set to a nullptr.
   *       If the OrtAllocator is wrapping an internal ORT allocator that does not implement GetStats
   *       the returned OrtKeyValuePairs instance will be empty.
   *
   * @since 1.23
   */
  public native OrtStatus GetStats( @Const OrtAllocator this_, @Cast("OrtKeyValuePairs**") PointerPointer out);
  public native OrtStatus GetStats( @Const OrtAllocator this_, @ByPtrPtr OrtKeyValuePairs out);

  /** \brief Allocate using a stream.
   *
   * If the allocator is stream aware this performs allocation using a stream.
   *
   * Alloc will be used if this is nullptr.
   *
   * @param this_ [in] OrtAllocator instance
   * @param size [in] Size of the allocation in bytes. nullptr if size was 0 or allocation failed.
   * @param stream [in] The stream to allocate on.
   *
   * @return pointer to an allocated block of {@code size} bytes
   *
   * \note Implementation of this function is optional and AllocOnStream may be set to a nullptr.
   * @since 1.23
   */
  public static class AllocOnStream_OrtAllocator_long_OrtSyncStream extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    AllocOnStream_OrtAllocator_long_OrtSyncStream(Pointer p) { super(p); }
      protected AllocOnStream_OrtAllocator_long_OrtSyncStream() { allocate(); }
      private native void allocate();
      public native Pointer call(OrtAllocator this_, @Cast("size_t") long size, OrtSyncStream stream);
  }
  public native AllocOnStream_OrtAllocator_long_OrtSyncStream AllocOnStream(); public native OrtAllocator AllocOnStream(AllocOnStream_OrtAllocator_long_OrtSyncStream setter);
}
