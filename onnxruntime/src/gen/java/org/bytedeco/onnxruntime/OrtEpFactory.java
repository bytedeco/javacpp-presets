// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/**
 * \brief The OrtEpFactory provides functions to create and manage execution providers.
 * @since Version 1.22.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtEpFactory extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtEpFactory() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtEpFactory(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtEpFactory(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtEpFactory position(long position) {
        return (OrtEpFactory)super.position(position);
    }
    @Override public OrtEpFactory getPointer(long i) {
        return new OrtEpFactory((Pointer)this).offsetAddress(i);
    }

  /** \brief The ONNX Runtime version the execution provider was compiled with.
   *
   * Implementation should set to ORT_API_VERSION.
   * ORT will use this to ensure it does not call functions that were not available when the library was compiled.
   *
   * @since Version 1.22.
   */
  public native @Cast("uint32_t") int ort_version_supported(); public native OrtEpFactory ort_version_supported(int setter);

  /** \brief Get the name of the execution provider that the factory creates.
   *
   * The returned string should be a null-terminated, UTF-8 encoded string. ORT will copy it.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @return The name of the execution provider the factory creates.
   *
   * @since Version 1.22.
   */
  public static class GetName_OrtEpFactory extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetName_OrtEpFactory(Pointer p) { super(p); }
      protected GetName_OrtEpFactory() { allocate(); }
      private native void allocate();
      public native @Cast("const char*") BytePointer call( @Const OrtEpFactory this_ptr);
  }
  public native GetName_OrtEpFactory GetName(); public native OrtEpFactory GetName(GetName_OrtEpFactory setter);

  /** \brief Get the name of vendor who owns the execution provider that the factory creates.
   *
   * The returned string should be a null-terminated, UTF-8 encoded string. ORT will copy it.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @return vendor The vendor name of the execution provider the factory creates.
   *
   * @since Version 1.22.
   */
  public static class GetVendor_OrtEpFactory extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetVendor_OrtEpFactory(Pointer p) { super(p); }
      protected GetVendor_OrtEpFactory() { allocate(); }
      private native void allocate();
      public native @Cast("const char*") BytePointer call( @Const OrtEpFactory this_ptr);
  }
  public native GetVendor_OrtEpFactory GetVendor(); public native OrtEpFactory GetVendor(GetVendor_OrtEpFactory setter);  // return EP vendor

  /** \brief Get information from the execution provider about OrtHardwareDevice support.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   *                     Non-const as the factory is passed through to the CreateEp call via the OrtEpDevice.
   * @param devices [in] The OrtHardwareDevice instances that are available.
   * @param num_devices [in] The number of OrtHardwareDevice instances.
   * @param ep_devices [out] OrtEpDevice instances for each OrtHardwareDevice that the EP can use.
   *                        The implementation should call OrtEpApi::CreateEpDevice to create, and add the OrtEpDevice
   *                        instances to this pre-allocated array. ORT will take ownership of the values returned.
   *                        i.e. usage is {@code ep_devices[0] = <ptr to OrtEpDevice created with OrtEpApi::CreateEpDevice>;}
   * @param max_ep_devices [in] The maximum number of OrtEpDevices that can be added to ep_devices.
   *                           Current default is 8. This can be increased if needed.
   * @param num_ep_devices [out] The number of EP devices added to ep_devices.
   * @return true if the factory can create an execution provider that uses {@code device}.
   *
   * @since Version 1.22.
   */
  public native OrtStatus GetSupportedDevices( OrtEpFactory this_ptr,
                    @Cast("const OrtHardwareDevice*const*") PointerPointer devices,
                    @Cast("size_t") long num_devices,
                    @Cast("OrtEpDevice**") PointerPointer ep_devices,
                    @Cast("size_t") long max_ep_devices,
                    @Cast("size_t*") SizeTPointer num_ep_devices);
  public native OrtStatus GetSupportedDevices( OrtEpFactory this_ptr,
                    @Const @ByPtrPtr OrtHardwareDevice devices,
                    @Cast("size_t") long num_devices,
                    @ByPtrPtr OrtEpDevice ep_devices,
                    @Cast("size_t") long max_ep_devices,
                    @Cast("size_t*") SizeTPointer num_ep_devices);

  /** \brief Function to create an OrtEp instance for use in a Session.
   *
   *  ORT will call ReleaseEp to release the instance when it is no longer needed.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @param devices [in] The OrtHardwareDevice instances that the execution provider was selected to use.
   *                    May be a subset of the OrtHardwareDevice instances that the execution provider's factory
   *                    set as supported in the call to OrtEpFactory::GetSupportedDevices.
   * @param ep_metadata_pairs [in] Execution provider metadata that was provided to OrtEpApi::CreateEpDevice, for each
   *                              device.
   * @param num_devices [in] The number of devices the execution provider was selected for.
   * @param session_options [in] The OrtSessionOptions instance that contains the configuration options for the
   *                            session. This will include ep_options from GetSupportedDevices as well as any
   *                            user provided overrides.
   *                            Execution provider options will have been added with a prefix of 'ep.[ep name].'.
   *                            The OrtSessionOptions instance will NOT be valid after this call and should not be
   *                            stored for later use.
   * @param logger [in] The OrtLogger instance for the session that the execution provider should use for logging.
   * @param ep [out] The OrtEp instance created by the factory.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.22.
   */
  public native OrtStatus CreateEp( OrtEpFactory this_ptr,
                    @Cast("const OrtHardwareDevice*const*") PointerPointer devices,
                    @Cast("const OrtKeyValuePairs*const*") PointerPointer ep_metadata_pairs,
                    @Cast("size_t") long num_devices,
                    @Const OrtSessionOptions session_options,
                    @Const OrtLogger logger, @Cast("OrtEp**") PointerPointer ep);
  public native OrtStatus CreateEp( OrtEpFactory this_ptr,
                    @Const @ByPtrPtr OrtHardwareDevice devices,
                    @Const @ByPtrPtr OrtKeyValuePairs ep_metadata_pairs,
                    @Cast("size_t") long num_devices,
                    @Const OrtSessionOptions session_options,
                    @Const OrtLogger logger, @ByPtrPtr OrtEp ep);

  /** \brief Release the OrtEp instance.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @param ep [in] The OrtEp instance to release.
   *
   * @since Version 1.22.
   */
  public static class ReleaseEp_OrtEpFactory_OrtEp extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    ReleaseEp_OrtEpFactory_OrtEp(Pointer p) { super(p); }
      protected ReleaseEp_OrtEpFactory_OrtEp() { allocate(); }
      private native void allocate();
      public native void call( OrtEpFactory this_ptr, OrtEp ep);
  }
  public native ReleaseEp_OrtEpFactory_OrtEp ReleaseEp(); public native OrtEpFactory ReleaseEp(ReleaseEp_OrtEpFactory_OrtEp setter);

  /** \brief Get the vendor id who owns the execution provider that the factory creates.
   *
   * This is typically the PCI vendor ID. See https://pcisig.com/membership/member-companies
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @return vendor_id The vendor ID of the execution provider the factory creates.
   *
   * @since Version 1.23.
   */
  public static class GetVendorId_OrtEpFactory extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetVendorId_OrtEpFactory(Pointer p) { super(p); }
      protected GetVendorId_OrtEpFactory() { allocate(); }
      private native void allocate();
      public native @Cast("uint32_t") int call( @Const OrtEpFactory this_ptr);
  }
  public native GetVendorId_OrtEpFactory GetVendorId(); public native OrtEpFactory GetVendorId(GetVendorId_OrtEpFactory setter);

  /** \brief Get the version of the execution provider that the factory creates.
   *
   * The version string should adhere to the Semantic Versioning 2.0 specification
   * (https://github.com/semver/semver/blob/v2.0.0/semver.md).
   *
   * The returned string should be a null-terminated, UTF-8 encoded string. ORT will copy it.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @return The execution provider version string.
   *
   * @since Version 1.23.
   */
  public static class GetVersion_OrtEpFactory extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetVersion_OrtEpFactory(Pointer p) { super(p); }
      protected GetVersion_OrtEpFactory() { allocate(); }
      private native void allocate();
      public native @Cast("const char*") BytePointer call( @Const OrtEpFactory this_ptr);
  }
  public native GetVersion_OrtEpFactory GetVersion(); public native OrtEpFactory GetVersion(GetVersion_OrtEpFactory setter);

  /** \brief Validate the compatibility of a compiled model with the execution provider factory for one or more devices.
   *
   * Given a compatibility info string produced during model compilation, the EP factory should determine whether the
   * compiled model is compatible with the EP factory when targeting the provided hardware devices. All devices provided
   * must belong to the same execution provider instance that this factory creates.
   *
   * The EP factory implementation should consider the set of devices (e.g., multi-adapter or multi-GPU scenarios) when
   * evaluating compatibility and set {@code model_compatibility} accordingly.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @param devices [in] Array of OrtHardwareDevice pointers that the EP would run on. All must map to this EP.
   * @param num_devices [in] Number of entries in {@code devices}.
   * @param compatibility_info [in] The compatibility information string produced when the model was compiled.
   * @param model_compatibility [out] OrtCompiledModelCompatibility value describing the compatibility of the model with the EP.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus ValidateCompiledModelCompatibilityInfo( OrtEpFactory this_ptr,
                    @Cast("const OrtHardwareDevice*const*") PointerPointer devices,
                    @Cast("size_t") long num_devices,
                    @Cast("const char*") BytePointer compatibility_info,
                    @Cast("OrtCompiledModelCompatibility*") IntPointer model_compatibility);
  public native OrtStatus ValidateCompiledModelCompatibilityInfo( OrtEpFactory this_ptr,
                    @Const @ByPtrPtr OrtHardwareDevice devices,
                    @Cast("size_t") long num_devices,
                    @Cast("const char*") BytePointer compatibility_info,
                    @Cast("OrtCompiledModelCompatibility*") IntPointer model_compatibility);
  public native OrtStatus ValidateCompiledModelCompatibilityInfo( OrtEpFactory this_ptr,
                    @Const @ByPtrPtr OrtHardwareDevice devices,
                    @Cast("size_t") long num_devices,
                    String compatibility_info,
                    @Cast("OrtCompiledModelCompatibility*") IntBuffer model_compatibility);
  public native OrtStatus ValidateCompiledModelCompatibilityInfo( OrtEpFactory this_ptr,
                    @Const @ByPtrPtr OrtHardwareDevice devices,
                    @Cast("size_t") long num_devices,
                    @Cast("const char*") BytePointer compatibility_info,
                    @Cast("OrtCompiledModelCompatibility*") int[] model_compatibility);
  public native OrtStatus ValidateCompiledModelCompatibilityInfo( OrtEpFactory this_ptr,
                    @Const @ByPtrPtr OrtHardwareDevice devices,
                    @Cast("size_t") long num_devices,
                    String compatibility_info,
                    @Cast("OrtCompiledModelCompatibility*") IntPointer model_compatibility);
  public native OrtStatus ValidateCompiledModelCompatibilityInfo( OrtEpFactory this_ptr,
                    @Const @ByPtrPtr OrtHardwareDevice devices,
                    @Cast("size_t") long num_devices,
                    @Cast("const char*") BytePointer compatibility_info,
                    @Cast("OrtCompiledModelCompatibility*") IntBuffer model_compatibility);
  public native OrtStatus ValidateCompiledModelCompatibilityInfo( OrtEpFactory this_ptr,
                    @Const @ByPtrPtr OrtHardwareDevice devices,
                    @Cast("size_t") long num_devices,
                    String compatibility_info,
                    @Cast("OrtCompiledModelCompatibility*") int[] model_compatibility);

  /** \brief Create an OrtAllocator that can be shared across sessions for the given OrtMemoryInfo.
   *
   * The factory that creates the EP is responsible for providing the allocators required by the EP.
   * The OrtMemoryInfo instance will match one of the values set in the OrtEpDevice using EpDevice_AddAllocatorInfo.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @param memory_info [in] The OrtMemoryInfo to create the allocator for. May be nullptr.
   * @param allocator_options [in] Optional key-value pairs for allocator options, can be nullptr.
   * @param allocator [out] The created OrtAllocator instance. Set to nullptr if the default CPU allocator is used.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus CreateAllocator( OrtEpFactory this_ptr,
                    @Const OrtMemoryInfo memory_info,
                    @Const OrtKeyValuePairs allocator_options,
                    @Cast("OrtAllocator**") PointerPointer allocator);
  public native OrtStatus CreateAllocator( OrtEpFactory this_ptr,
                    @Const OrtMemoryInfo memory_info,
                    @Const OrtKeyValuePairs allocator_options,
                    @ByPtrPtr OrtAllocator allocator);

  /** \brief Release an OrtAllocator created by the factory.
   *
   * @since Version 1.23.
   */
  public static class ReleaseAllocator_OrtEpFactory_OrtAllocator extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    ReleaseAllocator_OrtEpFactory_OrtAllocator(Pointer p) { super(p); }
      protected ReleaseAllocator_OrtEpFactory_OrtAllocator() { allocate(); }
      private native void allocate();
      public native void call( OrtEpFactory this_ptr, OrtAllocator allocator);
  }
  public native ReleaseAllocator_OrtEpFactory_OrtAllocator ReleaseAllocator(); public native OrtEpFactory ReleaseAllocator(ReleaseAllocator_OrtEpFactory_OrtAllocator setter);

  /** \brief Create an OrtDataTransferImpl instance for the factory.
   *
   * This is used to create an IDataTransfer implementation that can be used to copy data between devices
   * that the execution provider supports.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @param data_transfer [out] The created OrtDataTransferImpl instance. Set to nullptr if not required.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus CreateDataTransfer( OrtEpFactory this_ptr,
                    @Cast("OrtDataTransferImpl**") PointerPointer data_transfer);
  public native OrtStatus CreateDataTransfer( OrtEpFactory this_ptr,
                    @ByPtrPtr OrtDataTransferImpl data_transfer);

  /** \brief Check if execution providers created by the factory are stream aware.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @return True if the factory creates execution providers that are stream aware and it implements CreateSyncStreamForDevice.
   *
   * @since Version 1.23.
   */
  public static class IsStreamAware_OrtEpFactory extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    IsStreamAware_OrtEpFactory(Pointer p) { super(p); }
      protected IsStreamAware_OrtEpFactory() { allocate(); }
      private native void allocate();
      public native @Cast("bool") boolean call( @Const OrtEpFactory this_ptr);
  }
  public native IsStreamAware_OrtEpFactory IsStreamAware(); public native OrtEpFactory IsStreamAware(IsStreamAware_OrtEpFactory setter);

  /** \brief Create a synchronization stream for the given memory device.
   *
   * This is used to create a synchronization stream for the memory device that can be used for operations outside of
   * a session.
   *
   * @param this_ptr [in] The OrtEpFactory instance.
   * @param memory_device [in] The OrtMemoryDevice to create the synchronization stream for.
   * @param stream_options [in] Options for stream creation. May be nullptr.
   * @param stream [out] The created OrtSyncStreamImpl instance. nullptr if the execution provider is not stream aware.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus CreateSyncStreamForDevice( OrtEpFactory this_ptr,
                    @Const OrtMemoryDevice memory_device,
                    @Const OrtKeyValuePairs stream_options,
                    @Cast("OrtSyncStreamImpl**") PointerPointer stream);
  public native OrtStatus CreateSyncStreamForDevice( OrtEpFactory this_ptr,
                    @Const OrtMemoryDevice memory_device,
                    @Const OrtKeyValuePairs stream_options,
                    @ByPtrPtr OrtSyncStreamImpl stream);
}
