// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;

// Need to define a templated ConstOpAttr with const members
@Name("Ort::detail::ConstOpAttrImpl<OrtOpAttr>") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class ConstOpAttrImpl extends BaseOpAttr {
    static { Loader.load(); }
    /** Default native constructor. */
    public ConstOpAttrImpl() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ConstOpAttrImpl(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ConstOpAttrImpl(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ConstOpAttrImpl position(long position) {
        return (ConstOpAttrImpl)super.position(position);
    }
    @Override public ConstOpAttrImpl getPointer(long i) {
        return new ConstOpAttrImpl((Pointer)this).offsetAddress(i);
    }


  // Wraps OrtApi::OpAttr_GetName
  public native @StdString BytePointer GetName();
  // Wraps OrtApi::OpAttr_GetType
  public native @Cast("OrtOpAttrType") int GetType();

  // Wraps OrtApi::ReadAttr for a single value
  // This does not support Tensor Attribute
  // Call GetTensorAttributeAsOrtValue() instead.

  // Wraps OrtApi::ReadAttr for an array of values
  // Wraps OrtApi::OpAttr_GetTensorAttributeAsOrtValue
  public native @ByVal Status GetTensorAttributeAsOrtValue(@ByRef Value arg0);
}
