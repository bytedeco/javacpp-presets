// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Wrapper around ::OrtNode
 *
 */
@Namespace("Ort") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class Node extends ConstNodeImpl {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Node(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Node(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Node position(long position) {
        return (Node)super.position(position);
    }
    @Override public Node getPointer(long i) {
        return new Node((Pointer)this).offsetAddress(i);
    }

  public Node() { super((Pointer)null); allocate(); }
  private native void allocate();                                         // Same thing as with nullptr
  /** Take ownership of a pointer created by C API */
  public Node(OrtNode p) { super((Pointer)null); allocate(p); }
  private native void allocate(OrtNode p);

// #if !defined(ORT_MINIMAL_BUILD)
  public Node(@StdString BytePointer operator_name, @StdString BytePointer operator_domain,
         @StdString BytePointer node_name,
         @Const @ByRef StringVector input_names,
         @Const @ByRef StringVector output_names) { super((Pointer)null); allocate(operator_name, operator_domain, node_name, input_names, output_names); }
  private native void allocate(@StdString BytePointer operator_name, @StdString BytePointer operator_domain,
         @StdString BytePointer node_name,
         @Const @ByRef StringVector input_names,
         @Const @ByRef StringVector output_names);
  public Node(@StdString String operator_name, @StdString String operator_domain,
         @StdString String node_name,
         @Const @ByRef StringVector input_names,
         @Const @ByRef StringVector output_names) { super((Pointer)null); allocate(operator_name, operator_domain, node_name, input_names, output_names); }
  private native void allocate(@StdString String operator_name, @StdString String operator_domain,
         @StdString String node_name,
         @Const @ByRef StringVector input_names,
         @Const @ByRef StringVector output_names);

  /** <summary>
   *  Wraps CreateNode. Node takes ownership of attributes on success and updates the OpAttr in {@code attributes} to do so.
   *  </summary> */
  public Node(@StdString BytePointer operator_name, @StdString BytePointer operator_domain,
         @StdString BytePointer node_name,
         @Const @ByRef StringVector input_names,
         @Const @ByRef StringVector output_names,
         @ByRef OpAttrVector attributes) { super((Pointer)null); allocate(operator_name, operator_domain, node_name, input_names, output_names, attributes); }
  private native void allocate(@StdString BytePointer operator_name, @StdString BytePointer operator_domain,
         @StdString BytePointer node_name,
         @Const @ByRef StringVector input_names,
         @Const @ByRef StringVector output_names,
         @ByRef OpAttrVector attributes);
  public Node(@StdString String operator_name, @StdString String operator_domain,
         @StdString String node_name,
         @Const @ByRef StringVector input_names,
         @Const @ByRef StringVector output_names,
         @ByRef OpAttrVector attributes) { super((Pointer)null); allocate(operator_name, operator_domain, node_name, input_names, output_names, attributes); }
  private native void allocate(@StdString String operator_name, @StdString String operator_domain,
         @StdString String node_name,
         @Const @ByRef StringVector input_names,
         @Const @ByRef StringVector output_names,
         @ByRef OpAttrVector attributes);
}
