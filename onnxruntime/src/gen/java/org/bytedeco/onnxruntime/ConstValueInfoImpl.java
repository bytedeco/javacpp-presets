// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


// Forward declaration to resolve circular dependency
// on ConstNode
@Name("Ort::detail::ConstValueInfoImpl<OrtValueInfo>") @Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class ConstValueInfoImpl extends BaseValueInfo {
    static { Loader.load(); }
    /** Default native constructor. */
    public ConstValueInfoImpl() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ConstValueInfoImpl(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ConstValueInfoImpl(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ConstValueInfoImpl position(long position) {
        return (ConstValueInfoImpl)super.position(position);
    }
    @Override public ConstValueInfoImpl getPointer(long i) {
        return new ConstValueInfoImpl((Pointer)this).offsetAddress(i);
    }


  /** < A wrapper around OrtApi::GetValueInfoName */
  public native @StdString BytePointer GetName();
  /** < A wrapper around OrtApi::GetValueInfoTypeInfo */
  
  /** Wraps OrtApi::ValueInfo_GetProducerNode */
  public native @ByVal @Cast("Ort::ConstTypeInfo*") TypeInfoImpl TypeInfo();
  public native @ByVal ValueInfoConsumerProducerInfo GetProducerNode();
  /** < A wrapper around OrtApi::ValueInfo_GetValueConsumers */
  public native @StdVector ValueInfoConsumerProducerInfo GetConsumers();
  /** < A wrapper around OrtApi::ValueInfo_GetInitializerValue */
  public native @ByVal Status GetInitializer(@ByRef ConstValue value);
  /** < A wrapper around OrtApi::ValueInfo_GetExternalInitializerInfo */
  public native @ByVal Status GetExternalInitializerInfo(@ByRef ExternalInitializerInfo info);
  /** < A wrapper around OrtApi::ValueInfo_IsRequiredGraphInput */
  public native @Cast("bool") boolean IsRequiredGraphInput();
  /** < A wrapper around OrtApi::ValueInfo_IsOptionalGraphInput */
  public native @Cast("bool") boolean IsOptionalGraphInput();
  /** < A wrapper around OrtApi::ValueInfo_IsGraphOutput */
  public native @Cast("bool") boolean IsGraphOutput();
  /** < A wrapper around OrtApi::ValueInfo_IsConstantInitializer */
  public native @Cast("bool") boolean IsConstantInitializer();
  /** < A wrapper around OrtApi::ValueInfo_IsFromOuterScope */
  public native @Cast("bool") boolean IsFromOuterScope();
}
