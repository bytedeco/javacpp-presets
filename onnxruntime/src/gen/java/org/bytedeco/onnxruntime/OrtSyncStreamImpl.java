// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Struct that an EP implements if it wishes to implement Stream support.
 *
 * This struct provides the overrides for onnxruntime::Stream's virtual methods.
 *
 * @since Version 1.23.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtSyncStreamImpl extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtSyncStreamImpl() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtSyncStreamImpl(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtSyncStreamImpl(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtSyncStreamImpl position(long position) {
        return (OrtSyncStreamImpl)super.position(position);
    }
    @Override public OrtSyncStreamImpl getPointer(long i) {
        return new OrtSyncStreamImpl((Pointer)this).offsetAddress(i);
    }

  /** Must be initialized to ORT_API_VERSION */
  public native @Cast("uint32_t") int ort_version_supported(); public native OrtSyncStreamImpl ort_version_supported(int setter);

  /** \brief Release the OrtSyncStreamImpl instance.
   *
   * This is called by ORT when the OrtSyncStreamImpl instance is no longer needed.
   * The implementation should release any resources held by the instance.
   *
   * @param this_ptr [in] Pointer to the OrtSyncStreamImpl instance.
   *
   * @since Version 1.23.
   */
  public static class Release_OrtSyncStreamImpl extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Release_OrtSyncStreamImpl(Pointer p) { super(p); }
      protected Release_OrtSyncStreamImpl() { allocate(); }
      private native void allocate();
      public native void call( OrtSyncStreamImpl this_ptr);
  }
  public native Release_OrtSyncStreamImpl Release(); public native OrtSyncStreamImpl Release(Release_OrtSyncStreamImpl setter);

  /** \brief Get the handle of the stream.
   *
   * This returns the native handle for the stream. e.g. cudaStream_t for CUDA streams.
   *
   * @param this_ptr [in] Pointer to the OrtSyncStreamImpl instance.
   * @return The handle of the stream.
   *
   * @since Version 1.23.
   */
  public static class GetHandle_OrtSyncStreamImpl extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    GetHandle_OrtSyncStreamImpl(Pointer p) { super(p); }
      protected GetHandle_OrtSyncStreamImpl() { allocate(); }
      private native void allocate();
      public native Pointer call( OrtSyncStreamImpl this_ptr);
  }
  public native GetHandle_OrtSyncStreamImpl GetHandle(); public native OrtSyncStreamImpl GetHandle(GetHandle_OrtSyncStreamImpl setter);

  /** \brief Create an OrtSyncNotificationImpl for the OrtSyncStreamImpl instance.
   *
   * @param this_ptr [in] Pointer to the OrtSyncStreamImpl instance
   * @param notification [out] The new OrtSyncNotificationImpl instance.
   *
   * @since Version 1.23.
   */
  public native OrtStatus CreateNotification( OrtSyncStreamImpl this_ptr,
                    @Cast("OrtSyncNotificationImpl**") PointerPointer notification);
  public native OrtStatus CreateNotification( OrtSyncStreamImpl this_ptr,
                    @ByPtrPtr OrtSyncNotificationImpl notification);

  /** \brief Flush the stream.
   *
   * This is called by ORT to flush the stream, ensuring that all operations submitted to the stream are completed.
   *
   * @param this_ptr [in] Pointer to the OrtSyncStreamImpl instance.
   *
   * @since Version 1.23.
   */
  public native OrtStatus Flush( OrtSyncStreamImpl this_ptr);

  /** \brief Notify the stream that a session run has ended.
   *
   * This is called by ORT to notify the stream that a session run has ended, allowing the stream to perform any
   * necessary cleanup or finalization.
   *
   * @param this_ptr [in] Pointer to the OrtSyncStreamImpl instance.
   *
   * @since Version 1.23.
   */
  public native OrtStatus OnSessionRunEnd( OrtSyncStreamImpl this_ptr);
}
