// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


// struct that an EP implements for IDataTransfer to copy between devices it uses and CPU
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtDataTransferImpl extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtDataTransferImpl() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtDataTransferImpl(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtDataTransferImpl(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtDataTransferImpl position(long position) {
        return (OrtDataTransferImpl)super.position(position);
    }
    @Override public OrtDataTransferImpl getPointer(long i) {
        return new OrtDataTransferImpl((Pointer)this).offsetAddress(i);
    }

  /** Must be initialized to ORT_API_VERSION */
  public native @Cast("uint32_t") int ort_version_supported(); public native OrtDataTransferImpl ort_version_supported(int setter);

  /** \brief Release the OrtDataTransferImpl instance.
   *
   * This is called by ORT when the OrtDataTransferImpl instance is no longer needed.
   * The implementation should release any resources held by the instance.
   *
   * @param this_ptr [in] Pointer to the OrtDataTransferImpl instance.
   *
   * @since Version 1.23.
   */
  public static class Release_OrtDataTransferImpl extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Release_OrtDataTransferImpl(Pointer p) { super(p); }
      protected Release_OrtDataTransferImpl() { allocate(); }
      private native void allocate();
      public native void call( OrtDataTransferImpl this_ptr);
  }
  public native Release_OrtDataTransferImpl Release(); public native OrtDataTransferImpl Release(Release_OrtDataTransferImpl setter);

  /** \brief Check if the implementation can copy between the source and destination memory devices.
   *
   * @param this_ptr [in] Pointer to the OrtDataTransferImpl instance.
   * @param src_memory_device [in] Source OrtMemoryDevice to copy from.
   * @param dst_memory_device [in] Destination OrtMemoryDevice to copy to.
   * @return True if the implementation can copy between the devices.
   *
   * @since Version 1.23.
   */
  public static class CanCopy_OrtDataTransferImpl_OrtMemoryDevice_OrtMemoryDevice extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    CanCopy_OrtDataTransferImpl_OrtMemoryDevice_OrtMemoryDevice(Pointer p) { super(p); }
      protected CanCopy_OrtDataTransferImpl_OrtMemoryDevice_OrtMemoryDevice() { allocate(); }
      private native void allocate();
      public native @Cast("bool") boolean call( @Const OrtDataTransferImpl this_ptr,
              @Const OrtMemoryDevice src_memory_device, @Const OrtMemoryDevice dst_memory_device);
  }
  public native CanCopy_OrtDataTransferImpl_OrtMemoryDevice_OrtMemoryDevice CanCopy(); public native OrtDataTransferImpl CanCopy(CanCopy_OrtDataTransferImpl_OrtMemoryDevice_OrtMemoryDevice setter);

  /** \brief Copy tensors from src_tensors to dst_tensors using the provided streams.
   *
   * The implementation can use the provided streams to perform asynchronous copies if supported.
   * If a stream is not available, the copy is performed synchronously.
   *
   * @param this_ptr [in] Pointer to the OrtDataTransferImpl instance.
   * @param src_tensors [in] Array of source OrtValue pointers to copy from.
   * @param dst_tensors [in] Array of destination OrtValue pointers to copy to.
   * @param streams [in] Array of OrtSyncStream pointers for the copy operations, if the execution provider is stream
   *                    aware. nullptr if it is not.
   * @param num_tensors [in] Number of tensors to copy.
   *
   * \snippet{doc} snippets.dox OrtStatus Return Value
   *
   * @since Version 1.23.
   */
  public native OrtStatus CopyTensors( OrtDataTransferImpl this_ptr,
                    @Cast("const OrtValue**") PointerPointer src_tensors,
                    @Cast("OrtValue**") PointerPointer dst_tensors,
                    @Cast("OrtSyncStream**") PointerPointer streams,
                    @Cast("size_t") long num_tensors);
  public native OrtStatus CopyTensors( OrtDataTransferImpl this_ptr,
                    @Const @ByPtrPtr OrtValue src_tensors,
                    @ByPtrPtr OrtValue dst_tensors,
                    @ByPtrPtr OrtSyncStream streams,
                    @Cast("size_t") long num_tensors);
}
