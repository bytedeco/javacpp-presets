// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.onnxruntime;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;
import org.bytedeco.dnnl.*;
import static org.bytedeco.dnnl.global.dnnl.*;

import static org.bytedeco.onnxruntime.global.onnxruntime.*;


/** \brief Struct that an EP implements for Stream Notifications.
 *
 * @since Version 1.23.
 */
@Properties(inherit = org.bytedeco.onnxruntime.presets.onnxruntime.class)
public class OrtSyncNotificationImpl extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public OrtSyncNotificationImpl() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OrtSyncNotificationImpl(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OrtSyncNotificationImpl(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public OrtSyncNotificationImpl position(long position) {
        return (OrtSyncNotificationImpl)super.position(position);
    }
    @Override public OrtSyncNotificationImpl getPointer(long i) {
        return new OrtSyncNotificationImpl((Pointer)this).offsetAddress(i);
    }

  /** Must be initialized to ORT_API_VERSION */
  public native @Cast("uint32_t") int ort_version_supported(); public native OrtSyncNotificationImpl ort_version_supported(int setter);

  /** \brief Release the OrtSyncNotificationImpl instance.
   *
   * This is called by ORT when the OrtSyncNotificationImpl instance is no longer needed.
   * The implementation should release any resources held by the instance.
   *
   * @param this_ptr [in] Pointer to the OrtSyncNotificationImpl instance.
   *
   * @since Version 1.23.
   */
  public static class Release_OrtSyncNotificationImpl extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Release_OrtSyncNotificationImpl(Pointer p) { super(p); }
      protected Release_OrtSyncNotificationImpl() { allocate(); }
      private native void allocate();
      public native void call( OrtSyncNotificationImpl this_ptr);
  }
  public native Release_OrtSyncNotificationImpl Release(); public native OrtSyncNotificationImpl Release(Release_OrtSyncNotificationImpl setter);

  /** \brief Called by ORT to activate the notification.
   *
   * @param this_ptr [in] Pointer to the OrtSyncNotificationImpl instance.
   *
   * @since Version 1.23.
   */
  public native OrtStatus Activate( OrtSyncNotificationImpl this_ptr);

  /** \brief Wait for a device to device operation to complete.
   *
   * @param this_ptr [in] Pointer to the OrtSyncNotificationImpl instance.
   * @param stream [in] The OrtSyncStream instance that will wait on this notification to be activated.
   *
   * @since Version 1.23.
   */
  public native OrtStatus WaitOnDevice( OrtSyncNotificationImpl this_ptr, OrtSyncStream consumer_stream);

  /** \brief Wait for a device to host operation to complete.
   *
   * @param this_ptr [in] Pointer to the OrtSyncNotificationImpl instance.
   *
   * @since Version 1.23.
   */
  public native OrtStatus WaitOnHost( OrtSyncNotificationImpl this_ptr);
}
