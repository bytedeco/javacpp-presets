diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index 35822e210..065ffd99b 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -270,8 +270,8 @@ endif()
 # Enable space optimization for gcc/clang
 # Cannot use "-ffunction-sections -fdata-sections" if we enable bitcode (iOS)
 if (NOT MSVC AND NOT onnxruntime_ENABLE_BITCODE)
-  string(APPEND CMAKE_CXX_FLAGS " -ffunction-sections -fdata-sections")
-  string(APPEND CMAKE_C_FLAGS " -ffunction-sections -fdata-sections")
+  string(APPEND CMAKE_CXX_FLAGS " -Wextra -I/usr/local/include")
+  string(APPEND CMAKE_C_FLAGS " -Wextra -I/usr/local/include")
 endif()
 
 if (onnxruntime_BUILD_WEBASSEMBLY)
diff --git a/cmake/onnxruntime.cmake b/cmake/onnxruntime.cmake
index ec7f2b06d..d4baa8c51 100644
--- a/cmake/onnxruntime.cmake
+++ b/cmake/onnxruntime.cmake
@@ -100,9 +100,9 @@ endif()
 
 if(UNIX)
   if (APPLE)
-    set(ONNXRUNTIME_SO_LINK_FLAG " -Xlinker -dead_strip")
+    set(ONNXRUNTIME_SO_LINK_FLAG " -L/usr/local/lib -lomp")
   else()
-    set(ONNXRUNTIME_SO_LINK_FLAG " -Xlinker --version-script=${SYMBOL_FILE} -Xlinker --no-undefined -Xlinker --gc-sections -z noexecstack")
+    set(ONNXRUNTIME_SO_LINK_FLAG " -Xlinker --no-undefined -Xlinker -z -Xlinker noexecstack")
   endif()
 else()
   set(ONNXRUNTIME_SO_LINK_FLAG " -DEF:${SYMBOL_FILE}")
diff --git a/onnxruntime/core/framework/provider_bridge_ort.cc b/onnxruntime/core/framework/provider_bridge_ort.cc
index c295aa0b4..1b55c1d0c 100644
--- a/onnxruntime/core/framework/provider_bridge_ort.cc
+++ b/onnxruntime/core/framework/provider_bridge_ort.cc
@@ -891,12 +891,31 @@ struct ProviderHostImpl : ProviderHost {
 #endif
 } provider_host_;
 
+#ifdef __APPLE__
+#include <mach-o/dyld.h>
+#endif
+
 struct ProviderSharedLibrary {
+
+  std::string libpath;
+
   bool Ensure() {
     if (handle_)
       return true;
 
     std::string full_path = Env::Default().GetRuntimePath() + std::string(LIBRARY_PREFIX "onnxruntime_providers_shared" LIBRARY_EXTENSION);
+#ifdef __APPLE__
+size_t len1 = strlen(LIBRARY_PREFIX "onnxruntime_providers_shared" LIBRARY_EXTENSION);
+for (uint32_t i = 0; i < _dyld_image_count(); i++) {
+    const char *libname = _dyld_get_image_name(i);
+    size_t len2 = strlen(libname);
+    if (len2 > len1 && strcmp(LIBRARY_PREFIX "onnxruntime_providers_shared" LIBRARY_EXTENSION, libname + len2 - len1) == 0) {
+        libpath.assign(libname, len2 - len1);
+        full_path = libname;
+        break;
+    }
+}
+#endif
     auto error = Env::Default().LoadDynamicLibrary(full_path, true /*shared_globals on unix*/, &handle_);
     if (!error.IsOK()) {
       LOGS_DEFAULT(ERROR) << error.ErrorMessage();
@@ -917,7 +936,7 @@ struct ProviderSharedLibrary {
     }
   }
 
-  ProviderSharedLibrary() = default;
+  ProviderSharedLibrary() { Ensure(); };
   ~ProviderSharedLibrary() {
     // assert(!handle_); // We should already be unloaded at this point (disabled until Python shuts down deterministically)
   }
@@ -948,6 +967,18 @@ struct ProviderLibrary {
       return nullptr;
 
     std::string full_path = Env::Default().GetRuntimePath() + std::string(filename_);
+#ifdef __APPLE__
+full_path = s_library_shared.libpath + std::string(filename_);
+size_t len1 = strlen(filename_);
+for (uint32_t i = 0; i < _dyld_image_count(); i++) {
+    const char *libname = _dyld_get_image_name(i);
+    size_t len2 = strlen(libname);
+    if (len2 > len1 && strcmp(filename_, libname + len2 - len1) == 0) {
+        full_path = libname;
+        break;
+    }
+}
+#endif
     auto error = Env::Default().LoadDynamicLibrary(full_path, false, &handle_);
     if (!error.IsOK()) {
       LOGS_DEFAULT(ERROR) << error.ErrorMessage();
diff --git a/onnxruntime/core/providers/dnnl/subgraph/dnnl_conv_batchnorm.h b/onnxruntime/core/providers/dnnl/subgraph/dnnl_conv_batchnorm.h
index 6a32c0422..260e9fae9 100644
--- a/onnxruntime/core/providers/dnnl/subgraph/dnnl_conv_batchnorm.h
+++ b/onnxruntime/core/providers/dnnl/subgraph/dnnl_conv_batchnorm.h
@@ -2,6 +2,7 @@
 // Licensed under the MIT License.
 
 #pragma once
+#include <cmath>
 #include "dnnl_types.h"
 #include "core/providers/dnnl/dnnl_fwd.h"
 #include "core/providers/dnnl/dnnl_execution_provider.h"
diff --git a/onnxruntime/core/providers/shared_library/provider_bridge_provider.cc b/onnxruntime/core/providers/shared_library/provider_bridge_provider.cc
index 058211379..aa08158d3 100644
--- a/onnxruntime/core/providers/shared_library/provider_bridge_provider.cc
+++ b/onnxruntime/core/providers/shared_library/provider_bridge_provider.cc
@@ -80,18 +80,21 @@ struct OnUnload {
 
 } g_on_unload;
 
-void* CPUAllocator::Alloc(size_t size) { return g_host->CPUAllocator__Alloc(this, size); }
-void CPUAllocator::Free(void* p) { g_host->CPUAllocator__Free(this, p); }
+void* CPUAllocator::Alloc(size_t size) { g_host = Provider_GetHost(); return g_host->CPUAllocator__Alloc(this, size); }
+void CPUAllocator::Free(void* p) { g_host = Provider_GetHost(); g_host->CPUAllocator__Free(this, p); }
 
 AllocatorPtr CreateAllocator(const AllocatorCreationInfo& info) {
+  g_host = Provider_GetHost();
   return g_host->CreateAllocator(info);
 }
 
 void AllocatorManager::InsertAllocator(AllocatorPtr allocator) {
+  g_host = Provider_GetHost();
   return g_host->AllocatorManager__InsertAllocator(this, allocator);
 }
 
 AllocatorPtr AllocatorManager::GetAllocator(int id, OrtMemType mem_type) const {
+  g_host = Provider_GetHost();
   return g_host->AllocatorManager__GetAllocator(this, id, mem_type);
 }
 
@@ -151,14 +154,16 @@ template <>
 MLDataType DataTypeImpl::GetTensorType<MLFloat16>() { return Provider_GetHost()->DataTypeImpl__GetTensorType_MLFloat16(); }
 
 Status IDataTransfer::CopyTensor(const Tensor& src, Tensor& dst) const {
+  g_host = Provider_GetHost();
   return g_host->IDataTransfer__CopyTensor(this, src, dst);
 }
 
 Status IDataTransfer::CopyTensors(const std::vector<SrcDstPair>& src_dst_pairs) const {
+  g_host = Provider_GetHost();
   return g_host->IDataTransfer__CopyTensors(this, src_dst_pairs);
 }
 
-const Node& OpKernel::Node() const { return g_host->OpKernel__Node(this); }
+const Node& OpKernel::Node() const { g_host = Provider_GetHost(); return g_host->OpKernel__Node(this); }
 
 TensorShape::TensorShape(const int64_t* dimension_sizes, size_t dimension_count)
     : std::vector<int64_t>(dimension_count) {
@@ -179,6 +184,7 @@ int64_t TensorShape::Size() const {
 }
 
 int64_t TensorShape::SizeHelper(size_t start, size_t end) const {
+  g_host = Provider_GetHost();
   return g_host->TensorShape__SizeHelper(this, start, end);
 }
 
@@ -192,6 +198,7 @@ TensorShape TensorShape::Slice(size_t dimstart) const {
 }
 
 std::string TensorShape::ToString() const {
+  g_host = Provider_GetHost();
   return g_host->TensorShape__ToString(this);
 }
 
@@ -201,54 +208,66 @@ int64_t TensorShape::SizeFromDimension(size_t dimension) const { return g_host->
 std::ostream& operator<<(std::ostream& out, const TensorShape& shape) { return g_host->operator_left_shift(out, shape); }
 
 AllocatorPtr CreateAllocator(AllocatorCreationInfo info) {
+  g_host = Provider_GetHost();
   return g_host->CreateAllocator(info);
 }
 
 std::unique_ptr<IAllocator> CreateCPUAllocator(const OrtMemoryInfo& info) {
+  g_host = Provider_GetHost();
   return g_host->CreateCPUAllocator(info);
 }
 
 bool IAllocator::CalcMemSizeForArrayWithAlignment(size_t nmemb, size_t size, size_t alignment, size_t* out) noexcept {
+  g_host = Provider_GetHost();
   return g_host->IAllocator__CalcMemSizeForArrayWithAlignment(nmemb, size, alignment, out);
 }
 
 AllocatorPtr IExecutionProvider::GetAllocator(int id, OrtMemType mem_type) const {
+  g_host = Provider_GetHost();
   return g_host->IExecutionProvider__GetAllocator(this, id, mem_type);
 }
 
 void IExecutionProvider::InsertAllocator(AllocatorPtr allocator) {
+  g_host = Provider_GetHost();
   g_host->IExecutionProvider__InsertAllocator(this, allocator);
 }
 
 void IExecutionProvider::TryInsertAllocator(AllocatorPtr allocator) {
+  g_host = Provider_GetHost();
   g_host->IExecutionProvider__TryInsertAllocator(this, allocator);
 }
 
 std::vector<std::unique_ptr<ComputeCapability>> IExecutionProvider::GetCapability(const onnxruntime::GraphViewer& graph_viewer,
                                                                                   const std::vector<const KernelRegistry*>& kernel_registries) const {
+  g_host = Provider_GetHost();
   return g_host->IExecutionProvider__GetCapability(this, graph_viewer, kernel_registries);
 }
 
 common::Status IExecutionProvider::Compile(const std::vector<onnxruntime::Node*>& fused_nodes,
                                            std::vector<NodeComputeInfo>& node_compute_funcs) {
+  g_host = Provider_GetHost();
   return g_host->IExecutionProvider__Compile(this, fused_nodes, node_compute_funcs);
 }
 
 common::Status IExecutionProvider::Compile(const std::vector<onnxruntime::Node*>& fused_nodes,
                                            std::string& dll_path) {
+  g_host = Provider_GetHost();
   return g_host->IExecutionProvider__Compile(this, fused_nodes, dll_path);
 }
 
 common::Status IExecutionProvider::Compile(const std::vector<FusedNodeAndGraph>& fused_nodes_and_graphs,
                                            std::vector<NodeComputeInfo>& node_compute_funcs) {
+  g_host = Provider_GetHost();
   return g_host->IExecutionProvider__Compile(this, fused_nodes_and_graphs, node_compute_funcs);
 }
 
 int IExecutionProvider::GenerateMetaDefId(const onnxruntime::GraphViewer& graph_viewer, uint64_t& model_hash) const {
+  g_host = Provider_GetHost();
   return g_host->IExecutionProvider__GenerateMetaDefId(this, graph_viewer, model_hash);
 }
 
 void IExecutionProvider::RegisterAllocator(std::shared_ptr<AllocatorManager> allocator_manager) {
+  g_host = Provider_GetHost();
   return g_host->IExecutionProvider__RegisterAllocator(this, allocator_manager);
 }
 
@@ -267,6 +286,7 @@ std::unique_ptr<IDataTransfer> CreateGPUDataTransfer(void* stream) {
 #endif
 
 std::string GetEnvironmentVar(const std::string& var_name) {
+  g_host = Provider_GetHost();
   return g_host->GetEnvironmentVar(var_name);
 }
 
@@ -274,6 +294,7 @@ std::unordered_set<NodeIndex> GetCpuPreferredNodes(const onnxruntime::GraphViewe
                                                    const std::string& provider_type,
                                                    const std::vector<const KernelRegistry*>& kernel_registries,
                                                    const std::vector<NodeIndex>& tentative_nodes) {
+  g_host = Provider_GetHost();
   return g_host->GetCpuPreferredNodes(graph, provider_type, kernel_registries, tentative_nodes);
 }
 
@@ -333,10 +354,12 @@ std::vector<std::string> GetStackTrace() { return g_host->GetStackTrace(); }
 
 void LogRuntimeError(uint32_t session_id, const common::Status& status,
                      const char* file, const char* function, uint32_t line) {
+  g_host = Provider_GetHost();
   return g_host->LogRuntimeError(session_id, status, file, function, line);
 }
 
 std::unique_ptr<OpKernelInfo> CopyOpKernelInfo(const OpKernelInfo& info) {
+  g_host = Provider_GetHost();
   return g_host->CopyOpKernelInfo(info);
 }
 
diff --git a/tools/ci_build/build.py b/tools/ci_build/build.py
index b36d74558..d7dad2d41 100644
--- a/tools/ci_build/build.py
+++ b/tools/ci_build/build.py
@@ -654,7 +654,9 @@ def generate_build_tree(cmake_path, source_dir, build_dir, cuda_home, cudnn_home
         "-Donnxruntime_RUN_ONNX_TESTS=" + ("ON" if args.enable_onnx_tests else "OFF"),
         "-Donnxruntime_BUILD_WINML_TESTS=" + ("OFF" if args.skip_winml_tests else "ON"),
         "-Donnxruntime_GENERATE_TEST_REPORTS=ON",
-        "-Donnxruntime_DEV_MODE=" + use_dev_mode(args),
+        "-Donnxruntime_DEV_MODE=OFF",
+        "-Donnxruntime_ENABLE_LTO=OFF",
+        "-Donnxruntime_BUILD_UNIT_TESTS=OFF",
         "-DPYTHON_EXECUTABLE=" + sys.executable,
         "-Donnxruntime_USE_CUDA=" + ("ON" if args.use_cuda else "OFF"),
         "-Donnxruntime_CUDA_VERSION=" + (args.cuda_version if args.use_cuda else ""),
@@ -2051,11 +2053,7 @@ def main():
         if args.enable_onnx_tests:
             setup_test_data(build_dir, configs)
         if args.use_cuda and args.cuda_version is None:
-            if is_windows():
-                # cuda_version is used while generating version_info.py on Windows.
-                raise BuildError("cuda_version must be specified on Windows.")
-            else:
-                args.cuda_version = ""
+            args.cuda_version = ""
         if args.use_rocm and args.rocm_version is None:
             args.rocm_version = ""
         generate_build_tree(
