// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.gsl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.gsl.global.gsl.*;


 @Properties(inherit = org.bytedeco.gsl.presets.gsl.class)
public class gsl_ieee_double_rep extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gsl_ieee_double_rep() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gsl_ieee_double_rep(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gsl_ieee_double_rep(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gsl_ieee_double_rep position(long position) {
        return (gsl_ieee_double_rep)super.position(position);
    }

  public native int sign(); public native gsl_ieee_double_rep sign(int sign);
  public native @Cast("char") byte mantissa(int i); public native gsl_ieee_double_rep mantissa(int i, byte mantissa);
  @MemberGetter public native @Cast("char*") BytePointer mantissa(); /* Actual bits are 0..51, element 52 is \0 */
  public native int exponent(); public native gsl_ieee_double_rep exponent(int exponent);
  public native int type(); public native gsl_ieee_double_rep type(int type);
} 
