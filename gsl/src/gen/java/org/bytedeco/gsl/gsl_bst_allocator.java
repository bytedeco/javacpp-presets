// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.gsl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.gsl.global.gsl.*;


/* allocation routines */
@Properties(inherit = org.bytedeco.gsl.presets.gsl.class)
public class gsl_bst_allocator extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gsl_bst_allocator() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gsl_bst_allocator(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gsl_bst_allocator(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gsl_bst_allocator position(long position) {
        return (gsl_bst_allocator)super.position(position);
    }
    @Override public gsl_bst_allocator getPointer(long i) {
        return new gsl_bst_allocator((Pointer)this).position(position + i);
    }

  public static class Alloc_long_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Alloc_long_Pointer(Pointer p) { super(p); }
      protected Alloc_long_Pointer() { allocate(); }
      private native void allocate();
      public native Pointer call(@Cast("size_t") long size, Pointer params);
  }
  public native Alloc_long_Pointer alloc(); public native gsl_bst_allocator alloc(Alloc_long_Pointer setter);
  public static class Free_Pointer_Pointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Free_Pointer_Pointer(Pointer p) { super(p); }
      protected Free_Pointer_Pointer() { allocate(); }
      private native void allocate();
      public native void call(Pointer block, Pointer params);
  }
  public native @Name("free") Free_Pointer_Pointer _free(); public native gsl_bst_allocator _free(Free_Pointer_Pointer setter);
}
