// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.gsl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.gsl.global.gsl.*;

// #else
// #endif

@Properties(inherit = org.bytedeco.gsl.presets.gsl.class)
public class gsl_bspline_workspace extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gsl_bspline_workspace() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gsl_bspline_workspace(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gsl_bspline_workspace(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gsl_bspline_workspace position(long position) {
        return (gsl_bspline_workspace)super.position(position);
    }
    @Override public gsl_bspline_workspace getPointer(long i) {
        return new gsl_bspline_workspace((Pointer)this).offsetAddress(i);
    }

    public native @Cast("size_t") long spline_order(); public native gsl_bspline_workspace spline_order(long setter);  /* spline order */
    public native @Cast("size_t") long nbreak(); public native gsl_bspline_workspace nbreak(long setter);        /* number of breakpoints */
    public native @Cast("size_t") long ncontrol(); public native gsl_bspline_workspace ncontrol(long setter);      /* number of bspline control points (nbreak + spline_order - 2) */

    public native gsl_vector knots(); public native gsl_bspline_workspace knots(gsl_vector setter);    /* knots vector, length ncontrol + spline_order */
    public native gsl_vector deltal(); public native gsl_bspline_workspace deltal(gsl_vector setter);   /* left delta, length spline_order */
    public native gsl_vector deltar(); public native gsl_bspline_workspace deltar(gsl_vector setter);   /* right delta, length spline_order */
    public native gsl_vector B(); public native gsl_bspline_workspace B(gsl_vector setter);        /* temporary spline results, length spline_order */
    public native gsl_matrix XTX(); public native gsl_bspline_workspace XTX(gsl_matrix setter);      /* stores diagonals of banded normal equations matrix, ncontrol-by-spline_order */
    public native gsl_matrix R(); public native gsl_bspline_workspace R(gsl_matrix setter);        /* R factor for periodic least squares fitting, ncontrol-by-ncontrol */
    public native gsl_vector work(); public native gsl_bspline_workspace work(gsl_vector setter);     /* workspace, length 3*ncontrol */

    /* bspline derivative parameters */
    public native gsl_matrix A(); public native gsl_bspline_workspace A(gsl_matrix setter);        /* work matrix, spline_order-by-spline_order */
    public native gsl_matrix dB(); public native gsl_bspline_workspace dB(gsl_matrix setter);       /* temporary derivative results, spline_order-by-[2*(spline_order+1)] */

    public native @Cast("size_t") long icache(); public native gsl_bspline_workspace icache(long setter);        /* cached index of current interval, in [0,n+k-2] */
}
