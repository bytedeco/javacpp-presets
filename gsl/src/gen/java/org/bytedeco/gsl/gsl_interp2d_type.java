// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.gsl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.gsl.global.gsl.*;

// #else
// #endif

@Properties(inherit = org.bytedeco.gsl.presets.gsl.class)
public class gsl_interp2d_type extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gsl_interp2d_type() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gsl_interp2d_type(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gsl_interp2d_type(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gsl_interp2d_type position(long position) {
        return (gsl_interp2d_type)super.position(position);
    }

    @MemberGetter public native @Cast("const char*") BytePointer name();
    public native @Cast("unsigned int") int min_size(); public native gsl_interp2d_type min_size(int min_size);
    public static class Alloc_long_long extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Alloc_long_long(Pointer p) { super(p); }
        protected Alloc_long_long() { allocate(); }
        private native void allocate();
        public native Pointer call(@Cast("size_t") long xsize, @Cast("size_t") long ysize);
    }
    public native Alloc_long_long alloc(); public native gsl_interp2d_type alloc(Alloc_long_long alloc);
    public static class Init_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Init_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long(Pointer p) { super(p); }
        protected Init_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long() { allocate(); }
        private native void allocate();
        public native int call(Pointer arg0, @Const DoublePointer xa, @Const DoublePointer ya, @Const DoublePointer za, @Cast("size_t") long xsize, @Cast("size_t") long ysize);
    }
    public native Init_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long init(); public native gsl_interp2d_type init(Init_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long init);
    public static class Eval_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Eval_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer(Pointer p) { super(p); }
        protected Eval_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer() { allocate(); }
        private native void allocate();
        public native int call(@Const Pointer arg0, @Const DoublePointer xa, @Const DoublePointer ya, @Const DoublePointer za, @Cast("size_t") long xsize, @Cast("size_t") long ysize, double x, double y, gsl_interp_accel arg8, gsl_interp_accel arg9, DoublePointer z);
    }
    public native Eval_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval(); public native gsl_interp2d_type eval(Eval_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval);
    public static class Eval_deriv_x_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Eval_deriv_x_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer(Pointer p) { super(p); }
        protected Eval_deriv_x_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer() { allocate(); }
        private native void allocate();
        public native int call(@Const Pointer arg0, @Const DoublePointer xa, @Const DoublePointer ya, @Const DoublePointer za, @Cast("size_t") long xsize, @Cast("size_t") long ysize, double x, double y, gsl_interp_accel arg8, gsl_interp_accel arg9, DoublePointer z_p);
    }
    public native Eval_deriv_x_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_x(); public native gsl_interp2d_type eval_deriv_x(Eval_deriv_x_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_x);
    public static class Eval_deriv_y_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Eval_deriv_y_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer(Pointer p) { super(p); }
        protected Eval_deriv_y_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer() { allocate(); }
        private native void allocate();
        public native int call(@Const Pointer arg0, @Const DoublePointer xa, @Const DoublePointer ya, @Const DoublePointer za, @Cast("size_t") long xsize, @Cast("size_t") long ysize, double x, double y, gsl_interp_accel arg8, gsl_interp_accel arg9, DoublePointer z_p);
    }
    public native Eval_deriv_y_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_y(); public native gsl_interp2d_type eval_deriv_y(Eval_deriv_y_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_y);
    public static class Eval_deriv_xx_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Eval_deriv_xx_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer(Pointer p) { super(p); }
        protected Eval_deriv_xx_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer() { allocate(); }
        private native void allocate();
        public native int call(@Const Pointer arg0, @Const DoublePointer xa, @Const DoublePointer ya, @Const DoublePointer za, @Cast("size_t") long xsize, @Cast("size_t") long ysize, double x, double y, gsl_interp_accel arg8, gsl_interp_accel arg9, DoublePointer z_pp);
    }
    public native Eval_deriv_xx_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_xx(); public native gsl_interp2d_type eval_deriv_xx(Eval_deriv_xx_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_xx);
    public static class Eval_deriv_xy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Eval_deriv_xy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer(Pointer p) { super(p); }
        protected Eval_deriv_xy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer() { allocate(); }
        private native void allocate();
        public native int call(@Const Pointer arg0, @Const DoublePointer xa, @Const DoublePointer ya, @Const DoublePointer za, @Cast("size_t") long xsize, @Cast("size_t") long ysize, double x, double y, gsl_interp_accel arg8, gsl_interp_accel arg9, DoublePointer z_pp);
    }
    public native Eval_deriv_xy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_xy(); public native gsl_interp2d_type eval_deriv_xy(Eval_deriv_xy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_xy);
    public static class Eval_deriv_yy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Eval_deriv_yy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer(Pointer p) { super(p); }
        protected Eval_deriv_yy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer() { allocate(); }
        private native void allocate();
        public native int call(@Const Pointer arg0, @Const DoublePointer xa, @Const DoublePointer ya, @Const DoublePointer za, @Cast("size_t") long xsize, @Cast("size_t") long ysize, double x, double y, gsl_interp_accel arg8, gsl_interp_accel arg9, DoublePointer z_pp);
    }
    public native Eval_deriv_yy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_yy(); public native gsl_interp2d_type eval_deriv_yy(Eval_deriv_yy_Pointer_DoublePointer_DoublePointer_DoublePointer_long_long_double_double_gsl_interp_accel_gsl_interp_accel_DoublePointer eval_deriv_yy);
    public static class Free_Pointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Free_Pointer(Pointer p) { super(p); }
        protected Free_Pointer() { allocate(); }
        private native void allocate();
        public native void call(Pointer arg0);
    }
    public native Free_Pointer free(); public native gsl_interp2d_type free(Free_Pointer free);
}
