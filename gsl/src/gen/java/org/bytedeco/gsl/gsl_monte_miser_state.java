// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.gsl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.gsl.global.gsl.*;

// #else
// #endif

@Properties(inherit = org.bytedeco.gsl.presets.gsl.class)
public class gsl_monte_miser_state extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gsl_monte_miser_state() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gsl_monte_miser_state(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gsl_monte_miser_state(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gsl_monte_miser_state position(long position) {
        return (gsl_monte_miser_state)super.position(position);
    }

  public native @Cast("size_t") long min_calls(); public native gsl_monte_miser_state min_calls(long min_calls);
  public native @Cast("size_t") long min_calls_per_bisection(); public native gsl_monte_miser_state min_calls_per_bisection(long min_calls_per_bisection);
  public native double dither(); public native gsl_monte_miser_state dither(double dither);
  public native double estimate_frac(); public native gsl_monte_miser_state estimate_frac(double estimate_frac);
  public native double alpha(); public native gsl_monte_miser_state alpha(double alpha);
  public native @Cast("size_t") long dim(); public native gsl_monte_miser_state dim(long dim);
  public native int estimate_style(); public native gsl_monte_miser_state estimate_style(int estimate_style);
  public native int depth(); public native gsl_monte_miser_state depth(int depth);
  public native int verbose(); public native gsl_monte_miser_state verbose(int verbose);
  public native DoublePointer x(); public native gsl_monte_miser_state x(DoublePointer x);
  public native DoublePointer xmid(); public native gsl_monte_miser_state xmid(DoublePointer xmid);
  public native DoublePointer sigma_l(); public native gsl_monte_miser_state sigma_l(DoublePointer sigma_l);
  public native DoublePointer sigma_r(); public native gsl_monte_miser_state sigma_r(DoublePointer sigma_r);
  public native DoublePointer fmax_l(); public native gsl_monte_miser_state fmax_l(DoublePointer fmax_l);
  public native DoublePointer fmax_r(); public native gsl_monte_miser_state fmax_r(DoublePointer fmax_r);
  public native DoublePointer fmin_l(); public native gsl_monte_miser_state fmin_l(DoublePointer fmin_l);
  public native DoublePointer fmin_r(); public native gsl_monte_miser_state fmin_r(DoublePointer fmin_r);
  public native DoublePointer fsum_l(); public native gsl_monte_miser_state fsum_l(DoublePointer fsum_l);
  public native DoublePointer fsum_r(); public native gsl_monte_miser_state fsum_r(DoublePointer fsum_r);
  public native DoublePointer fsum2_l(); public native gsl_monte_miser_state fsum2_l(DoublePointer fsum2_l);
  public native DoublePointer fsum2_r(); public native gsl_monte_miser_state fsum2_r(DoublePointer fsum2_r);
  public native @Cast("size_t*") SizeTPointer hits_l(); public native gsl_monte_miser_state hits_l(SizeTPointer hits_l);
  public native @Cast("size_t*") SizeTPointer hits_r(); public native gsl_monte_miser_state hits_r(SizeTPointer hits_r);
}
