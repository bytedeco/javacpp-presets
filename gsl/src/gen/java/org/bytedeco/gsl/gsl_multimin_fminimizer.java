// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.gsl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.gsl.global.gsl.*;


@Properties(inherit = org.bytedeco.gsl.presets.gsl.class)
public class gsl_multimin_fminimizer extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public gsl_multimin_fminimizer() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public gsl_multimin_fminimizer(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public gsl_multimin_fminimizer(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public gsl_multimin_fminimizer position(long position) {
        return (gsl_multimin_fminimizer)super.position(position);
    }

  /* multi dimensional part */
  @MemberGetter public native @Const gsl_multimin_fminimizer_type type();
  public native gsl_multimin_function f(); public native gsl_multimin_fminimizer f(gsl_multimin_function f);

  public native double fval(); public native gsl_multimin_fminimizer fval(double fval);
  public native gsl_vector x(); public native gsl_multimin_fminimizer x(gsl_vector x);
  
  public native double size(); public native gsl_multimin_fminimizer size(double size);

  public native Pointer state(); public native gsl_multimin_fminimizer state(Pointer state);
}
