// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libecl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.libecl.global.libecl.*;


  @Namespace("ecl") @NoOffset @Properties(inherit = org.bytedeco.libecl.presets.libecl.class)
public class smspec_node extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public smspec_node(Pointer p) { super(p); }
  

      public static native @Cast("ecl_smspec_var_type") int valid_type(@Cast("const char*") BytePointer keyword, @Cast("const char*") BytePointer wgname, int num);
      public static native @Cast("ecl_smspec_var_type") int valid_type(String keyword, String wgname, int num);
      public native int cmp(@Const @ByRef smspec_node node2);
      public static native int cmp(@Const @ByRef smspec_node node1, @Const @ByRef smspec_node node2);

      public smspec_node(int param_index,
                             @Cast("const char*") BytePointer keyword,
                             @Cast("const char*") BytePointer wgname,
                             int num,
                             @Cast("const char*") BytePointer unit,
                             @Const IntPointer grid_dims,
                             float default_value,
                             @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index,
                             @Cast("const char*") BytePointer keyword,
                             @Cast("const char*") BytePointer wgname,
                             int num,
                             @Cast("const char*") BytePointer unit,
                             @Const IntPointer grid_dims,
                             float default_value,
                             @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index,
                             String keyword,
                             String wgname,
                             int num,
                             String unit,
                             @Const IntBuffer grid_dims,
                             float default_value,
                             String key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index,
                             String keyword,
                             String wgname,
                             int num,
                             String unit,
                             @Const IntBuffer grid_dims,
                             float default_value,
                             String key_join_string);
      public smspec_node(int param_index,
                             @Cast("const char*") BytePointer keyword,
                             @Cast("const char*") BytePointer wgname,
                             int num,
                             @Cast("const char*") BytePointer unit,
                             @Const int[] grid_dims,
                             float default_value,
                             @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index,
                             @Cast("const char*") BytePointer keyword,
                             @Cast("const char*") BytePointer wgname,
                             int num,
                             @Cast("const char*") BytePointer unit,
                             @Const int[] grid_dims,
                             float default_value,
                             @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index,
                             String keyword,
                             String wgname,
                             int num,
                             String unit,
                             @Const IntPointer grid_dims,
                             float default_value,
                             String key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index,
                             String keyword,
                             String wgname,
                             int num,
                             String unit,
                             @Const IntPointer grid_dims,
                             float default_value,
                             String key_join_string);
      public smspec_node(int param_index,
                             @Cast("const char*") BytePointer keyword,
                             @Cast("const char*") BytePointer wgname,
                             int num,
                             @Cast("const char*") BytePointer unit,
                             @Const IntBuffer grid_dims,
                             float default_value,
                             @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index,
                             @Cast("const char*") BytePointer keyword,
                             @Cast("const char*") BytePointer wgname,
                             int num,
                             @Cast("const char*") BytePointer unit,
                             @Const IntBuffer grid_dims,
                             float default_value,
                             @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index,
                             String keyword,
                             String wgname,
                             int num,
                             String unit,
                             @Const int[] grid_dims,
                             float default_value,
                             String key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index,
                             String keyword,
                             String wgname,
                             int num,
                             String unit,
                             @Const int[] grid_dims,
                             float default_value,
                             String key_join_string);

      public smspec_node(int param_index,
                             @Cast("const char*") BytePointer keyword,
                             @Cast("const char*") BytePointer wgname,
                             @Cast("const char*") BytePointer unit,
                             @Cast("const char*") BytePointer lgr,
                             int lgr_i, int lgr_j, int lgr_k,
                             float default_value,
                             @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, unit, lgr, lgr_i, lgr_j, lgr_k, default_value, key_join_string); }
      private native void allocate(int param_index,
                             @Cast("const char*") BytePointer keyword,
                             @Cast("const char*") BytePointer wgname,
                             @Cast("const char*") BytePointer unit,
                             @Cast("const char*") BytePointer lgr,
                             int lgr_i, int lgr_j, int lgr_k,
                             float default_value,
                             @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index,
                             String keyword,
                             String wgname,
                             String unit,
                             String lgr,
                             int lgr_i, int lgr_j, int lgr_k,
                             float default_value,
                             String key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, unit, lgr, lgr_i, lgr_j, lgr_k, default_value, key_join_string); }
      private native void allocate(int param_index,
                             String keyword,
                             String wgname,
                             String unit,
                             String lgr,
                             int lgr_i, int lgr_j, int lgr_k,
                             float default_value,
                             String key_join_string);

      public smspec_node(int param_index, @Cast("const char*") BytePointer keyword, @Cast("const char*") BytePointer unit, float default_value) { super((Pointer)null); allocate(param_index, keyword, unit, default_value); }
      private native void allocate(int param_index, @Cast("const char*") BytePointer keyword, @Cast("const char*") BytePointer unit, float default_value);
      public smspec_node(int param_index, String keyword, String unit, float default_value) { super((Pointer)null); allocate(param_index, keyword, unit, default_value); }
      private native void allocate(int param_index, String keyword, String unit, float default_value);
      public smspec_node(int param_index, @Cast("const char*") BytePointer keyword, int num, @Cast("const char*") BytePointer unit, @Const IntPointer grid_dims, float default_value, @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index, @Cast("const char*") BytePointer keyword, int num, @Cast("const char*") BytePointer unit, @Const IntPointer grid_dims, float default_value, @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index, String keyword, int num, String unit, @Const IntBuffer grid_dims, float default_value, String key_join_string) { super((Pointer)null); allocate(param_index, keyword, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index, String keyword, int num, String unit, @Const IntBuffer grid_dims, float default_value, String key_join_string);
      public smspec_node(int param_index, @Cast("const char*") BytePointer keyword, int num, @Cast("const char*") BytePointer unit, @Const int[] grid_dims, float default_value, @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index, @Cast("const char*") BytePointer keyword, int num, @Cast("const char*") BytePointer unit, @Const int[] grid_dims, float default_value, @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index, String keyword, int num, String unit, @Const IntPointer grid_dims, float default_value, String key_join_string) { super((Pointer)null); allocate(param_index, keyword, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index, String keyword, int num, String unit, @Const IntPointer grid_dims, float default_value, String key_join_string);
      public smspec_node(int param_index, @Cast("const char*") BytePointer keyword, int num, @Cast("const char*") BytePointer unit, @Const IntBuffer grid_dims, float default_value, @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index, @Cast("const char*") BytePointer keyword, int num, @Cast("const char*") BytePointer unit, @Const IntBuffer grid_dims, float default_value, @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index, String keyword, int num, String unit, @Const int[] grid_dims, float default_value, String key_join_string) { super((Pointer)null); allocate(param_index, keyword, num, unit, grid_dims, default_value, key_join_string); }
      private native void allocate(int param_index, String keyword, int num, String unit, @Const int[] grid_dims, float default_value, String key_join_string);
      public smspec_node(int param_index, @Cast("const char*") BytePointer keyword, int num, @Cast("const char*") BytePointer unit, float default_value, @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, num, unit, default_value, key_join_string); }
      private native void allocate(int param_index, @Cast("const char*") BytePointer keyword, int num, @Cast("const char*") BytePointer unit, float default_value, @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index, String keyword, int num, String unit, float default_value, String key_join_string) { super((Pointer)null); allocate(param_index, keyword, num, unit, default_value, key_join_string); }
      private native void allocate(int param_index, String keyword, int num, String unit, float default_value, String key_join_string);
      public smspec_node(int param_index, @Cast("const char*") BytePointer keyword, @Cast("const char*") BytePointer wgname, @Cast("const char*") BytePointer unit, float default_value, @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, unit, default_value, key_join_string); }
      private native void allocate(int param_index, @Cast("const char*") BytePointer keyword, @Cast("const char*") BytePointer wgname, @Cast("const char*") BytePointer unit, float default_value, @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index, String keyword, String wgname, String unit, float default_value, String key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, unit, default_value, key_join_string); }
      private native void allocate(int param_index, String keyword, String wgname, String unit, float default_value, String key_join_string);
      public smspec_node(int param_index, @Cast("const char*") BytePointer keyword, @Cast("const char*") BytePointer wgname, int num, @Cast("const char*") BytePointer unit, float default_value, @Cast("const char*") BytePointer key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, num, unit, default_value, key_join_string); }
      private native void allocate(int param_index, @Cast("const char*") BytePointer keyword, @Cast("const char*") BytePointer wgname, int num, @Cast("const char*") BytePointer unit, float default_value, @Cast("const char*") BytePointer key_join_string);
      public smspec_node(int param_index, String keyword, String wgname, int num, String unit, float default_value, String key_join_string) { super((Pointer)null); allocate(param_index, keyword, wgname, num, unit, default_value, key_join_string); }
      private native void allocate(int param_index, String keyword, String wgname, int num, String unit, float default_value, String key_join_string);
      public smspec_node(@Const @ByRef smspec_node node, int param_index) { super((Pointer)null); allocate(node, param_index); }
      private native void allocate(@Const @ByRef smspec_node node, int param_index);

      public static native @Cast("ecl_smspec_var_type") int identify_var_type(@Cast("const char*") BytePointer var);
      public static native @Cast("ecl_smspec_var_type") int identify_var_type(String var);

      public native int get_R1();
      public native int get_R2();
      public native @Cast("const char*") BytePointer get_gen_key1();
      public native @Cast("const char*") BytePointer get_gen_key2();
      public native @Cast("ecl_smspec_var_type") int get_var_type();
      public native int get_num();
      public native @Cast("const char*") BytePointer get_wgname();
      public native @Cast("const char*") BytePointer get_keyword();
      public native @Cast("const char*") BytePointer get_unit();
      public native @Cast("bool") boolean is_rate();
      public native @Cast("bool") boolean is_total();
      public native @Cast("bool") boolean is_historical();
      public native @Cast("bool") boolean need_nums();
      public native void fprintf__( @Cast("FILE*") Pointer stream);
      public native int get_params_index();
      public native float get_default();
      public native @Cast("const std::array<int,3>*") @ByRef IntPointer get_ijk();
      public native @Cast("const char*") BytePointer get_lgr_name();
      public native @Cast("const std::array<int,3>*") @ByRef IntPointer get_lgr_ijk();

  }
