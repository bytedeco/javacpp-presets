// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libecl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.libecl.global.libecl.*;



  @Properties(inherit = org.bytedeco.libecl.presets.libecl.class)
public class ecl_rsthead_type extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public ecl_rsthead_type() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public ecl_rsthead_type(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public ecl_rsthead_type(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public ecl_rsthead_type position(long position) {
          return (ecl_rsthead_type)super.position(position);
      }
      @Override public ecl_rsthead_type getPointer(long i) {
          return new ecl_rsthead_type(this).position(position + i);
      }
  
    // The report step is from the SEQNUM keyword for unified files,
    // and inferred from the filename for non unified files.
    public native int report_step(); public native ecl_rsthead_type report_step(int setter);
    public native int day(); public native ecl_rsthead_type day(int setter);
    public native int year(); public native ecl_rsthead_type year(int setter);
    public native int month(); public native ecl_rsthead_type month(int setter);
    public native @ByRef @Cast("time_t*") Pointer sim_time(); public native ecl_rsthead_type sim_time(Pointer setter);
    public native int version(); public native ecl_rsthead_type version(int setter);         // 100, 300, 500 (Eclipse300-Thermal)
    public native int phase_sum(); public native ecl_rsthead_type phase_sum(int setter);       // Oil = 1   Gas = 2    Water = 4

    public native @Cast("ert_ecl_unit_enum") int unit_system(); public native ecl_rsthead_type unit_system(int setter);

    public native int nx(); public native ecl_rsthead_type nx(int setter);
    public native int ny(); public native ecl_rsthead_type ny(int setter);
    public native int nz(); public native ecl_rsthead_type nz(int setter);
    public native int nactive(); public native ecl_rsthead_type nactive(int setter);
    /*-----------------------------------------------------------------*/
    /* All fields below the line are taken literally (apart from
       lowercasing) from the section about restart files in the
       ECLIPSE File Formats Reference Manual. The elements typically
       serve as dimensions in the ?WEL, ?SEG and ?CON arrays.
    */

    // Pure well properties
    public native int nwells(); public native ecl_rsthead_type nwells(int setter);          // Number of wells
    public native int niwelz(); public native ecl_rsthead_type niwelz(int setter);          // Number of elements pr well in IWEL array
    public native int nzwelz(); public native ecl_rsthead_type nzwelz(int setter);          // Number of 8 character words pr well in ZWEL array
    public native int nxwelz(); public native ecl_rsthead_type nxwelz(int setter);          // Number of elements pr well in XWEL array.

    // Connection properties
    public native int niconz(); public native ecl_rsthead_type niconz(int setter);          // Number of elements per completion in ICON array
    public native int ncwmax(); public native ecl_rsthead_type ncwmax(int setter);          // Maximum number of completions per well
    public native int nsconz(); public native ecl_rsthead_type nsconz(int setter);          // Number of elements per completion in SCON array
    public native int nxconz(); public native ecl_rsthead_type nxconz(int setter);          // Number of elements per completion in XCON array

    // Segment properties
    public native int nisegz(); public native ecl_rsthead_type nisegz(int setter);          // Number of entries pr segment in the ISEG array
    public native int nsegmx(); public native ecl_rsthead_type nsegmx(int setter);          // The maximum number of segments pr well
    public native int nswlmx(); public native ecl_rsthead_type nswlmx(int setter);          // The maximum number of segmented wells
    public native int nlbrmx(); public native ecl_rsthead_type nlbrmx(int setter);          // The maximum number of lateral branches pr well
    public native int nilbrz(); public native ecl_rsthead_type nilbrz(int setter);          // The number of entries pr segment in ILBR array
    public native int nrsegz(); public native ecl_rsthead_type nrsegz(int setter);          // The number of entries pr segment in RSEG array

    // Properteies from the LOGIHEAD keyword:
    public native @Cast("bool") boolean dualp(); public native ecl_rsthead_type dualp(boolean setter);


    // Properties from the DOUBHEAD keyword:
    public native double sim_days(); public native ecl_rsthead_type sim_days(double setter);
  }
