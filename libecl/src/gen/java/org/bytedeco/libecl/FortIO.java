// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libecl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.libecl.global.libecl.*;

    @Namespace("ERT") @NoOffset @Properties(inherit = org.bytedeco.libecl.presets.libecl.class)
public class FortIO extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public FortIO(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public FortIO(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public FortIO position(long position) {
            return (FortIO)super.position(position);
        }
        @Override public FortIO getPointer(long i) {
            return new FortIO(this).position(position + i);
        }
    
        public FortIO() { super((Pointer)null); allocate(); }
        private native void allocate();
        public FortIO(@StdString BytePointer filename, @Cast("std::ios_base::openmode") int mode, @Cast("bool") boolean fmt_file/*=false*/, @Cast("bool") boolean endian_flip_header/*=ECL_ENDIAN_FLIP*/) { super((Pointer)null); allocate(filename, mode, fmt_file, endian_flip_header); }
        private native void allocate(@StdString BytePointer filename, @Cast("std::ios_base::openmode") int mode, @Cast("bool") boolean fmt_file/*=false*/, @Cast("bool") boolean endian_flip_header/*=ECL_ENDIAN_FLIP*/);
        public FortIO(@StdString BytePointer filename, @Cast("std::ios_base::openmode") int mode) { super((Pointer)null); allocate(filename, mode); }
        private native void allocate(@StdString BytePointer filename, @Cast("std::ios_base::openmode") int mode);
        public FortIO(@StdString String filename, @Cast("std::ios_base::openmode") int mode, @Cast("bool") boolean fmt_file/*=false*/, @Cast("bool") boolean endian_flip_header/*=ECL_ENDIAN_FLIP*/) { super((Pointer)null); allocate(filename, mode, fmt_file, endian_flip_header); }
        private native void allocate(@StdString String filename, @Cast("std::ios_base::openmode") int mode, @Cast("bool") boolean fmt_file/*=false*/, @Cast("bool") boolean endian_flip_header/*=ECL_ENDIAN_FLIP*/);
        public FortIO(@StdString String filename, @Cast("std::ios_base::openmode") int mode) { super((Pointer)null); allocate(filename, mode); }
        private native void allocate(@StdString String filename, @Cast("std::ios_base::openmode") int mode);
        public native void open(@StdString BytePointer filename, @Cast("std::ios_base::openmode") int mode, @Cast("bool") boolean fmt_file/*=false*/, @Cast("bool") boolean endian_flip_header/*=ECL_ENDIAN_FLIP*/);
        public native void open(@StdString BytePointer filename, @Cast("std::ios_base::openmode") int mode);
        public native void open(@StdString String filename, @Cast("std::ios_base::openmode") int mode, @Cast("bool") boolean fmt_file/*=false*/, @Cast("bool") boolean endian_flip_header/*=ECL_ENDIAN_FLIP*/);
        public native void open(@StdString String filename, @Cast("std::ios_base::openmode") int mode);
        public native void fflush();
        public native @Cast("bool") boolean ftruncate( @Cast("offset_type") long new_size );

        public native fortio_type get();
        public native @Name("close") void _close();
    }
