// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.modsecurity;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.modsecurity.global.modsecurity.*;

@Namespace("modsecurity") @NoOffset @Properties(inherit = org.bytedeco.modsecurity.presets.modsecurity.class)
public class ConfigUnicodeMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ConfigUnicodeMap(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ConfigUnicodeMap(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ConfigUnicodeMap position(long position) {
        return (ConfigUnicodeMap)super.position(position);
    }
    @Override public ConfigUnicodeMap getPointer(long i) {
        return new ConfigUnicodeMap((Pointer)this).position(position + i);
    }

    public ConfigUnicodeMap() { super((Pointer)null); allocate(); }
    private native void allocate();

    public static native void loadConfig(@StdString BytePointer f, double codePage,
            RulesSetProperties driver, @StdString @Cast({"char*", "std::string*"}) BytePointer errg);
    public static native void loadConfig(@StdString String f, double codePage,
            RulesSetProperties driver, @StdString @Cast({"char*", "std::string*"}) BytePointer errg);

    public native void merge(ConfigUnicodeMap from);

    public native @Cast("bool") boolean m_set(); public native ConfigUnicodeMap m_set(boolean setter);
    public native double m_unicodeCodePage(); public native ConfigUnicodeMap m_unicodeCodePage(double setter);
    public native @SharedPtr UnicodeMapHolder m_unicodeMapTable(); public native ConfigUnicodeMap m_unicodeMapTable(UnicodeMapHolder setter);
}
