// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nccl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nccl.*;


/* Communicator configuration. Users can assign value to attributes to specify the
 * behavior of a communicator. */
@Properties(inherit = org.bytedeco.cuda.presets.nccl.class)
public class ncclConfig_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ncclConfig_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ncclConfig_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ncclConfig_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ncclConfig_t position(long position) {
        return (ncclConfig_t)super.position(position);
    }
    @Override public ncclConfig_t getPointer(long i) {
        return new ncclConfig_t((Pointer)this).offsetAddress(i);
    }

  /* attributes that users should never touch. */
  public native @Cast("size_t") long size(); public native ncclConfig_t size(long setter);
  public native @Cast("unsigned int") int magic(); public native ncclConfig_t magic(int setter);
  public native @Cast("unsigned int") int version(); public native ncclConfig_t version(int setter);
  /* attributes that users are able to customize. */
  public native int blocking(); public native ncclConfig_t blocking(int setter);
  public native int cgaClusterSize(); public native ncclConfig_t cgaClusterSize(int setter);
  public native int minCTAs(); public native ncclConfig_t minCTAs(int setter);
  public native int maxCTAs(); public native ncclConfig_t maxCTAs(int setter);
  public native @Cast("const char*") BytePointer netName(); public native ncclConfig_t netName(BytePointer setter);
  public native int splitShare(); public native ncclConfig_t splitShare(int setter);
}
