// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvml;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvml.*;


/**
 * Structure to store SRAM uncorrectable error counters
 */
@Properties(inherit = org.bytedeco.cuda.presets.nvml.class)
public class nvmlEccSramErrorStatus_v1_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvmlEccSramErrorStatus_v1_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvmlEccSramErrorStatus_v1_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvmlEccSramErrorStatus_v1_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvmlEccSramErrorStatus_v1_t position(long position) {
        return (nvmlEccSramErrorStatus_v1_t)super.position(position);
    }
    @Override public nvmlEccSramErrorStatus_v1_t getPointer(long i) {
        return new nvmlEccSramErrorStatus_v1_t((Pointer)this).offsetAddress(i);
    }

    /** the API version number */
    public native @Cast("unsigned int") int version(); public native nvmlEccSramErrorStatus_v1_t version(int setter);
    /** aggregate uncorrectable parity error count */
    public native @Cast("unsigned long long") long aggregateUncParity(); public native nvmlEccSramErrorStatus_v1_t aggregateUncParity(long setter);
    /** aggregate uncorrectable SEC-DED error count */
    public native @Cast("unsigned long long") long aggregateUncSecDed(); public native nvmlEccSramErrorStatus_v1_t aggregateUncSecDed(long setter);
    /** aggregate correctable error count */
    public native @Cast("unsigned long long") long aggregateCor(); public native nvmlEccSramErrorStatus_v1_t aggregateCor(long setter);
    /** volatile uncorrectable parity error count */
    public native @Cast("unsigned long long") long volatileUncParity(); public native nvmlEccSramErrorStatus_v1_t volatileUncParity(long setter);
    /** volatile uncorrectable SEC-DED error count */
    public native @Cast("unsigned long long") long volatileUncSecDed(); public native nvmlEccSramErrorStatus_v1_t volatileUncSecDed(long setter);
    /** volatile correctable error count */
    public native @Cast("unsigned long long") long volatileCor(); public native nvmlEccSramErrorStatus_v1_t volatileCor(long setter);
    /** aggregate uncorrectable error count for L2 cache bucket */
    public native @Cast("unsigned long long") long aggregateUncBucketL2(); public native nvmlEccSramErrorStatus_v1_t aggregateUncBucketL2(long setter);
    /** aggregate uncorrectable error count for SM bucket */
    public native @Cast("unsigned long long") long aggregateUncBucketSm(); public native nvmlEccSramErrorStatus_v1_t aggregateUncBucketSm(long setter);
    /** aggregate uncorrectable error count for PCIE bucket */
    public native @Cast("unsigned long long") long aggregateUncBucketPcie(); public native nvmlEccSramErrorStatus_v1_t aggregateUncBucketPcie(long setter);
    /** aggregate uncorrectable error count for Microcontroller bucket */
    public native @Cast("unsigned long long") long aggregateUncBucketMcu(); public native nvmlEccSramErrorStatus_v1_t aggregateUncBucketMcu(long setter);
    /** aggregate uncorrectable error count for Other bucket */
    public native @Cast("unsigned long long") long aggregateUncBucketOther(); public native nvmlEccSramErrorStatus_v1_t aggregateUncBucketOther(long setter);
    /** if the error threshold of field diag is exceeded */
    public native @Cast("unsigned int") int bThresholdExceeded(); public native nvmlEccSramErrorStatus_v1_t bThresholdExceeded(int setter);
}
