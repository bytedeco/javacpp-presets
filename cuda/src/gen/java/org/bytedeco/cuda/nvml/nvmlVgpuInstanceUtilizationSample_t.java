// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvml;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvml.*;


/**
 * Structure to store Utilization Value and vgpuInstance
 */
@Properties(inherit = org.bytedeco.cuda.presets.nvml.class)
public class nvmlVgpuInstanceUtilizationSample_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvmlVgpuInstanceUtilizationSample_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvmlVgpuInstanceUtilizationSample_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvmlVgpuInstanceUtilizationSample_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvmlVgpuInstanceUtilizationSample_t position(long position) {
        return (nvmlVgpuInstanceUtilizationSample_t)super.position(position);
    }

    /** vGPU Instance */
    public native @Cast("nvmlVgpuInstance_t") int vgpuInstance(); public native nvmlVgpuInstanceUtilizationSample_t vgpuInstance(int vgpuInstance);
    /** CPU Timestamp in microseconds */
    public native @Cast("unsigned long long") long timeStamp(); public native nvmlVgpuInstanceUtilizationSample_t timeStamp(long timeStamp);
    /** SM (3D/Compute) Util Value */
    public native @ByRef nvmlValue_t smUtil(); public native nvmlVgpuInstanceUtilizationSample_t smUtil(nvmlValue_t smUtil);
    /** Frame Buffer Memory Util Value */
    public native @ByRef nvmlValue_t memUtil(); public native nvmlVgpuInstanceUtilizationSample_t memUtil(nvmlValue_t memUtil);
    /** Encoder Util Value */
    public native @ByRef nvmlValue_t encUtil(); public native nvmlVgpuInstanceUtilizationSample_t encUtil(nvmlValue_t encUtil);
    /** Decoder Util Value */
    public native @ByRef nvmlValue_t decUtil(); public native nvmlVgpuInstanceUtilizationSample_t decUtil(nvmlValue_t decUtil);
}
