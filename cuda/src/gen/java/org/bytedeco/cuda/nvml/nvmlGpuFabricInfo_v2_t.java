// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvml;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvml.*;


/**
* GPU Fabric information (v2).
*
* @deprecated  nvmlGpuFabricInfo_v2_t is deprecated and will be removed in a future release.
*              Use nvmlGpuFabricInfo_v3_t instead
*
* Version 2 adds the \ref nvmlGpuFabricInfo_v2_t.version field
* to the start of the structure, and the \ref nvmlGpuFabricInfo_v2_t.healthMask
* field to the end. This structure is not backwards-compatible with
* \ref nvmlGpuFabricInfo_t.
*/
@Properties(inherit = org.bytedeco.cuda.presets.nvml.class)
public class nvmlGpuFabricInfo_v2_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvmlGpuFabricInfo_v2_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvmlGpuFabricInfo_v2_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvmlGpuFabricInfo_v2_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvmlGpuFabricInfo_v2_t position(long position) {
        return (nvmlGpuFabricInfo_v2_t)super.position(position);
    }
    @Override public nvmlGpuFabricInfo_v2_t getPointer(long i) {
        return new nvmlGpuFabricInfo_v2_t((Pointer)this).offsetAddress(i);
    }

    /** Structure version identifier (set to nvmlGpuFabricInfo_v2) */
    public native @Cast("unsigned int") int version(); public native nvmlGpuFabricInfo_v2_t version(int setter);
    /** Uuid of the cluster to which this GPU belongs */
    public native @Cast("unsigned char") byte clusterUuid(int i); public native nvmlGpuFabricInfo_v2_t clusterUuid(int i, byte setter);
    @MemberGetter public native @Cast("unsigned char*") BytePointer clusterUuid();
    /** Probe Error status, if any. Must be checked only if Probe state returns "complete". */
    public native @Cast("nvmlReturn_t") int status(); public native nvmlGpuFabricInfo_v2_t status(int setter);
    /** ID of the fabric clique to which this GPU belongs */
    public native @Cast("unsigned int") int cliqueId(); public native nvmlGpuFabricInfo_v2_t cliqueId(int setter);
    /** Current Probe State of GPU registration process. See NVML_GPU_FABRIC_STATE_* */
    public native @Cast("nvmlGpuFabricState_t") byte state(); public native nvmlGpuFabricInfo_v2_t state(byte setter);
    /** GPU Fabric health Status Mask. See NVML_GPU_FABRIC_HEALTH_MASK_* */
    public native @Cast("unsigned int") int healthMask(); public native nvmlGpuFabricInfo_v2_t healthMask(int setter);
}
