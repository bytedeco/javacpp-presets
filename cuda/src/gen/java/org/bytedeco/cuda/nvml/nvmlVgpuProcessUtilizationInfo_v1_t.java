// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvml;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvml.*;


/**
 * Structure to store Utilization Value, vgpuInstance and subprocess information for process running on vGPU instance -- version 1
 */
@Properties(inherit = org.bytedeco.cuda.presets.nvml.class)
public class nvmlVgpuProcessUtilizationInfo_v1_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvmlVgpuProcessUtilizationInfo_v1_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvmlVgpuProcessUtilizationInfo_v1_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvmlVgpuProcessUtilizationInfo_v1_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvmlVgpuProcessUtilizationInfo_v1_t position(long position) {
        return (nvmlVgpuProcessUtilizationInfo_v1_t)super.position(position);
    }
    @Override public nvmlVgpuProcessUtilizationInfo_v1_t getPointer(long i) {
        return new nvmlVgpuProcessUtilizationInfo_v1_t((Pointer)this).offsetAddress(i);
    }

    /** Name of process running within the vGPU VM */
    public native @Cast("char") byte processName(int i); public native nvmlVgpuProcessUtilizationInfo_v1_t processName(int i, byte setter);
    @MemberGetter public native @Cast("char*") BytePointer processName();
    /** CPU Timestamp in microseconds */
    public native @Cast("unsigned long long") long timeStamp(); public native nvmlVgpuProcessUtilizationInfo_v1_t timeStamp(long setter);
    /** vGPU Instance */
    public native @Cast("nvmlVgpuInstance_t") int vgpuInstance(); public native nvmlVgpuProcessUtilizationInfo_v1_t vgpuInstance(int setter);
    /** PID of process running within the vGPU VM */
    public native @Cast("unsigned int") int pid(); public native nvmlVgpuProcessUtilizationInfo_v1_t pid(int setter);
    /** SM (3D/Compute) Util Value */
    public native @Cast("unsigned int") int smUtil(); public native nvmlVgpuProcessUtilizationInfo_v1_t smUtil(int setter);
    /** Frame Buffer Memory Util Value */
    public native @Cast("unsigned int") int memUtil(); public native nvmlVgpuProcessUtilizationInfo_v1_t memUtil(int setter);
    /** Encoder Util Value */
    public native @Cast("unsigned int") int encUtil(); public native nvmlVgpuProcessUtilizationInfo_v1_t encUtil(int setter);
    /** Decoder Util Value */
    public native @Cast("unsigned int") int decUtil(); public native nvmlVgpuProcessUtilizationInfo_v1_t decUtil(int setter);
    /** Jpeg Util Value */
    public native @Cast("unsigned int") int jpgUtil(); public native nvmlVgpuProcessUtilizationInfo_v1_t jpgUtil(int setter);
    /** Ofa Util Value */
    public native @Cast("unsigned int") int ofaUtil(); public native nvmlVgpuProcessUtilizationInfo_v1_t ofaUtil(int setter);
}
