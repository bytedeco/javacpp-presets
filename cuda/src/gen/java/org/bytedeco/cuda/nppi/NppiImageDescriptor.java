// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nppi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.nppc.*;
import static org.bytedeco.cuda.global.nppc.*;

import static org.bytedeco.cuda.global.nppi.*;


/**
 * Data structure for variable ROI image resizing.
 * 
 */

/**
 * General image descriptor. Defines the basic parameters of an image,
 * including data pointer, step size and size information.
 * This can be used by both source and destination sides.
 */
@Properties(inherit = org.bytedeco.cuda.presets.nppi.class)
public class NppiImageDescriptor extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NppiImageDescriptor() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NppiImageDescriptor(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NppiImageDescriptor(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NppiImageDescriptor position(long position) {
        return (NppiImageDescriptor)super.position(position);
    }

    public native Pointer pData(); public native NppiImageDescriptor pData(Pointer pData);  // device memory pointer to the image
    public native int nStep(); public native NppiImageDescriptor nStep(int nStep);  // step size
    public native @ByRef NppiSize oSize(); public native NppiImageDescriptor oSize(NppiSize oSize);  // width and height of the image
}
