// Targeted by JavaCPP version 1.5.9: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nppc;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nppc.*;


@Properties(inherit = org.bytedeco.cuda.presets.nppc.class)
public class NppiWarpPerspectiveBatchCXR extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NppiWarpPerspectiveBatchCXR() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NppiWarpPerspectiveBatchCXR(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NppiWarpPerspectiveBatchCXR(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NppiWarpPerspectiveBatchCXR position(long position) {
        return (NppiWarpPerspectiveBatchCXR)super.position(position);
    }
    @Override public NppiWarpPerspectiveBatchCXR getPointer(long i) {
        return new NppiWarpPerspectiveBatchCXR((Pointer)this).offsetAddress(i);
    }

    public native @Const Pointer pSrc(); public native NppiWarpPerspectiveBatchCXR pSrc(Pointer setter);  /* device memory pointer */
    public native int nSrcStep(); public native NppiWarpPerspectiveBatchCXR nSrcStep(int setter);
    public native Pointer pDst(); public native NppiWarpPerspectiveBatchCXR pDst(Pointer setter);        /* device memory pointer */
    public native int nDstStep(); public native NppiWarpPerspectiveBatchCXR nDstStep(int setter);
    public native @Cast("Npp64f*") DoublePointer pCoeffs(); public native NppiWarpPerspectiveBatchCXR pCoeffs(DoublePointer setter);   /* device memory pointer to the tranformation matrix with double precision floating-point coefficient values to be used for this image */
    public native @Cast("Npp64f") double aTransformedCoeffs(int i, int j); public native NppiWarpPerspectiveBatchCXR aTransformedCoeffs(int i, int j, double setter);
    @MemberGetter public native @Cast("Npp64f(* /*[3]*/ )[3]") DoublePointer aTransformedCoeffs(); /* FOR INTERNAL USE, DO NOT INITIALIZE  */
}
