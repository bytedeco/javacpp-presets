// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvcomp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvcomp.*;


/**
 * \brief High-level interface class for the Deflate compressor.
 *
 * \note If user_stream is specified, the lifetime of the DeflateManager instance must not
 * extend beyond that of the user_stream.
 */
@Namespace("nvcomp") @Properties(inherit = org.bytedeco.cuda.presets.nvcomp.class)
public class DeflateManager extends PimplManager {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeflateManager(Pointer p) { super(p); }

  /**
   * \brief Constructor of DeflateManager.
   *
   * @param uncomp_chunk_size [in] Internal chunk size used to partition the input data.
   * @param compress_opts [in] Compression options to use.
   * @param decompress_opts [in] Decompression options to use.
   * @param user_stream [in] The CUDA stream to operate on.
   * @param checksum_policy [in] The checksum policy to use during compression and decompression.
   * @param bitstream_kind [in] Setting to configure how the manager compresses the input.
   */
  public DeflateManager(
      @Cast("size_t") long uncomp_chunk_size,
      @Const @ByRef(nullValue = "nvcompBatchedDeflateCompressOpts_t(nvcompBatchedDeflateCompressDefaultOpts)") nvcompBatchedDeflateCompressOpts_t compress_opts,
      @Const @ByRef(nullValue = "nvcompBatchedDeflateDecompressOpts_t(nvcompBatchedDeflateDecompressDefaultOpts)") nvcompBatchedDeflateDecompressOpts_t decompress_opts,
      CUstream_st user_stream/*=0*/,
      @Cast("nvcomp::ChecksumPolicy") int checksum_policy/*=nvcomp::NoComputeNoVerify*/,
      @Cast("nvcomp::BitstreamKind") int bitstream_kind/*=nvcomp::BitstreamKind::NVCOMP_NATIVE*/) { super((Pointer)null); allocate(uncomp_chunk_size, compress_opts, decompress_opts, user_stream, checksum_policy, bitstream_kind); }
  private native void allocate(
      @Cast("size_t") long uncomp_chunk_size,
      @Const @ByRef(nullValue = "nvcompBatchedDeflateCompressOpts_t(nvcompBatchedDeflateCompressDefaultOpts)") nvcompBatchedDeflateCompressOpts_t compress_opts,
      @Const @ByRef(nullValue = "nvcompBatchedDeflateDecompressOpts_t(nvcompBatchedDeflateDecompressDefaultOpts)") nvcompBatchedDeflateDecompressOpts_t decompress_opts,
      CUstream_st user_stream/*=0*/,
      @Cast("nvcomp::ChecksumPolicy") int checksum_policy/*=nvcomp::NoComputeNoVerify*/,
      @Cast("nvcomp::BitstreamKind") int bitstream_kind/*=nvcomp::BitstreamKind::NVCOMP_NATIVE*/);
  public DeflateManager(
      @Cast("size_t") long uncomp_chunk_size) { super((Pointer)null); allocate(uncomp_chunk_size); }
  private native void allocate(
      @Cast("size_t") long uncomp_chunk_size);

  /**
   * \brief Destructor of DeflateManager.
   */
}
