// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvcomp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvcomp.*;


/**
 * \brief Gzip decompression options for the low-level API
 */
@Properties(inherit = org.bytedeco.cuda.presets.nvcomp.class)
public class nvcompBatchedGzipDecompressOpts_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvcompBatchedGzipDecompressOpts_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvcompBatchedGzipDecompressOpts_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvcompBatchedGzipDecompressOpts_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvcompBatchedGzipDecompressOpts_t position(long position) {
        return (nvcompBatchedGzipDecompressOpts_t)super.position(position);
    }
    @Override public nvcompBatchedGzipDecompressOpts_t getPointer(long i) {
        return new nvcompBatchedGzipDecompressOpts_t((Pointer)this).offsetAddress(i);
    }

  /**
   * \brief Decompression backend to use.
   */
  public native @Cast("nvcompDecompressBackend_t") int backend(); public native nvcompBatchedGzipDecompressOpts_t backend(int setter);
  /**
   * \brief Decompression CUDA algorithm to use.
   */
  public native @Cast("nvcompBatchedGzipDecompressAlgorithm_t") int algorithm(); public native nvcompBatchedGzipDecompressOpts_t algorithm(int setter);
  /**
   * \brief Whether to sort chunks before hardware decompression for better load balancing.
   *        Only used when the backend is the hardware decompression engine.
   */
  public native int sort_before_hw_decompress(); public native nvcompBatchedGzipDecompressOpts_t sort_before_hw_decompress(int setter);
  /**
   * \brief These bytes are unused and must be zeroed. This ensures
   *        compatibility if additional fields are added in the future.
   */
  public native @Cast("char") byte reserved(int i); public native nvcompBatchedGzipDecompressOpts_t reserved(int i, byte setter);
  @MemberGetter public native @Cast("char*") BytePointer reserved();
}
