// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvcomp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvcomp.*;


/**
 * \brief Per-algorithm buffer alignment requirements.
 */
@Properties(inherit = org.bytedeco.cuda.presets.nvcomp.class)
public class nvcompAlignmentRequirements_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvcompAlignmentRequirements_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvcompAlignmentRequirements_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvcompAlignmentRequirements_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvcompAlignmentRequirements_t position(long position) {
        return (nvcompAlignmentRequirements_t)super.position(position);
    }
    @Override public nvcompAlignmentRequirements_t getPointer(long i) {
        return new nvcompAlignmentRequirements_t((Pointer)this).offsetAddress(i);
    }

    /** Minimum alignment requirement of each input buffer. */
    public native @Cast("size_t") long input(); public native nvcompAlignmentRequirements_t input(long setter);
    /** Minimum alignment requirement of each output buffer. */
    public native @Cast("size_t") long output(); public native nvcompAlignmentRequirements_t output(long setter);
    /** Minimum alignment requirement of temporary-storage buffer, if any. For
     *  algorithms that do not use temporary storage, this field is always equal
     *  to 1. */
    public native @Cast("size_t") long temp(); public native nvcompAlignmentRequirements_t temp(long setter);
}
