// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvcomp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvcomp.*;
 // namespace detail

// #endif // DOXYGEN_SHOULD_SKIP_THIS

/**
 * \brief Configuration used to aggregate information about the compression of a particular buffer.
 */
@Namespace("nvcomp") @NoOffset @Properties(inherit = org.bytedeco.cuda.presets.nvcomp.class)
public class CompressionConfig extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CompressionConfig(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CompressionConfig(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public CompressionConfig position(long position) {
        return (CompressionConfig)super.position(position);
    }
    @Override public CompressionConfig getPointer(long i) {
        return new CompressionConfig((Pointer)this).offsetAddress(i);
    }


  // pimpl

  // API
  public native @Cast("size_t") long uncompressed_buffer_size(); public native CompressionConfig uncompressed_buffer_size(long setter);
  public native @Cast("size_t") long max_compressed_buffer_size(); public native CompressionConfig max_compressed_buffer_size(long setter);
  public native @Cast("size_t") long num_chunks(); public native CompressionConfig num_chunks(long setter);
  public native @Cast("bool") boolean compute_checksums(); public native CompressionConfig compute_checksums(boolean setter);

  /**
   * \brief Default constructor that initializes members with default values.
   *
   * \note CompressionConfig should be retrieved via the \ref configure_compression
   * member function, and shouldn't be constructed directly.
   */
  public CompressionConfig() { super((Pointer)null); allocate(); }
  private native void allocate();

  /**
   * \brief Construct the CompressionConfig using an nvcompStatus_t memory pool and the
   * uncompressed buffer size.
   *
   * \note CompressionConfig should be retrieved via the \ref configure_compression
   * member function, and shouldn't be constructed directly.
   */

  /**
   * \brief Get the status of the overall compression.
   *
   * \note The data resides in pinned host memory.
   */
  public native @Cast("nvcompStatus_t*") IntPointer get_status();

  public CompressionConfig(@ByRef(true) CompressionConfig other) { super((Pointer)null); allocate(other); }
  private native void allocate(@ByRef(true) CompressionConfig other);
  public native @ByRef @Name("operator =") CompressionConfig put(@ByRef(true) CompressionConfig other);
}
