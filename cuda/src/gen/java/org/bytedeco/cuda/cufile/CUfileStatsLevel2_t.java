// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.cufile;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.cufile.*;


/**
 * \brief Level 2 Statistics: Includes Level 1 plus size histograms and detailed metrics
 */
@Properties(inherit = org.bytedeco.cuda.presets.cufile.class)
public class CUfileStatsLevel2_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CUfileStatsLevel2_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CUfileStatsLevel2_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUfileStatsLevel2_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CUfileStatsLevel2_t position(long position) {
        return (CUfileStatsLevel2_t)super.position(position);
    }
    @Override public CUfileStatsLevel2_t getPointer(long i) {
        return new CUfileStatsLevel2_t((Pointer)this).offsetAddress(i);
    }

    // Basic statistics (Level 1)
    public native @ByRef CUfileStatsLevel1_t basic(); public native CUfileStatsLevel2_t basic(CUfileStatsLevel1_t setter);
    
    // IO size histograms
    public native @Cast("uint64_t") long read_size_kb_hist(int i); public native CUfileStatsLevel2_t read_size_kb_hist(int i, long setter);
    @MemberGetter public native @Cast("uint64_t*") LongPointer read_size_kb_hist();    // Histogram of read sizes
    public native @Cast("uint64_t") long write_size_kb_hist(int i); public native CUfileStatsLevel2_t write_size_kb_hist(int i, long setter);
    @MemberGetter public native @Cast("uint64_t*") LongPointer write_size_kb_hist();   // Histogram of write sizes
}
