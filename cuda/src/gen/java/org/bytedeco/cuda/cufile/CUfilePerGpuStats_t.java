// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.cufile;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.cufile.*;


/**
 * \brief Per-GPU statistics structure used in Level 3
 */
@Properties(inherit = org.bytedeco.cuda.presets.cufile.class)
public class CUfilePerGpuStats_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CUfilePerGpuStats_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CUfilePerGpuStats_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUfilePerGpuStats_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CUfilePerGpuStats_t position(long position) {
        return (CUfilePerGpuStats_t)super.position(position);
    }
    @Override public CUfilePerGpuStats_t getPointer(long i) {
        return new CUfilePerGpuStats_t((Pointer)this).offsetAddress(i);
    }

    public native @Cast("char") byte uuid(int i); public native CUfilePerGpuStats_t uuid(int i, byte setter);
    @MemberGetter public native @Cast("char*") BytePointer uuid();       // GPU UUID
    
    // Read operations
    public native @Cast("uint64_t") long read_bytes(); public native CUfilePerGpuStats_t read_bytes(long setter);           // Total bytes read
    public native @Cast("uint64_t") long read_bw_bytes_per_sec(); public native CUfilePerGpuStats_t read_bw_bytes_per_sec(long setter);// Read bandwidth in bytes per second
    public native @Cast("uint64_t") long read_utilization(); public native CUfilePerGpuStats_t read_utilization(long setter);     // Read utilization percentage
    public native @Cast("uint64_t") long read_duration_us(); public native CUfilePerGpuStats_t read_duration_us(long setter);     // Read operation duration
    public native @Cast("uint64_t") long n_total_reads(); public native CUfilePerGpuStats_t n_total_reads(long setter);        // Total number of reads
    public native @Cast("uint64_t") long n_p2p_reads(); public native CUfilePerGpuStats_t n_p2p_reads(long setter);          // Number of PCIe P2PDMA reads
    public native @Cast("uint64_t") long n_nvfs_reads(); public native CUfilePerGpuStats_t n_nvfs_reads(long setter);         // Number of nvidia-fs reads
    public native @Cast("uint64_t") long n_posix_reads(); public native CUfilePerGpuStats_t n_posix_reads(long setter);        // Number of POSIX reads
    public native @Cast("uint64_t") long n_unaligned_reads(); public native CUfilePerGpuStats_t n_unaligned_reads(long setter);    // Number of unaligned reads
    public native @Cast("uint64_t") long n_dr_reads(); public native CUfilePerGpuStats_t n_dr_reads(long setter);           // Number of reads using dynamic routing
    public native @Cast("uint64_t") long n_sparse_regions(); public native CUfilePerGpuStats_t n_sparse_regions(long setter);     // Number of sparse regions
    public native @Cast("uint64_t") long n_inline_regions(); public native CUfilePerGpuStats_t n_inline_regions(long setter);     // Number of inline regions
    public native @Cast("uint64_t") long n_reads_err(); public native CUfilePerGpuStats_t n_reads_err(long setter);          // Number of read errors
    
    // Write operations
    public native @Cast("uint64_t") long writes_bytes(); public native CUfilePerGpuStats_t writes_bytes(long setter);         // Total bytes written
    public native @Cast("uint64_t") long write_bw_bytes_per_sec(); public native CUfilePerGpuStats_t write_bw_bytes_per_sec(long setter);// Write bandwidth in bytes per secind
    public native @Cast("uint64_t") long write_utilization(); public native CUfilePerGpuStats_t write_utilization(long setter);    // Write utilization percentage  
    public native @Cast("uint64_t") long write_duration_us(); public native CUfilePerGpuStats_t write_duration_us(long setter);    // Write operation duration
    public native @Cast("uint64_t") long n_total_writes(); public native CUfilePerGpuStats_t n_total_writes(long setter);       // Total number of writes
    public native @Cast("uint64_t") long n_p2p_writes(); public native CUfilePerGpuStats_t n_p2p_writes(long setter);      // Number of PCIe P2PDMA writes
    public native @Cast("uint64_t") long n_nvfs_writes(); public native CUfilePerGpuStats_t n_nvfs_writes(long setter);        // Number of nvidia-fs writes
    public native @Cast("uint64_t") long n_posix_writes(); public native CUfilePerGpuStats_t n_posix_writes(long setter);       // Number of POSIX writes
    public native @Cast("uint64_t") long n_unaligned_writes(); public native CUfilePerGpuStats_t n_unaligned_writes(long setter);   // Number of unaligned writes
    public native @Cast("uint64_t") long n_dr_writes(); public native CUfilePerGpuStats_t n_dr_writes(long setter);          // Number of writes using dynamic routing
    public native @Cast("uint64_t") long n_writes_err(); public native CUfilePerGpuStats_t n_writes_err(long setter);         // Number of write errors
    
    // Buffer registration statistics
    public native @Cast("uint64_t") long n_mmap(); public native CUfilePerGpuStats_t n_mmap(long setter);               // Number of buffer registrations
    public native @Cast("uint64_t") long n_mmap_ok(); public native CUfilePerGpuStats_t n_mmap_ok(long setter);            // Successful registrations
    public native @Cast("uint64_t") long n_mmap_err(); public native CUfilePerGpuStats_t n_mmap_err(long setter);           // Failed registrations
    public native @Cast("uint64_t") long n_mmap_free(); public native CUfilePerGpuStats_t n_mmap_free(long setter);          // Number of buffer deregistrations
    public native @Cast("uint64_t") long reg_bytes(); public native CUfilePerGpuStats_t reg_bytes(long setter);            // Total bytes registered
}
