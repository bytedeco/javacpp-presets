// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.cufile;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.cufile.*;


/**
 * \brief cufileop status string
 */
@Properties(inherit = org.bytedeco.cuda.presets.cufile.class)
public class CUfileError_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CUfileError_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CUfileError_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUfileError_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CUfileError_t position(long position) {
        return (CUfileError_t)super.position(position);
    }
    @Override public CUfileError_t getPointer(long i) {
        return new CUfileError_t((Pointer)this).offsetAddress(i);
    }


	public native @Cast("CUfileOpError") int err(); public native CUfileError_t err(int setter); // cufile error

	public native @Cast("CUresult") int cu_err(); public native CUfileError_t cu_err(int setter); // cuda driver error

}
