// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.cudart;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cuda.global.cudart.*;


@Properties(inherit = org.bytedeco.cuda.presets.cudart.class)
public class CUDA_BATCH_MEM_OP_NODE_PARAMS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CUDA_BATCH_MEM_OP_NODE_PARAMS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CUDA_BATCH_MEM_OP_NODE_PARAMS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUDA_BATCH_MEM_OP_NODE_PARAMS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CUDA_BATCH_MEM_OP_NODE_PARAMS position(long position) {
        return (CUDA_BATCH_MEM_OP_NODE_PARAMS)super.position(position);
    }
    @Override public CUDA_BATCH_MEM_OP_NODE_PARAMS getPointer(long i) {
        return new CUDA_BATCH_MEM_OP_NODE_PARAMS((Pointer)this).offsetAddress(i);
    }

    public native CUctx_st ctx(); public native CUDA_BATCH_MEM_OP_NODE_PARAMS ctx(CUctx_st setter);
    public native @Cast("unsigned int") int count(); public native CUDA_BATCH_MEM_OP_NODE_PARAMS count(int setter);
    public native @Cast("CUstreamBatchMemOpParams*") CUstreamBatchMemOpParams_v1 paramArray(); public native CUDA_BATCH_MEM_OP_NODE_PARAMS paramArray(CUstreamBatchMemOpParams_v1 setter);
    public native @Cast("unsigned int") int flags(); public native CUDA_BATCH_MEM_OP_NODE_PARAMS flags(int setter);
}
