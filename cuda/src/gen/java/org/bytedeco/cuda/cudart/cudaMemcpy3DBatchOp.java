// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.cudart;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cuda.global.cudart.*;


@Properties(inherit = org.bytedeco.cuda.presets.cudart.class)
public class cudaMemcpy3DBatchOp extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public cudaMemcpy3DBatchOp() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public cudaMemcpy3DBatchOp(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public cudaMemcpy3DBatchOp(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public cudaMemcpy3DBatchOp position(long position) {
        return (cudaMemcpy3DBatchOp)super.position(position);
    }
    @Override public cudaMemcpy3DBatchOp getPointer(long i) {
        return new cudaMemcpy3DBatchOp((Pointer)this).offsetAddress(i);
    }

    /** Source memcpy operand. */
    public native @ByRef cudaMemcpy3DOperand src(); public native cudaMemcpy3DBatchOp src(cudaMemcpy3DOperand setter);
    /** Destination memcpy operand. */
    public native @ByRef cudaMemcpy3DOperand dst(); public native cudaMemcpy3DBatchOp dst(cudaMemcpy3DOperand setter);
    /** Extents of the memcpy between src and dst. The width, height and depth components must not be 0.*/
    public native @ByRef cudaExtent extent(); public native cudaMemcpy3DBatchOp extent(cudaExtent setter);
    /** Source access ordering to be observed for copy from src to dst. */
    public native @Cast("cudaMemcpySrcAccessOrder") int srcAccessOrder(); public native cudaMemcpy3DBatchOp srcAccessOrder(int setter);
    /** Additional flags for copy from src to dst. See ::cudaMemcpyFlags. */
    public native @Cast("unsigned int") int flags(); public native cudaMemcpy3DBatchOp flags(int setter);
}
