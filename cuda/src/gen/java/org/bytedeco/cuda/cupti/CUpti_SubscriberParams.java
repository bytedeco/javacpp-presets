// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.cupti;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.cupti.*;


/**
 * \brief Params for cuptiSubscribe_v2
 */
@Properties(inherit = org.bytedeco.cuda.presets.cupti.class)
public class CUpti_SubscriberParams extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CUpti_SubscriberParams() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CUpti_SubscriberParams(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUpti_SubscriberParams(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CUpti_SubscriberParams position(long position) {
        return (CUpti_SubscriberParams)super.position(position);
    }
    @Override public CUpti_SubscriberParams getPointer(long i) {
        return new CUpti_SubscriberParams((Pointer)this).offsetAddress(i);
    }

    /**
     * Size of the data structure. CUPTI client should set the size of the structure. 
     * It will be used in CUPTI to check what fields are available in the structure. 
     * Used to preserve backward compatibility.
     */
    public native @Cast("size_t") long structSize(); public native CUpti_SubscriberParams structSize(long setter);

    /**
     * Name given to the subscriber. The subscriber name need not include the "CUPTI" prefix, as the CUPTI library automatically adds it as "CUPTI for <subscriberName>". 
     * Can be NULL. An internal copy is created. Size must not exceed CUPTI_SUBSCRIBER_NAME_MAX_LEN to avoid truncation.
     */
    public native @Cast("const char*") BytePointer subscriberName(); public native CUpti_SubscriberParams subscriberName(BytePointer setter);

    /**
     * In case of CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED return code, the name of the incompatible tool or the 
     * existing CUPTI subscriber will be written to this location. Size should be greater than or equal to CUPTI_OLD_SUBSCRIBER_NAME_MIN_LEN to avoid truncation.
     * Can be NULL.
     */
    public native @Cast("char*") BytePointer oldSubscriberName(); public native CUpti_SubscriberParams oldSubscriberName(BytePointer setter);

    /**
     * Size of oldSubscriberName. Minimum size should be CUPTI_OLD_SUBSCRIBER_NAME_MIN_LEN to avoid truncation.
     */
    public native @Cast("size_t") long oldSubscriberSize(); public native CUpti_SubscriberParams oldSubscriberSize(long setter);

}
