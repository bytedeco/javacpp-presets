// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.cuda.nvjpeg;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.cuda.global.nvjpeg.*;



// Output descriptor.
// Data that is written to planes depends on output format
@Properties(inherit = org.bytedeco.cuda.presets.nvjpeg.class)
public class nvjpegImage_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public nvjpegImage_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public nvjpegImage_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public nvjpegImage_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public nvjpegImage_t position(long position) {
        return (nvjpegImage_t)super.position(position);
    }
    @Override public nvjpegImage_t getPointer(long i) {
        return new nvjpegImage_t((Pointer)this).offsetAddress(i);
    }

    public native @Cast("unsigned char*") BytePointer channel(int i); public native nvjpegImage_t channel(int i, BytePointer setter);
    @MemberGetter public native @Cast("unsigned char**") PointerPointer channel();
    public native @Cast("size_t") long pitch(int i); public native nvjpegImage_t pitch(int i, long setter);
    @MemberGetter public native @Cast("size_t*") SizeTPointer pitch();
}
