// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.llvm.LLVM;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.llvm.global.LLVM.*;


/**
 * A set of symbols that share dependencies.
 */
@Properties(inherit = org.bytedeco.llvm.presets.LLVM.class)
public class LLVMOrcCSymbolDependenceGroup extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LLVMOrcCSymbolDependenceGroup() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LLVMOrcCSymbolDependenceGroup(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LLVMOrcCSymbolDependenceGroup(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LLVMOrcCSymbolDependenceGroup position(long position) {
        return (LLVMOrcCSymbolDependenceGroup)super.position(position);
    }
    @Override public LLVMOrcCSymbolDependenceGroup getPointer(long i) {
        return new LLVMOrcCSymbolDependenceGroup((Pointer)this).offsetAddress(i);
    }

  public native @ByRef LLVMOrcCSymbolsList Symbols(); public native LLVMOrcCSymbolDependenceGroup Symbols(LLVMOrcCSymbolsList setter);
  public native @Cast("LLVMOrcCDependenceMapPairs") LLVMOrcCDependenceMapPair Dependencies(); public native LLVMOrcCSymbolDependenceGroup Dependencies(LLVMOrcCDependenceMapPair setter);
  public native @Cast("size_t") long NumDependencies(); public native LLVMOrcCSymbolDependenceGroup NumDependencies(long setter);
}
