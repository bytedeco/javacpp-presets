// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.llvm.LLVM;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.llvm.global.LLVM.*;


/**
 * Represents the linkage flags for a symbol definition.
 */
@Properties(inherit = org.bytedeco.llvm.presets.LLVM.class)
public class LLVMJITSymbolFlags extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LLVMJITSymbolFlags() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LLVMJITSymbolFlags(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LLVMJITSymbolFlags(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LLVMJITSymbolFlags position(long position) {
        return (LLVMJITSymbolFlags)super.position(position);
    }
    @Override public LLVMJITSymbolFlags getPointer(long i) {
        return new LLVMJITSymbolFlags((Pointer)this).offsetAddress(i);
    }

  public native @Cast("uint8_t") byte GenericFlags(); public native LLVMJITSymbolFlags GenericFlags(byte setter);
  public native @Cast("uint8_t") byte TargetFlags(); public native LLVMJITSymbolFlags TargetFlags(byte setter);
}
