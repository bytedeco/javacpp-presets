// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.llvm.clang;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.llvm.LLVM.*;
import static org.bytedeco.llvm.global.LLVM.*;

import static org.bytedeco.llvm.global.clang.*;


/**
 * Identifies a half-open character range in the source code.
 *
 * Use clang_getRangeStart() and clang_getRangeEnd() to retrieve the
 * starting and end locations from a source range, respectively.
 */
@Properties(inherit = org.bytedeco.llvm.presets.clang.class)
public class CXSourceRange extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CXSourceRange() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CXSourceRange(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CXSourceRange(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CXSourceRange position(long position) {
        return (CXSourceRange)super.position(position);
    }
    @Override public CXSourceRange getPointer(long i) {
        return new CXSourceRange((Pointer)this).position(position + i);
    }

  public native @Const Pointer ptr_data(int i); public native CXSourceRange ptr_data(int i, Pointer setter);
  @MemberGetter public native @Cast("const void**") PointerPointer ptr_data();
  public native @Cast("unsigned") int begin_int_data(); public native CXSourceRange begin_int_data(int setter);
  public native @Cast("unsigned") int end_int_data(); public native CXSourceRange end_int_data(int setter);
}
