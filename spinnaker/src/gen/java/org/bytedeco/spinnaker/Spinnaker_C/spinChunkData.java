// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.spinnaker.Spinnaker_C;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.spinnaker.global.Spinnaker_C.*;


/**
* \defgroup SpinnakerDefsC Spinnaker C Definitions
* \ingroup SpinnakerC
*
* Definitions for Spinnaker C
*/
/*@{*/

/**
* \defgroup ChunkDataDefC_h Chunk Data Structures
*/
/*@{*/

/**
* \brief The type of information that can be obtained from image chunk data.
*/

@Properties(inherit = org.bytedeco.spinnaker.presets.Spinnaker_C.class)
public class spinChunkData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public spinChunkData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public spinChunkData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public spinChunkData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public spinChunkData position(long position) {
        return (spinChunkData)super.position(position);
    }

    public native double m_blackLevel(); public native spinChunkData m_blackLevel(double m_blackLevel);
    public native @Cast("int64_t") long m_frameID(); public native spinChunkData m_frameID(long m_frameID);
    public native double m_exposureTime(); public native spinChunkData m_exposureTime(double m_exposureTime);
    public native @Cast("int64_t") long m_timestamp(); public native spinChunkData m_timestamp(long m_timestamp);
    public native @Cast("int64_t") long m_exposureEndLineStatusAll(); public native spinChunkData m_exposureEndLineStatusAll(long m_exposureEndLineStatusAll);
    public native @Cast("int64_t") long m_width(); public native spinChunkData m_width(long m_width);
    public native @Cast("int64_t") long m_image(); public native spinChunkData m_image(long m_image);
    public native @Cast("int64_t") long m_height(); public native spinChunkData m_height(long m_height);
    public native double m_gain(); public native spinChunkData m_gain(double m_gain);
    public native @Cast("int64_t") long m_sequencerSetActive(); public native spinChunkData m_sequencerSetActive(long m_sequencerSetActive);
    public native @Cast("int64_t") long m_cRC(); public native spinChunkData m_cRC(long m_cRC);
    public native @Cast("int64_t") long m_offsetX(); public native spinChunkData m_offsetX(long m_offsetX);
    public native @Cast("int64_t") long m_offsetY(); public native spinChunkData m_offsetY(long m_offsetY);
    public native @Cast("int64_t") long m_serialDataLength(); public native spinChunkData m_serialDataLength(long m_serialDataLength);
    public native @Cast("int64_t") long m_partSelector(); public native spinChunkData m_partSelector(long m_partSelector);
    public native @Cast("int64_t") long m_pixelDynamicRangeMin(); public native spinChunkData m_pixelDynamicRangeMin(long m_pixelDynamicRangeMin);
    public native @Cast("int64_t") long m_pixelDynamicRangeMax(); public native spinChunkData m_pixelDynamicRangeMax(long m_pixelDynamicRangeMax);
    public native @Cast("int64_t") long m_timestampLatchValue(); public native spinChunkData m_timestampLatchValue(long m_timestampLatchValue);
    public native @Cast("int64_t") long m_lineStatusAll(); public native spinChunkData m_lineStatusAll(long m_lineStatusAll);
    public native @Cast("int64_t") long m_counterValue(); public native spinChunkData m_counterValue(long m_counterValue);
    public native double m_timerValue(); public native spinChunkData m_timerValue(double m_timerValue);
    public native @Cast("int64_t") long m_scanLineSelector(); public native spinChunkData m_scanLineSelector(long m_scanLineSelector);
    public native @Cast("int64_t") long m_encoderValue(); public native spinChunkData m_encoderValue(long m_encoderValue);
    public native @Cast("int64_t") long m_linePitch(); public native spinChunkData m_linePitch(long m_linePitch);
    public native @Cast("int64_t") long m_transferBlockID(); public native spinChunkData m_transferBlockID(long m_transferBlockID);
    public native @Cast("int64_t") long m_transferQueueCurrentBlockCount(); public native spinChunkData m_transferQueueCurrentBlockCount(long m_transferQueueCurrentBlockCount);
    public native @Cast("int64_t") long m_streamChannelID(); public native spinChunkData m_streamChannelID(long m_streamChannelID);
    public native double m_scan3dCoordinateScale(); public native spinChunkData m_scan3dCoordinateScale(double m_scan3dCoordinateScale);
    public native double m_scan3dCoordinateOffset(); public native spinChunkData m_scan3dCoordinateOffset(double m_scan3dCoordinateOffset);
    public native double m_scan3dInvalidDataValue(); public native spinChunkData m_scan3dInvalidDataValue(double m_scan3dInvalidDataValue);
    public native double m_scan3dAxisMin(); public native spinChunkData m_scan3dAxisMin(double m_scan3dAxisMin);
    public native double m_scan3dAxisMax(); public native spinChunkData m_scan3dAxisMax(double m_scan3dAxisMax);
    public native double m_scan3dTransformValue(); public native spinChunkData m_scan3dTransformValue(double m_scan3dTransformValue);
    public native double m_scan3dCoordinateReferenceValue(); public native spinChunkData m_scan3dCoordinateReferenceValue(double m_scan3dCoordinateReferenceValue);
    public native @Cast("int64_t") long m_inferenceResult(); public native spinChunkData m_inferenceResult(long m_inferenceResult);
    public native double m_inferenceConfidence(); public native spinChunkData m_inferenceConfidence(double m_inferenceConfidence);
}