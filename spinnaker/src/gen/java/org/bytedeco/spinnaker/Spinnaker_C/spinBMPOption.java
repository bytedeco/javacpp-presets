// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.spinnaker.Spinnaker_C;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.spinnaker.global.Spinnaker_C.*;


/**
 * Options for saving BMP images. Used in saving PPM images
 * with a call to spinImageSaveBmp().
 */
@Properties(inherit = org.bytedeco.spinnaker.presets.Spinnaker_C.class)
public class spinBMPOption extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public spinBMPOption() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public spinBMPOption(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public spinBMPOption(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public spinBMPOption position(long position) {
        return (spinBMPOption)super.position(position);
    }
    @Override public spinBMPOption getPointer(long i) {
        return new spinBMPOption((Pointer)this).position(position + i);
    }

    public native @Cast("bool8_t") byte indexedColor_8bit(); public native spinBMPOption indexedColor_8bit(byte setter);
    /** Reserved for future use. */
    public native @Cast("unsigned int") int reserved(int i); public native spinBMPOption reserved(int i, int setter);
    @MemberGetter public native @Cast("unsigned int*") IntPointer reserved();
    /*
    _spinBMPOption()
    {
        indexedColor_8bit = false;
        memset(reserved, 0, sizeof(reserved));
    }*/
}
