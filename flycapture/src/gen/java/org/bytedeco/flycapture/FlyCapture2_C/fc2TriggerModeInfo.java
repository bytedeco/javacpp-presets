// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.flycapture.FlyCapture2_C;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.flycapture.FlyCapture2.*;
import static org.bytedeco.flycapture.global.FlyCapture2.*;

import static org.bytedeco.flycapture.global.FlyCapture2_C.*;


    /** Information about a camera trigger property. */
    @Properties(inherit = org.bytedeco.flycapture.presets.FlyCapture2_C.class)
public class fc2TriggerModeInfo extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public fc2TriggerModeInfo() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public fc2TriggerModeInfo(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public fc2TriggerModeInfo(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public fc2TriggerModeInfo position(long position) {
            return (fc2TriggerModeInfo)super.position(position);
        }
        @Override public fc2TriggerModeInfo getPointer(long i) {
            return new fc2TriggerModeInfo((Pointer)this).position(position + i);
        }
    
        /** Presence of trigger mode. */
        public native @Cast("BOOL") int present(); public native fc2TriggerModeInfo present(int setter);
        /** Flag indicating if trigger value can be read out. */
        public native @Cast("BOOL") int readOutSupported(); public native fc2TriggerModeInfo readOutSupported(int setter);
        /** Flag indicating if on/off is supported. */
        public native @Cast("BOOL") int onOffSupported(); public native fc2TriggerModeInfo onOffSupported(int setter);
        /** Flag indicating if polarity is supported. */
        public native @Cast("BOOL") int polaritySupported(); public native fc2TriggerModeInfo polaritySupported(int setter);
        /** Flag indicating if the value is readable. */
        public native @Cast("BOOL") int valueReadable(); public native fc2TriggerModeInfo valueReadable(int setter);
        /** Source mask. */
        public native @Cast("unsigned int") int sourceMask(); public native fc2TriggerModeInfo sourceMask(int setter);
        /** Flag indicating if software trigger is supported. */
        public native @Cast("BOOL") int softwareTriggerSupported(); public native fc2TriggerModeInfo softwareTriggerSupported(int setter);
        /** Mode mask. */
        public native @Cast("unsigned int") int modeMask(); public native fc2TriggerModeInfo modeMask(int setter);
        /** Reserved for future use. */
        public native @Cast("unsigned int") int reserved(int i); public native fc2TriggerModeInfo reserved(int i, int setter);
        @MemberGetter public native @Cast("unsigned int*") IntPointer reserved();

    }
