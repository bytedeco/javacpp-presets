// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.systems.global.windows.*;


/***** Process walking *************************************************/

@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class PROCESSENTRY32W extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PROCESSENTRY32W() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PROCESSENTRY32W(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PROCESSENTRY32W(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PROCESSENTRY32W position(long position) {
        return (PROCESSENTRY32W)super.position(position);
    }

    public native @Cast("DWORD") int dwSize(); public native PROCESSENTRY32W dwSize(int dwSize);
    public native @Cast("DWORD") int cntUsage(); public native PROCESSENTRY32W cntUsage(int cntUsage);
    public native @Cast("DWORD") int th32ProcessID(); public native PROCESSENTRY32W th32ProcessID(int th32ProcessID);          // this process
    public native @Cast("ULONG_PTR") long th32DefaultHeapID(); public native PROCESSENTRY32W th32DefaultHeapID(long th32DefaultHeapID);
    public native @Cast("DWORD") int th32ModuleID(); public native PROCESSENTRY32W th32ModuleID(int th32ModuleID);           // associated exe
    public native @Cast("DWORD") int cntThreads(); public native PROCESSENTRY32W cntThreads(int cntThreads);
    public native @Cast("DWORD") int th32ParentProcessID(); public native PROCESSENTRY32W th32ParentProcessID(int th32ParentProcessID);    // this process's parent process
    public native @Cast("LONG") int pcPriClassBase(); public native PROCESSENTRY32W pcPriClassBase(int pcPriClassBase);         // Base priority of process's threads
    public native @Cast("DWORD") int dwFlags(); public native PROCESSENTRY32W dwFlags(int dwFlags);
    public native @Cast("WCHAR") char szExeFile(int i); public native PROCESSENTRY32W szExeFile(int i, char szExeFile);
    @MemberGetter public native @Cast("WCHAR*") CharPointer szExeFile();    // Path
}
