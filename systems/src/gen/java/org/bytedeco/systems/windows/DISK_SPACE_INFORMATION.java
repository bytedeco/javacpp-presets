// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;

// #if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM)

//
//  The structure definition must be same as the one
//  (FILE_FS_FULL_SIZE_INFORMATION_EX) defined in ntioapi_x.w
//

@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class DISK_SPACE_INFORMATION extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DISK_SPACE_INFORMATION() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DISK_SPACE_INFORMATION(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DISK_SPACE_INFORMATION(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DISK_SPACE_INFORMATION position(long position) {
        return (DISK_SPACE_INFORMATION)super.position(position);
    }
    @Override public DISK_SPACE_INFORMATION getPointer(long i) {
        return new DISK_SPACE_INFORMATION((Pointer)this).offsetAddress(i);
    }


    //
    //  AllocationUnits are actually file system clusters.
    //  AllocationUnits * SectorsPerAllocationUnit * BytesPerSector
    //  will get you the sizes in bytes.
    //

    //
    //  The Actual*AllocationUnits are volume sizes without considering Quota
    //  setting.
    //  ActualPoolUnavailableAllocationUnits is the unavailable space for the
    //  volume due to insufficient free pool space (PoolAvailableAllocationUnits).
    //  Be aware AllocationUnits are mesured in clusters, see comments at the beginning.
    //
    //  ActualTotalAllocationUnits = ActualAvailableAllocationUnits +
    //                               ActualPoolUnavailableAllocationUnits +
    //                               UsedAllocationUnits +
    //                               TotalReservedAllocationUnits
    //

    public native @Cast("ULONGLONG") long ActualTotalAllocationUnits(); public native DISK_SPACE_INFORMATION ActualTotalAllocationUnits(long setter);
    public native @Cast("ULONGLONG") long ActualAvailableAllocationUnits(); public native DISK_SPACE_INFORMATION ActualAvailableAllocationUnits(long setter);
    public native @Cast("ULONGLONG") long ActualPoolUnavailableAllocationUnits(); public native DISK_SPACE_INFORMATION ActualPoolUnavailableAllocationUnits(long setter);

    //
    //  The Caller*AllocationUnits are limited by Quota setting.
    //  CallerPoolUnavailableAllocationUnits is the unavailable space for the
    //  volume due to insufficient free pool space (PoolAvailableAllocationUnits).
    //  Be aware AllocationUnits are mesured in clusters, see comments at the beginning.
    //
    //  CallerTotalAllocationUnits = CallerAvailableAllocationUnits +
    //                               CallerPoolUnavailableAllocationUnits +
    //                               UsedAllocationUnits +
    //                               TotalReservedAllocationUnits
    //

    public native @Cast("ULONGLONG") long CallerTotalAllocationUnits(); public native DISK_SPACE_INFORMATION CallerTotalAllocationUnits(long setter);
    public native @Cast("ULONGLONG") long CallerAvailableAllocationUnits(); public native DISK_SPACE_INFORMATION CallerAvailableAllocationUnits(long setter);
    public native @Cast("ULONGLONG") long CallerPoolUnavailableAllocationUnits(); public native DISK_SPACE_INFORMATION CallerPoolUnavailableAllocationUnits(long setter);

    //
    //  The used space (in clusters) of the volume.
    //

    public native @Cast("ULONGLONG") long UsedAllocationUnits(); public native DISK_SPACE_INFORMATION UsedAllocationUnits(long setter);

    //
    //  Total reserved space (in clusters).
    //

    public native @Cast("ULONGLONG") long TotalReservedAllocationUnits(); public native DISK_SPACE_INFORMATION TotalReservedAllocationUnits(long setter);

    //
    //  A special type of reserved space (in clusters) for per-volume storage
    //  reserve and this is included in the above TotalReservedAllocationUnits.
    //

    public native @Cast("ULONGLONG") long VolumeStorageReserveAllocationUnits(); public native DISK_SPACE_INFORMATION VolumeStorageReserveAllocationUnits(long setter);

    //
    //  This refers to the space (in clusters) that has been committed by
    //  storage pool but has not been allocated by file system.
    //
    //  s1 = (ActualTotalAllocationUnits - UsedAllocationUnits - TotalReservedAllocationUnits)
    //  s2 = (AvailableCommittedAllocationUnits + PoolAvailableAllocationUnits)
    //  ActualAvailableAllocationUnits = min( s1, s2 )
    //
    //  When s1 >= s2, ActualPoolUnavailableAllocationUnits = 0
    //  When s1 < s2, ActualPoolUnavailableAllocationUnits = s2 - s1.
    //

    public native @Cast("ULONGLONG") long AvailableCommittedAllocationUnits(); public native DISK_SPACE_INFORMATION AvailableCommittedAllocationUnits(long setter);

    //
    //  Available space (in clusters) in corresponding storage pool. If the volume
    //  is not a spaces volume, the PoolAvailableAllocationUnits is set to zero.
    //

    public native @Cast("ULONGLONG") long PoolAvailableAllocationUnits(); public native DISK_SPACE_INFORMATION PoolAvailableAllocationUnits(long setter);

    public native @Cast("DWORD") int SectorsPerAllocationUnit(); public native DISK_SPACE_INFORMATION SectorsPerAllocationUnit(int setter);
    public native @Cast("DWORD") int BytesPerSector(); public native DISK_SPACE_INFORMATION BytesPerSector(int setter);

}
