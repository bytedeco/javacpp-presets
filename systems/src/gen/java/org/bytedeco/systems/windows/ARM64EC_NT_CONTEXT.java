// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;


// #if defined(_ARM64_)

// #endif // defined(_ARM64_)

@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class ARM64EC_NT_CONTEXT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ARM64EC_NT_CONTEXT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ARM64EC_NT_CONTEXT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ARM64EC_NT_CONTEXT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ARM64EC_NT_CONTEXT position(long position) {
        return (ARM64EC_NT_CONTEXT)super.position(position);
    }
    @Override public ARM64EC_NT_CONTEXT getPointer(long i) {
        return new ARM64EC_NT_CONTEXT((Pointer)this).offsetAddress(i);
    }


            //
            // AMD64 call register home space. These can't be used by ARM64EC
            //

            /* +0x000 */ public native @Cast("DWORD64") long AMD64_P1Home(); public native ARM64EC_NT_CONTEXT AMD64_P1Home(long setter);
            /* +0x008 */ public native @Cast("DWORD64") long AMD64_P2Home(); public native ARM64EC_NT_CONTEXT AMD64_P2Home(long setter);
            /* +0x010 */ public native @Cast("DWORD64") long AMD64_P3Home(); public native ARM64EC_NT_CONTEXT AMD64_P3Home(long setter);
            /* +0x018 */ public native @Cast("DWORD64") long AMD64_P4Home(); public native ARM64EC_NT_CONTEXT AMD64_P4Home(long setter);
            /* +0x020 */ public native @Cast("DWORD64") long AMD64_P5Home(); public native ARM64EC_NT_CONTEXT AMD64_P5Home(long setter);
            /* +0x028 */ public native @Cast("DWORD64") long AMD64_P6Home(); public native ARM64EC_NT_CONTEXT AMD64_P6Home(long setter);

            //
            // Control flags.
            //

            /* +0x030 */ public native @Cast("DWORD") int ContextFlags(); public native ARM64EC_NT_CONTEXT ContextFlags(int setter);

            /* +0x034 */ public native @Cast("DWORD") int AMD64_MxCsr_copy(); public native ARM64EC_NT_CONTEXT AMD64_MxCsr_copy(int setter);

            //
            // Segment Registers and processor flags. These can't be used by
            // ARM64EC
            //

            /* +0x038 */ public native @Cast("WORD") short AMD64_SegCs(); public native ARM64EC_NT_CONTEXT AMD64_SegCs(short setter);
            /* +0x03a */ public native @Cast("WORD") short AMD64_SegDs(); public native ARM64EC_NT_CONTEXT AMD64_SegDs(short setter);
            /* +0x03c */ public native @Cast("WORD") short AMD64_SegEs(); public native ARM64EC_NT_CONTEXT AMD64_SegEs(short setter);
            /* +0x03e */ public native @Cast("WORD") short AMD64_SegFs(); public native ARM64EC_NT_CONTEXT AMD64_SegFs(short setter);
            /* +0x040 */ public native @Cast("WORD") short AMD64_SegGs(); public native ARM64EC_NT_CONTEXT AMD64_SegGs(short setter);
            /* +0x042 */ public native @Cast("WORD") short AMD64_SegSs(); public native ARM64EC_NT_CONTEXT AMD64_SegSs(short setter);

            //
            // General purpose flags.
            //

            /* +0x044 */ public native @Cast("DWORD") int AMD64_EFlags(); public native ARM64EC_NT_CONTEXT AMD64_EFlags(int setter);

            //
            // Debug registers
            //

            /* +0x048 */ public native @Cast("DWORD64") long AMD64_Dr0(); public native ARM64EC_NT_CONTEXT AMD64_Dr0(long setter);
            /* +0x050 */ public native @Cast("DWORD64") long AMD64_Dr1(); public native ARM64EC_NT_CONTEXT AMD64_Dr1(long setter);
            /* +0x058 */ public native @Cast("DWORD64") long AMD64_Dr2(); public native ARM64EC_NT_CONTEXT AMD64_Dr2(long setter);
            /* +0x060 */ public native @Cast("DWORD64") long AMD64_Dr3(); public native ARM64EC_NT_CONTEXT AMD64_Dr3(long setter);
            /* +0x068 */ public native @Cast("DWORD64") long AMD64_Dr6(); public native ARM64EC_NT_CONTEXT AMD64_Dr6(long setter);
            /* +0x070 */ public native @Cast("DWORD64") long AMD64_Dr7(); public native ARM64EC_NT_CONTEXT AMD64_Dr7(long setter);

            //
            // Integer registers.
            //

            /* +0x078 */ public native @Cast("DWORD64") long X8(); public native ARM64EC_NT_CONTEXT X8(long setter);     // AMD64_Rax
            /* +0x080 */ public native @Cast("DWORD64") long X0(); public native ARM64EC_NT_CONTEXT X0(long setter);     // AMD64_Rcx
            /* +0x088 */ public native @Cast("DWORD64") long X1(); public native ARM64EC_NT_CONTEXT X1(long setter);     // AMD64_Rdx
            /* +0x090 */ public native @Cast("DWORD64") long X27(); public native ARM64EC_NT_CONTEXT X27(long setter);    // AMD64_Rbx
            /* +0x098 */ public native @Cast("DWORD64") long Sp(); public native ARM64EC_NT_CONTEXT Sp(long setter);     // AMD64_Rsp
            /* +0x0a0 */ public native @Cast("DWORD64") long Fp(); public native ARM64EC_NT_CONTEXT Fp(long setter);     // AMD64_Rbp
            /* +0x0a8 */ public native @Cast("DWORD64") long X25(); public native ARM64EC_NT_CONTEXT X25(long setter);    // AMD64_Rsi
            /* +0x0b0 */ public native @Cast("DWORD64") long X26(); public native ARM64EC_NT_CONTEXT X26(long setter);    // AMD64_Rdi
            /* +0x0b8 */ public native @Cast("DWORD64") long X2(); public native ARM64EC_NT_CONTEXT X2(long setter);     // AMD64_R8
            /* +0x0c0 */ public native @Cast("DWORD64") long X3(); public native ARM64EC_NT_CONTEXT X3(long setter);     // AMD64_R9
            /* +0x0c8 */ public native @Cast("DWORD64") long X4(); public native ARM64EC_NT_CONTEXT X4(long setter);     // AMD64_R10
            /* +0x0d0 */ public native @Cast("DWORD64") long X5(); public native ARM64EC_NT_CONTEXT X5(long setter);     // AMD64_R11
            /* +0x0d8 */ public native @Cast("DWORD64") long X19(); public native ARM64EC_NT_CONTEXT X19(long setter);    // AMD64_R12
            /* +0x0e0 */ public native @Cast("DWORD64") long X20(); public native ARM64EC_NT_CONTEXT X20(long setter);    // AMD64_R13
            /* +0x0e8 */ public native @Cast("DWORD64") long X21(); public native ARM64EC_NT_CONTEXT X21(long setter);    // AMD64_R14
            /* +0x0f0 */ public native @Cast("DWORD64") long X22(); public native ARM64EC_NT_CONTEXT X22(long setter);    // AMD64_R15

            //
            // Program counter.
            //

            /* +0x0f8 */ public native @Cast("DWORD64") long Pc(); public native ARM64EC_NT_CONTEXT Pc(long setter);     // AMD64_Rip

            //
            // Floating point state.
            //
                /* +0x100 */ public native @Cast("WORD") short AMD64_ControlWord(); public native ARM64EC_NT_CONTEXT AMD64_ControlWord(short setter);
                /* +0x102 */ public native @Cast("WORD") short AMD64_StatusWord(); public native ARM64EC_NT_CONTEXT AMD64_StatusWord(short setter);
                /* +0x104 */ public native @Cast("BYTE") byte AMD64_TagWord(); public native ARM64EC_NT_CONTEXT AMD64_TagWord(byte setter);
                /* +0x105 */ public native @Cast("BYTE") byte AMD64_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_Reserved1(byte setter);
                /* +0x106 */ public native @Cast("WORD") short AMD64_ErrorOpcode(); public native ARM64EC_NT_CONTEXT AMD64_ErrorOpcode(short setter);
                /* +0x108 */ public native @Cast("DWORD") int AMD64_ErrorOffset(); public native ARM64EC_NT_CONTEXT AMD64_ErrorOffset(int setter);
                /* +0x10c */ public native @Cast("WORD") short AMD64_ErrorSelector(); public native ARM64EC_NT_CONTEXT AMD64_ErrorSelector(short setter);
                /* +0x10e */ public native @Cast("WORD") short AMD64_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_Reserved2(short setter);
                /* +0x110 */ public native @Cast("DWORD") int AMD64_DataOffset(); public native ARM64EC_NT_CONTEXT AMD64_DataOffset(int setter);
                /* +0x114 */ public native @Cast("WORD") short AMD64_DataSelector(); public native ARM64EC_NT_CONTEXT AMD64_DataSelector(short setter);
                /* +0x116 */ public native @Cast("WORD") short AMD64_Reserved3(); public native ARM64EC_NT_CONTEXT AMD64_Reserved3(short setter);

                /* +0x118 */ public native @Cast("DWORD") int AMD64_MxCsr(); public native ARM64EC_NT_CONTEXT AMD64_MxCsr(int setter);
                /* +0x11c */ public native @Cast("DWORD") int AMD64_MxCsr_Mask(); public native ARM64EC_NT_CONTEXT AMD64_MxCsr_Mask(int setter);

                /* +0x120 */ public native @Cast("DWORD64") long Lr(); public native ARM64EC_NT_CONTEXT Lr(long setter);                 // AMD64_St0_Low
                /* +0x128 */ public native @Cast("WORD") short X16_0(); public native ARM64EC_NT_CONTEXT X16_0(short setter);               // AMD64_St0_High
                /* +0x12a */ public native @Cast("WORD") short AMD64_St0_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_St0_Reserved1(short setter);
                /* +0x12c */ public native @Cast("DWORD") int AMD64_St0_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_St0_Reserved2(int setter);
                /* +0x130 */ public native @Cast("DWORD64") long X6(); public native ARM64EC_NT_CONTEXT X6(long setter);                 // AMD64_St1_Low
                /* +0x138 */ public native @Cast("WORD") short X16_1(); public native ARM64EC_NT_CONTEXT X16_1(short setter);               // AMD64_St1_High
                /* +0x13a */ public native @Cast("WORD") short AMD64_St1_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_St1_Reserved1(short setter);
                /* +0x13c */ public native @Cast("DWORD") int AMD64_St1_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_St1_Reserved2(int setter);
                /* +0x140 */ public native @Cast("DWORD64") long X7(); public native ARM64EC_NT_CONTEXT X7(long setter);                 // AMD64_St2_Low
                /* +0x148 */ public native @Cast("WORD") short X16_2(); public native ARM64EC_NT_CONTEXT X16_2(short setter);               // AMD64_St2_High
                /* +0x14a */ public native @Cast("WORD") short AMD64_St2_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_St2_Reserved1(short setter);
                /* +0x14c */ public native @Cast("DWORD") int AMD64_St2_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_St2_Reserved2(int setter);
                /* +0x150 */ public native @Cast("DWORD64") long X9(); public native ARM64EC_NT_CONTEXT X9(long setter);                 // AMD64_St3_Low
                /* +0x158 */ public native @Cast("WORD") short X16_3(); public native ARM64EC_NT_CONTEXT X16_3(short setter);               // AMD64_St3_High
                /* +0x15a */ public native @Cast("WORD") short AMD64_St3_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_St3_Reserved1(short setter);
                /* +0x15c */ public native @Cast("DWORD") int AMD64_St3_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_St3_Reserved2(int setter);
                /* +0x160 */ public native @Cast("DWORD64") long X10(); public native ARM64EC_NT_CONTEXT X10(long setter);                // AMD64_St4_Low
                /* +0x168 */ public native @Cast("WORD") short X17_0(); public native ARM64EC_NT_CONTEXT X17_0(short setter);               // AMD64_St4_High
                /* +0x16a */ public native @Cast("WORD") short AMD64_St4_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_St4_Reserved1(short setter);
                /* +0x16c */ public native @Cast("DWORD") int AMD64_St4_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_St4_Reserved2(int setter);
                /* +0x170 */ public native @Cast("DWORD64") long X11(); public native ARM64EC_NT_CONTEXT X11(long setter);                // AMD64_St5_Low
                /* +0x178 */ public native @Cast("WORD") short X17_1(); public native ARM64EC_NT_CONTEXT X17_1(short setter);               // AMD64_St5_High
                /* +0x17a */ public native @Cast("WORD") short AMD64_St5_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_St5_Reserved1(short setter);
                /* +0x17c */ public native @Cast("DWORD") int AMD64_St5_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_St5_Reserved2(int setter);
                /* +0x180 */ public native @Cast("DWORD64") long X12(); public native ARM64EC_NT_CONTEXT X12(long setter);                // AMD64_St6_Low
                /* +0x188 */ public native @Cast("WORD") short X17_2(); public native ARM64EC_NT_CONTEXT X17_2(short setter);               // AMD64_St6_High
                /* +0x18a */ public native @Cast("WORD") short AMD64_St6_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_St6_Reserved1(short setter);
                /* +0x18c */ public native @Cast("DWORD") int AMD64_St6_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_St6_Reserved2(int setter);
                /* +0x190 */ public native @Cast("DWORD64") long X15(); public native ARM64EC_NT_CONTEXT X15(long setter);                // AMD64_St7_Low
                /* +0x198 */ public native @Cast("WORD") short X17_3(); public native ARM64EC_NT_CONTEXT X17_3(short setter);               // AMD64_St7_High;
                /* +0x19a */ public native @Cast("WORD") short AMD64_St7_Reserved1(); public native ARM64EC_NT_CONTEXT AMD64_St7_Reserved1(short setter);
                /* +0x19c */ public native @Cast("DWORD") int AMD64_St7_Reserved2(); public native ARM64EC_NT_CONTEXT AMD64_St7_Reserved2(int setter);

                /* +0x1a0 */ public native @ByRef ARM64_NT_NEON128 V(int i); public native ARM64EC_NT_CONTEXT V(int i, ARM64_NT_NEON128 setter);
@MemberGetter public native ARM64_NT_NEON128 V();     // AMD64_XmmRegisters[16]
                /* +0x2a0 */ public native @Cast("BYTE") byte AMD64_XSAVE_FORMAT_Reserved4(int i); public native ARM64EC_NT_CONTEXT AMD64_XSAVE_FORMAT_Reserved4(int i, byte setter);
@MemberGetter public native @Cast("BYTE*") BytePointer AMD64_XSAVE_FORMAT_Reserved4(); 

            //
            // AMD64 Vector registers.
            //

            /* +0x300 */ public native @ByRef ARM64_NT_NEON128 AMD64_VectorRegister(int i); public native ARM64EC_NT_CONTEXT AMD64_VectorRegister(int i, ARM64_NT_NEON128 setter);
@MemberGetter public native ARM64_NT_NEON128 AMD64_VectorRegister();
            /* +0x4a0 */ public native @Cast("DWORD64") long AMD64_VectorControl(); public native ARM64EC_NT_CONTEXT AMD64_VectorControl(long setter);

            //
            // AMD64 Special debug control registers.
            //

            /* +0x4a8 */ public native @Cast("DWORD64") long AMD64_DebugControl(); public native ARM64EC_NT_CONTEXT AMD64_DebugControl(long setter);
            /* +0x4b0 */ public native @Cast("DWORD64") long AMD64_LastBranchToRip(); public native ARM64EC_NT_CONTEXT AMD64_LastBranchToRip(long setter);
            /* +0x4b8 */ public native @Cast("DWORD64") long AMD64_LastBranchFromRip(); public native ARM64EC_NT_CONTEXT AMD64_LastBranchFromRip(long setter);
            /* +0x4c0 */ public native @Cast("DWORD64") long AMD64_LastExceptionToRip(); public native ARM64EC_NT_CONTEXT AMD64_LastExceptionToRip(long setter);
            /* +0x4c8 */ public native @Cast("DWORD64") long AMD64_LastExceptionFromRip(); public native ARM64EC_NT_CONTEXT AMD64_LastExceptionFromRip(long setter);
            /* +0x4d0 */ 

//     #if defined(_ARM64EC_)

//     #endif 
}
