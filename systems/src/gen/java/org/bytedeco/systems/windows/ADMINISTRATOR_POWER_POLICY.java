// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.systems.global.windows.*;


// administrator power policy overrides
@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class ADMINISTRATOR_POWER_POLICY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ADMINISTRATOR_POWER_POLICY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ADMINISTRATOR_POWER_POLICY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ADMINISTRATOR_POWER_POLICY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ADMINISTRATOR_POWER_POLICY position(long position) {
        return (ADMINISTRATOR_POWER_POLICY)super.position(position);
    }


    // meaning of power action "sleep"
    public native @Cast("SYSTEM_POWER_STATE") int MinSleep(); public native ADMINISTRATOR_POWER_POLICY MinSleep(int MinSleep);
    public native @Cast("SYSTEM_POWER_STATE") int MaxSleep(); public native ADMINISTRATOR_POWER_POLICY MaxSleep(int MaxSleep);

    // video policies
    public native @Cast("DWORD") int MinVideoTimeout(); public native ADMINISTRATOR_POWER_POLICY MinVideoTimeout(int MinVideoTimeout);
    public native @Cast("DWORD") int MaxVideoTimeout(); public native ADMINISTRATOR_POWER_POLICY MaxVideoTimeout(int MaxVideoTimeout);

    // disk policies
    public native @Cast("DWORD") int MinSpindownTimeout(); public native ADMINISTRATOR_POWER_POLICY MinSpindownTimeout(int MinSpindownTimeout);
    public native @Cast("DWORD") int MaxSpindownTimeout(); public native ADMINISTRATOR_POWER_POLICY MaxSpindownTimeout(int MaxSpindownTimeout);
}
