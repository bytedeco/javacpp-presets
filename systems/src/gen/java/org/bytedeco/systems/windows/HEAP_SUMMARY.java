// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;


// #if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)

//
// typdefs
//

@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class HEAP_SUMMARY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public HEAP_SUMMARY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HEAP_SUMMARY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HEAP_SUMMARY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public HEAP_SUMMARY position(long position) {
        return (HEAP_SUMMARY)super.position(position);
    }
    @Override public HEAP_SUMMARY getPointer(long i) {
        return new HEAP_SUMMARY((Pointer)this).position(position + i);
    }

    public native @Cast("DWORD") int cb(); public native HEAP_SUMMARY cb(int setter);
    public native @Cast("SIZE_T") long cbAllocated(); public native HEAP_SUMMARY cbAllocated(long setter);
    public native @Cast("SIZE_T") long cbCommitted(); public native HEAP_SUMMARY cbCommitted(long setter);
    public native @Cast("SIZE_T") long cbReserved(); public native HEAP_SUMMARY cbReserved(long setter);
    public native @Cast("SIZE_T") long cbMaxReserve(); public native HEAP_SUMMARY cbMaxReserve(long setter);
}
