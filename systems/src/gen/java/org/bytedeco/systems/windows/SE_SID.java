// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;


//
// Union which can hold any valid sid.
//

@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class SE_SID extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SE_SID() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SE_SID(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SE_SID(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SE_SID position(long position) {
        return (SE_SID)super.position(position);
    }
    @Override public SE_SID getPointer(long i) {
        return new SE_SID((Pointer)this).offsetAddress(i);
    }

    public native @ByRef SID Sid(); public native SE_SID Sid(SID setter);
    public native @Cast("BYTE") byte Buffer(int i); public native SE_SID Buffer(int i, byte setter);
    @MemberGetter public native @Cast("BYTE*") BytePointer Buffer();
}
