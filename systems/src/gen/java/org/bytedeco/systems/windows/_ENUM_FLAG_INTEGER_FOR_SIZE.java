// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.systems.global.windows.*;


// #endif

// #ifdef __cplusplus

// Define operator overloads to enable bit operations on enum values that are 
// used to define flags. Use DEFINE_ENUM_FLAG_OPERATORS(YOUR_TYPE) to enable these 
// operators on YOUR_TYPE.

// Moved here from objbase.w.

// Templates are defined here in order to avoid a dependency on C++ <type_traits> header file,
// or on compiler-specific contructs.

    @Name("_ENUM_FLAG_INTEGER_FOR_SIZE<1>") @Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class _ENUM_FLAG_INTEGER_FOR_SIZE extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public _ENUM_FLAG_INTEGER_FOR_SIZE() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public _ENUM_FLAG_INTEGER_FOR_SIZE(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public _ENUM_FLAG_INTEGER_FOR_SIZE(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public _ENUM_FLAG_INTEGER_FOR_SIZE position(long position) {
            return (_ENUM_FLAG_INTEGER_FOR_SIZE)super.position(position);
        }
    
    }
