// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;


// begin_ntoshvp

//
// Code Integrity in loadconfig (CI)
//

@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class IMAGE_LOAD_CONFIG_CODE_INTEGRITY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public IMAGE_LOAD_CONFIG_CODE_INTEGRITY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IMAGE_LOAD_CONFIG_CODE_INTEGRITY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IMAGE_LOAD_CONFIG_CODE_INTEGRITY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public IMAGE_LOAD_CONFIG_CODE_INTEGRITY position(long position) {
        return (IMAGE_LOAD_CONFIG_CODE_INTEGRITY)super.position(position);
    }
    @Override public IMAGE_LOAD_CONFIG_CODE_INTEGRITY getPointer(long i) {
        return new IMAGE_LOAD_CONFIG_CODE_INTEGRITY((Pointer)this).offsetAddress(i);
    }

    public native @Cast("WORD") short Flags(); public native IMAGE_LOAD_CONFIG_CODE_INTEGRITY Flags(short setter);          // Flags to indicate if CI information is available, etc.
    public native @Cast("WORD") short Catalog(); public native IMAGE_LOAD_CONFIG_CODE_INTEGRITY Catalog(short setter);        // 0xFFFF means not available
    public native @Cast("DWORD") int CatalogOffset(); public native IMAGE_LOAD_CONFIG_CODE_INTEGRITY CatalogOffset(int setter);
    public native @Cast("DWORD") int Reserved(); public native IMAGE_LOAD_CONFIG_CODE_INTEGRITY Reserved(int setter);       // Additional bitmask to be defined later
}
