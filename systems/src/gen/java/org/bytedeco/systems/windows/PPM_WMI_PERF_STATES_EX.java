// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.systems.global.windows.*;


@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class PPM_WMI_PERF_STATES_EX extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PPM_WMI_PERF_STATES_EX() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PPM_WMI_PERF_STATES_EX(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PPM_WMI_PERF_STATES_EX(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PPM_WMI_PERF_STATES_EX position(long position) {
        return (PPM_WMI_PERF_STATES_EX)super.position(position);
    }

    public native @Cast("DWORD") int Count(); public native PPM_WMI_PERF_STATES_EX Count(int Count);
    public native @Cast("DWORD") int MaxFrequency(); public native PPM_WMI_PERF_STATES_EX MaxFrequency(int MaxFrequency);
    public native @Cast("DWORD") int CurrentState(); public native PPM_WMI_PERF_STATES_EX CurrentState(int CurrentState);         // current state
    public native @Cast("DWORD") int MaxPerfState(); public native PPM_WMI_PERF_STATES_EX MaxPerfState(int MaxPerfState);         // fastest state considering policy restrictions
    public native @Cast("DWORD") int MinPerfState(); public native PPM_WMI_PERF_STATES_EX MinPerfState(int MinPerfState);         // slowest state considering policy restrictions
    public native @Cast("DWORD") int LowestPerfState(); public native PPM_WMI_PERF_STATES_EX LowestPerfState(int LowestPerfState);      // slowest perf state, fixed, aka the "knee"
    public native @Cast("DWORD") int ThermalConstraint(); public native PPM_WMI_PERF_STATES_EX ThermalConstraint(int ThermalConstraint);
    public native @Cast("BYTE") byte BusyAdjThreshold(); public native PPM_WMI_PERF_STATES_EX BusyAdjThreshold(byte BusyAdjThreshold);
    public native @Cast("BYTE") byte PolicyType(); public native PPM_WMI_PERF_STATES_EX PolicyType(byte PolicyType);           // domain coordination
    public native @Cast("BYTE") byte Type(); public native PPM_WMI_PERF_STATES_EX Type(byte Type);
    public native @Cast("BYTE") byte Reserved(); public native PPM_WMI_PERF_STATES_EX Reserved(byte Reserved);
    public native @Cast("DWORD") int TimerInterval(); public native PPM_WMI_PERF_STATES_EX TimerInterval(int TimerInterval);
    public native @Cast("PVOID") Pointer TargetProcessors(); public native PPM_WMI_PERF_STATES_EX TargetProcessors(Pointer TargetProcessors);     // domain affinity
    public native @Cast("DWORD") int PStateHandler(); public native PPM_WMI_PERF_STATES_EX PStateHandler(int PStateHandler);
    public native @Cast("DWORD") int PStateContext(); public native PPM_WMI_PERF_STATES_EX PStateContext(int PStateContext);
    public native @Cast("DWORD") int TStateHandler(); public native PPM_WMI_PERF_STATES_EX TStateHandler(int TStateHandler);
    public native @Cast("DWORD") int TStateContext(); public native PPM_WMI_PERF_STATES_EX TStateContext(int TStateContext);
    public native @Cast("DWORD") int FeedbackHandler(); public native PPM_WMI_PERF_STATES_EX FeedbackHandler(int FeedbackHandler);
    public native @Cast("DWORD") int Reserved1(); public native PPM_WMI_PERF_STATES_EX Reserved1(int Reserved1);
    public native @Cast("DWORD64") long Reserved2(); public native PPM_WMI_PERF_STATES_EX Reserved2(long Reserved2);
    public native @ByRef PPM_WMI_PERF_STATE State(int i); public native PPM_WMI_PERF_STATES_EX State(int i, PPM_WMI_PERF_STATE State);
    @MemberGetter public native PPM_WMI_PERF_STATE State();
}
