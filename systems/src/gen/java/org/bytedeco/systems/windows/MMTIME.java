// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;




/* MMTIME data structure */
@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class MMTIME extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MMTIME() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MMTIME(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MMTIME(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MMTIME position(long position) {
        return (MMTIME)super.position(position);
    }
    @Override public MMTIME getPointer(long i) {
        return new MMTIME((Pointer)this).offsetAddress(i);
    }

    public native @Cast("UINT") int wType(); public native MMTIME wType(int setter);      /* indicates the contents of the union */
        @Name("u.ms") public native @Cast("DWORD") int u_ms(); public native MMTIME u_ms(int setter);         /* milliseconds */
        @Name("u.sample") public native @Cast("DWORD") int u_sample(); public native MMTIME u_sample(int setter);     /* samples */
        @Name("u.cb") public native @Cast("DWORD") int u_cb(); public native MMTIME u_cb(int setter);         /* byte count */
        @Name("u.ticks") public native @Cast("DWORD") int u_ticks(); public native MMTIME u_ticks(int setter);      /* ticks in MIDI stream */

        /* SMPTE */
            @Name("u.smpte.hour") public native @Cast("BYTE") byte u_smpte_hour(); public native MMTIME u_smpte_hour(byte setter);       /* hours */
            @Name("u.smpte.min") public native @Cast("BYTE") byte u_smpte_min(); public native MMTIME u_smpte_min(byte setter);        /* minutes */
            @Name("u.smpte.sec") public native @Cast("BYTE") byte u_smpte_sec(); public native MMTIME u_smpte_sec(byte setter);        /* seconds */
            @Name("u.smpte.frame") public native @Cast("BYTE") byte u_smpte_frame(); public native MMTIME u_smpte_frame(byte setter);      /* frames  */
            @Name("u.smpte.fps") public native @Cast("BYTE") byte u_smpte_fps(); public native MMTIME u_smpte_fps(byte setter);        /* frames per second */
            @Name("u.smpte.dummy") public native @Cast("BYTE") byte u_smpte_dummy(); public native MMTIME u_smpte_dummy(byte setter);      /* pad */
// #ifdef _WIN32
            @Name("u.smpte.pad") public native @Cast("BYTE") byte u_smpte_pad(int i); public native MMTIME u_smpte_pad(int i, byte setter);
            @Name("u.smpte.pad") @MemberGetter public native @Cast("BYTE*") BytePointer u_smpte_pad();
// #endif

        /* MIDI */
            @Name("u.midi.songptrpos") public native @Cast("DWORD") int u_midi_songptrpos(); public native MMTIME u_midi_songptrpos(int setter);   /* song pointer position */
}
