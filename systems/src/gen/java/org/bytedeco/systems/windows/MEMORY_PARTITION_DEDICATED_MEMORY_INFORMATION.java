// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;


@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION position(long position) {
        return (MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION)super.position(position);
    }
    @Override public MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION getPointer(long i) {
        return new MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION((Pointer)this).offsetAddress(i);
    }


    //
    // Offset of the next information entry from the beginning of this
    // information entry.
    //

    public native @Cast("DWORD") int NextEntryOffset(); public native MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION NextEntryOffset(int setter);

    //
    // Size of this information entry.
    //

    public native @Cast("DWORD") int SizeOfInformation(); public native MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION SizeOfInformation(int setter);

    //
    // Various flags.
    //

    public native @Cast("DWORD") int Flags(); public native MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION Flags(int setter);

    //
    // Offset (from the beginning of this entry) to the set of available
    // attributes of the dedicated memory.
    //

    public native @Cast("DWORD") int AttributesOffset(); public native MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION AttributesOffset(int setter);

    //
    // Number of available dedicated memory attributes.
    //

    public native @Cast("DWORD") int AttributeCount(); public native MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION AttributeCount(int setter);

    //
    // Reserved field.
    //

    public native @Cast("DWORD") int Reserved(); public native MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION Reserved(int setter);

    //
    // Type identifier for this dedicated memory used to open a handle.
    //

    public native @Cast("DWORD64") long TypeId(); public native MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION TypeId(long setter);

}
