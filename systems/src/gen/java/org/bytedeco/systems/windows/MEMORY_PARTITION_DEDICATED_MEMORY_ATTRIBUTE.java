// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;


@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE position(long position) {
        return (MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE)super.position(position);
    }
    @Override public MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE getPointer(long i) {
        return new MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE((Pointer)this).offsetAddress(i);
    }

    public native @Cast("MEM_DEDICATED_ATTRIBUTE_TYPE") int Type(); public native MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE Type(int setter);
    public native @Cast("DWORD") int Reserved(); public native MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE Reserved(int setter);

    //
    // The unit of Value is determined by the Type.
    // When Type is a latency, Value is in picoseconds.
    // When Type is a bandwidth, Value is in megabyte per second.
    //
    public native @Cast("DWORD64") long Value(); public native MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE Value(long setter);
}
