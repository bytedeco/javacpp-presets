// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.systems.global.windows.*;


@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class MEMORYSTATUS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MEMORYSTATUS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MEMORYSTATUS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MEMORYSTATUS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MEMORYSTATUS position(long position) {
        return (MEMORYSTATUS)super.position(position);
    }

    public native @Cast("DWORD") int dwLength(); public native MEMORYSTATUS dwLength(int dwLength);
    public native @Cast("DWORD") int dwMemoryLoad(); public native MEMORYSTATUS dwMemoryLoad(int dwMemoryLoad);
    public native @Cast("SIZE_T") long dwTotalPhys(); public native MEMORYSTATUS dwTotalPhys(long dwTotalPhys);
    public native @Cast("SIZE_T") long dwAvailPhys(); public native MEMORYSTATUS dwAvailPhys(long dwAvailPhys);
    public native @Cast("SIZE_T") long dwTotalPageFile(); public native MEMORYSTATUS dwTotalPageFile(long dwTotalPageFile);
    public native @Cast("SIZE_T") long dwAvailPageFile(); public native MEMORYSTATUS dwAvailPageFile(long dwAvailPageFile);
    public native @Cast("SIZE_T") long dwTotalVirtual(); public native MEMORYSTATUS dwTotalVirtual(long dwTotalVirtual);
    public native @Cast("SIZE_T") long dwAvailVirtual(); public native MEMORYSTATUS dwAvailVirtual(long dwAvailVirtual);
}
