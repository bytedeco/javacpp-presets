// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.systems.global.windows.*;


@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class MEM_ADDRESS_REQUIREMENTS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MEM_ADDRESS_REQUIREMENTS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MEM_ADDRESS_REQUIREMENTS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MEM_ADDRESS_REQUIREMENTS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MEM_ADDRESS_REQUIREMENTS position(long position) {
        return (MEM_ADDRESS_REQUIREMENTS)super.position(position);
    }
    @Override public MEM_ADDRESS_REQUIREMENTS getPointer(long i) {
        return new MEM_ADDRESS_REQUIREMENTS((Pointer)this).offsetAddress(i);
    }

    public native @Cast("PVOID") Pointer LowestStartingAddress(); public native MEM_ADDRESS_REQUIREMENTS LowestStartingAddress(Pointer setter);
    public native @Cast("PVOID") Pointer HighestEndingAddress(); public native MEM_ADDRESS_REQUIREMENTS HighestEndingAddress(Pointer setter);
    public native @Cast("SIZE_T") long Alignment(); public native MEM_ADDRESS_REQUIREMENTS Alignment(long setter);
}
