// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.windows;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.systems.global.windows.*;


@Properties(inherit = org.bytedeco.systems.presets.windows.class)
public class UNWIND_HISTORY_TABLE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public UNWIND_HISTORY_TABLE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public UNWIND_HISTORY_TABLE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UNWIND_HISTORY_TABLE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public UNWIND_HISTORY_TABLE position(long position) {
        return (UNWIND_HISTORY_TABLE)super.position(position);
    }

    public native @Cast("DWORD") int Count(); public native UNWIND_HISTORY_TABLE Count(int Count);
    public native @Cast("BYTE") byte LocalHint(); public native UNWIND_HISTORY_TABLE LocalHint(byte LocalHint);
    public native @Cast("BYTE") byte GlobalHint(); public native UNWIND_HISTORY_TABLE GlobalHint(byte GlobalHint);
    public native @Cast("BYTE") byte Search(); public native UNWIND_HISTORY_TABLE Search(byte Search);
    public native @Cast("BYTE") byte Once(); public native UNWIND_HISTORY_TABLE Once(byte Once);
    public native @Cast("DWORD64") long LowAddress(); public native UNWIND_HISTORY_TABLE LowAddress(long LowAddress);
    public native @Cast("DWORD64") long HighAddress(); public native UNWIND_HISTORY_TABLE HighAddress(long HighAddress);
    public native @ByRef UNWIND_HISTORY_TABLE_ENTRY Entry(int i); public native UNWIND_HISTORY_TABLE Entry(int i, UNWIND_HISTORY_TABLE_ENTRY Entry);
    @MemberGetter public native UNWIND_HISTORY_TABLE_ENTRY Entry();
}
