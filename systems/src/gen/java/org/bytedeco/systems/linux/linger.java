// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.linux;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.systems.global.linux.*;


// #if !defined __USE_MISC && !defined __USE_GNU
// # ifdef __SYS_SOCKET_H_undef_FIOGETOWN
// # endif
// # ifdef __SYS_SOCKET_H_undef_FIOSETOWN
// # endif
// # ifdef __SYS_SOCKET_H_undef_SIOCATMARK
// # endif
// # ifdef __SYS_SOCKET_H_undef_SIOCGPGRP
// # endif
// # ifdef __SYS_SOCKET_H_undef_SIOCGSTAMP
// # endif
// # ifdef __SYS_SOCKET_H_undef_SIOCGSTAMPNS
// # endif
// # ifdef __SYS_SOCKET_H_undef_SIOCSPGRP
// # endif
// #endif

/* Structure used to manipulate the SO_LINGER option.  */
@Properties(inherit = org.bytedeco.systems.presets.linux.class)
public class linger extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public linger() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public linger(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public linger(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public linger position(long position) {
        return (linger)super.position(position);
    }

    public native int l_onoff(); public native linger l_onoff(int l_onoff);		/* Nonzero to linger on close.  */
    public native int l_linger(); public native linger l_linger(int l_linger);		/* Time to linger.  */
  }
