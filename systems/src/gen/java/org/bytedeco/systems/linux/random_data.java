// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.systems.linux;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.systems.global.linux.*;



// # ifdef __USE_MISC
/* Reentrant versions of the `random' family of functions.
   These functions all use the following data structure to contain
   state, rather than global state variables.  */

@Properties(inherit = org.bytedeco.systems.presets.linux.class)
public class random_data extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public random_data() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public random_data(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public random_data(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public random_data position(long position) {
        return (random_data)super.position(position);
    }

    public native IntPointer fptr(); public native random_data fptr(IntPointer fptr);		/* Front pointer.  */
    public native IntPointer rptr(); public native random_data rptr(IntPointer rptr);		/* Rear pointer.  */
    public native IntPointer state(); public native random_data state(IntPointer state);		/* Array of state values.  */
    public native int rand_type(); public native random_data rand_type(int rand_type);		/* Type of random number generator.  */
    public native int rand_deg(); public native random_data rand_deg(int rand_deg);		/* Degree of random number generator.  */
    public native int rand_sep(); public native random_data rand_sep(int rand_sep);		/* Distance between front and rear.  */
    public native IntPointer end_ptr(); public native random_data end_ptr(IntPointer end_ptr);		/* Pointer behind state table.  */
  }
