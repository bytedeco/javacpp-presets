// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arpackng.global;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

public class arpack extends org.bytedeco.arpackng.presets.arpack {
    static { Loader.load(); }

// Parsed from arpack/arpackdef.h

// #ifndef __ARPACKDEF_H__
// #define __ARPACKDEF_H__

public static native @MemberGetter int INTERFACE64();
public static final int INTERFACE64 = INTERFACE64();

// #if INTERFACE64
// #else
// #define a_int            int
// #define a_uint  unsigned int
// #endif

// #endif


// Parsed from arpack/arpack.h

// #ifndef __ARPACK_H__
// #define __ARPACK_H__

// #include "arpackdef.h"

// #ifdef __cplusplus
// #endif

public static native void cnaupd_c(IntPointer ido, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, float tol, @Cast("float _Complex*") FloatPointer resid, int ncv, @Cast("float _Complex*") FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr, @Cast("float _Complex*") FloatPointer workd, @Cast("float _Complex*") FloatPointer workl, int lworkl, FloatPointer rwork, IntPointer info);
public static native void cnaupd_c(IntBuffer ido, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, float tol, @Cast("float _Complex*") FloatBuffer resid, int ncv, @Cast("float _Complex*") FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, @Cast("float _Complex*") FloatBuffer workd, @Cast("float _Complex*") FloatBuffer workl, int lworkl, FloatBuffer rwork, IntBuffer info);
public static native void cnaupd_c(int[] ido, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, float tol, @Cast("float _Complex*") float[] resid, int ncv, @Cast("float _Complex*") float[] v, int ldv, int[] iparam, int[] ipntr, @Cast("float _Complex*") float[] workd, @Cast("float _Complex*") float[] workl, int lworkl, float[] rwork, int[] info);
public static native void cneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") BytePointer howmny, @Const IntPointer select, @Cast("float _Complex*") FloatPointer d, @Cast("float _Complex*") FloatPointer z, int ldz, @ByVal @Cast("float _Complex*") FloatPointer sigma, @Cast("float _Complex*") FloatPointer workev, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, float tol, @Cast("float _Complex*") FloatPointer resid, int ncv, @Cast("float _Complex*") FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr, @Cast("float _Complex*") FloatPointer workd, @Cast("float _Complex*") FloatPointer workl, int lworkl, FloatPointer rwork, IntPointer info);
public static native void cneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") ByteBuffer howmny, @Const IntBuffer select, @Cast("float _Complex*") FloatBuffer d, @Cast("float _Complex*") FloatBuffer z, int ldz, @ByVal @Cast("float _Complex*") FloatBuffer sigma, @Cast("float _Complex*") FloatBuffer workev, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, float tol, @Cast("float _Complex*") FloatBuffer resid, int ncv, @Cast("float _Complex*") FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, @Cast("float _Complex*") FloatBuffer workd, @Cast("float _Complex*") FloatBuffer workl, int lworkl, FloatBuffer rwork, IntBuffer info);
public static native void cneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") byte[] howmny, @Const int[] select, @Cast("float _Complex*") float[] d, @Cast("float _Complex*") float[] z, int ldz, @ByVal @Cast("float _Complex*") float[] sigma, @Cast("float _Complex*") float[] workev, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, float tol, @Cast("float _Complex*") float[] resid, int ncv, @Cast("float _Complex*") float[] v, int ldv, int[] iparam, int[] ipntr, @Cast("float _Complex*") float[] workd, @Cast("float _Complex*") float[] workl, int lworkl, float[] rwork, int[] info);
public static native void dnaupd_c(IntPointer ido, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, double tol, DoublePointer resid, int ncv, DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr, DoublePointer workd, DoublePointer workl, int lworkl, IntPointer info);
public static native void dnaupd_c(IntBuffer ido, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, double tol, DoubleBuffer resid, int ncv, DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, DoubleBuffer workd, DoubleBuffer workl, int lworkl, IntBuffer info);
public static native void dnaupd_c(int[] ido, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, double tol, double[] resid, int ncv, double[] v, int ldv, int[] iparam, int[] ipntr, double[] workd, double[] workl, int lworkl, int[] info);
public static native void dneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") BytePointer howmny, @Const IntPointer select, DoublePointer dr, DoublePointer di, DoublePointer z, int ldz, double sigmar, double sigmai, DoublePointer workev, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, double tol, DoublePointer resid, int ncv, DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr, DoublePointer workd, DoublePointer workl, int lworkl, IntPointer info);
public static native void dneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") ByteBuffer howmny, @Const IntBuffer select, DoubleBuffer dr, DoubleBuffer di, DoubleBuffer z, int ldz, double sigmar, double sigmai, DoubleBuffer workev, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, double tol, DoubleBuffer resid, int ncv, DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, DoubleBuffer workd, DoubleBuffer workl, int lworkl, IntBuffer info);
public static native void dneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") byte[] howmny, @Const int[] select, double[] dr, double[] di, double[] z, int ldz, double sigmar, double sigmai, double[] workev, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, double tol, double[] resid, int ncv, double[] v, int ldv, int[] iparam, int[] ipntr, double[] workd, double[] workl, int lworkl, int[] info);
public static native void dsaupd_c(IntPointer ido, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, double tol, DoublePointer resid, int ncv, DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr, DoublePointer workd, DoublePointer workl, int lworkl, IntPointer info);
public static native void dsaupd_c(IntBuffer ido, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, double tol, DoubleBuffer resid, int ncv, DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, DoubleBuffer workd, DoubleBuffer workl, int lworkl, IntBuffer info);
public static native void dsaupd_c(int[] ido, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, double tol, double[] resid, int ncv, double[] v, int ldv, int[] iparam, int[] ipntr, double[] workd, double[] workl, int lworkl, int[] info);
public static native void dseupd_c(@Cast("bool") boolean rvec, @Cast("const char*") BytePointer howmny, @Const IntPointer select, DoublePointer d, DoublePointer z, int ldz, double sigma, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, double tol, DoublePointer resid, int ncv, DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr, DoublePointer workd, DoublePointer workl, int lworkl, IntPointer info);
public static native void dseupd_c(@Cast("bool") boolean rvec, @Cast("const char*") ByteBuffer howmny, @Const IntBuffer select, DoubleBuffer d, DoubleBuffer z, int ldz, double sigma, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, double tol, DoubleBuffer resid, int ncv, DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, DoubleBuffer workd, DoubleBuffer workl, int lworkl, IntBuffer info);
public static native void dseupd_c(@Cast("bool") boolean rvec, @Cast("const char*") byte[] howmny, @Const int[] select, double[] d, double[] z, int ldz, double sigma, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, double tol, double[] resid, int ncv, double[] v, int ldv, int[] iparam, int[] ipntr, double[] workd, double[] workl, int lworkl, int[] info);
public static native void snaupd_c(IntPointer ido, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, float tol, FloatPointer resid, int ncv, FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr, FloatPointer workd, FloatPointer workl, int lworkl, IntPointer info);
public static native void snaupd_c(IntBuffer ido, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, float tol, FloatBuffer resid, int ncv, FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, FloatBuffer workd, FloatBuffer workl, int lworkl, IntBuffer info);
public static native void snaupd_c(int[] ido, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, float tol, float[] resid, int ncv, float[] v, int ldv, int[] iparam, int[] ipntr, float[] workd, float[] workl, int lworkl, int[] info);
public static native void sneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") BytePointer howmny, @Const IntPointer select, FloatPointer dr, FloatPointer di, FloatPointer z, int ldz, float sigmar, float sigmai, FloatPointer workev, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, float tol, FloatPointer resid, int ncv, FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr, FloatPointer workd, FloatPointer workl, int lworkl, IntPointer info);
public static native void sneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") ByteBuffer howmny, @Const IntBuffer select, FloatBuffer dr, FloatBuffer di, FloatBuffer z, int ldz, float sigmar, float sigmai, FloatBuffer workev, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, float tol, FloatBuffer resid, int ncv, FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, FloatBuffer workd, FloatBuffer workl, int lworkl, IntBuffer info);
public static native void sneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") byte[] howmny, @Const int[] select, float[] dr, float[] di, float[] z, int ldz, float sigmar, float sigmai, float[] workev, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, float tol, float[] resid, int ncv, float[] v, int ldv, int[] iparam, int[] ipntr, float[] workd, float[] workl, int lworkl, int[] info);
public static native void ssaupd_c(IntPointer ido, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, float tol, FloatPointer resid, int ncv, FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr, FloatPointer workd, FloatPointer workl, int lworkl, IntPointer info);
public static native void ssaupd_c(IntBuffer ido, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, float tol, FloatBuffer resid, int ncv, FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, FloatBuffer workd, FloatBuffer workl, int lworkl, IntBuffer info);
public static native void ssaupd_c(int[] ido, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, float tol, float[] resid, int ncv, float[] v, int ldv, int[] iparam, int[] ipntr, float[] workd, float[] workl, int lworkl, int[] info);
public static native void sseupd_c(@Cast("bool") boolean rvec, @Cast("const char*") BytePointer howmny, @Const IntPointer select, FloatPointer d, FloatPointer z, int ldz, float sigma, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, float tol, FloatPointer resid, int ncv, FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr, FloatPointer workd, FloatPointer workl, int lworkl, IntPointer info);
public static native void sseupd_c(@Cast("bool") boolean rvec, @Cast("const char*") ByteBuffer howmny, @Const IntBuffer select, FloatBuffer d, FloatBuffer z, int ldz, float sigma, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, float tol, FloatBuffer resid, int ncv, FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, FloatBuffer workd, FloatBuffer workl, int lworkl, IntBuffer info);
public static native void sseupd_c(@Cast("bool") boolean rvec, @Cast("const char*") byte[] howmny, @Const int[] select, float[] d, float[] z, int ldz, float sigma, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, float tol, float[] resid, int ncv, float[] v, int ldv, int[] iparam, int[] ipntr, float[] workd, float[] workl, int lworkl, int[] info);
public static native void znaupd_c(IntPointer ido, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, double tol, @Cast("double _Complex*") DoublePointer resid, int ncv, @Cast("double _Complex*") DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr, @Cast("double _Complex*") DoublePointer workd, @Cast("double _Complex*") DoublePointer workl, int lworkl, DoublePointer rwork, IntPointer info);
public static native void znaupd_c(IntBuffer ido, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, double tol, @Cast("double _Complex*") DoubleBuffer resid, int ncv, @Cast("double _Complex*") DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, @Cast("double _Complex*") DoubleBuffer workd, @Cast("double _Complex*") DoubleBuffer workl, int lworkl, DoubleBuffer rwork, IntBuffer info);
public static native void znaupd_c(int[] ido, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, double tol, @Cast("double _Complex*") double[] resid, int ncv, @Cast("double _Complex*") double[] v, int ldv, int[] iparam, int[] ipntr, @Cast("double _Complex*") double[] workd, @Cast("double _Complex*") double[] workl, int lworkl, double[] rwork, int[] info);
public static native void zneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") BytePointer howmny, @Const IntPointer select, @Cast("double _Complex*") DoublePointer d, @Cast("double _Complex*") DoublePointer z, int ldz, @ByVal @Cast("double _Complex*") DoublePointer sigma, @Cast("double _Complex*") DoublePointer workev, @Cast("const char*") BytePointer bmat, int n, @Cast("const char*") BytePointer which, int nev, double tol, @Cast("double _Complex*") DoublePointer resid, int ncv, @Cast("double _Complex*") DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr, @Cast("double _Complex*") DoublePointer workd, @Cast("double _Complex*") DoublePointer workl, int lworkl, DoublePointer rwork, IntPointer info);
public static native void zneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") ByteBuffer howmny, @Const IntBuffer select, @Cast("double _Complex*") DoubleBuffer d, @Cast("double _Complex*") DoubleBuffer z, int ldz, @ByVal @Cast("double _Complex*") DoubleBuffer sigma, @Cast("double _Complex*") DoubleBuffer workev, @Cast("const char*") ByteBuffer bmat, int n, @Cast("const char*") ByteBuffer which, int nev, double tol, @Cast("double _Complex*") DoubleBuffer resid, int ncv, @Cast("double _Complex*") DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr, @Cast("double _Complex*") DoubleBuffer workd, @Cast("double _Complex*") DoubleBuffer workl, int lworkl, DoubleBuffer rwork, IntBuffer info);
public static native void zneupd_c(@Cast("bool") boolean rvec, @Cast("const char*") byte[] howmny, @Const int[] select, @Cast("double _Complex*") double[] d, @Cast("double _Complex*") double[] z, int ldz, @ByVal @Cast("double _Complex*") double[] sigma, @Cast("double _Complex*") double[] workev, @Cast("const char*") byte[] bmat, int n, @Cast("const char*") byte[] which, int nev, double tol, @Cast("double _Complex*") double[] resid, int ncv, @Cast("double _Complex*") double[] v, int ldv, int[] iparam, int[] ipntr, @Cast("double _Complex*") double[] workd, @Cast("double _Complex*") double[] workl, int lworkl, double[] rwork, int[] info);

// #ifdef  __cplusplus
// #endif

// #endif


// Parsed from arpack/arpack.hpp

// #ifndef __ARPACK_HPP__
// #define __ARPACK_HPP__

// #include "arpackdef.h"

// #include <complex.h>
// #include <complex>
/** enum class arpack::which */
public static final int
  /** 'LA' - compute the NEV largest (algebraic) eigenvalues */
  largest_algebraic = 0,
  /** 'SA' - compute the NEV smallest (algebraic) eigenvalues. */
  smallest_algebraic = 1,
  /** 'LM' - compute the NEV largest (in magnitude) eigenvalues. */
  largest_magnitude = 2,
  /** 'SM' - compute the NEV smallest (in magnitude) eigenvalues. */
  smallest_magnitude = 3,
  /** 'BE' - compute NEV eigenvalues, half from each end of the
   *  spectrum.  When NEV is odd, compute one more from the
   *  high end than from the low end. */
  both_ends = 4;

/** enum class arpack::bmat */
public static final int
  /** B = 'I' -> standard eigenvalue problem A*x = lambda*x */
  identity = 0,
  /** B = 'G' -> generalized eigenvalue problem A*x = lambda*B*x */
  generalized = 1;

/** enum class arpack::howmny */
public static final int
  /** 'A' Compute NEV Ritz vectors */
  ritz_vectors = 0,
  /** 'P' Compute NEV Schur vectors; */
  schur_vectors = 1,
  /** 'S' compute some of the Ritz vectors, specified by the logical array
   *  SELECT. */
  ritz_specified = 2;
// #include "arpack.h"

@Namespace("arpack::internal") public static native @Cast("const char*") BytePointer convert_to_char(@Cast("const arpack::which") int option);
  // namespace internal

@Namespace("arpack") public static native void saupd(@ByRef IntPointer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, FloatPointer resid,
                  int ncv, FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr,
                  FloatPointer workd, FloatPointer workl, int lworkl, @ByRef IntPointer info);
@Namespace("arpack") public static native void saupd(@ByRef IntBuffer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, FloatBuffer resid,
                  int ncv, FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr,
                  FloatBuffer workd, FloatBuffer workl, int lworkl, @ByRef IntBuffer info);
@Namespace("arpack") public static native void saupd(@ByRef int[] ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, float[] resid,
                  int ncv, float[] v, int ldv, int[] iparam, int[] ipntr,
                  float[] workd, float[] workl, int lworkl, @ByRef int[] info);

@Namespace("arpack") public static native void seupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntPointer select, FloatPointer d,
                  FloatPointer z, int ldz, float sigma, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, FloatPointer resid,
                  int ncv, FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr,
                  FloatPointer workd, FloatPointer workl, int lworkl, @ByRef IntPointer info);
@Namespace("arpack") public static native void seupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntBuffer select, FloatBuffer d,
                  FloatBuffer z, int ldz, float sigma, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, FloatBuffer resid,
                  int ncv, FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr,
                  FloatBuffer workd, FloatBuffer workl, int lworkl, @ByRef IntBuffer info);
@Namespace("arpack") public static native void seupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, int[] select, float[] d,
                  float[] z, int ldz, float sigma, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, float[] resid,
                  int ncv, float[] v, int ldv, int[] iparam, int[] ipntr,
                  float[] workd, float[] workl, int lworkl, @ByRef int[] info);

@Namespace("arpack") public static native void saupd(@ByRef IntPointer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, DoublePointer resid,
                  int ncv, DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr,
                  DoublePointer workd, DoublePointer workl, int lworkl, @ByRef IntPointer info);
@Namespace("arpack") public static native void saupd(@ByRef IntBuffer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, DoubleBuffer resid,
                  int ncv, DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr,
                  DoubleBuffer workd, DoubleBuffer workl, int lworkl, @ByRef IntBuffer info);
@Namespace("arpack") public static native void saupd(@ByRef int[] ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, double[] resid,
                  int ncv, double[] v, int ldv, int[] iparam, int[] ipntr,
                  double[] workd, double[] workl, int lworkl, @ByRef int[] info);

@Namespace("arpack") public static native void seupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntPointer select, DoublePointer d,
                  DoublePointer z, int ldz, double sigma, @Cast("const arpack::bmat") int bmat_option,
                  int n, @Cast("const arpack::which") int ritz_option, int nev, double tol,
                  DoublePointer resid, int ncv, DoublePointer v, int ldv, IntPointer iparam,
                  IntPointer ipntr, DoublePointer workd, DoublePointer workl, int lworkl,
                  @ByRef IntPointer info);
@Namespace("arpack") public static native void seupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntBuffer select, DoubleBuffer d,
                  DoubleBuffer z, int ldz, double sigma, @Cast("const arpack::bmat") int bmat_option,
                  int n, @Cast("const arpack::which") int ritz_option, int nev, double tol,
                  DoubleBuffer resid, int ncv, DoubleBuffer v, int ldv, IntBuffer iparam,
                  IntBuffer ipntr, DoubleBuffer workd, DoubleBuffer workl, int lworkl,
                  @ByRef IntBuffer info);
@Namespace("arpack") public static native void seupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, int[] select, double[] d,
                  double[] z, int ldz, double sigma, @Cast("const arpack::bmat") int bmat_option,
                  int n, @Cast("const arpack::which") int ritz_option, int nev, double tol,
                  double[] resid, int ncv, double[] v, int ldv, int[] iparam,
                  int[] ipntr, double[] workd, double[] workl, int lworkl,
                  @ByRef int[] info);

@Namespace("arpack") public static native void naupd(@ByRef IntPointer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, FloatPointer resid,
                  int ncv, FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr,
                  FloatPointer workd, FloatPointer workl, int lworkl, @ByRef IntPointer info);
@Namespace("arpack") public static native void naupd(@ByRef IntBuffer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, FloatBuffer resid,
                  int ncv, FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr,
                  FloatBuffer workd, FloatBuffer workl, int lworkl, @ByRef IntBuffer info);
@Namespace("arpack") public static native void naupd(@ByRef int[] ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol, float[] resid,
                  int ncv, float[] v, int ldv, int[] iparam, int[] ipntr,
                  float[] workd, float[] workl, int lworkl, @ByRef int[] info);

@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntPointer select, FloatPointer dr,
                  FloatPointer di, FloatPointer z, int ldz,
                  float sigmar, float sigmai, FloatPointer workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, float tol, FloatPointer resid, int ncv, FloatPointer v, int ldv,
                  IntPointer iparam, IntPointer ipntr, FloatPointer workd, FloatPointer workl,
                  int lworkl, @ByRef IntPointer info);
@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntBuffer select, FloatBuffer dr,
                  FloatBuffer di, FloatBuffer z, int ldz,
                  float sigmar, float sigmai, FloatBuffer workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, float tol, FloatBuffer resid, int ncv, FloatBuffer v, int ldv,
                  IntBuffer iparam, IntBuffer ipntr, FloatBuffer workd, FloatBuffer workl,
                  int lworkl, @ByRef IntBuffer info);
@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, int[] select, float[] dr,
                  float[] di, float[] z, int ldz,
                  float sigmar, float sigmai, float[] workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, float tol, float[] resid, int ncv, float[] v, int ldv,
                  int[] iparam, int[] ipntr, float[] workd, float[] workl,
                  int lworkl, @ByRef int[] info);

@Namespace("arpack") public static native void naupd(@ByRef IntPointer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, DoublePointer resid,
                  int ncv, DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr,
                  DoublePointer workd, DoublePointer workl, int lworkl, @ByRef IntPointer info);
@Namespace("arpack") public static native void naupd(@ByRef IntBuffer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, DoubleBuffer resid,
                  int ncv, DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr,
                  DoubleBuffer workd, DoubleBuffer workl, int lworkl, @ByRef IntBuffer info);
@Namespace("arpack") public static native void naupd(@ByRef int[] ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, double[] resid,
                  int ncv, double[] v, int ldv, int[] iparam, int[] ipntr,
                  double[] workd, double[] workl, int lworkl, @ByRef int[] info);

@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntPointer select,
                  DoublePointer dr, DoublePointer di, DoublePointer z, int ldz,
                  double sigmar, double sigmai, DoublePointer workev,
                  @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, DoublePointer resid,
                  int ncv, DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr,
                  DoublePointer workd, DoublePointer workl, int lworkl, @ByRef IntPointer info);
@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntBuffer select,
                  DoubleBuffer dr, DoubleBuffer di, DoubleBuffer z, int ldz,
                  double sigmar, double sigmai, DoubleBuffer workev,
                  @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, DoubleBuffer resid,
                  int ncv, DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr,
                  DoubleBuffer workd, DoubleBuffer workl, int lworkl, @ByRef IntBuffer info);
@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, int[] select,
                  double[] dr, double[] di, double[] z, int ldz,
                  double sigmar, double sigmai, double[] workev,
                  @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol, double[] resid,
                  int ncv, double[] v, int ldv, int[] iparam, int[] ipntr,
                  double[] workd, double[] workl, int lworkl, @ByRef int[] info);

@Namespace("arpack") public static native void naupd(@ByRef IntPointer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol,
                  @Cast("std::complex<float>*") FloatPointer resid, int ncv, @Cast("std::complex<float>*") FloatPointer v,
                  int ldv, IntPointer iparam, IntPointer ipntr, @Cast("std::complex<float>*") FloatPointer workd,
                  @Cast("std::complex<float>*") FloatPointer workl, int lworkl,
                  FloatPointer rwork, @ByRef IntPointer info);
@Namespace("arpack") public static native void naupd(@ByRef IntBuffer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol,
                  @Cast("std::complex<float>*") FloatBuffer resid, int ncv, @Cast("std::complex<float>*") FloatBuffer v,
                  int ldv, IntBuffer iparam, IntBuffer ipntr, @Cast("std::complex<float>*") FloatBuffer workd,
                  @Cast("std::complex<float>*") FloatBuffer workl, int lworkl,
                  FloatBuffer rwork, @ByRef IntBuffer info);
@Namespace("arpack") public static native void naupd(@ByRef int[] ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, float tol,
                  @Cast("std::complex<float>*") float[] resid, int ncv, @Cast("std::complex<float>*") float[] v,
                  int ldv, int[] iparam, int[] ipntr, @Cast("std::complex<float>*") float[] workd,
                  @Cast("std::complex<float>*") float[] workl, int lworkl,
                  float[] rwork, @ByRef int[] info);

@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntPointer select,
                  @Cast("std::complex<float>*") FloatPointer d, @Cast("std::complex<float>*") FloatPointer z, int ldz,
                  @ByVal @Cast("std::complex<float>*") FloatPointer sigma, @Cast("std::complex<float>*") FloatPointer workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, float tol, @Cast("std::complex<float>*") FloatPointer resid, int ncv,
                  @Cast("std::complex<float>*") FloatPointer v, int ldv, IntPointer iparam, IntPointer ipntr,
                  @Cast("std::complex<float>*") FloatPointer workd, @Cast("std::complex<float>*") FloatPointer workl,
                  int lworkl, FloatPointer rwork, @ByRef IntPointer info);
@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntBuffer select,
                  @Cast("std::complex<float>*") FloatBuffer d, @Cast("std::complex<float>*") FloatBuffer z, int ldz,
                  @ByVal @Cast("std::complex<float>*") FloatBuffer sigma, @Cast("std::complex<float>*") FloatBuffer workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, float tol, @Cast("std::complex<float>*") FloatBuffer resid, int ncv,
                  @Cast("std::complex<float>*") FloatBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr,
                  @Cast("std::complex<float>*") FloatBuffer workd, @Cast("std::complex<float>*") FloatBuffer workl,
                  int lworkl, FloatBuffer rwork, @ByRef IntBuffer info);
@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, int[] select,
                  @Cast("std::complex<float>*") float[] d, @Cast("std::complex<float>*") float[] z, int ldz,
                  @ByVal @Cast("std::complex<float>*") float[] sigma, @Cast("std::complex<float>*") float[] workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, float tol, @Cast("std::complex<float>*") float[] resid, int ncv,
                  @Cast("std::complex<float>*") float[] v, int ldv, int[] iparam, int[] ipntr,
                  @Cast("std::complex<float>*") float[] workd, @Cast("std::complex<float>*") float[] workl,
                  int lworkl, float[] rwork, @ByRef int[] info);

@Namespace("arpack") public static native void naupd(@ByRef IntPointer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol,
                  @Cast("std::complex<double>*") DoublePointer resid, int ncv, @Cast("std::complex<double>*") DoublePointer v,
                  int ldv, IntPointer iparam, IntPointer ipntr, @Cast("std::complex<double>*") DoublePointer workd,
                  @Cast("std::complex<double>*") DoublePointer workl, int lworkl,
                  DoublePointer rwork, @ByRef IntPointer info);
@Namespace("arpack") public static native void naupd(@ByRef IntBuffer ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol,
                  @Cast("std::complex<double>*") DoubleBuffer resid, int ncv, @Cast("std::complex<double>*") DoubleBuffer v,
                  int ldv, IntBuffer iparam, IntBuffer ipntr, @Cast("std::complex<double>*") DoubleBuffer workd,
                  @Cast("std::complex<double>*") DoubleBuffer workl, int lworkl,
                  DoubleBuffer rwork, @ByRef IntBuffer info);
@Namespace("arpack") public static native void naupd(@ByRef int[] ido, @Cast("const arpack::bmat") int bmat_option, int n,
                  @Cast("const arpack::which") int ritz_option, int nev, double tol,
                  @Cast("std::complex<double>*") double[] resid, int ncv, @Cast("std::complex<double>*") double[] v,
                  int ldv, int[] iparam, int[] ipntr, @Cast("std::complex<double>*") double[] workd,
                  @Cast("std::complex<double>*") double[] workl, int lworkl,
                  double[] rwork, @ByRef int[] info);

@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntPointer select,
                  @Cast("std::complex<double>*") DoublePointer d, @Cast("std::complex<double>*") DoublePointer z, int ldz,
                  @ByVal @Cast("std::complex<double>*") DoublePointer sigma, @Cast("std::complex<double>*") DoublePointer workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, double tol, @Cast("std::complex<double>*") DoublePointer resid, int ncv,
                  @Cast("std::complex<double>*") DoublePointer v, int ldv, IntPointer iparam, IntPointer ipntr,
                  @Cast("std::complex<double>*") DoublePointer workd, @Cast("std::complex<double>*") DoublePointer workl,
                  int lworkl, DoublePointer rwork, @ByRef IntPointer info);
@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, IntBuffer select,
                  @Cast("std::complex<double>*") DoubleBuffer d, @Cast("std::complex<double>*") DoubleBuffer z, int ldz,
                  @ByVal @Cast("std::complex<double>*") DoubleBuffer sigma, @Cast("std::complex<double>*") DoubleBuffer workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, double tol, @Cast("std::complex<double>*") DoubleBuffer resid, int ncv,
                  @Cast("std::complex<double>*") DoubleBuffer v, int ldv, IntBuffer iparam, IntBuffer ipntr,
                  @Cast("std::complex<double>*") DoubleBuffer workd, @Cast("std::complex<double>*") DoubleBuffer workl,
                  int lworkl, DoubleBuffer rwork, @ByRef IntBuffer info);
@Namespace("arpack") public static native void neupd(@Cast("bool") boolean rvec, @Cast("const arpack::howmny") int howmny_option, int[] select,
                  @Cast("std::complex<double>*") double[] d, @Cast("std::complex<double>*") double[] z, int ldz,
                  @ByVal @Cast("std::complex<double>*") double[] sigma, @Cast("std::complex<double>*") double[] workev,
                  @Cast("const arpack::bmat") int bmat_option, int n, @Cast("const arpack::which") int ritz_option,
                  int nev, double tol, @Cast("std::complex<double>*") double[] resid, int ncv,
                  @Cast("std::complex<double>*") double[] v, int ldv, int[] iparam, int[] ipntr,
                  @Cast("std::complex<double>*") double[] workd, @Cast("std::complex<double>*") double[] workl,
                  int lworkl, double[] rwork, @ByRef int[] info);
  // namespace arpack

// #endif


// Parsed from arpack/debug_c.hpp

// #ifndef __DEBUG_C_HPP__
// #define __DEBUG_C_HPP__

public static native void debug_c(int logfil_c, int ndigit_c, int mgetv0_c,
                        int msaupd_c, int msaup2_c, int msaitr_c, int mseigt_c, int msapps_c, int msgets_c, int mseupd_c,
                        int mnaupd_c, int mnaup2_c, int mnaitr_c, int mneigh_c, int mnapps_c, int mngets_c, int mneupd_c,
                        int mcaupd_c, int mcaup2_c, int mcaitr_c, int mceigh_c, int mcapps_c, int mcgets_c, int mceupd_c);

// #endif


// Parsed from arpack/stat_c.hpp

// #ifndef __STAT_C_HPP__
// #define __STAT_C_HPP__

/*Reset timers*/
public static native void sstats_c();
public static native void sstatn_c();
public static native void cstatn_c();

/*Get timers*/
public static native void stat_c(@ByRef IntPointer nopx_c, @ByRef IntPointer nbx_c, @ByRef IntPointer nrorth_c, @ByRef IntPointer nitref_c, @ByRef IntPointer nrstrt_c,
                       @ByRef FloatPointer tsaupd_c, @ByRef FloatPointer tsaup2_c, @ByRef FloatPointer tsaitr_c, @ByRef FloatPointer tseigt_c, @ByRef FloatPointer tsgets_c, @ByRef FloatPointer tsapps_c, @ByRef FloatPointer tsconv_c,
                       @ByRef FloatPointer tnaupd_c, @ByRef FloatPointer tnaup2_c, @ByRef FloatPointer tnaitr_c, @ByRef FloatPointer tneigh_c, @ByRef FloatPointer tngets_c, @ByRef FloatPointer tnapps_c, @ByRef FloatPointer tnconv_c,
                       @ByRef FloatPointer tcaupd_c, @ByRef FloatPointer tcaup2_c, @ByRef FloatPointer tcaitr_c, @ByRef FloatPointer tceigh_c, @ByRef FloatPointer tcgets_c, @ByRef FloatPointer tcapps_c, @ByRef FloatPointer tcconv_c,
                       @ByRef FloatPointer tmvopx_c, @ByRef FloatPointer tmvbx_c, @ByRef FloatPointer tgetv0_c, @ByRef FloatPointer titref_c, @ByRef FloatPointer trvec_c);
public static native void stat_c(@ByRef IntBuffer nopx_c, @ByRef IntBuffer nbx_c, @ByRef IntBuffer nrorth_c, @ByRef IntBuffer nitref_c, @ByRef IntBuffer nrstrt_c,
                       @ByRef FloatBuffer tsaupd_c, @ByRef FloatBuffer tsaup2_c, @ByRef FloatBuffer tsaitr_c, @ByRef FloatBuffer tseigt_c, @ByRef FloatBuffer tsgets_c, @ByRef FloatBuffer tsapps_c, @ByRef FloatBuffer tsconv_c,
                       @ByRef FloatBuffer tnaupd_c, @ByRef FloatBuffer tnaup2_c, @ByRef FloatBuffer tnaitr_c, @ByRef FloatBuffer tneigh_c, @ByRef FloatBuffer tngets_c, @ByRef FloatBuffer tnapps_c, @ByRef FloatBuffer tnconv_c,
                       @ByRef FloatBuffer tcaupd_c, @ByRef FloatBuffer tcaup2_c, @ByRef FloatBuffer tcaitr_c, @ByRef FloatBuffer tceigh_c, @ByRef FloatBuffer tcgets_c, @ByRef FloatBuffer tcapps_c, @ByRef FloatBuffer tcconv_c,
                       @ByRef FloatBuffer tmvopx_c, @ByRef FloatBuffer tmvbx_c, @ByRef FloatBuffer tgetv0_c, @ByRef FloatBuffer titref_c, @ByRef FloatBuffer trvec_c);
public static native void stat_c(@ByRef int[] nopx_c, @ByRef int[] nbx_c, @ByRef int[] nrorth_c, @ByRef int[] nitref_c, @ByRef int[] nrstrt_c,
                       @ByRef float[] tsaupd_c, @ByRef float[] tsaup2_c, @ByRef float[] tsaitr_c, @ByRef float[] tseigt_c, @ByRef float[] tsgets_c, @ByRef float[] tsapps_c, @ByRef float[] tsconv_c,
                       @ByRef float[] tnaupd_c, @ByRef float[] tnaup2_c, @ByRef float[] tnaitr_c, @ByRef float[] tneigh_c, @ByRef float[] tngets_c, @ByRef float[] tnapps_c, @ByRef float[] tnconv_c,
                       @ByRef float[] tcaupd_c, @ByRef float[] tcaup2_c, @ByRef float[] tcaitr_c, @ByRef float[] tceigh_c, @ByRef float[] tcgets_c, @ByRef float[] tcapps_c, @ByRef float[] tcconv_c,
                       @ByRef float[] tmvopx_c, @ByRef float[] tmvbx_c, @ByRef float[] tgetv0_c, @ByRef float[] titref_c, @ByRef float[] trvec_c);

// #endif


}
