// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;


/**
 * \struct _NV_ENC_INPUT_RESOURCE_D3D12
 * NV_ENC_PIC_PARAMS::inputBuffer and NV_ENC_PIC_PARAMS::alphaBuffer must be a pointer to a struct of this type,
 * when D3D12 interface is used
 */
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_INPUT_RESOURCE_D3D12 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_INPUT_RESOURCE_D3D12() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_INPUT_RESOURCE_D3D12(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_INPUT_RESOURCE_D3D12(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_INPUT_RESOURCE_D3D12 position(long position) {
        return (NV_ENC_INPUT_RESOURCE_D3D12)super.position(position);
    }
    @Override public NV_ENC_INPUT_RESOURCE_D3D12 getPointer(long i) {
        return new NV_ENC_INPUT_RESOURCE_D3D12((Pointer)this).offsetAddress(i);
    }

    /** [in]: Struct version. Must be set to ::NV_ENC_INPUT_RESOURCE_D3D12_VER. */
    public native @Cast("uint32_t") int version(); public native NV_ENC_INPUT_RESOURCE_D3D12 version(int setter);
    /** [in]: Reserved and must be set to 0. */
    public native @Cast("uint32_t") int reserved(); public native NV_ENC_INPUT_RESOURCE_D3D12 reserved(int setter);
    /** [in]: Specifies the input surface pointer. Client must use a pointer obtained from NvEncMapInputResource() in NV_ENC_MAP_INPUT_RESOURCE::mappedResource
                                                                       when mapping the input surface. */
    public native NV_ENC_INPUT_PTR pInputBuffer(); public native NV_ENC_INPUT_RESOURCE_D3D12 pInputBuffer(NV_ENC_INPUT_PTR setter);
    /** [in]: Specifies the fence and corresponding fence values to do GPU wait and signal. */
    public native @ByRef NV_ENC_FENCE_POINT_D3D12 inputFencePoint(); public native NV_ENC_INPUT_RESOURCE_D3D12 inputFencePoint(NV_ENC_FENCE_POINT_D3D12 setter);
    /** [in]: Reserved and must be set to 0. */
    public native @Cast("uint32_t") int reserved1(int i); public native NV_ENC_INPUT_RESOURCE_D3D12 reserved1(int i, int setter);
    @MemberGetter public native @Cast("uint32_t*") IntPointer reserved1();
    /** [in]: Reserved and must be set to NULL. */
    public native Pointer reserved2(int i); public native NV_ENC_INPUT_RESOURCE_D3D12 reserved2(int i, Pointer setter);
    @MemberGetter public native @Cast("void**") PointerPointer reserved2();
}
