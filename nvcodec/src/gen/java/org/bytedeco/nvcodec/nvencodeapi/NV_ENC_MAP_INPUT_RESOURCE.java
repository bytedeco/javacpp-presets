// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;



/**
 * \struct _NV_ENC_MAP_INPUT_RESOURCE
 * Map an input resource to a Nvidia Encoder Input Buffer
 */
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_MAP_INPUT_RESOURCE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_MAP_INPUT_RESOURCE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_MAP_INPUT_RESOURCE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_MAP_INPUT_RESOURCE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_MAP_INPUT_RESOURCE position(long position) {
        return (NV_ENC_MAP_INPUT_RESOURCE)super.position(position);
    }
    @Override public NV_ENC_MAP_INPUT_RESOURCE getPointer(long i) {
        return new NV_ENC_MAP_INPUT_RESOURCE((Pointer)this).position(position + i);
    }

    /** [in]:  Struct version. Must be set to ::NV_ENC_MAP_INPUT_RESOURCE_VER. */
    public native @Cast("uint32_t") int version(); public native NV_ENC_MAP_INPUT_RESOURCE version(int setter);
    /** [in]:  Deprecated. Do not use. */
    public native @Cast("uint32_t") int subResourceIndex(); public native NV_ENC_MAP_INPUT_RESOURCE subResourceIndex(int setter);
    /** [in]:  Deprecated. Do not use. */
    public native Pointer inputResource(); public native NV_ENC_MAP_INPUT_RESOURCE inputResource(Pointer setter);
    /** [in]:  The Registered resource handle obtained by calling NvEncRegisterInputResource. */
    public native NV_ENC_REGISTERED_PTR registeredResource(); public native NV_ENC_MAP_INPUT_RESOURCE registeredResource(NV_ENC_REGISTERED_PTR setter);
    /** [out]: Mapped pointer corresponding to the registeredResource. This pointer must be used in NV_ENC_PIC_PARAMS::inputBuffer parameter in ::NvEncEncodePicture() API. */
    public native NV_ENC_INPUT_PTR mappedResource(); public native NV_ENC_MAP_INPUT_RESOURCE mappedResource(NV_ENC_INPUT_PTR setter);
    /** [out]: Buffer format of the outputResource. This buffer format must be used in NV_ENC_PIC_PARAMS::bufferFmt if client using the above mapped resource pointer. */
    public native @Cast("NV_ENC_BUFFER_FORMAT") int mappedBufferFmt(); public native NV_ENC_MAP_INPUT_RESOURCE mappedBufferFmt(int setter);
    /** [in]:  Reserved and must be set to 0. */
    public native @Cast("uint32_t") int reserved1(int i); public native NV_ENC_MAP_INPUT_RESOURCE reserved1(int i, int setter);
    @MemberGetter public native @Cast("uint32_t*") IntPointer reserved1();
    /** [in]:  Reserved and must be set to NULL */
    public native Pointer reserved2(int i); public native NV_ENC_MAP_INPUT_RESOURCE reserved2(int i, Pointer setter);
    @MemberGetter public native @Cast("void**") PointerPointer reserved2();
}
