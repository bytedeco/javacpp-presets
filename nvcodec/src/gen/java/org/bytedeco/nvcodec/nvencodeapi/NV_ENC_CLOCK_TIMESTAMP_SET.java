// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;


/**
* Clock Timestamp set parameters
* For H264, this structure is used to populate Picture Timing SEI when NV_ENC_CONFIG_H264::enableTimeCode is set to 1.
* For HEVC, this structure is used to populate Time Code SEI when NV_ENC_CONFIG_HEVC::enableTimeCodeSEI is set to 1.
* For more details, refer to Annex D of ITU-T Specification.
*/

@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_CLOCK_TIMESTAMP_SET extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_CLOCK_TIMESTAMP_SET() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_CLOCK_TIMESTAMP_SET(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_CLOCK_TIMESTAMP_SET(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_CLOCK_TIMESTAMP_SET position(long position) {
        return (NV_ENC_CLOCK_TIMESTAMP_SET)super.position(position);
    }
    @Override public NV_ENC_CLOCK_TIMESTAMP_SET getPointer(long i) {
        return new NV_ENC_CLOCK_TIMESTAMP_SET((Pointer)this).offsetAddress(i);
    }

    /** [in] Specifies the 'counting_type' */
    public native @Cast("uint32_t") @NoOffset int countingType(); public native NV_ENC_CLOCK_TIMESTAMP_SET countingType(int setter);
    /** [in] Specifies the 'discontinuity_flag' */
    public native @Cast("uint32_t") @NoOffset int discontinuityFlag(); public native NV_ENC_CLOCK_TIMESTAMP_SET discontinuityFlag(int setter);
    /** [in] Specifies the 'cnt_dropped_flag' */
    public native @Cast("uint32_t") @NoOffset int cntDroppedFrames(); public native NV_ENC_CLOCK_TIMESTAMP_SET cntDroppedFrames(int setter);
    /** [in] Specifies the value of 'n_frames' */
    public native @Cast("uint32_t") @NoOffset int nFrames(); public native NV_ENC_CLOCK_TIMESTAMP_SET nFrames(int setter);
    /** [in] Specifies the 'seconds_value' */
    public native @Cast("uint32_t") @NoOffset int secondsValue(); public native NV_ENC_CLOCK_TIMESTAMP_SET secondsValue(int setter);
    /** [in] Specifies the 'minutes_value' */
    public native @Cast("uint32_t") @NoOffset int minutesValue(); public native NV_ENC_CLOCK_TIMESTAMP_SET minutesValue(int setter);
    /** [in] Specifies the 'hours_value' */
    public native @Cast("uint32_t") @NoOffset int hoursValue(); public native NV_ENC_CLOCK_TIMESTAMP_SET hoursValue(int setter);
    /** [in] Reserved and must be set to 0 */
    public native @Cast("uint32_t") @NoOffset int reserved2(); public native NV_ENC_CLOCK_TIMESTAMP_SET reserved2(int setter);
    /** [in] Specifies the 'time_offset_value' */
    public native @Cast("uint32_t") int timeOffset(); public native NV_ENC_CLOCK_TIMESTAMP_SET timeOffset(int setter);
}
