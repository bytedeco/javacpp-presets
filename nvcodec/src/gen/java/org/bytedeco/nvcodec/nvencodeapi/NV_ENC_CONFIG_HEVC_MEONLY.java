// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;



/**
 * \struct _NV_ENC_CONFIG_HEVC_MEONLY
 * HEVC encoder configuration parameters for ME only Mode
 * 
 */
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_CONFIG_HEVC_MEONLY extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_CONFIG_HEVC_MEONLY() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_CONFIG_HEVC_MEONLY(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_CONFIG_HEVC_MEONLY(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_CONFIG_HEVC_MEONLY position(long position) {
        return (NV_ENC_CONFIG_HEVC_MEONLY)super.position(position);
    }
    @Override public NV_ENC_CONFIG_HEVC_MEONLY getPointer(long i) {
        return new NV_ENC_CONFIG_HEVC_MEONLY((Pointer)this).position(position + i);
    }

    /** [in]: Reserved and must be set to 0 */
    public native @Cast("uint32_t") int reserved(int i); public native NV_ENC_CONFIG_HEVC_MEONLY reserved(int i, int setter);
    @MemberGetter public native @Cast("uint32_t*") IntPointer reserved();
    /** [in]: Reserved and must be set to NULL */
    public native Pointer reserved1(int i); public native NV_ENC_CONFIG_HEVC_MEONLY reserved1(int i, Pointer setter);
    @MemberGetter public native @Cast("void**") PointerPointer reserved1();
}
