// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;



/**
 * \struct _NV_ENC_RECONFIGURE_PARAMS
 * Encode Session Reconfigured parameters.
 */
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_RECONFIGURE_PARAMS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_RECONFIGURE_PARAMS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_RECONFIGURE_PARAMS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_RECONFIGURE_PARAMS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_RECONFIGURE_PARAMS position(long position) {
        return (NV_ENC_RECONFIGURE_PARAMS)super.position(position);
    }
    @Override public NV_ENC_RECONFIGURE_PARAMS getPointer(long i) {
        return new NV_ENC_RECONFIGURE_PARAMS((Pointer)this).position(position + i);
    }

    /** [in]: Struct version. Must be set to ::NV_ENC_RECONFIGURE_PARAMS_VER. */
    public native @Cast("uint32_t") int version(); public native NV_ENC_RECONFIGURE_PARAMS version(int setter);
    /** [in]: Encoder session re-initialization parameters.
                                                                                               If reInitEncodeParams.encodeConfig is NULL and
                                                                                               reInitEncodeParams.presetGUID is the same as the preset
                                                                                               GUID specified on the call to NvEncInitializeEncoder(),
                                                                                               EncodeAPI will continue to use the existing encode
                                                                                               configuration.
                                                                                               If reInitEncodeParams.encodeConfig is NULL and
                                                                                               reInitEncodeParams.presetGUID is different from the preset
                                                                                               GUID specified on the call to NvEncInitializeEncoder(),
                                                                                               EncodeAPI will try to use the default configuration for
                                                                                               the preset specified by reInitEncodeParams.presetGUID.
                                                                                               In this case, reconfiguration may fail if the new
                                                                                               configuration is incompatible with the existing
                                                                                               configuration (e.g. the new configuration results in
                                                                                               a change in the GOP structure). */
    public native @ByRef NV_ENC_INITIALIZE_PARAMS reInitEncodeParams(); public native NV_ENC_RECONFIGURE_PARAMS reInitEncodeParams(NV_ENC_INITIALIZE_PARAMS setter);
    /** [in]: This resets the rate control states and other internal encoder states. This should be used only with an IDR frame.
                                                                                               If NV_ENC_INITIALIZE_PARAMS::enablePTD is set to 1, encoder will force the frame type to IDR */
    public native @Cast("uint32_t") @NoOffset int resetEncoder(); public native NV_ENC_RECONFIGURE_PARAMS resetEncoder(int setter);
    /** [in]: Encode the current picture as an IDR picture. This flag is only valid when Picture type decision is taken by the Encoder
                                                                                               [_NV_ENC_INITIALIZE_PARAMS::enablePTD == 1]. */
    public native @Cast("uint32_t") @NoOffset int forceIDR(); public native NV_ENC_RECONFIGURE_PARAMS forceIDR(int setter);
    public native @Cast("uint32_t") @NoOffset int reserved(); public native NV_ENC_RECONFIGURE_PARAMS reserved(int setter);

}
