// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;


/**
* \struct _NV_ENC_CONFIG_AV1
* AV1 encoder configuration parameters to be set during initialization.
*/
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_CONFIG_AV1 extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_CONFIG_AV1() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_CONFIG_AV1(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_CONFIG_AV1(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_CONFIG_AV1 position(long position) {
        return (NV_ENC_CONFIG_AV1)super.position(position);
    }
    @Override public NV_ENC_CONFIG_AV1 getPointer(long i) {
        return new NV_ENC_CONFIG_AV1((Pointer)this).offsetAddress(i);
    }

    /** [in]: Specifies the level of the encoded bitstream.*/
    public native @Cast("uint32_t") int level(); public native NV_ENC_CONFIG_AV1 level(int setter);
    /** [in]: Specifies the level tier of the encoded bitstream.*/
    public native @Cast("uint32_t") int tier(); public native NV_ENC_CONFIG_AV1 tier(int setter);
    /** [in]: Specifies the minimum size of luma coding block partition.*/
    public native @Cast("NV_ENC_AV1_PART_SIZE") int minPartSize(); public native NV_ENC_CONFIG_AV1 minPartSize(int setter);
    /** [in]: Specifies the maximum size of luma coding block partition.*/
    public native @Cast("NV_ENC_AV1_PART_SIZE") int maxPartSize(); public native NV_ENC_CONFIG_AV1 maxPartSize(int setter);
    /** [in]: Set 1 to use Annex B format for bitstream output.*/
    public native @Cast("uint32_t") @NoOffset int outputAnnexBFormat(); public native NV_ENC_CONFIG_AV1 outputAnnexBFormat(int setter);
    /** [in]: Set 1 to write Timing Info into sequence/frame headers */
    public native @Cast("uint32_t") @NoOffset int enableTimingInfo(); public native NV_ENC_CONFIG_AV1 enableTimingInfo(int setter);
    /** [in]: Set 1 to write Decoder Model Info into sequence/frame headers */
    public native @Cast("uint32_t") @NoOffset int enableDecoderModelInfo(); public native NV_ENC_CONFIG_AV1 enableDecoderModelInfo(int setter);
    /** [in]: Set 1 to write Frame id numbers in  bitstream */
    public native @Cast("uint32_t") @NoOffset int enableFrameIdNumbers(); public native NV_ENC_CONFIG_AV1 enableFrameIdNumbers(int setter);
    /** [in]: Set 1 to disable Sequence Header signaling in the bitstream. */
    public native @Cast("uint32_t") @NoOffset int disableSeqHdr(); public native NV_ENC_CONFIG_AV1 disableSeqHdr(int setter);
    /** [in]: Set 1 to output Sequence Header for every Key frame.*/
    public native @Cast("uint32_t") @NoOffset int repeatSeqHdr(); public native NV_ENC_CONFIG_AV1 repeatSeqHdr(int setter);
    /** [in]: Set 1 to enable gradual decoder refresh or intra refresh. If the GOP structure uses B frames this will be ignored */
    public native @Cast("uint32_t") @NoOffset int enableIntraRefresh(); public native NV_ENC_CONFIG_AV1 enableIntraRefresh(int setter);
    /** [in]: Specifies the chroma format. Should be set to 1 for yuv420 input (yuv444 input currently not supported).*/
    public native @Cast("uint32_t") @NoOffset int chromaFormatIDC(); public native NV_ENC_CONFIG_AV1 chromaFormatIDC(int setter);
    /** [in]: Set 1 to enable bitstream padding. */
    public native @Cast("uint32_t") @NoOffset int enableBitstreamPadding(); public native NV_ENC_CONFIG_AV1 enableBitstreamPadding(int setter);
    /** [in]: Set 1 to enable custom tile configuration: numTileColumns and numTileRows must have non zero values and tileWidths and tileHeights must point to a valid address  */
    public native @Cast("uint32_t") @NoOffset int enableCustomTileConfig(); public native NV_ENC_CONFIG_AV1 enableCustomTileConfig(int setter);
    /** [in]: Set 1 to enable custom film grain parameters: filmGrainParams must point to a valid address  */
    public native @Cast("uint32_t") @NoOffset int enableFilmGrainParams(); public native NV_ENC_CONFIG_AV1 enableFilmGrainParams(int setter);
    /** [in]: Specifies pixel bit depth minus 8 of video input. Should be set to 0 for 8 bit input, 2 for 10 bit input.*/
    public native @Cast("uint32_t") @NoOffset int inputPixelBitDepthMinus8(); public native NV_ENC_CONFIG_AV1 inputPixelBitDepthMinus8(int setter);
    /** [in]: Specifies pixel bit depth minus 8 of encoded video. Should be set to 0 for 8 bit, 2 for 10 bit.
                                                                                   HW will do the bitdepth conversion internally from inputPixelBitDepthMinus8 -> pixelBitDepthMinus8 if bit dpeths differ
                                                                                   Support for 8 bit input to 10 bit encode conversion only */
    public native @Cast("uint32_t") @NoOffset int pixelBitDepthMinus8(); public native NV_ENC_CONFIG_AV1 pixelBitDepthMinus8(int setter);
    /** [in]: Reserved bitfields.*/
    public native @Cast("uint32_t") @NoOffset int reserved(); public native NV_ENC_CONFIG_AV1 reserved(int setter);
    /** [in]: Specifies the IDR/Key frame interval. If not set, this is made equal to gopLength in NV_ENC_CONFIG.Low latency application client can set IDR interval to NVENC_INFINITE_GOPLENGTH so that IDR frames are not inserted automatically. */
    public native @Cast("uint32_t") int idrPeriod(); public native NV_ENC_CONFIG_AV1 idrPeriod(int setter);
    /** [in]: Specifies the interval between successive intra refresh if enableIntrarefresh is set. Requires enableIntraRefresh to be set.
                                                                                   Will be disabled if NV_ENC_CONFIG::gopLength is not set to NVENC_INFINITE_GOPLENGTH. */
    public native @Cast("uint32_t") int intraRefreshPeriod(); public native NV_ENC_CONFIG_AV1 intraRefreshPeriod(int setter);
    /** [in]: Specifies the length of intra refresh in number of frames for periodic intra refresh. This value should be smaller than intraRefreshPeriod */
    public native @Cast("uint32_t") int intraRefreshCnt(); public native NV_ENC_CONFIG_AV1 intraRefreshCnt(int setter);
    /** [in]: Specifies the maximum number of references frames in the DPB.*/
    public native @Cast("uint32_t") int maxNumRefFramesInDPB(); public native NV_ENC_CONFIG_AV1 maxNumRefFramesInDPB(int setter);
    /** [in]: This parameter in conjunction with the flag enableCustomTileConfig and the array tileWidths[] specifies the way in which the picture is divided into tile columns.
                                                                                   When enableCustomTileConfig == 0, the picture will be uniformly divided into numTileColumns tile columns. If numTileColumns is not a power of 2,
                                                                                   it will be rounded down to the next power of 2 value. If numTileColumns == 0, the picture will be coded with the smallest number of vertical tiles as allowed by standard.
                                                                                   When enableCustomTileConfig == 1, numTileColumns must be > 0 and <= NV_MAX_TILE_COLS_AV1 and tileWidths must point to a valid array of numTileColumns entries.
                                                                                   Entry i specifies the width in 64x64 CTU unit of tile colum i. The sum of all the entries should be equal to the picture width in 64x64 CTU units. */
    public native @Cast("uint32_t") int numTileColumns(); public native NV_ENC_CONFIG_AV1 numTileColumns(int setter);
    /** [in]: This parameter in conjunction with the flag enableCustomTileConfig and the array tileHeights[] specifies the way in which the picture is divided into tiles rows
                                                                                   When enableCustomTileConfig == 0, the picture will be uniformly divided into numTileRows tile rows. If numTileRows is not a power of 2,
                                                                                   it will be rounded down to the next power of 2 value. If numTileRows == 0, the picture will be coded with the smallest number of horizontal tiles as allowed by standard.
                                                                                   When enableCustomTileConfig == 1, numTileRows must be > 0 and <= NV_MAX_TILE_ROWS_AV1 and tileHeights must point to a valid array of numTileRows entries.
                                                                                   Entry i specifies the height in 64x64 CTU unit of tile row i. The sum of all the entries should be equal to the picture hieght in 64x64 CTU units. */
    public native @Cast("uint32_t") int numTileRows(); public native NV_ENC_CONFIG_AV1 numTileRows(int setter);
    /** [in]: If enableCustomTileConfig == 1, tileWidths[i] specifies the width of tile column i in 64x64 CTU unit, with 0 <= i <= numTileColumns -1. */
    public native @Cast("uint32_t*") IntPointer tileWidths(); public native NV_ENC_CONFIG_AV1 tileWidths(IntPointer setter);
    /** [in]: If enableCustomTileConfig == 1, tileHeights[i] specifies the height of tile row i in 64x64 CTU unit, with 0 <= i <= numTileRows -1. */
    public native @Cast("uint32_t*") IntPointer tileHeights(); public native NV_ENC_CONFIG_AV1 tileHeights(IntPointer setter);
    /** [in]: Specifies the max temporal layer used for hierarchical coding. */
    public native @Cast("uint32_t") int maxTemporalLayersMinus1(); public native NV_ENC_CONFIG_AV1 maxTemporalLayersMinus1(int setter);
    /** [in]: as defined in section of ISO/IEC 23091-4/ITU-T H.273 */
    public native @Cast("NV_ENC_VUI_COLOR_PRIMARIES") int colorPrimaries(); public native NV_ENC_CONFIG_AV1 colorPrimaries(int setter);
    /** [in]: as defined in section of ISO/IEC 23091-4/ITU-T H.273 */
    public native @Cast("NV_ENC_VUI_TRANSFER_CHARACTERISTIC") int transferCharacteristics(); public native NV_ENC_CONFIG_AV1 transferCharacteristics(int setter);
    /** [in]: as defined in section of ISO/IEC 23091-4/ITU-T H.273 */
    public native @Cast("NV_ENC_VUI_MATRIX_COEFFS") int matrixCoefficients(); public native NV_ENC_CONFIG_AV1 matrixCoefficients(int setter);
    /** [in]: 0: studio swing representation - 1: full swing representation */
    public native @Cast("uint32_t") int colorRange(); public native NV_ENC_CONFIG_AV1 colorRange(int setter);
    /** [in]: 0: unknown
                                                                                   1: Horizontally collocated with luma (0,0) sample, between two vertical samples
                                                                                   2: Co-located with luma (0,0) sample */
    public native @Cast("uint32_t") int chromaSamplePosition(); public native NV_ENC_CONFIG_AV1 chromaSamplePosition(int setter);
    /** [in]: Specifies the B-Frame as reference mode. Check support for useBFramesAsRef mode using  ::NV_ENC_CAPS_SUPPORT_BFRAME_REF_MODE caps.*/
    public native @Cast("NV_ENC_BFRAME_REF_MODE") int useBFramesAsRef(); public native NV_ENC_CONFIG_AV1 useBFramesAsRef(int setter);
    /** [in]: If enableFilmGrainParams == 1, filmGrainParams must point to a valid NV_ENC_FILM_GRAIN_PARAMS_AV1 structure */
    public native NV_ENC_FILM_GRAIN_PARAMS_AV1 filmGrainParams(); public native NV_ENC_CONFIG_AV1 filmGrainParams(NV_ENC_FILM_GRAIN_PARAMS_AV1 setter);
    /** [in]: Specifies max number of forward reference frame used for prediction of a frame. It must be in range 1-4 (Last, Last2, last3 and Golden). It's a suggestive value not necessarily be honored always. */
    public native @Cast("NV_ENC_NUM_REF_FRAMES") int numFwdRefs(); public native NV_ENC_CONFIG_AV1 numFwdRefs(int setter);
    /** [in]: Specifies max number of L1 list reference frame used for prediction of a frame. It must be in range 1-3 (Backward, Altref2, Altref). It's a suggestive value not necessarily be honored always. */
    public native @Cast("NV_ENC_NUM_REF_FRAMES") int numBwdRefs(); public native NV_ENC_CONFIG_AV1 numBwdRefs(int setter);
    /** [in]: Reserved and must be set to 0.*/
    public native @Cast("uint32_t") int reserved1(int i); public native NV_ENC_CONFIG_AV1 reserved1(int i, int setter);
    @MemberGetter public native @Cast("uint32_t*") IntPointer reserved1();
    /** [in]: Reserved and must be set to NULL */
    public native Pointer reserved2(int i); public native NV_ENC_CONFIG_AV1 reserved2(int i, Pointer setter);
    @MemberGetter public native @Cast("void**") PointerPointer reserved2();
}
