// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;


/**
 * Lookahead picture parameters
 */
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_LOOKAHEAD_PIC_PARAMS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_LOOKAHEAD_PIC_PARAMS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_LOOKAHEAD_PIC_PARAMS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_LOOKAHEAD_PIC_PARAMS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_LOOKAHEAD_PIC_PARAMS position(long position) {
        return (NV_ENC_LOOKAHEAD_PIC_PARAMS)super.position(position);
    }
    @Override public NV_ENC_LOOKAHEAD_PIC_PARAMS getPointer(long i) {
        return new NV_ENC_LOOKAHEAD_PIC_PARAMS((Pointer)this).offsetAddress(i);
    }

    /** [in]: Struct version. */
    public native @Cast("uint32_t") int version(); public native NV_ENC_LOOKAHEAD_PIC_PARAMS version(int setter);
    /** [in]: Specifies the input buffer pointer. Client must use a pointer obtained from ::NvEncCreateInputBuffer() or ::NvEncMapInputResource() APIs.*/
    public native NV_ENC_INPUT_PTR inputBuffer(); public native NV_ENC_LOOKAHEAD_PIC_PARAMS inputBuffer(NV_ENC_INPUT_PTR setter);
    /** [in]: Specifies input picture type. Client required to be set explicitly by the client if the client has not set NV_ENC_INITALIZE_PARAMS::enablePTD to 1 while calling NvInitializeEncoder. */
    public native @Cast("NV_ENC_PIC_TYPE") int pictureType(); public native NV_ENC_LOOKAHEAD_PIC_PARAMS pictureType(int setter);
    /** [in]: Reserved and must be set to 0 */
    public native @Cast("uint32_t") int reserved(int i); public native NV_ENC_LOOKAHEAD_PIC_PARAMS reserved(int i, int setter);
    @MemberGetter public native @Cast("uint32_t*") IntPointer reserved();
    /** [in]: Reserved and must be set to NULL */
    public native Pointer reserved1(int i); public native NV_ENC_LOOKAHEAD_PIC_PARAMS reserved1(int i, Pointer setter);
    @MemberGetter public native @Cast("void**") PointerPointer reserved1();
}
