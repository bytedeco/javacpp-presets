// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;



/**
 * \struct _NV_ENC_LOCK_INPUT_BUFFER
 * Uncompressed Input Buffer lock parameters.
 */
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_LOCK_INPUT_BUFFER extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_LOCK_INPUT_BUFFER() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_LOCK_INPUT_BUFFER(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_LOCK_INPUT_BUFFER(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_LOCK_INPUT_BUFFER position(long position) {
        return (NV_ENC_LOCK_INPUT_BUFFER)super.position(position);
    }
    @Override public NV_ENC_LOCK_INPUT_BUFFER getPointer(long i) {
        return new NV_ENC_LOCK_INPUT_BUFFER((Pointer)this).position(position + i);
    }

    /** [in]:  Struct version. Must be set to ::NV_ENC_LOCK_INPUT_BUFFER_VER. */
    public native @Cast("uint32_t") int version(); public native NV_ENC_LOCK_INPUT_BUFFER version(int setter);
    /** [in]:  Set to 1 to make ::NvEncLockInputBuffer() a unblocking call. If the encoding is not completed, driver will return ::NV_ENC_ERR_ENCODER_BUSY error code. */
    public native @Cast("uint32_t") @NoOffset int doNotWait(); public native NV_ENC_LOCK_INPUT_BUFFER doNotWait(int setter);
    /** [in]:  Reserved bitfields and must be set to 0 */
    public native @Cast("uint32_t") @NoOffset int reservedBitFields(); public native NV_ENC_LOCK_INPUT_BUFFER reservedBitFields(int setter);
    /** [in]:  Pointer to the input buffer to be locked, client should pass the pointer obtained from ::NvEncCreateInputBuffer() or ::NvEncMapInputResource API. */
    public native NV_ENC_INPUT_PTR inputBuffer(); public native NV_ENC_LOCK_INPUT_BUFFER inputBuffer(NV_ENC_INPUT_PTR setter);
    /** [out]: Pointed to the locked input buffer data. Client can only access input buffer using the \p bufferDataPtr. */
    public native Pointer bufferDataPtr(); public native NV_ENC_LOCK_INPUT_BUFFER bufferDataPtr(Pointer setter);
    /** [out]: Pitch of the locked input buffer. */
    public native @Cast("uint32_t") int pitch(); public native NV_ENC_LOCK_INPUT_BUFFER pitch(int setter);
    /** [in]:  Reserved and must be set to 0  */
    public native @Cast("uint32_t") int reserved1(int i); public native NV_ENC_LOCK_INPUT_BUFFER reserved1(int i, int setter);
    @MemberGetter public native @Cast("uint32_t*") IntPointer reserved1();
    /** [in]:  Reserved and must be set to NULL  */
    public native Pointer reserved2(int i); public native NV_ENC_LOCK_INPUT_BUFFER reserved2(int i, Pointer setter);
    @MemberGetter public native @Cast("void**") PointerPointer reserved2();
}
