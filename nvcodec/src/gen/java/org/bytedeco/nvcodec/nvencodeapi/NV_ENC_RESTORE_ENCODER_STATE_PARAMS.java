// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;



/**
 * Restore encoder state parameters
 */
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NV_ENC_RESTORE_ENCODER_STATE_PARAMS extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NV_ENC_RESTORE_ENCODER_STATE_PARAMS() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NV_ENC_RESTORE_ENCODER_STATE_PARAMS(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NV_ENC_RESTORE_ENCODER_STATE_PARAMS(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NV_ENC_RESTORE_ENCODER_STATE_PARAMS position(long position) {
        return (NV_ENC_RESTORE_ENCODER_STATE_PARAMS)super.position(position);
    }
    @Override public NV_ENC_RESTORE_ENCODER_STATE_PARAMS getPointer(long i) {
        return new NV_ENC_RESTORE_ENCODER_STATE_PARAMS((Pointer)this).offsetAddress(i);
    }

    /** [in]: Struct version. */
    public native @Cast("uint32_t") int version(); public native NV_ENC_RESTORE_ENCODER_STATE_PARAMS version(int setter);
    /** [in]: State buffer index to which the encoder state will be restored */
    public native @Cast("uint32_t") int bufferIdx(); public native NV_ENC_RESTORE_ENCODER_STATE_PARAMS bufferIdx(int setter);
    /** [in]: State type to restore */
    public native @Cast("NV_ENC_STATE_RESTORE_TYPE") int state(); public native NV_ENC_RESTORE_ENCODER_STATE_PARAMS state(int setter);
    /** [in]: Specifies the output buffer pointer, for AV1 encode only. 
                                                                      Application must call NvEncRestoreEncoderState() API with _NV_ENC_RESTORE_ENCODER_STATE_PARAMS::outputBitstream and 
                                                                      _NV_ENC_RESTORE_ENCODER_STATE_PARAMS::completionEvent as input when an earlier call to this API returned "NV_ENC_ERR_NEED_MORE_OUTPUT", for AV1 encode. */
    public native NV_ENC_OUTPUT_PTR outputBitstream(); public native NV_ENC_RESTORE_ENCODER_STATE_PARAMS outputBitstream(NV_ENC_OUTPUT_PTR setter);
    /** [in]: Specifies the completion event when asynchronous mode of encoding is enabled. Used for AV1 encode only. */
    public native Pointer completionEvent(); public native NV_ENC_RESTORE_ENCODER_STATE_PARAMS completionEvent(Pointer setter);
    /** [in]: Reserved and must be set to 0 */
    public native @Cast("uint32_t") int reserved1(int i); public native NV_ENC_RESTORE_ENCODER_STATE_PARAMS reserved1(int i, int setter);
    @MemberGetter public native @Cast("uint32_t*") IntPointer reserved1();
    /** [in]: Reserved and must be set to NULL */
    public native Pointer reserved2(int i); public native NV_ENC_RESTORE_ENCODER_STATE_PARAMS reserved2(int i, Pointer setter);
    @MemberGetter public native @Cast("void**") PointerPointer reserved2();
}
