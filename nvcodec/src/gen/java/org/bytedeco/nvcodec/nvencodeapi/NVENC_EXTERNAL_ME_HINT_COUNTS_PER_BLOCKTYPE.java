// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvencodeapi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.nvcodec.nvcuvid.*;
import static org.bytedeco.nvcodec.global.nvcuvid.*;

import static org.bytedeco.nvcodec.global.nvencodeapi.*;


/**
 * \struct _NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE
 * External motion vector hint counts per block type.
 * H264 supports multiple hint while HEVC supports one hint for each valid candidate.
 */
@Properties(inherit = org.bytedeco.nvcodec.presets.nvencodeapi.class)
public class NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE position(long position) {
        return (NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE)super.position(position);
    }
    @Override public NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE getPointer(long i) {
        return new NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE((Pointer)this).position(position + i);
    }

    /** [in]: Supported for H264, HEVC. It Specifies the number of candidates per 16x16 block. */
    public native @Cast("uint32_t") @NoOffset int numCandsPerBlk16x16(); public native NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE numCandsPerBlk16x16(int setter);
    /** [in]: Supported for H264 only. Specifies the number of candidates per 16x8 block. */
    public native @Cast("uint32_t") @NoOffset int numCandsPerBlk16x8(); public native NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE numCandsPerBlk16x8(int setter);
    /** [in]: Supported for H264 only. Specifies the number of candidates per 8x16 block. */
    public native @Cast("uint32_t") @NoOffset int numCandsPerBlk8x16(); public native NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE numCandsPerBlk8x16(int setter);
    /** [in]: Supported for H264, HEVC. Specifies the number of candidates per 8x8 block. */
    public native @Cast("uint32_t") @NoOffset int numCandsPerBlk8x8(); public native NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE numCandsPerBlk8x8(int setter);
    /** [in]: Reserved for padding. */
    public native @Cast("uint32_t") @NoOffset int reserved(); public native NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE reserved(int setter);
    /** [in]: Reserved for future use. */
    public native @Cast("uint32_t") int reserved1(int i); public native NVENC_EXTERNAL_ME_HINT_COUNTS_PER_BLOCKTYPE reserved1(int i, int setter);
    @MemberGetter public native @Cast("uint32_t*") IntPointer reserved1();
}
