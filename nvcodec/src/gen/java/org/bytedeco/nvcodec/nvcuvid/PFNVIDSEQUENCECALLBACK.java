// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.nvcodec.nvcuvid;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.nvcodec.global.nvcuvid.*;


/***********************************************************************************************************************/
/** Parser callbacks
/** The parser will call these synchronously from within cuvidParseVideoData(), whenever there is sequence change or a picture
/** is ready to be decoded and/or displayed. First argument in functions is "void *pUserData" member of structure CUVIDSOURCEPARAMS
/** Return values from these callbacks are interpreted as below. If the callbacks return failure, it will be propagated by
/** cuvidParseVideoData() to the application.
/** Parser picks default operating point as 0 and outputAllLayers flag as 0 if PFNVIDOPPOINTCALLBACK is not set or return value is 
/** -1 or invalid operating point.
/** PFNVIDSEQUENCECALLBACK : 0: fail, 1: succeeded, > 1: override dpb size of parser (set by CUVIDPARSERPARAMS::ulMaxNumDecodeSurfaces
/** while creating parser)
/** PFNVIDDECODECALLBACK   : 0: fail, >=1: succeeded
/** PFNVIDDISPLAYCALLBACK  : 0: fail, >=1: succeeded
/** PFNVIDOPPOINTCALLBACK  : <0: fail, >=0: succeeded (bit 0-9: OperatingPoint, bit 10-10: outputAllLayers, bit 11-30: reserved)
/***********************************************************************************************************************/
@Convention("CUDAAPI") @Properties(inherit = org.bytedeco.nvcodec.presets.nvcuvid.class)
public class PFNVIDSEQUENCECALLBACK extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    PFNVIDSEQUENCECALLBACK(Pointer p) { super(p); }
    protected PFNVIDSEQUENCECALLBACK() { allocate(); }
    private native void allocate();
    public native int call(Pointer arg0, CUVIDEOFORMAT arg1);
}
