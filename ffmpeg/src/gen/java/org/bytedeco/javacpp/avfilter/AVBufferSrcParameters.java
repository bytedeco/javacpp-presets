// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp.avfilter;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.javacpp.avutil.*;
import static org.bytedeco.javacpp.avutil.avutil.*;
import org.bytedeco.javacpp.swresample.*;
import static org.bytedeco.javacpp.swresample.swresample.*;
import org.bytedeco.javacpp.avcodec.*;
import static org.bytedeco.javacpp.avcodec.avcodec.*;
import org.bytedeco.javacpp.avformat.*;
import static org.bytedeco.javacpp.avformat.avformat.*;
import org.bytedeco.javacpp.postproc.*;
import static org.bytedeco.javacpp.postproc.postproc.*;
import org.bytedeco.javacpp.swscale.*;
import static org.bytedeco.javacpp.swscale.swscale.*;

import static org.bytedeco.javacpp.avfilter.avfilter.*;


/**
 * This structure contains the parameters describing the frames that will be
 * passed to this filter.
 *
 * It should be allocated with av_buffersrc_parameters_alloc() and freed with
 * av_free(). All the allocated fields in it remain owned by the caller.
 */
@Properties(inherit = org.bytedeco.javacpp.avfilter.avfilter_presets.class)
public class AVBufferSrcParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public AVBufferSrcParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AVBufferSrcParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AVBufferSrcParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public AVBufferSrcParameters position(long position) {
        return (AVBufferSrcParameters)super.position(position);
    }

    /**
     * video: the pixel format, value corresponds to enum AVPixelFormat
     * audio: the sample format, value corresponds to enum AVSampleFormat
     */
    public native int format(); public native AVBufferSrcParameters format(int format);
    /**
     * The timebase to be used for the timestamps on the input frames.
     */
    public native @ByRef AVRational time_base(); public native AVBufferSrcParameters time_base(AVRational time_base);

    /**
     * Video only, the display dimensions of the input frames.
     */
    public native int width(); public native AVBufferSrcParameters width(int width);
    public native int height(); public native AVBufferSrcParameters height(int height);

    /**
     * Video only, the sample (pixel) aspect ratio.
     */
    public native @ByRef AVRational sample_aspect_ratio(); public native AVBufferSrcParameters sample_aspect_ratio(AVRational sample_aspect_ratio);

    /**
     * Video only, the frame rate of the input video. This field must only be
     * set to a non-zero value if input stream has a known constant framerate
     * and should be left at its initial value if the framerate is variable or
     * unknown.
     */
    public native @ByRef AVRational frame_rate(); public native AVBufferSrcParameters frame_rate(AVRational frame_rate);

    /**
     * Video with a hwaccel pixel format only. This should be a reference to an
     * AVHWFramesContext instance describing the input frames.
     */
    public native AVBufferRef hw_frames_ctx(); public native AVBufferSrcParameters hw_frames_ctx(AVBufferRef hw_frames_ctx);

    /**
     * Audio only, the audio sampling rate in samples per second.
     */
    public native int sample_rate(); public native AVBufferSrcParameters sample_rate(int sample_rate);

    /**
     * Audio only, the audio channel layout
     */
    public native @Cast("uint64_t") long channel_layout(); public native AVBufferSrcParameters channel_layout(long channel_layout);
}