// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.lz4;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.lz4.global.lz4.*;
   /* for compatibility with previous API version */

@Name("LZ4F_compressOptions_t") @Properties(inherit = org.bytedeco.lz4.presets.lz4.class)
public class LZ4FCompressOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public LZ4FCompressOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public LZ4FCompressOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LZ4FCompressOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public LZ4FCompressOptions position(long position) {
        return (LZ4FCompressOptions)super.position(position);
    }
    @Override public LZ4FCompressOptions getPointer(long i) {
        return new LZ4FCompressOptions((Pointer)this).offsetAddress(i);
    }

  public native @Cast("unsigned") int stableSrc(); public native LZ4FCompressOptions stableSrc(int setter);    /* 1 == src content will remain present on future calls to LZ4F_compress(); skip copying src content within tmp buffer */
  public native @Cast("unsigned") int reserved(int i); public native LZ4FCompressOptions reserved(int i, int setter);
  @MemberGetter public native @Cast("unsigned*") IntPointer reserved();
}
