// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.libdc1394;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.libdc1394.global.dc1394.*;


/**
 * A unique identifier for a functional camera unit
 *
 * Since a single camera can contain several functional units (think stereo cameras), the GUID is not enough to identify an IIDC camera.
 * The unit number must also be used, hence this struct. 
 */
@Properties(inherit = org.bytedeco.libdc1394.presets.dc1394.class)
public class dc1394camera_id_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public dc1394camera_id_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public dc1394camera_id_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dc1394camera_id_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public dc1394camera_id_t position(long position) {
        return (dc1394camera_id_t)super.position(position);
    }
    @Override public dc1394camera_id_t getPointer(long i) {
        return new dc1394camera_id_t((Pointer)this).position(position + i);
    }

    public native @Cast("uint16_t") short unit(); public native dc1394camera_id_t unit(short setter);
    public native @Cast("uint64_t") long guid(); public native dc1394camera_id_t guid(long setter);
}
