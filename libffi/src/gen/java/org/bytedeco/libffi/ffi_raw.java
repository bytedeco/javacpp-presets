// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.libffi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.libffi.global.ffi.*;

// #endif

@Properties(inherit = org.bytedeco.libffi.presets.ffi.class)
public class ffi_raw extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ffi_raw() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ffi_raw(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ffi_raw(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ffi_raw position(long position) {
        return (ffi_raw)super.position(position);
    }
    @Override public ffi_raw getPointer(long i) {
        return new ffi_raw((Pointer)this).offsetAddress(i);
    }

  public native @Cast("ffi_sarg") long sint(); public native ffi_raw sint(long setter);
  public native @Cast("ffi_arg") long uint(); public native ffi_raw uint(long setter);
  public native float flt(); public native ffi_raw flt(float setter);
  public native @Cast("char") byte data(int i); public native ffi_raw data(int i, byte setter);
  @MemberGetter public native @Cast("char*") BytePointer data();
  public native Pointer ptr(); public native ffi_raw ptr(Pointer setter);
}
