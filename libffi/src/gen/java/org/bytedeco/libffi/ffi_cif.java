// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.libffi;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.libffi.global.ffi.*;


@Properties(inherit = org.bytedeco.libffi.presets.ffi.class)
public class ffi_cif extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ffi_cif() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ffi_cif(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ffi_cif(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ffi_cif position(long position) {
        return (ffi_cif)super.position(position);
    }
    @Override public ffi_cif getPointer(long i) {
        return new ffi_cif((Pointer)this).offsetAddress(i);
    }

  public native @Cast("ffi_abi") int abi(); public native ffi_cif abi(int setter);
  public native @Cast("unsigned") int nargs(); public native ffi_cif nargs(int setter);
  public native ffi_type arg_types(int i); public native ffi_cif arg_types(int i, ffi_type setter);
  public native @Cast("ffi_type**") PointerPointer arg_types(); public native ffi_cif arg_types(PointerPointer setter);
  public native ffi_type rtype(); public native ffi_cif rtype(ffi_type setter);
  public native @Cast("unsigned") int bytes(); public native ffi_cif bytes(int setter);
  public native @Cast("unsigned") int flags(); public native ffi_cif flags(int setter);
// #ifdef FFI_EXTRA_CIF_FIELDS
// #endif
}
