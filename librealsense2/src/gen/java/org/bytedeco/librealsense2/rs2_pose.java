// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.librealsense2;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.librealsense2.global.realsense2.*;


@Properties(inherit = org.bytedeco.librealsense2.presets.realsense2.class)
public class rs2_pose extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public rs2_pose() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public rs2_pose(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public rs2_pose(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public rs2_pose position(long position) {
        return (rs2_pose)super.position(position);
    }
    @Override public rs2_pose getPointer(long i) {
        return new rs2_pose((Pointer)this).position(position + i);
    }

    /** X, Y, Z values of translation, in meters (relative to initial position)                                    */
    public native @ByRef rs2_vector translation(); public native rs2_pose translation(rs2_vector setter);
    /** X, Y, Z values of velocity, in meters/sec                                                                  */
    public native @ByRef rs2_vector velocity(); public native rs2_pose velocity(rs2_vector setter);
    /** X, Y, Z values of acceleration, in meters/sec^2                                                            */
    public native @ByRef rs2_vector acceleration(); public native rs2_pose acceleration(rs2_vector setter);
    /** Qi, Qj, Qk, Qr components of rotation as represented in quaternion rotation (relative to initial position) */
    public native @ByRef rs2_quaternion rotation(); public native rs2_pose rotation(rs2_quaternion setter);
    /** X, Y, Z values of angular velocity, in radians/sec                                                         */
    public native @ByRef rs2_vector angular_velocity(); public native rs2_pose angular_velocity(rs2_vector setter);
    /** X, Y, Z values of angular acceleration, in radians/sec^2                                                   */
    public native @ByRef rs2_vector angular_acceleration(); public native rs2_pose angular_acceleration(rs2_vector setter);
    /** Pose confidence 0x0 - Failed, 0x1 - Low, 0x2 - Medium, 0x3 - High                                          */
    public native @Cast("unsigned int") int tracker_confidence(); public native rs2_pose tracker_confidence(int setter);
    /** Pose map confidence 0x0 - Failed, 0x1 - Low, 0x2 - Medium, 0x3 - High                                      */
    public native @Cast("unsigned int") int mapper_confidence(); public native rs2_pose mapper_confidence(int setter);
}
