// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp.opencv_objdetect;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_core.opencv_core.*;
import org.bytedeco.javacpp.opencv_imgproc.*;
import static org.bytedeco.javacpp.opencv_imgproc.opencv_imgproc.*;
import org.bytedeco.javacpp.opencv_imgcodecs.*;
import static org.bytedeco.javacpp.opencv_imgcodecs.opencv_imgcodecs.*;
import org.bytedeco.javacpp.opencv_videoio.*;
import static org.bytedeco.javacpp.opencv_videoio.opencv_videoio.*;
import org.bytedeco.javacpp.opencv_highgui.*;
import static org.bytedeco.javacpp.opencv_highgui.opencv_highgui.*;
import org.bytedeco.javacpp.opencv_flann.*;
import static org.bytedeco.javacpp.opencv_flann.opencv_flann.*;
import org.bytedeco.javacpp.opencv_features2d.*;
import static org.bytedeco.javacpp.opencv_features2d.opencv_features2d.*;
import org.bytedeco.javacpp.opencv_calib3d.*;
import static org.bytedeco.javacpp.opencv_calib3d.opencv_calib3d.*;

import static org.bytedeco.javacpp.opencv_objdetect.opencv_objdetect.*;


@Namespace("cv") @Properties(inherit = org.bytedeco.javacpp.opencv_objdetect.opencv_objdetect_presets.class)
public class BaseCascadeClassifier extends Algorithm {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BaseCascadeClassifier(Pointer p) { super(p); }

    public native @Cast("bool") @Override boolean empty();
    public native @Cast("bool") boolean load( @Str BytePointer filename );
    public native @Cast("bool") boolean load( @Str String filename );
    public native void detectMultiScale( @ByVal Mat image,
                               @ByRef RectVector objects,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal UMat image,
                               @ByRef RectVector objects,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal GpuMat image,
                               @ByRef RectVector objects,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );

    public native void detectMultiScale( @ByVal Mat image,
                               @ByRef RectVector objects,
                               @StdVector IntPointer numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal Mat image,
                               @ByRef RectVector objects,
                               @StdVector IntBuffer numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal Mat image,
                               @ByRef RectVector objects,
                               @StdVector int[] numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal UMat image,
                               @ByRef RectVector objects,
                               @StdVector IntPointer numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal UMat image,
                               @ByRef RectVector objects,
                               @StdVector IntBuffer numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal UMat image,
                               @ByRef RectVector objects,
                               @StdVector int[] numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal GpuMat image,
                               @ByRef RectVector objects,
                               @StdVector IntPointer numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal GpuMat image,
                               @ByRef RectVector objects,
                               @StdVector IntBuffer numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );
    public native void detectMultiScale( @ByVal GpuMat image,
                               @ByRef RectVector objects,
                               @StdVector int[] numDetections,
                               double scaleFactor,
                               int minNeighbors, int flags,
                               @ByVal Size minSize, @ByVal Size maxSize );

    public native void detectMultiScale( @ByVal Mat image,
                                       @ByRef RectVector objects,
                                       @StdVector IntPointer rejectLevels,
                                       @StdVector DoublePointer levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );
    public native void detectMultiScale( @ByVal Mat image,
                                       @ByRef RectVector objects,
                                       @StdVector IntBuffer rejectLevels,
                                       @StdVector DoubleBuffer levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );
    public native void detectMultiScale( @ByVal Mat image,
                                       @ByRef RectVector objects,
                                       @StdVector int[] rejectLevels,
                                       @StdVector double[] levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );
    public native void detectMultiScale( @ByVal UMat image,
                                       @ByRef RectVector objects,
                                       @StdVector IntPointer rejectLevels,
                                       @StdVector DoublePointer levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );
    public native void detectMultiScale( @ByVal UMat image,
                                       @ByRef RectVector objects,
                                       @StdVector IntBuffer rejectLevels,
                                       @StdVector DoubleBuffer levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );
    public native void detectMultiScale( @ByVal UMat image,
                                       @ByRef RectVector objects,
                                       @StdVector int[] rejectLevels,
                                       @StdVector double[] levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );
    public native void detectMultiScale( @ByVal GpuMat image,
                                       @ByRef RectVector objects,
                                       @StdVector IntPointer rejectLevels,
                                       @StdVector DoublePointer levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );
    public native void detectMultiScale( @ByVal GpuMat image,
                                       @ByRef RectVector objects,
                                       @StdVector IntBuffer rejectLevels,
                                       @StdVector DoubleBuffer levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );
    public native void detectMultiScale( @ByVal GpuMat image,
                                       @ByRef RectVector objects,
                                       @StdVector int[] rejectLevels,
                                       @StdVector double[] levelWeights,
                                       double scaleFactor,
                                       int minNeighbors, int flags,
                                       @ByVal Size minSize, @ByVal Size maxSize,
                                       @Cast("bool") boolean outputRejectLevels );

    public native @Cast("bool") boolean isOldFormatCascade();
    public native @ByVal Size getOriginalWindowSize();
    public native int getFeatureType();
    public native Pointer getOldCascade();

    public static class MaskGenerator extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public MaskGenerator(Pointer p) { super(p); }
    
        public native @ByVal Mat generateMask(@Const @ByRef Mat src);
        public native void initializeMask(@Const @ByRef Mat arg0);
    }
    public native void setMaskGenerator(@Ptr MaskGenerator maskGenerator);
    public native @Ptr MaskGenerator getMaskGenerator();
}