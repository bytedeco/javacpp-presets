// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp.opencv_core;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.opencv_core.opencv_core.*;


@Namespace("cv::instr") @NoOffset @Properties(inherit = org.bytedeco.javacpp.opencv_core.opencv_core_presets.class)
public class NodeData extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NodeData(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public NodeData(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public NodeData position(long position) {
        return (NodeData)super.position(position);
    }

    public NodeData(@Cast("const char*") BytePointer funName/*=0*/, @Cast("const char*") BytePointer fileName/*=NULL*/, int lineNum/*=0*/, Pointer retAddress/*=NULL*/, @Cast("bool") boolean alwaysExpand/*=false*/, @Cast("cv::instr::TYPE") int instrType/*=cv::instr::TYPE_GENERAL*/, @Cast("cv::instr::IMPL") int implType/*=cv::instr::IMPL_PLAIN*/) { super((Pointer)null); allocate(funName, fileName, lineNum, retAddress, alwaysExpand, instrType, implType); }
    private native void allocate(@Cast("const char*") BytePointer funName/*=0*/, @Cast("const char*") BytePointer fileName/*=NULL*/, int lineNum/*=0*/, Pointer retAddress/*=NULL*/, @Cast("bool") boolean alwaysExpand/*=false*/, @Cast("cv::instr::TYPE") int instrType/*=cv::instr::TYPE_GENERAL*/, @Cast("cv::instr::IMPL") int implType/*=cv::instr::IMPL_PLAIN*/);
    public NodeData() { super((Pointer)null); allocate(); }
    private native void allocate();
    public NodeData(String funName/*=0*/, String fileName/*=NULL*/, int lineNum/*=0*/, Pointer retAddress/*=NULL*/, @Cast("bool") boolean alwaysExpand/*=false*/, @Cast("cv::instr::TYPE") int instrType/*=cv::instr::TYPE_GENERAL*/, @Cast("cv::instr::IMPL") int implType/*=cv::instr::IMPL_PLAIN*/) { super((Pointer)null); allocate(funName, fileName, lineNum, retAddress, alwaysExpand, instrType, implType); }
    private native void allocate(String funName/*=0*/, String fileName/*=NULL*/, int lineNum/*=0*/, Pointer retAddress/*=NULL*/, @Cast("bool") boolean alwaysExpand/*=false*/, @Cast("cv::instr::TYPE") int instrType/*=cv::instr::TYPE_GENERAL*/, @Cast("cv::instr::IMPL") int implType/*=cv::instr::IMPL_PLAIN*/);
    public NodeData(@ByRef NodeData ref) { super((Pointer)null); allocate(ref); }
    private native void allocate(@ByRef NodeData ref);
    public native @ByRef @Name("operator =") NodeData put(@Const @ByRef NodeData arg0);

    public native @Str BytePointer m_funName(); public native NodeData m_funName(BytePointer m_funName);
    public native @Cast("cv::instr::TYPE") int m_instrType(); public native NodeData m_instrType(int m_instrType);
    public native @Cast("cv::instr::IMPL") int m_implType(); public native NodeData m_implType(int m_implType);
    @MemberGetter public native @Cast("const char*") BytePointer m_fileName();
    public native int m_lineNum(); public native NodeData m_lineNum(int m_lineNum);
    public native Pointer m_retAddress(); public native NodeData m_retAddress(Pointer m_retAddress);
    public native @Cast("bool") boolean m_alwaysExpand(); public native NodeData m_alwaysExpand(boolean m_alwaysExpand);
    public native @Cast("bool") boolean m_funError(); public native NodeData m_funError(boolean m_funError);

    public native int m_counter(); public native NodeData m_counter(int m_counter);
    public native @Cast("uint64") int m_ticksTotal(); public native NodeData m_ticksTotal(int m_ticksTotal);
    @MemberGetter public native @ByRef NodeDataTlsData m_tls();
    public native int m_threads(); public native NodeData m_threads(int m_threads);

    // No synchronization
    public native double getTotalMs();
    public native double getMeanMs();
}