// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp.opencv_shape;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_core.opencv_core.*;
import org.bytedeco.javacpp.opencv_imgproc.*;
import static org.bytedeco.javacpp.opencv_imgproc.opencv_imgproc.*;
import org.bytedeco.javacpp.opencv_imgcodecs.*;
import static org.bytedeco.javacpp.opencv_imgcodecs.opencv_imgcodecs.*;
import org.bytedeco.javacpp.opencv_videoio.*;
import static org.bytedeco.javacpp.opencv_videoio.opencv_videoio.*;
import org.bytedeco.javacpp.opencv_highgui.*;
import static org.bytedeco.javacpp.opencv_highgui.opencv_highgui.*;
import org.bytedeco.javacpp.opencv_flann.*;
import static org.bytedeco.javacpp.opencv_flann.opencv_flann.*;
import org.bytedeco.javacpp.opencv_features2d.*;
import static org.bytedeco.javacpp.opencv_features2d.opencv_features2d.*;
import org.bytedeco.javacpp.opencv_calib3d.*;
import static org.bytedeco.javacpp.opencv_calib3d.opencv_calib3d.*;

import static org.bytedeco.javacpp.opencv_shape.opencv_shape.*;


/** \addtogroup shape
 *  \{
<p>
/** \example modules/shape/samples/shape_example.cpp
An example using shape distance algorithm
*/
/** \brief Abstract base class for shape distance algorithms.
 */
@Namespace("cv") @Properties(inherit = org.bytedeco.javacpp.opencv_shape.opencv_shape_presets.class)
public class ShapeDistanceExtractor extends Algorithm {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ShapeDistanceExtractor(Pointer p) { super(p); }

    /** \brief Compute the shape distance between two shapes defined by its contours.
    <p>
    @param contour1 Contour defining first shape.
    @param contour2 Contour defining second shape.
     */
    public native float computeDistance(@ByVal Mat contour1, @ByVal Mat contour2);
    public native float computeDistance(@ByVal UMat contour1, @ByVal UMat contour2);
    public native float computeDistance(@ByVal GpuMat contour1, @ByVal GpuMat contour2);
}