// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp.opencv_face;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_core.opencv_core.*;
import org.bytedeco.javacpp.opencv_imgproc.*;
import static org.bytedeco.javacpp.opencv_imgproc.opencv_imgproc.*;
import org.bytedeco.javacpp.opencv_imgcodecs.*;
import static org.bytedeco.javacpp.opencv_imgcodecs.opencv_imgcodecs.*;
import org.bytedeco.javacpp.opencv_videoio.*;
import static org.bytedeco.javacpp.opencv_videoio.opencv_videoio.*;
import org.bytedeco.javacpp.opencv_highgui.*;
import static org.bytedeco.javacpp.opencv_highgui.opencv_highgui.*;
import org.bytedeco.javacpp.opencv_flann.*;
import static org.bytedeco.javacpp.opencv_flann.opencv_flann.*;
import org.bytedeco.javacpp.opencv_features2d.*;
import static org.bytedeco.javacpp.opencv_features2d.opencv_features2d.*;
import org.bytedeco.javacpp.opencv_calib3d.*;
import static org.bytedeco.javacpp.opencv_calib3d.opencv_calib3d.*;
import org.bytedeco.javacpp.opencv_objdetect.*;
import static org.bytedeco.javacpp.opencv_objdetect.opencv_objdetect.*;
import org.bytedeco.javacpp.opencv_photo.*;
import static org.bytedeco.javacpp.opencv_photo.opencv_photo.*;

import static org.bytedeco.javacpp.opencv_face.opencv_face.*;


/** \addtogroup face
 *  \{ */

@Namespace("cv::face") @Properties(inherit = org.bytedeco.javacpp.opencv_face.opencv_face_presets.class)
public class FacemarkLBF extends FacemarkTrain {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FacemarkLBF(Pointer p) { super(p); }

    @NoOffset public static class Params extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Params(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public Params(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public Params position(long position) {
            return (Params)super.position(position);
        }
    
        /**
        * \brief Constructor
        */
        public Params() { super((Pointer)null); allocate(); }
        private native void allocate();

        
        /**  offset for the loaded face landmark points */
        public native double shape_offset(); public native Params shape_offset(double shape_offset);
        
        /**  filename of the face detector model */
        public native @Str BytePointer cascade_face(); public native Params cascade_face(BytePointer cascade_face);
        
        /** show the training print-out */
        public native @Cast("bool") boolean verbose(); public native Params verbose(boolean verbose);

        
        /**  number of landmark points */
        public native int n_landmarks(); public native Params n_landmarks(int n_landmarks);
        
        /**  multiplier for augment the training data */
        public native int initShape_n(); public native Params initShape_n(int initShape_n);

        
        /**  number of refinement stages */
        public native int stages_n(); public native Params stages_n(int stages_n);
        
        /**  number of tree in the model for each landmark point refinement */
        public native int tree_n(); public native Params tree_n(int tree_n);
        
        /**  the depth of decision tree, defines the size of feature */
        public native int tree_depth(); public native Params tree_depth(int tree_depth);
        
        /**  overlap ratio for training the LBF feature */
        public native double bagging_overlap(); public native Params bagging_overlap(double bagging_overlap);

        
        /**  filename where the trained model will be saved */
        public native @StdString BytePointer model_filename(); public native Params model_filename(BytePointer model_filename);
        /** flag to save the trained model or not */
        public native @Cast("bool") boolean save_model(); public native Params save_model(boolean save_model);
        /** seed for shuffling the training data */
        public native @Cast("unsigned int") int seed(); public native Params seed(int seed);

        public native @StdVector IntPointer feats_m(); public native Params feats_m(IntPointer feats_m);
        public native @StdVector DoublePointer radius_m(); public native Params radius_m(DoublePointer radius_m);
        
        /**  index of facemark points on pupils of left and right eye */
        public native @StdVector IntPointer pupils(int i); public native Params pupils(int i, IntPointer pupils);
        @MemberGetter public native @StdVector IntPointer pupils();

        public native @ByRef Rect detectROI(); public native Params detectROI(Rect detectROI);

        public native void read(@Const @ByRef FileNode arg0);
        public native void write(@ByRef FileStorage arg0);

    }

    @NoOffset public static class BBox extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public BBox(Pointer p) { super(p); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public BBox(long size) { super((Pointer)null); allocateArray(size); }
        private native void allocateArray(long size);
        @Override public BBox position(long position) {
            return (BBox)super.position(position);
        }
    
        public BBox() { super((Pointer)null); allocate(); }
        private native void allocate();
        public BBox(double x, double y, double w, double h) { super((Pointer)null); allocate(x, y, w, h); }
        private native void allocate(double x, double y, double w, double h);

        public native @ByVal Mat project(@Const @ByRef Mat shape);
        public native @ByVal Mat reproject(@Const @ByRef Mat shape);

        public native double x(); public native BBox x(double x);
        public native double y(); public native BBox y(double y);
        public native double x_center(); public native BBox x_center(double x_center);
        public native double y_center(); public native BBox y_center(double y_center);
        public native double x_scale(); public native BBox x_scale(double x_scale);
        public native double y_scale(); public native BBox y_scale(double y_scale);
        public native double width(); public native BBox width(double width);
        public native double height(); public native BBox height(double height);
    }

    public static native @Ptr FacemarkLBF create(@Const @ByRef(nullValue = "cv::face::FacemarkLBF::Params()") Params parameters );
    public static native @Ptr FacemarkLBF create( );
}