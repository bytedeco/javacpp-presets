// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp.opencv_structured_light;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.javacpp.opencv_core.*;
import static org.bytedeco.javacpp.opencv_core.opencv_core.*;
import org.bytedeco.javacpp.opencv_imgproc.*;
import static org.bytedeco.javacpp.opencv_imgproc.opencv_imgproc.*;
import org.bytedeco.javacpp.opencv_phase_unwrapping.*;
import static org.bytedeco.javacpp.opencv_phase_unwrapping.opencv_phase_unwrapping.*;
import org.bytedeco.javacpp.opencv_imgcodecs.*;
import static org.bytedeco.javacpp.opencv_imgcodecs.opencv_imgcodecs.*;
import org.bytedeco.javacpp.opencv_videoio.*;
import static org.bytedeco.javacpp.opencv_videoio.opencv_videoio.*;
import org.bytedeco.javacpp.opencv_highgui.*;
import static org.bytedeco.javacpp.opencv_highgui.opencv_highgui.*;
import org.bytedeco.javacpp.opencv_flann.*;
import static org.bytedeco.javacpp.opencv_flann.opencv_flann.*;
import org.bytedeco.javacpp.opencv_features2d.*;
import static org.bytedeco.javacpp.opencv_features2d.opencv_features2d.*;
import org.bytedeco.javacpp.opencv_calib3d.*;
import static org.bytedeco.javacpp.opencv_calib3d.opencv_calib3d.*;

import static org.bytedeco.javacpp.opencv_structured_light.opencv_structured_light.*;


/** \brief Abstract base class for generating and decoding structured light patterns.
 */
@Namespace("cv::structured_light") @Properties(inherit = org.bytedeco.javacpp.opencv_structured_light.opencv_structured_light_presets.class)
public class StructuredLightPattern extends Algorithm {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StructuredLightPattern(Pointer p) { super(p); }

  /** \brief Generates the structured light pattern to project.
   <p>
   @param patternImages The generated pattern: a vector<Mat>, in which each image is a CV_8U Mat at projector's resolution.
   */
  public native @Cast("bool") boolean generate( @ByVal MatVector patternImages );
  public native @Cast("bool") boolean generate( @ByVal UMatVector patternImages );
  public native @Cast("bool") boolean generate( @ByVal GpuMatVector patternImages );

  /** \brief Decodes the structured light pattern, generating a disparity map
   <p>
   @param patternImages The acquired pattern images to decode (vector<vector<Mat>>), loaded as grayscale and previously rectified.
   @param disparityMap The decoding result: a CV_64F Mat at image resolution, storing the computed disparity map.
   @param blackImages The all-black images needed for shadowMasks computation.
   @param whiteImages The all-white images needed for shadowMasks computation.
   @param flags Flags setting decoding algorithms. Default: DECODE_3D_UNDERWORLD.
   \note All the images must be at the same resolution.
   */
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal Mat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") MatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") MatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal Mat disparityMap );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal Mat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") UMatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") UMatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal Mat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") GpuMatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") GpuMatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal UMat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") MatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") MatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal UMat disparityMap );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal UMat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") UMatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") UMatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal UMat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") GpuMatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") GpuMatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal GpuMat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") MatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") MatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal GpuMat disparityMap );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal GpuMat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") UMatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") UMatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
  public native @Cast("bool") boolean decode( @Const @ByRef MatVectorVector patternImages, @ByVal GpuMat disparityMap,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") GpuMatVector blackImages,
                         @ByVal(nullValue = "cv::InputArrayOfArrays(cv::noArray())") GpuMatVector whiteImages,
                         int flags/*=cv::structured_light::DECODE_3D_UNDERWORLD*/ );
}