// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.opencv.opencv_dnn;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

import static org.bytedeco.opencv.global.opencv_dnn.*;

@NoOffset @Name("std::pair<int,float>") @Properties(inherit = org.bytedeco.opencv.presets.opencv_dnn.class)
public class IntFloatPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IntFloatPair(Pointer p) { super(p); }
    public IntFloatPair(int firstValue, float secondValue) { this(); put(firstValue, secondValue); }
    public IntFloatPair()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef IntFloatPair put(@ByRef IntFloatPair x);


    @MemberGetter public native int first(); public native IntFloatPair first(int first);
    @MemberGetter public native float second();  public native IntFloatPair second(float second);

    public IntFloatPair put(int firstValue, float secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

