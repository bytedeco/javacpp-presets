// Targeted by JavaCPP version 1.5.1: DO NOT EDIT THIS FILE

package org.bytedeco.opencv.opencv_core;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.opencv.global.opencv_core.*;

// #endif

/**
  @deprecated consider using cv::Mat instead
  */
@NoOffset @Properties(inherit = org.bytedeco.opencv.presets.opencv_core.class)
public class CvMatND extends AbstractCvMatND {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CvMatND(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CvMatND(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public CvMatND position(long position) {
        return (CvMatND)super.position(position);
    }

    public native int type(); public native CvMatND type(int setter);
    public native int dims(); public native CvMatND dims(int setter);

    public native IntPointer refcount(); public native CvMatND refcount(IntPointer setter);
    public native int hdr_refcount(); public native CvMatND hdr_refcount(int setter);

        @Name("data.ptr") public native @Cast("uchar*") BytePointer data_ptr(); public native CvMatND data_ptr(BytePointer setter);
        @Name("data.fl") public native FloatPointer data_fl(); public native CvMatND data_fl(FloatPointer setter);
        @Name("data.db") public native DoublePointer data_db(); public native CvMatND data_db(DoublePointer setter);
        @Name("data.i") public native IntPointer data_i(); public native CvMatND data_i(IntPointer setter);
        @Name("data.s") public native ShortPointer data_s(); public native CvMatND data_s(ShortPointer setter);

        @Name({"dim", ".size"}) public native int dim_size(int i); public native CvMatND dim_size(int i, int setter);
        @Name({"dim", ".step"}) public native int dim_step(int i); public native CvMatND dim_step(int i, int setter);

// #if defined(CV__ENABLE_C_API_CTORS) && defined(__cplusplus)
    public CvMatND() { super((Pointer)null); allocate(); }
    private native void allocate();
    public CvMatND(@Const @ByRef Mat m) { super((Pointer)null); allocate(m); }
    private native void allocate(@Const @ByRef Mat m);
// #endif
}
