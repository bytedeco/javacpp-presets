// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.opencv.opencv_features2d;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import org.bytedeco.opencv.opencv_videoio.*;
import static org.bytedeco.opencv.global.opencv_videoio.*;
import org.bytedeco.opencv.opencv_highgui.*;
import static org.bytedeco.opencv.global.opencv_highgui.*;
import org.bytedeco.opencv.opencv_flann.*;
import static org.bytedeco.opencv.global.opencv_flann.*;

import static org.bytedeco.opencv.global.opencv_features2d.*;


/** \brief Wrapping class for feature detection using the goodFeaturesToTrack function. :
 */
@Namespace("cv") @Properties(inherit = org.bytedeco.opencv.presets.opencv_features2d.class)
public class GFTTDetector extends Feature2D {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GFTTDetector(Pointer p) { super(p); }

    public static native @Ptr GFTTDetector create( int maxCorners/*=1000*/, double qualityLevel/*=0.01*/, double minDistance/*=1*/,
                                                 int blockSize/*=3*/, @Cast("bool") boolean useHarrisDetector/*=false*/, double k/*=0.04*/ );
    public static native @Ptr GFTTDetector create( );
    public static native @Ptr GFTTDetector create( int maxCorners, double qualityLevel, double minDistance,
                                                 int blockSize, int gradiantSize, @Cast("bool") boolean useHarrisDetector/*=false*/, double k/*=0.04*/ );
    public static native @Ptr GFTTDetector create( int maxCorners, double qualityLevel, double minDistance,
                                                 int blockSize, int gradiantSize );
    public native void setMaxFeatures(int maxFeatures);
    public native int getMaxFeatures();

    public native void setQualityLevel(double qlevel);
    public native double getQualityLevel();

    public native void setMinDistance(double minDistance);
    public native double getMinDistance();

    public native void setBlockSize(int blockSize);
    public native int getBlockSize();

    public native void setHarrisDetector(@Cast("bool") boolean val);
    public native @Cast("bool") boolean getHarrisDetector();

    public native void setK(double k);
    public native double getK();
    public native @Str @Override BytePointer getDefaultName();
}
