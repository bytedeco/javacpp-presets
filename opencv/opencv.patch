diff -ruN opencv-3.4.2/3rdparty/libpng/pngpriv.h opencv-3.4.2-patch/3rdparty/libpng/pngpriv.h
--- opencv-3.4.2/3rdparty/libpng/pngpriv.h	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/3rdparty/libpng/pngpriv.h	2018-07-11 19:15:47.090168260 +0900
@@ -192,13 +192,13 @@
 #  endif
 #endif
 
-#ifndef PNG_POWERPC_VSX_OPT
-#  if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)
-#     define PNG_POWERPC_VSX_OPT 2
-#  else
-#     define PNG_POWERPC_VSX_OPT 0
-#  endif
-#endif
+//#ifndef PNG_POWERPC_VSX_OPT
+//#  if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)
+//#     define PNG_POWERPC_VSX_OPT 2
+//#  else
+//#     define PNG_POWERPC_VSX_OPT 0
+//#  endif
+//#endif
 
 #ifndef PNG_INTEL_SSE_OPT
 #   ifdef PNG_INTEL_SSE
diff -ruN opencv-3.4.2/CMakeLists.txt opencv-3.4.2-patch/CMakeLists.txt
--- opencv-3.4.2/CMakeLists.txt	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/CMakeLists.txt	2018-07-11 19:15:47.092168260 +0900
@@ -7,12 +7,12 @@
 # ----------------------------------------------------------------------------
 
 # Disable in-source builds to prevent source tree corruption.
-if(" ${CMAKE_SOURCE_DIR}" STREQUAL " ${CMAKE_BINARY_DIR}")
-  message(FATAL_ERROR "
-FATAL: In-source builds are not allowed.
-       You should create a separate directory for build files.
-")
-endif()
+#if(" ${CMAKE_SOURCE_DIR}" STREQUAL " ${CMAKE_BINARY_DIR}")
+#  message(FATAL_ERROR "
+#FATAL: In-source builds are not allowed.
+#       You should create a separate directory for build files.
+#")
+#endif()
 
 
 include(cmake/OpenCVMinDepVersions.cmake)
diff -ruN opencv-3.4.2/modules/core/include/opencv2/core/cv_cpu_dispatch.h opencv-3.4.2-patch/modules/core/include/opencv2/core/cv_cpu_dispatch.h
--- opencv-3.4.2/modules/core/include/opencv2/core/cv_cpu_dispatch.h	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/core/include/opencv2/core/cv_cpu_dispatch.h	2018-07-11 19:15:47.092168260 +0900
@@ -107,13 +107,13 @@
 #  include <arm_neon.h>
 #endif
 
-#if defined(__VSX__) && defined(__PPC64__) && defined(__LITTLE_ENDIAN__)
-#  include <altivec.h>
-#  undef vector
-#  undef pixel
-#  undef bool
-#  define CV_VSX 1
-#endif
+//#if defined(__VSX__) && defined(__PPC64__) && defined(__LITTLE_ENDIAN__)
+//#  include <altivec.h>
+//#  undef vector
+//#  undef pixel
+//#  undef bool
+//#  define CV_VSX 1
+//#endif
 
 #endif // CV_ENABLE_INTRINSICS && !CV_DISABLE_OPTIMIZATION && !__CUDACC__
 
@@ -151,12 +151,12 @@
 #elif defined(__ARM_NEON__) || (defined (__ARM_NEON) && defined(__aarch64__))
 #  include <arm_neon.h>
 #  define CV_NEON 1
-#elif defined(__VSX__) && defined(__PPC64__) && defined(__LITTLE_ENDIAN__)
-#  include <altivec.h>
-#  undef vector
-#  undef pixel
-#  undef bool
-#  define CV_VSX 1
+//#elif defined(__VSX__) && defined(__PPC64__) && defined(__LITTLE_ENDIAN__)
+//#  include <altivec.h>
+//#  undef vector
+//#  undef pixel
+//#  undef bool
+//#  define CV_VSX 1
 #endif
 
 #endif // !__OPENCV_BUILD && !__CUDACC (Compatibility code)
diff -ruN opencv-3.4.2/modules/core/include/opencv2/core/utility.hpp opencv-3.4.2-patch/modules/core/include/opencv2/core/utility.hpp
--- opencv-3.4.2/modules/core/include/opencv2/core/utility.hpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/core/include/opencv2/core/utility.hpp	2018-07-11 19:15:47.092168260 +0900
@@ -1218,7 +1218,7 @@
     double getTotalMs()   const { return ((double)m_ticksTotal / cv::getTickFrequency()) * 1000; }
     double getMeanMs()    const { return (((double)m_ticksTotal/m_counter) / cv::getTickFrequency()) * 1000; }
 };
-bool operator==(const NodeData& lhs, const NodeData& rhs);
+CV_EXPORTS bool operator==(const NodeData& lhs, const NodeData& rhs);
 
 typedef Node<NodeData> InstrNode;
 
diff -ruN opencv-3.4.2/modules/core/src/system.cpp opencv-3.4.2-patch/modules/core/src/system.cpp
--- opencv-3.4.2/modules/core/src/system.cpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/core/src/system.cpp	2018-07-11 19:15:47.093168260 +0900
@@ -1854,7 +1854,7 @@
 NodeData::~NodeData()
 {
 }
-bool operator==(const NodeData& left, const NodeData& right)
+CV_EXPORTS bool operator==(const NodeData& left, const NodeData& right)
 {
     if(left.m_lineNum == right.m_lineNum && left.m_funName == right.m_funName && left.m_fileName == right.m_fileName)
     {
diff -ruN opencv-3.4.2/modules/dnn/include/opencv2/dnn/dnn.hpp opencv-3.4.2-patch/modules/dnn/include/opencv2/dnn/dnn.hpp
--- opencv-3.4.2/modules/dnn/include/opencv2/dnn/dnn.hpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/dnn/include/opencv2/dnn/dnn.hpp	2018-07-11 19:15:47.093168260 +0900
@@ -109,7 +109,7 @@
    /**
     * @brief Derivatives of this class encapsulates functions of certain backends.
     */
-    class BackendNode
+    class CV_EXPORTS BackendNode
     {
     public:
         BackendNode(int backendId);
@@ -264,7 +264,7 @@
         * Layer don't use own Halide::Func members because we can have applied
         * layers fusing. In this way the fused function should be scheduled.
         */
-        virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+        virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                           const std::vector<Mat*> &inputs,
                                           const std::vector<Mat> &outputs,
                                           int targetId) const;
@@ -293,7 +293,7 @@
          * @param[in] top Next layer to be fused.
          * @returns True if fusion was performed.
          */
-        virtual bool tryFuse(Ptr<Layer>& top);
+        virtual bool tryFuse(const Ptr<Layer>& top);
 
         /**
          * @brief Returns parameters of layers with channel-wise multiplication and addition.
diff -ruN opencv-3.4.2/modules/dnn/src/dnn.cpp opencv-3.4.2-patch/modules/dnn/src/dnn.cpp
--- opencv-3.4.2/modules/dnn/src/dnn.cpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/dnn/src/dnn.cpp	2018-07-11 19:15:47.093168260 +0900
@@ -2685,7 +2685,7 @@
     return Ptr<BackendNode>();
 }
 
-void Layer::applyHalideScheduler(Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
+void Layer::applyHalideScheduler(const Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
                                  const std::vector<Mat> &outputs, int targetId) const
 {
 #ifdef  HAVE_HALIDE
@@ -2760,7 +2760,7 @@
 }
 
 bool Layer::setActivation(const Ptr<ActivationLayer>&) { return false; }
-bool Layer::tryFuse(Ptr<Layer>&) { return false; }
+bool Layer::tryFuse(const Ptr<Layer>&) { return false; }
 void Layer::getScaleShift(Mat& scale, Mat& shift) const
 {
     scale = Mat();
diff -ruN opencv-3.4.2/modules/dnn/src/layers/batch_norm_layer.cpp opencv-3.4.2-patch/modules/dnn/src/layers/batch_norm_layer.cpp
--- opencv-3.4.2/modules/dnn/src/layers/batch_norm_layer.cpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/dnn/src/layers/batch_norm_layer.cpp	2018-07-11 19:16:09.223171850 +0900
@@ -96,7 +96,7 @@
         shift = bias_;
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Mat w, b;
         top->getScaleShift(w, b);
diff -ruN opencv-3.4.2/modules/dnn/src/layers/convolution_layer.cpp opencv-3.4.2-patch/modules/dnn/src/layers/convolution_layer.cpp
--- opencv-3.4.2/modules/dnn/src/layers/convolution_layer.cpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/dnn/src/layers/convolution_layer.cpp	2018-07-11 19:18:06.319202737 +0900
@@ -121,7 +121,7 @@
         (dilation.height == 1 && dilation.width == 1);
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
@@ -314,7 +314,7 @@
         return !activ.empty();
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Mat w, b;
         top->getScaleShift(w, b);
diff -ruN opencv-3.4.2/modules/dnn/src/layers/lrn_layer.cpp opencv-3.4.2-patch/modules/dnn/src/layers/lrn_layer.cpp
--- opencv-3.4.2/modules/dnn/src/layers/lrn_layer.cpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/dnn/src/layers/lrn_layer.cpp	2018-07-11 19:18:11.600204367 +0900
@@ -346,7 +346,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
diff -ruN opencv-3.4.2/modules/dnn/src/layers/mvn_layer.cpp opencv-3.4.2-patch/modules/dnn/src/layers/mvn_layer.cpp
--- opencv-3.4.2/modules/dnn/src/layers/mvn_layer.cpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/dnn/src/layers/mvn_layer.cpp	2018-07-11 19:15:47.094168260 +0900
@@ -71,7 +71,7 @@
     Mat scale, shift;
     bool fuse_batch_norm;
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         if (!fuse_batch_norm)
         {
diff -ruN opencv-3.4.2/modules/dnn/src/layers/pooling_layer.cpp opencv-3.4.2-patch/modules/dnn/src/layers/pooling_layer.cpp
--- opencv-3.4.2/modules/dnn/src/layers/pooling_layer.cpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/dnn/src/layers/pooling_layer.cpp	2018-07-11 19:17:57.403199987 +0900
@@ -751,7 +751,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
diff -ruN opencv-3.4.2/modules/flann/include/opencv2/flann/miniflann.hpp opencv-3.4.2-patch/modules/flann/include/opencv2/flann/miniflann.hpp
--- opencv-3.4.2/modules/flann/include/opencv2/flann/miniflann.hpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/flann/include/opencv2/flann/miniflann.hpp	2018-07-11 19:15:47.097168261 +0900
@@ -74,10 +74,6 @@
                 std::vector<double>& numValues) const;
 
     void* params;
-
-private:
-    IndexParams(const IndexParams &); // copy disabled
-    IndexParams& operator=(const IndexParams &); // assign disabled
 };
 
 struct CV_EXPORTS KDTreeIndexParams : public IndexParams
diff -ruN opencv-3.4.2/modules/imgproc/src/fixedpoint.inl.hpp opencv-3.4.2-patch/modules/imgproc/src/fixedpoint.inl.hpp
--- opencv-3.4.2/modules/imgproc/src/fixedpoint.inl.hpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/imgproc/src/fixedpoint.inl.hpp	2018-07-11 19:15:47.097168261 +0900
@@ -93,8 +93,8 @@
     CV_ALWAYS_INLINE bool operator == (const fixedpoint64& val2) const { return val == val2.val; }
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>((int64_t)fixedround((uint64_t)val) >> fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1LL << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1LL << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1LL << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1LL << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -158,8 +158,8 @@
     CV_ALWAYS_INLINE bool operator == (const ufixedpoint64& val2) const { return val == val2.val; }
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>(fixedround(val) >> fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1LL << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1LL << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1LL << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1LL << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -211,8 +211,8 @@
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>((int32_t)fixedround((uint32_t)val) >> fixedShift); }
     CV_ALWAYS_INLINE operator fixedpoint64() const { return (int64_t)val << (fixedpoint64::fixedShift - fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -260,8 +260,8 @@
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>(fixedround(val) >> fixedShift); }
     CV_ALWAYS_INLINE operator ufixedpoint64() const { return (uint64_t)val << (ufixedpoint64::fixedShift - fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -307,8 +307,8 @@
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>((int16_t)fixedround((uint16_t)val) >> fixedShift); }
     CV_ALWAYS_INLINE operator fixedpoint32() const { return (int32_t)val << (fixedpoint32::fixedShift - fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -352,8 +352,8 @@
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>(fixedround(val) >> fixedShift); }
     CV_ALWAYS_INLINE operator ufixedpoint32() const { return (uint32_t)val << (ufixedpoint32::fixedShift - fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
diff -ruN opencv-3.4.2/modules/imgproc/src/resize.cpp opencv-3.4.2-patch/modules/imgproc/src/resize.cpp
--- opencv-3.4.2/modules/imgproc/src/resize.cpp	2018-07-04 20:05:47.000000000 +0900
+++ opencv-3.4.2-patch/modules/imgproc/src/resize.cpp	2018-07-11 19:15:47.098168261 +0900
@@ -743,11 +743,11 @@
     void(*hResize)(ET* src, int cn, int *ofst, fixedpoint* m, fixedpoint* dst, int dst_min, int dst_max, int dst_width);
     switch (cn)
     {
-    case  1: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 1> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 1>; break;
-    case  2: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 2> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 2>; break;
-    case  3: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 3> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 3>; break;
-    case  4: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 4> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 4>; break;
-    default: hResize = src_width > interpolation::len ? hlineResize<ET, fixedpoint, interpolation::len, true>      : hlineResize<ET, fixedpoint, interpolation::len, false>     ; break;
+    case  1: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 1>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 1>; break;
+    case  2: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 2>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 2>; break;
+    case  3: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 3>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 3>; break;
+    case  4: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 4>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 4>; break;
+    default: if (src_width > interpolation::len) hResize = hlineResize<ET, fixedpoint, interpolation::len, true>     ; else hResize = hlineResize<ET, fixedpoint, interpolation::len, false>     ; break;
     }
 
     interpolation interp_x(inv_scale_x, src_width, dst_width);
