diff -ruN opencv-4.0.1/3rdparty/libpng/pngpriv.h opencv-4.0.1-patch/3rdparty/libpng/pngpriv.h
--- opencv-4.0.1/3rdparty/libpng/pngpriv.h	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/3rdparty/libpng/pngpriv.h	2019-01-02 01:08:57.518314170 +0900
@@ -192,13 +192,13 @@
 #  endif
 #endif
 
-#ifndef PNG_POWERPC_VSX_OPT
-#  if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)
-#     define PNG_POWERPC_VSX_OPT 2
-#  else
-#     define PNG_POWERPC_VSX_OPT 0
-#  endif
-#endif
+//#ifndef PNG_POWERPC_VSX_OPT
+//#  if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)
+//#     define PNG_POWERPC_VSX_OPT 2
+//#  else
+//#     define PNG_POWERPC_VSX_OPT 0
+//#  endif
+//#endif
 
 #ifndef PNG_INTEL_SSE_OPT
 #   ifdef PNG_INTEL_SSE
diff -ruN opencv-4.0.1/CMakeLists.txt opencv-4.0.1-patch/CMakeLists.txt
--- opencv-4.0.1/CMakeLists.txt	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/CMakeLists.txt	2019-01-02 01:08:57.519314160 +0900
@@ -7,12 +7,12 @@
 # ----------------------------------------------------------------------------
 
 # Disable in-source builds to prevent source tree corruption.
-if(" ${CMAKE_SOURCE_DIR}" STREQUAL " ${CMAKE_BINARY_DIR}")
-  message(FATAL_ERROR "
-FATAL: In-source builds are not allowed.
-       You should create a separate directory for build files.
-")
-endif()
+#if(" ${CMAKE_SOURCE_DIR}" STREQUAL " ${CMAKE_BINARY_DIR}")
+#  message(FATAL_ERROR "
+#FATAL: In-source builds are not allowed.
+#       You should create a separate directory for build files.
+#")
+#endif()
 
 
 include(cmake/OpenCVMinDepVersions.cmake)
diff -ruN opencv-4.0.1/modules/core/include/opencv2/core/fast_math.hpp opencv-4.0.1-patch/modules/core/include/opencv2/core/fast_math.hpp
--- opencv-4.0.1/modules/core/include/opencv2/core/fast_math.hpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/core/include/opencv2/core/fast_math.hpp	2019-01-02 01:08:57.519314160 +0900
@@ -75,7 +75,6 @@
     #define ARM_ROUND(_value, _asm_string) \
         int res; \
         float temp; \
-        CV_UNUSED(temp); \
         __asm__(_asm_string : [res] "=r" (res), [temp] "=w" (temp) : [value] "w" (_value)); \
         return res
     // 2. version for double
diff -ruN opencv-4.0.1/modules/core/include/opencv2/core/utility.hpp opencv-4.0.1-patch/modules/core/include/opencv2/core/utility.hpp
--- opencv-4.0.1/modules/core/include/opencv2/core/utility.hpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/core/include/opencv2/core/utility.hpp	2019-01-02 01:08:57.519314160 +0900
@@ -1211,7 +1211,7 @@
     double getTotalMs()   const { return ((double)m_ticksTotal / cv::getTickFrequency()) * 1000; }
     double getMeanMs()    const { return (((double)m_ticksTotal/m_counter) / cv::getTickFrequency()) * 1000; }
 };
-bool operator==(const NodeData& lhs, const NodeData& rhs);
+CV_EXPORTS bool operator==(const NodeData& lhs, const NodeData& rhs);
 
 typedef Node<NodeData> InstrNode;
 
diff -ruN opencv-4.0.1/modules/core/src/system.cpp opencv-4.0.1-patch/modules/core/src/system.cpp
--- opencv-4.0.1/modules/core/src/system.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/core/src/system.cpp	2019-01-02 01:08:57.520314149 +0900
@@ -1871,7 +1871,7 @@
 NodeData::~NodeData()
 {
 }
-bool operator==(const NodeData& left, const NodeData& right)
+CV_EXPORTS bool operator==(const NodeData& left, const NodeData& right)
 {
     if(left.m_lineNum == right.m_lineNum && left.m_funName == right.m_funName && left.m_fileName == right.m_fileName)
     {
diff -ruN opencv-4.0.1/modules/dnn/include/opencv2/dnn/dnn.hpp opencv-4.0.1-patch/modules/dnn/include/opencv2/dnn/dnn.hpp
--- opencv-4.0.1/modules/dnn/include/opencv2/dnn/dnn.hpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/dnn/include/opencv2/dnn/dnn.hpp	2019-01-02 01:08:57.520314149 +0900
@@ -109,7 +109,7 @@
    /**
     * @brief Derivatives of this class encapsulates functions of certain backends.
     */
-    class BackendNode
+    class CV_EXPORTS BackendNode
     {
     public:
         BackendNode(int backendId);
@@ -285,7 +285,7 @@
         * Layer don't use own Halide::Func members because we can have applied
         * layers fusing. In this way the fused function should be scheduled.
         */
-        virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+        virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                           const std::vector<Mat*> &inputs,
                                           const std::vector<Mat> &outputs,
                                           int targetId) const;
@@ -314,7 +314,7 @@
          * @param[in] top Next layer to be fused.
          * @returns True if fusion was performed.
          */
-        virtual bool tryFuse(Ptr<Layer>& top);
+        virtual bool tryFuse(const Ptr<Layer>& top);
 
         /**
          * @brief Returns parameters of layers with channel-wise multiplication and addition.
diff -ruN opencv-4.0.1/modules/dnn/src/dnn.cpp opencv-4.0.1-patch/modules/dnn/src/dnn.cpp
--- opencv-4.0.1/modules/dnn/src/dnn.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/dnn/src/dnn.cpp	2019-01-02 01:08:57.521314138 +0900
@@ -3355,7 +3355,7 @@
     return Ptr<BackendNode>();
 }
 
-void Layer::applyHalideScheduler(Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
+void Layer::applyHalideScheduler(const Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
                                  const std::vector<Mat> &outputs, int targetId) const
 {
 #ifdef  HAVE_HALIDE
@@ -3432,7 +3432,7 @@
 }
 
 bool Layer::setActivation(const Ptr<ActivationLayer>&) { return false; }
-bool Layer::tryFuse(Ptr<Layer>&) { return false; }
+bool Layer::tryFuse(const Ptr<Layer>&) { return false; }
 void Layer::getScaleShift(Mat& scale, Mat& shift) const
 {
     scale = Mat();
diff -ruN opencv-4.0.1/modules/dnn/src/layers/batch_norm_layer.cpp opencv-4.0.1-patch/modules/dnn/src/layers/batch_norm_layer.cpp
--- opencv-4.0.1/modules/dnn/src/layers/batch_norm_layer.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/dnn/src/layers/batch_norm_layer.cpp	2019-01-02 01:08:57.521314138 +0900
@@ -97,7 +97,7 @@
         shift = bias_;
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Mat w, b;
         top->getScaleShift(w, b);
diff -ruN opencv-4.0.1/modules/dnn/src/layers/convolution_layer.cpp opencv-4.0.1-patch/modules/dnn/src/layers/convolution_layer.cpp
--- opencv-4.0.1/modules/dnn/src/layers/convolution_layer.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/dnn/src/layers/convolution_layer.cpp	2019-01-02 01:08:57.521314138 +0900
@@ -135,7 +135,7 @@
         (dilation.height == 1 && dilation.width == 1);
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
@@ -346,7 +346,7 @@
         return !activ.empty();
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Mat w, b;
         top->getScaleShift(w, b);
diff -ruN opencv-4.0.1/modules/dnn/src/layers/elementwise_layers.cpp opencv-4.0.1-patch/modules/dnn/src/layers/elementwise_layers.cpp
--- opencv-4.0.1/modules/dnn/src/layers/elementwise_layers.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/dnn/src/layers/elementwise_layers.cpp	2019-01-02 01:08:57.521314138 +0900
@@ -169,7 +169,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual bool tryFuse(Ptr<dnn::Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<dnn::Layer>& top) CV_OVERRIDE
     {
         return func.tryFuse(top);
     }
@@ -375,7 +375,7 @@
 
 
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
@@ -492,7 +492,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
@@ -574,7 +574,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
@@ -656,7 +656,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
@@ -739,7 +739,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
@@ -823,7 +823,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
@@ -883,7 +883,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
@@ -1014,7 +1014,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>& top)
+    bool tryFuse(const Ptr<dnn::Layer>& top)
     {
         if (power != 1.0f && shift != 0.0f)
             return false;
@@ -1161,7 +1161,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
diff -ruN opencv-4.0.1/modules/dnn/src/layers/lrn_layer.cpp opencv-4.0.1-patch/modules/dnn/src/layers/lrn_layer.cpp
--- opencv-4.0.1/modules/dnn/src/layers/lrn_layer.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/dnn/src/layers/lrn_layer.cpp	2019-01-02 01:08:57.521314138 +0900
@@ -358,7 +358,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
diff -ruN opencv-4.0.1/modules/dnn/src/layers/pooling_layer.cpp opencv-4.0.1-patch/modules/dnn/src/layers/pooling_layer.cpp
--- opencv-4.0.1/modules/dnn/src/layers/pooling_layer.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/dnn/src/layers/pooling_layer.cpp	2019-01-02 01:08:57.522314127 +0900
@@ -849,7 +849,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
diff -ruN opencv-4.0.1/modules/flann/include/opencv2/flann/miniflann.hpp opencv-4.0.1-patch/modules/flann/include/opencv2/flann/miniflann.hpp
--- opencv-4.0.1/modules/flann/include/opencv2/flann/miniflann.hpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/flann/include/opencv2/flann/miniflann.hpp	2019-01-02 01:08:57.522314127 +0900
@@ -89,10 +89,6 @@
                 std::vector<double>& numValues) const;
 
     void* params;
-
-private:
-    IndexParams(const IndexParams &); // copy disabled
-    IndexParams& operator=(const IndexParams &); // assign disabled
 };
 
 struct CV_EXPORTS KDTreeIndexParams : public IndexParams
diff -ruN opencv-4.0.1/modules/imgproc/src/fixedpoint.inl.hpp opencv-4.0.1-patch/modules/imgproc/src/fixedpoint.inl.hpp
--- opencv-4.0.1/modules/imgproc/src/fixedpoint.inl.hpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/imgproc/src/fixedpoint.inl.hpp	2019-01-02 01:08:57.522314127 +0900
@@ -93,8 +93,8 @@
     CV_ALWAYS_INLINE bool operator == (const fixedpoint64& val2) const { return val == val2.val; }
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>((int64_t)fixedround((uint64_t)val) >> fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1LL << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1LL << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1LL << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1LL << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -158,8 +158,8 @@
     CV_ALWAYS_INLINE bool operator == (const ufixedpoint64& val2) const { return val == val2.val; }
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>(fixedround(val) >> fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1LL << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1LL << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1LL << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1LL << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -211,8 +211,8 @@
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>((int32_t)fixedround((uint32_t)val) >> fixedShift); }
     CV_ALWAYS_INLINE operator fixedpoint64() const { return (int64_t)val << (fixedpoint64::fixedShift - fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -260,8 +260,8 @@
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>(fixedround(val) >> fixedShift); }
     CV_ALWAYS_INLINE operator ufixedpoint64() const { return (uint64_t)val << (ufixedpoint64::fixedShift - fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -307,8 +307,8 @@
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>((int16_t)fixedround((uint16_t)val) >> fixedShift); }
     CV_ALWAYS_INLINE operator fixedpoint32() const { return (int32_t)val << (fixedpoint32::fixedShift - fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
@@ -352,8 +352,8 @@
     template <typename ET>
     CV_ALWAYS_INLINE ET saturate_cast() const { return cv::saturate_cast<ET>(fixedround(val) >> fixedShift); }
     CV_ALWAYS_INLINE operator ufixedpoint32() const { return (uint32_t)val << (ufixedpoint32::fixedShift - fixedShift); }
-    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
-    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator double() const { return (double)val / (1 << fixedShift); }
+//    CV_ALWAYS_INLINE operator float() const { return (float)val / (1 << fixedShift); }
     CV_ALWAYS_INLINE operator uint8_t() const { return saturate_cast<uint8_t>(); }
     CV_ALWAYS_INLINE operator int8_t() const { return saturate_cast<int8_t>(); }
     CV_ALWAYS_INLINE operator uint16_t() const { return saturate_cast<uint16_t>(); }
diff -ruN opencv-4.0.1/modules/imgproc/src/resize.cpp opencv-4.0.1-patch/modules/imgproc/src/resize.cpp
--- opencv-4.0.1/modules/imgproc/src/resize.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/imgproc/src/resize.cpp	2019-01-02 01:08:57.523314117 +0900
@@ -923,11 +923,11 @@
     void(*hResize)(ET* src, int cn, int *ofst, fixedpoint* m, fixedpoint* dst, int dst_min, int dst_max, int dst_width);
     switch (cn)
     {
-    case  1: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 1> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 1>; break;
-    case  2: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 2> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 2>; break;
-    case  3: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 3> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 3>; break;
-    case  4: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 4> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 4>; break;
-    default: hResize = src_width > interpolation::len ? hlineResize<ET, fixedpoint, interpolation::len, true>      : hlineResize<ET, fixedpoint, interpolation::len, false>     ; break;
+    case  1: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 1>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 1>; break;
+    case  2: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 2>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 2>; break;
+    case  3: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 3>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 3>; break;
+    case  4: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 4>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 4>; break;
+    default: if (src_width > interpolation::len) hResize = hlineResize<ET, fixedpoint, interpolation::len, true>     ; else hResize = hlineResize<ET, fixedpoint, interpolation::len, false>     ; break;
     }
 
     interpolation interp_x(inv_scale_x, src_width, dst_width);
diff -ruN opencv-4.0.1/modules/java/CMakeLists.txt opencv-4.0.1-patch/modules/java/CMakeLists.txt
--- opencv-4.0.1/modules/java/CMakeLists.txt	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/java/CMakeLists.txt	2019-01-02 01:09:17.438101024 +0900
@@ -3,13 +3,6 @@
   add_subdirectory(generator)
 endif()
 
-if(APPLE_FRAMEWORK OR WINRT OR NOT PYTHON_DEFAULT_AVAILABLE OR NOT (ANT_EXECUTABLE OR ANDROID_PROJECTS_BUILD_TYPE STREQUAL "GRADLE")
-    OR NOT (JNI_FOUND OR (ANDROID AND (NOT DEFINED ANDROID_NATIVE_API_LEVEL OR ANDROID_NATIVE_API_LEVEL GREATER 7)))
-    OR BUILD_opencv_world
-    )
-  ocv_module_disable(java)
-endif()
-
 set(the_description "The java bindings")
 ocv_add_module(java BINDINGS opencv_core opencv_imgproc PRIVATE_REQUIRED opencv_java_bindings_generator)
 
@@ -56,11 +49,6 @@
 
 
 add_subdirectory(jni)  # generates ${the_module} target (${the_module}_jni doesn't work properly with Android non-gradle samples)
-if(ANDROID)
-  add_subdirectory(android_sdk)  # generates ${the_module}_android target
-else()
-  add_subdirectory(jar)  # generates ${the_module}_jar target
-endif()
 
 if(BUILD_TESTS)
   if(ANDROID)
diff -ruN opencv-4.0.1/modules/java/common.cmake opencv-4.0.1-patch/modules/java/common.cmake
--- opencv-4.0.1/modules/java/common.cmake	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/java/common.cmake	2019-01-02 01:08:57.523314117 +0900
@@ -1,10 +1,3 @@
-if(ANDROID)
-  ocv_update(OPENCV_JAVA_LIB_NAME_SUFFIX "${OPENCV_VERSION_MAJOR}")
-  ocv_update(JAVA_INSTALL_ROOT "sdk/java")
-else()
-  ocv_update(OPENCV_JAVA_LIB_NAME_SUFFIX "${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}")
-endif()
-
 if(MSVC)
   ocv_warnings_disable(CMAKE_CXX_FLAGS /wd4996)
 else()
diff -ruN opencv-4.0.1/modules/java/generator/CMakeLists.txt opencv-4.0.1-patch/modules/java/generator/CMakeLists.txt
--- opencv-4.0.1/modules/java/generator/CMakeLists.txt	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/java/generator/CMakeLists.txt	2019-01-02 01:08:57.523314117 +0900
@@ -5,9 +5,6 @@
 set(OPENCV_JAVA_SIGNATURES_FILE "${CMAKE_CURRENT_BINARY_DIR}/opencv_java_signatures.json" CACHE INTERNAL "")
 set(OPENCV_JAVA_BINDINGS_DIR "${CMAKE_CURRENT_BINARY_DIR}" CACHE INTERNAL "")
 
-file(REMOVE_RECURSE "${OPENCV_JAVA_BINDINGS_DIR}/gen")
-file(REMOVE "${OPENCV_DEPHELPER}/gen_opencv_java_source")  # force re-run after CMake
-
 # This file is included from a subdirectory
 set(JAVA_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/..")
 include(${JAVA_SOURCE_DIR}/common.cmake)
@@ -75,7 +72,6 @@
 endif()
 if(NOT "${__content}" STREQUAL "${__config_str}")
   file(WRITE "${CONFIG_FILE}" "${__config_str}")
-  file(REMOVE "${OPENCV_DEPHELPER}/gen_opencv_java_source")
 endif()
 unset(__config_str)
 
diff -ruN opencv-4.0.1/modules/java/jni/CMakeLists.txt opencv-4.0.1-patch/modules/java/jni/CMakeLists.txt
--- opencv-4.0.1/modules/java/jni/CMakeLists.txt	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/java/jni/CMakeLists.txt	2019-01-02 01:08:57.523314117 +0900
@@ -25,6 +25,9 @@
 elseif(APPLE)
   set(CMAKE_SHARED_MODULE_SUFFIX ".dylib")  # Java is not able to load .so files
 endif()
+if(NOT BUILD_SHARED_LIBS)
+  set(__type STATIC)
+endif()
 ocv_add_library(${the_module} ${__type}
     ${handwritten_h_sources} ${handwritten_cpp_sources} ${generated_cpp_sources}
     ${copied_files}
@@ -62,6 +65,8 @@
   ocv_target_link_libraries(${the_module} LINK_PRIVATE ${__deps} ${OPENCV_LINKER_LIBS})
 endif()
 
+string(REPLACE "<CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME>" "" CMAKE_CXX_CREATE_SHARED_MODULE "${CMAKE_CXX_CREATE_SHARED_MODULE}")
+
 # Additional target properties
 set_target_properties(${the_module} PROPERTIES
     OUTPUT_NAME "${the_module}${OPENCV_JAVA_LIB_NAME_SUFFIX}"
diff -ruN opencv-4.0.1/modules/stitching/include/opencv2/stitching.hpp opencv-4.0.1-patch/modules/stitching/include/opencv2/stitching.hpp
--- opencv-4.0.1/modules/stitching/include/opencv2/stitching.hpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/stitching/include/opencv2/stitching.hpp	2019-01-02 01:08:57.523314117 +0900
@@ -322,12 +322,12 @@
 /**
  * @deprecated use Stitcher::create
  */
-CV_DEPRECATED Ptr<Stitcher> createStitcher(bool try_use_gpu = false);
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcher(bool try_use_gpu = false);
 
 /**
  * @deprecated use Stitcher::create
  */
-CV_DEPRECATED Ptr<Stitcher> createStitcherScans(bool try_use_gpu = false);
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcherScans(bool try_use_gpu = false);
 
 //! @} stitching
 
diff -ruN opencv-4.0.1/modules/stitching/src/stitcher.cpp opencv-4.0.1-patch/modules/stitching/src/stitcher.cpp
--- opencv-4.0.1/modules/stitching/src/stitcher.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/stitching/src/stitcher.cpp	2019-01-02 01:08:57.523314117 +0900
@@ -536,14 +536,14 @@
 }
 
 
-CV_DEPRECATED Ptr<Stitcher> createStitcher(bool /*ignored*/)
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcher(bool /*ignored*/)
 {
     CV_INSTRUMENT_REGION();
 
     return Stitcher::create(Stitcher::PANORAMA);
 }
 
-CV_DEPRECATED Ptr<Stitcher> createStitcherScans(bool /*ignored*/)
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcherScans(bool /*ignored*/)
 {
     CV_INSTRUMENT_REGION();
 
diff -ruN opencv-4.0.1/modules/videoio/src/cap_v4l.cpp opencv-4.0.1-patch/modules/videoio/src/cap_v4l.cpp
--- opencv-4.0.1/modules/videoio/src/cap_v4l.cpp	2018-12-22 16:03:30.000000000 +0900
+++ opencv-4.0.1-patch/modules/videoio/src/cap_v4l.cpp	2019-01-02 01:08:57.524314106 +0900
@@ -1591,8 +1591,6 @@
         return V4L2_CID_FOCUS_ABSOLUTE;
     case cv::CAP_PROP_GUID:
         return -1;
-    case cv::CAP_PROP_ISO_SPEED:
-        return V4L2_CID_ISO_SENSITIVITY;
     case cv::CAP_PROP_BACKLIGHT:
         return V4L2_CID_BACKLIGHT_COMPENSATION;
     case cv::CAP_PROP_PAN:
@@ -1609,10 +1607,6 @@
         return -1;
     case cv::CAP_PROP_AUTOFOCUS:
         return V4L2_CID_FOCUS_AUTO;
-    case cv::CAP_PROP_SAR_NUM:
-        return V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT;
-    case cv::CAP_PROP_SAR_DEN:
-        return V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH;
     case CAP_PROP_AUTO_WB:
         return V4L2_CID_AUTO_WHITE_BALANCE;
     case CAP_PROP_WB_TEMPERATURE:
