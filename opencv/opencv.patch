diff -ruN opencv-4.9.0/3rdparty/libpng/pngpriv.h opencv-4.9.0-patch/3rdparty/libpng/pngpriv.h
--- opencv-4.9.0/3rdparty/libpng/pngpriv.h	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/3rdparty/libpng/pngpriv.h	2023-12-31 10:47:15.699853334 +0900
@@ -195,13 +195,13 @@
 #  endif
 #endif
 
-#ifndef PNG_POWERPC_VSX_OPT
-#  if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)
-#     define PNG_POWERPC_VSX_OPT 2
-#  else
-#     define PNG_POWERPC_VSX_OPT 0
-#  endif
-#endif
+//#ifndef PNG_POWERPC_VSX_OPT
+//#  if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)
+//#     define PNG_POWERPC_VSX_OPT 2
+//#  else
+//#     define PNG_POWERPC_VSX_OPT 0
+//#  endif
+//#endif
 
 #ifndef PNG_INTEL_SSE_OPT
 #   ifdef PNG_INTEL_SSE
diff -ruN opencv-4.9.0/CMakeLists.txt opencv-4.9.0-patch/CMakeLists.txt
--- opencv-4.9.0/CMakeLists.txt	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/CMakeLists.txt	2023-12-31 10:47:54.236927735 +0900
@@ -6,12 +6,12 @@
 #
 # ----------------------------------------------------------------------------
 # Disable in-source builds to prevent source tree corruption.
-if(" ${CMAKE_SOURCE_DIR}" STREQUAL " ${CMAKE_BINARY_DIR}")
-  message(FATAL_ERROR "
-FATAL: In-source builds are not allowed.
-       You should create a separate directory for build files.
-")
-endif()
+#if(" ${CMAKE_SOURCE_DIR}" STREQUAL " ${CMAKE_BINARY_DIR}")
+#  message(FATAL_ERROR "
+#FATAL: In-source builds are not allowed.
+#       You should create a separate directory for build files.
+#")
+#endif()
 
 
 include(cmake/OpenCVMinDepVersions.cmake)
@@ -439,7 +439,6 @@
   VISIBLE_IF UNIX AND NOT ANDROID AND NOT IOS AND NOT XROS
   VERIFY HAVE_GPHOTO2)
 OCV_OPTION(WITH_LAPACK "Include Lapack library support" (NOT CV_DISABLE_OPTIMIZATION)
-  VISIBLE_IF NOT ANDROID AND NOT IOS AND NOT XROS
   VERIFY HAVE_LAPACK)
 OCV_OPTION(WITH_ITT "Include Intel ITT support" ON
   VISIBLE_IF NOT APPLE_FRAMEWORK
diff -ruN opencv-4.9.0/modules/core/include/opencv2/core/fast_math.hpp opencv-4.9.0-patch/modules/core/include/opencv2/core/fast_math.hpp
--- opencv-4.9.0/modules/core/include/opencv2/core/fast_math.hpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/core/include/opencv2/core/fast_math.hpp	2023-12-31 10:47:15.700853336 +0900
@@ -89,7 +89,6 @@
     #define ARM_ROUND(_value, _asm_string) \
         int res; \
         float temp; \
-        CV_UNUSED(temp); \
         __asm__(_asm_string : [res] "=r" (res), [temp] "=w" (temp) : [value] "w" (_value)); \
         return res
     // 2. version for double
diff -ruN opencv-4.9.0/modules/core/include/opencv2/core/utils/instrumentation.hpp opencv-4.9.0-patch/modules/core/include/opencv2/core/utils/instrumentation.hpp
--- opencv-4.9.0/modules/core/include/opencv2/core/utils/instrumentation.hpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/core/include/opencv2/core/utils/instrumentation.hpp	2023-12-31 10:47:15.700853336 +0900
@@ -92,7 +92,7 @@
     double getTotalMs()   const { return ((double)m_ticksTotal / cv::getTickFrequency()) * 1000; }
     double getMeanMs()    const { return (((double)m_ticksTotal/m_counter) / cv::getTickFrequency()) * 1000; }
 };
-bool operator==(const NodeData& lhs, const NodeData& rhs);
+CV_EXPORTS bool operator==(const NodeData& lhs, const NodeData& rhs);
 
 typedef Node<NodeData> InstrNode;
 
diff -ruN opencv-4.9.0/modules/core/src/system.cpp opencv-4.9.0-patch/modules/core/src/system.cpp
--- opencv-4.9.0/modules/core/src/system.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/core/src/system.cpp	2023-12-31 10:47:15.700853336 +0900
@@ -2464,7 +2464,7 @@
 NodeData::~NodeData()
 {
 }
-bool operator==(const NodeData& left, const NodeData& right)
+CV_EXPORTS bool operator==(const NodeData& left, const NodeData& right)
 {
     if(left.m_lineNum == right.m_lineNum && left.m_funName == right.m_funName && left.m_fileName == right.m_fileName)
     {
diff -ruN opencv-4.9.0/modules/dnn/include/opencv2/dnn/dnn.hpp opencv-4.9.0-patch/modules/dnn/include/opencv2/dnn/dnn.hpp
--- opencv-4.9.0/modules/dnn/include/opencv2/dnn/dnn.hpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/include/opencv2/dnn/dnn.hpp	2023-12-31 10:47:15.701853338 +0900
@@ -155,7 +155,7 @@
    /**
     * @brief Derivatives of this class encapsulates functions of certain backends.
     */
-    class BackendNode
+    class CV_EXPORTS BackendNode
     {
     public:
         explicit BackendNode(int backendId);
@@ -380,7 +380,7 @@
         * Layer don't use own Halide::Func members because we can have applied
         * layers fusing. In this way the fused function should be scheduled.
         */
-        virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+        virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                           const std::vector<Mat*> &inputs,
                                           const std::vector<Mat> &outputs,
                                           int targetId) const;
@@ -409,7 +409,7 @@
          * @param[in] top Next layer to be fused.
          * @returns True if fusion was performed.
          */
-        virtual bool tryFuse(Ptr<Layer>& top);
+        virtual bool tryFuse(const Ptr<Layer>& top);
 
         /**
          * @brief Returns parameters of layers with channel-wise multiplication and addition.
diff -ruN opencv-4.9.0/modules/dnn/src/int8layers/batch_norm_layer.cpp opencv-4.9.0-patch/modules/dnn/src/int8layers/batch_norm_layer.cpp
--- opencv-4.9.0/modules/dnn/src/int8layers/batch_norm_layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/int8layers/batch_norm_layer.cpp	2023-12-31 10:47:15.701853338 +0900
@@ -59,7 +59,7 @@
         zeropoint = output_zp;
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Mat w_, b_;
         top->getScaleShift(w_, b_);
diff -ruN opencv-4.9.0/modules/dnn/src/int8layers/convolution_layer.cpp opencv-4.9.0-patch/modules/dnn/src/int8layers/convolution_layer.cpp
--- opencv-4.9.0/modules/dnn/src/int8layers/convolution_layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/int8layers/convolution_layer.cpp	2023-12-31 10:47:15.701853338 +0900
@@ -134,7 +134,7 @@
                (dilation.height == 1 && dilation.width == 1);
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Mat w, b;
         top->getScaleShift(w, b);
@@ -292,7 +292,7 @@
         return false;
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         return BaseConvolutionLayerInt8Impl::tryFuse(top);
     }
diff -ruN opencv-4.9.0/modules/dnn/src/int8layers/softmax_layer.cpp opencv-4.9.0-patch/modules/dnn/src/int8layers/softmax_layer.cpp
--- opencv-4.9.0/modules/dnn/src/int8layers/softmax_layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/int8layers/softmax_layer.cpp	2023-12-31 10:47:15.702853340 +0900
@@ -95,7 +95,7 @@
             backendId == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH;
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Ptr<DequantizeLayer> dequantize_layer = top.dynamicCast<DequantizeLayer>();
         return !dequantize_layer.empty() && preferableTarget != DNN_TARGET_OPENCL_FP16;
diff -ruN opencv-4.9.0/modules/dnn/src/layer.cpp opencv-4.9.0-patch/modules/dnn/src/layer.cpp
--- opencv-4.9.0/modules/dnn/src/layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/layer.cpp	2023-12-31 10:47:15.702853340 +0900
@@ -99,7 +99,7 @@
 }
 
 bool Layer::setActivation(const Ptr<ActivationLayer>&) { return false; }
-bool Layer::tryFuse(Ptr<Layer>&) { return false; }
+bool Layer::tryFuse(const Ptr<Layer>&) { return false; }
 void Layer::getScaleShift(Mat& scale, Mat& shift) const
 {
     scale = Mat();
diff -ruN opencv-4.9.0/modules/dnn/src/layers/batch_norm_layer.cpp opencv-4.9.0-patch/modules/dnn/src/layers/batch_norm_layer.cpp
--- opencv-4.9.0/modules/dnn/src/layers/batch_norm_layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/layers/batch_norm_layer.cpp	2023-12-31 10:47:15.702853340 +0900
@@ -121,7 +121,7 @@
         shift = bias_;
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Mat w, b;
         top->getScaleShift(w, b);
diff -ruN opencv-4.9.0/modules/dnn/src/layers/convolution_layer.cpp opencv-4.9.0-patch/modules/dnn/src/layers/convolution_layer.cpp
--- opencv-4.9.0/modules/dnn/src/layers/convolution_layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/layers/convolution_layer.cpp	2023-12-31 10:47:15.702853340 +0900
@@ -177,7 +177,7 @@
                (dilation.height == 1 && dilation.width == 1);
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         if (fusedAdd)   // If the Conv layer has fused Add layer, it cannot fuse other layers.
             return false;
@@ -200,7 +200,7 @@
 
     virtual void fuseWeights(const Mat& w_, const Mat& b_) = 0;
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
@@ -565,7 +565,7 @@
         return fusedActivation;
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         if (fusedAdd)   // If the Conv layer has fused Add layer, it cannot fuse other layers.
             return false;
diff -ruN opencv-4.9.0/modules/dnn/src/layers/elementwise_layers.cpp opencv-4.9.0-patch/modules/dnn/src/layers/elementwise_layers.cpp
--- opencv-4.9.0/modules/dnn/src/layers/elementwise_layers.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/layers/elementwise_layers.cpp	2023-12-31 10:47:15.703853341 +0900
@@ -217,7 +217,7 @@
 #endif
 
 
-    virtual bool tryFuse(Ptr<dnn::Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<dnn::Layer>& top) CV_OVERRIDE
     {
         return func.tryFuse(top);
     }
@@ -319,7 +319,7 @@
 {
     void finalize() {}
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 
@@ -2371,7 +2371,7 @@
     }
 #endif
 
-    bool tryFuse(Ptr<dnn::Layer>& top)
+    bool tryFuse(const Ptr<dnn::Layer>& top)
     {
         if (power != 1.0f && shift != 0.0f)
             return false;
diff -ruN opencv-4.9.0/modules/dnn/src/layers/lrn_layer.cpp opencv-4.9.0-patch/modules/dnn/src/layers/lrn_layer.cpp
--- opencv-4.9.0/modules/dnn/src/layers/lrn_layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/layers/lrn_layer.cpp	2023-12-31 10:47:15.703853341 +0900
@@ -402,7 +402,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
diff -ruN opencv-4.9.0/modules/dnn/src/layers/not_implemented_layer.cpp opencv-4.9.0-patch/modules/dnn/src/layers/not_implemented_layer.cpp
--- opencv-4.9.0/modules/dnn/src/layers/not_implemented_layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/layers/not_implemented_layer.cpp	2023-12-31 10:47:15.703853341 +0900
@@ -108,7 +108,7 @@
         CV_Error(Error::StsNotImplemented, msg);
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
@@ -126,7 +126,7 @@
         CV_Error(Error::StsNotImplemented, msg);
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         CV_Error(Error::StsNotImplemented, msg);
     }
diff -ruN opencv-4.9.0/modules/dnn/src/layers/pooling_layer.cpp opencv-4.9.0-patch/modules/dnn/src/layers/pooling_layer.cpp
--- opencv-4.9.0/modules/dnn/src/layers/pooling_layer.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/layers/pooling_layer.cpp	2023-12-31 10:47:15.704853343 +0900
@@ -1281,7 +1281,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
diff -ruN opencv-4.9.0/modules/dnn/src/op_halide.cpp opencv-4.9.0-patch/modules/dnn/src/op_halide.cpp
--- opencv-4.9.0/modules/dnn/src/op_halide.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/dnn/src/op_halide.cpp	2023-12-31 10:47:15.704853343 +0900
@@ -351,7 +351,7 @@
 CV__DNN_INLINE_NS_BEGIN
 
 
-void Layer::applyHalideScheduler(Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
+void Layer::applyHalideScheduler(const Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
                                  const std::vector<Mat> &outputs, int targetId) const
 {
 #ifndef HAVE_HALIDE
diff -ruN opencv-4.9.0/modules/flann/include/opencv2/flann/miniflann.hpp opencv-4.9.0-patch/modules/flann/include/opencv2/flann/miniflann.hpp
--- opencv-4.9.0/modules/flann/include/opencv2/flann/miniflann.hpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/flann/include/opencv2/flann/miniflann.hpp	2023-12-31 10:47:15.704853343 +0900
@@ -91,10 +91,6 @@
                 std::vector<double>& numValues) const;
 
     void* params;
-
-private:
-    IndexParams(const IndexParams &); // copy disabled
-    IndexParams& operator=(const IndexParams &); // assign disabled
 };
 
 struct CV_EXPORTS KDTreeIndexParams : public IndexParams
diff -ruN opencv-4.9.0/modules/imgproc/src/resize.cpp opencv-4.9.0-patch/modules/imgproc/src/resize.cpp
--- opencv-4.9.0/modules/imgproc/src/resize.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/imgproc/src/resize.cpp	2023-12-31 10:47:15.705853345 +0900
@@ -858,11 +858,11 @@
     void(*hResize)(ET* src, int cn, int *ofst, fixedpoint* m, fixedpoint* dst, int dst_min, int dst_max, int dst_width);
     switch (cn)
     {
-    case  1: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 1> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 1>; break;
-    case  2: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 2> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 2>; break;
-    case  3: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 3> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 3>; break;
-    case  4: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 4> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 4>; break;
-    default: hResize = src_width > interpolation::len ? hlineResize<ET, fixedpoint, interpolation::len, true>      : hlineResize<ET, fixedpoint, interpolation::len, false>     ; break;
+    case  1: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 1>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 1>; break;
+    case  2: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 2>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 2>; break;
+    case  3: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 3>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 3>; break;
+    case  4: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 4>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 4>; break;
+    default: if (src_width > interpolation::len) hResize = hlineResize<ET, fixedpoint, interpolation::len, true>     ; else hResize = hlineResize<ET, fixedpoint, interpolation::len, false>     ; break;
     }
 
     interpolation interp_x(inv_scale_x, src_width, dst_width);
diff -ruN opencv-4.9.0/modules/java/CMakeLists.txt opencv-4.9.0-patch/modules/java/CMakeLists.txt
--- opencv-4.9.0/modules/java/CMakeLists.txt	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/java/CMakeLists.txt	2023-12-31 10:47:15.705853345 +0900
@@ -3,15 +3,6 @@
   add_subdirectory(generator)
 endif()
 
-if(APPLE_FRAMEWORK OR WINRT
-    OR NOT PYTHON_DEFAULT_AVAILABLE
-    OR NOT (ANT_EXECUTABLE OR Java_FOUND OR ANDROID_PROJECTS_BUILD_TYPE STREQUAL "GRADLE")
-    OR NOT (JNI_FOUND OR (ANDROID AND (NOT DEFINED ANDROID_NATIVE_API_LEVEL OR ANDROID_NATIVE_API_LEVEL GREATER 7)))
-    OR BUILD_opencv_world
-    )
-  ocv_module_disable(java)
-endif()
-
 set(the_description "The java bindings")
 ocv_add_module(java BINDINGS opencv_core opencv_imgproc PRIVATE_REQUIRED opencv_java_bindings_generator)
 
@@ -58,11 +49,6 @@
 
 
 add_subdirectory(jni)  # generates ${the_module} target (${the_module}_jni doesn't work properly with Android non-gradle samples)
-if(ANDROID)
-  add_subdirectory(android_sdk)  # generates ${the_module}_android target
-else()
-  add_subdirectory(jar)  # generates ${the_module}_jar target
-endif()
 
 if(BUILD_TESTS)
   if(ANDROID)
diff -ruN opencv-4.9.0/modules/java/common.cmake opencv-4.9.0-patch/modules/java/common.cmake
--- opencv-4.9.0/modules/java/common.cmake	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/java/common.cmake	2023-12-31 10:47:15.705853345 +0900
@@ -1,10 +1,3 @@
-if(ANDROID)
-  ocv_update(OPENCV_JAVA_LIB_NAME_SUFFIX "${OPENCV_VERSION_MAJOR}")
-  ocv_update(JAVA_INSTALL_ROOT "sdk/java")
-else()
-  ocv_update(OPENCV_JAVA_LIB_NAME_SUFFIX "${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}")
-endif()
-
 if(MSVC)
   ocv_warnings_disable(CMAKE_CXX_FLAGS /wd4996)
 else()
diff -ruN opencv-4.9.0/modules/java/generator/CMakeLists.txt opencv-4.9.0-patch/modules/java/generator/CMakeLists.txt
--- opencv-4.9.0/modules/java/generator/CMakeLists.txt	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/java/generator/CMakeLists.txt	2023-12-31 10:47:15.705853345 +0900
@@ -5,9 +5,6 @@
 set(OPENCV_JAVA_SIGNATURES_FILE "${CMAKE_CURRENT_BINARY_DIR}/opencv_java_signatures.json" CACHE INTERNAL "")
 set(OPENCV_JAVA_BINDINGS_DIR "${CMAKE_CURRENT_BINARY_DIR}" CACHE INTERNAL "")
 
-file(REMOVE_RECURSE "${OPENCV_JAVA_BINDINGS_DIR}/gen")
-file(REMOVE "${OPENCV_DEPHELPER}/gen_opencv_java_source")  # force re-run after CMake
-
 # This file is included from a subdirectory
 set(JAVA_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/..")
 include(${JAVA_SOURCE_DIR}/common.cmake)
@@ -75,7 +72,6 @@
 endif()
 if(NOT "${__content}" STREQUAL "${__config_str}")
   file(WRITE "${CONFIG_FILE}" "${__config_str}")
-  file(REMOVE "${OPENCV_DEPHELPER}/gen_opencv_java_source")
 endif()
 unset(__config_str)
 
diff -ruN opencv-4.9.0/modules/java/jni/CMakeLists.txt opencv-4.9.0-patch/modules/java/jni/CMakeLists.txt
--- opencv-4.9.0/modules/java/jni/CMakeLists.txt	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/java/jni/CMakeLists.txt	2023-12-31 10:47:15.705853345 +0900
@@ -25,6 +25,9 @@
 elseif(APPLE)
   set(CMAKE_SHARED_MODULE_SUFFIX ".dylib")  # Java is not able to load .so files
 endif()
+if(NOT BUILD_SHARED_LIBS)
+  set(__type STATIC)
+endif()
 ocv_add_library(${the_module} ${__type}
     ${handwritten_h_sources} ${handwritten_cpp_sources} ${generated_cpp_sources}
     ${copied_files}
@@ -62,6 +65,8 @@
   ocv_target_link_libraries(${the_module} PRIVATE ${__deps} ${OPENCV_LINKER_LIBS})
 endif()
 
+string(REPLACE "<CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME>" "" CMAKE_CXX_CREATE_SHARED_MODULE "${CMAKE_CXX_CREATE_SHARED_MODULE}")
+
 # Additional target properties
 set_target_properties(${the_module} PROPERTIES
     OUTPUT_NAME "${the_module}${OPENCV_JAVA_LIB_NAME_SUFFIX}"
diff -ruN opencv-4.9.0/modules/stitching/include/opencv2/stitching.hpp opencv-4.9.0-patch/modules/stitching/include/opencv2/stitching.hpp
--- opencv-4.9.0/modules/stitching/include/opencv2/stitching.hpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/stitching/include/opencv2/stitching.hpp	2023-12-31 10:47:15.706853347 +0900
@@ -351,12 +351,12 @@
 /**
  * @deprecated use Stitcher::create
  */
-CV_DEPRECATED Ptr<Stitcher> createStitcher(bool try_use_gpu = false);
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcher(bool try_use_gpu = false);
 
 /**
  * @deprecated use Stitcher::create
  */
-CV_DEPRECATED Ptr<Stitcher> createStitcherScans(bool try_use_gpu = false);
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcherScans(bool try_use_gpu = false);
 
 //! @} stitching
 
diff -ruN opencv-4.9.0/modules/stitching/src/stitcher.cpp opencv-4.9.0-patch/modules/stitching/src/stitcher.cpp
--- opencv-4.9.0/modules/stitching/src/stitcher.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/stitching/src/stitcher.cpp	2023-12-31 10:47:15.706853347 +0900
@@ -638,14 +638,14 @@
 }
 
 
-CV_DEPRECATED Ptr<Stitcher> createStitcher(bool /*ignored*/)
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcher(bool /*ignored*/)
 {
     CV_INSTRUMENT_REGION();
 
     return Stitcher::create(Stitcher::PANORAMA);
 }
 
-CV_DEPRECATED Ptr<Stitcher> createStitcherScans(bool /*ignored*/)
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcherScans(bool /*ignored*/)
 {
     CV_INSTRUMENT_REGION();
 
diff -ruN opencv-4.9.0/modules/video/src/tracking/detail/tracker_mil_state.hpp opencv-4.9.0-patch/modules/video/src/tracking/detail/tracker_mil_state.hpp
--- opencv-4.9.0/modules/video/src/tracking/detail/tracker_mil_state.hpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/video/src/tracking/detail/tracker_mil_state.hpp	2023-12-31 10:47:15.706853347 +0900
@@ -20,7 +20,7 @@
     /**
     * Implementation of the target state for TrackerStateEstimatorMILBoosting
     */
-    class TrackerMILTargetState : public TrackerTargetState
+    class CV_EXPORTS TrackerMILTargetState : public TrackerTargetState
     {
 
     public:
diff -ruN opencv-4.9.0/modules/video/src/tracking/detail/tracking_online_mil.cpp opencv-4.9.0-patch/modules/video/src/tracking/detail/tracking_online_mil.cpp
--- opencv-4.9.0/modules/video/src/tracking/detail/tracking_online_mil.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/video/src/tracking/detail/tracking_online_mil.cpp	2023-12-31 10:47:15.706853347 +0900
@@ -339,7 +339,7 @@
     return float(log_p1 - log_p0);
 }
 
-inline std::vector<float> ClfOnlineStump::classifySetF(const Mat& x)
+CV_EXPORTS inline std::vector<float> ClfOnlineStump::classifySetF(const Mat& x)
 {
     std::vector<float> res(x.rows);
 
diff -ruN opencv-4.9.0/modules/video/src/tracking/detail/tracking_online_mil.hpp opencv-4.9.0-patch/modules/video/src/tracking/detail/tracking_online_mil.hpp
--- opencv-4.9.0/modules/video/src/tracking/detail/tracking_online_mil.hpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/video/src/tracking/detail/tracking_online_mil.hpp	2023-12-31 10:47:15.706853347 +0900
@@ -49,7 +49,7 @@
     uint _counter;
 };
 
-class ClfOnlineStump
+class CV_EXPORTS ClfOnlineStump
 {
 public:
     float _mu0, _mu1, _sig0, _sig1;
diff -ruN opencv-4.9.0/modules/videoio/src/cap_avfoundation.mm opencv-4.9.0-patch/modules/videoio/src/cap_avfoundation.mm
--- opencv-4.9.0/modules/videoio/src/cap_avfoundation.mm	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/videoio/src/cap_avfoundation.mm	2023-09-27 19:18:31.000000000 +0900
@@ -61,8 +61,6 @@
 
 #define DISABLE_AUTO_RESTART 999
 
-#if !TARGET_OS_VISION
-
 @interface CaptureDelegate : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate>
 {
     int newFrame;
@@ -127,7 +125,6 @@
         int disableAutoRestart;
 };
 
-#endif
 
 /*****************************************************************************
  *
@@ -163,7 +160,6 @@
     uint32_t  mMode;
     int       mFormat;
 
-    void handleTracks(NSArray<AVAssetTrack *>* tracks, const char* filename);
     bool setupReadingAt(CMTime position);
     IplImage* retrieveFramePixelBuffer();
     int getPreferredOrientationDegrees() const;
@@ -221,8 +217,6 @@
 
 }
 
-#if !TARGET_OS_VISION
-
 cv::Ptr<cv::IVideoCapture> cv::create_AVFoundation_capture_cam(int index)
 {
     CvCaptureCAM* retval = new CvCaptureCAM(index);
@@ -232,8 +226,6 @@
     return 0;
 }
 
-#endif
-
 cv::Ptr<cv::IVideoWriter> cv::create_AVFoundation_writer(const std::string& filename, int fourcc,
                                                          double fps, const cv::Size &frameSize,
                                                          const cv::VideoWriterParameters& params)
@@ -253,8 +245,6 @@
  *
  *****************************************************************************/
 
-#if !TARGET_OS_VISION
-
 CvCaptureCAM::CvCaptureCAM(int cameraNum) {
     mCaptureSession = nil;
     mCaptureDeviceInput = nil;
@@ -783,7 +773,6 @@
 
 @end
 
-#endif
 
 /*****************************************************************************
  *
@@ -822,26 +811,24 @@
         return;
     }
 
-// Available since iOS 15
-#if TARGET_OS_VISION || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED >= 150000)
-    if (@available(iOS 15, visionOS 1, *)) {
-        [mAsset loadTracksWithMediaType:AVMediaTypeVideo completionHandler:^(NSArray<AVAssetTrack *>* tracks, NSError* err) {
-            if (err != nil) {
-                handleTracks(tracks, filename);
-            }
-            [localpool drain];
-        }];
+    NSArray *tracks = [mAsset tracksWithMediaType:AVMediaTypeVideo];
+    if ([tracks count] == 0) {
+        fprintf(stderr, "OpenCV: Couldn't read video stream from file \"%s\"\n", filename);
+        [localpool drain];
+        started = 0;
         return;
-    } else {
-#if !TARGET_OS_VISION
-        NSArray *tracks = [mAsset tracksWithMediaType:AVMediaTypeVideo];
-        handleTracks(tracks, filename);
-#endif
     }
-#else
-    NSArray *tracks = [mAsset tracksWithMediaType:AVMediaTypeVideo];
-    handleTracks(tracks, filename);
-#endif
+
+    mAssetTrack = [tracks[0] retain];
+
+    if ( ! setupReadingAt(kCMTimeZero) ) {
+        fprintf(stderr, "OpenCV: Couldn't read movie file \"%s\"\n", filename);
+        [localpool drain];
+        started = 0;
+        return;
+    }
+
+    started = 1;
     [localpool drain];
 }
 
@@ -863,24 +850,6 @@
     [localpool drain];
 }
 
-void CvCaptureFile::handleTracks(NSArray<AVAssetTrack *>* tracks, const char* filename) {
-    if ([tracks count] == 0) {
-        fprintf(stderr, "OpenCV: Couldn't read video stream from file \"%s\"\n", filename);
-        started = 0;
-        return;
-    }
-
-    mAssetTrack = [tracks[0] retain];
-
-    if ( ! setupReadingAt(kCMTimeZero) ) {
-        fprintf(stderr, "OpenCV: Couldn't read movie file \"%s\"\n", filename);
-        started = 0;
-        return;
-    }
-
-    started = 1;
-}
-
 bool CvCaptureFile::setupReadingAt(CMTime position) {
     if (mAssetReader) {
         if (mAssetReader.status == AVAssetReaderStatusReading) {
@@ -1300,25 +1269,25 @@
         //exception;
     }
 
-    // Three codec supported AVVideoCodecTypeH264 AVVideoCodecTypeJPEG AVVideoCodecTypeHEVC
+    // Three codec supported AVVideoCodecH264 AVVideoCodecJPEG AVVideoCodecTypeHEVC
     // On iPhone 3G H264 is not supported.
     if (fourcc == CV_FOURCC('J','P','E','G') || fourcc == CV_FOURCC('j','p','e','g') ||
             fourcc == CV_FOURCC('M','J','P','G') || fourcc == CV_FOURCC('m','j','p','g')){
-        codec = [AVVideoCodecTypeJPEG copy]; // Use JPEG codec if specified, otherwise H264
+        codec = [AVVideoCodecJPEG copy]; // Use JPEG codec if specified, otherwise H264
     }else if(fourcc == CV_FOURCC('H','2','6','4') || fourcc == CV_FOURCC('a','v','c','1')){
-            codec = [AVVideoCodecTypeH264 copy];
+            codec = [AVVideoCodecH264 copy];
 // Available since iOS 11
-#if TARGET_OS_VISION || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED >= 110000)
+#if defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED >= 110000
     }else if(fourcc == CV_FOURCC('H','2','6','5') || fourcc == CV_FOURCC('h','v','c','1') ||
             fourcc == CV_FOURCC('H','E','V','C') || fourcc == CV_FOURCC('h','e','v','c')){
-        if (@available(iOS 11, visionOS 1, *)) {
+        if (@available(iOS 11, *)) {
             codec = [AVVideoCodecTypeHEVC copy];
         } else {
-            codec = [AVVideoCodecTypeH264 copy];
+            codec = [AVVideoCodecH264 copy];
         }
 #endif
     }else{
-        codec = [AVVideoCodecTypeH264 copy]; // default canonical H264.
+        codec = [AVVideoCodecH264 copy]; // default canonical H264.
     }
 
     //NSLog(@"Path: %@", path);
@@ -1380,17 +1349,17 @@
     NSAutoreleasePool* localpool = [[NSAutoreleasePool alloc] init];
 
     [mMovieWriterInput markAsFinished];
-    [mMovieWriter finishWritingWithCompletionHandler:^() {
-        [mMovieWriter release];
-        [mMovieWriterInput release];
-        [mMovieWriterAdaptor release];
-        [path release];
-        [codec release];
-        [fileType release];
-        cvReleaseImage(&argbimage);
+    [mMovieWriter finishWriting];
+    [mMovieWriter release];
+    [mMovieWriterInput release];
+    [mMovieWriterAdaptor release];
+    [path release];
+    [codec release];
+    [fileType release];
+    cvReleaseImage(&argbimage);
+
+    [localpool drain];
 
-        [localpool drain];
-    }];
 }
 
 bool CvVideoWriter_AVFoundation::writeFrame(const IplImage* iplimage) {
diff -ruN opencv-4.9.0/modules/videoio/src/cap_v4l.cpp opencv-4.9.0-patch/modules/videoio/src/cap_v4l.cpp
--- opencv-4.9.0/modules/videoio/src/cap_v4l.cpp	2023-12-28 01:46:55.000000000 +0900
+++ opencv-4.9.0-patch/modules/videoio/src/cap_v4l.cpp	2023-12-31 10:47:15.707853349 +0900
@@ -1944,8 +1944,6 @@
         return V4L2_CID_FOCUS_ABSOLUTE;
     case cv::CAP_PROP_GUID:
         return -1;
-    case cv::CAP_PROP_ISO_SPEED:
-        return V4L2_CID_ISO_SENSITIVITY;
     case cv::CAP_PROP_BACKLIGHT:
         return V4L2_CID_BACKLIGHT_COMPENSATION;
     case cv::CAP_PROP_PAN:
@@ -1962,10 +1960,6 @@
         return -1;
     case cv::CAP_PROP_AUTOFOCUS:
         return V4L2_CID_FOCUS_AUTO;
-    case cv::CAP_PROP_SAR_NUM:
-        return V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT;
-    case cv::CAP_PROP_SAR_DEN:
-        return V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH;
     case CAP_PROP_AUTO_WB:
         return V4L2_CID_AUTO_WHITE_BALANCE;
     case CAP_PROP_WB_TEMPERATURE:
