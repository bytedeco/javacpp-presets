diff -ruN opencv-4.5.1/3rdparty/libpng/pngpriv.h opencv-4.5.1-patch/3rdparty/libpng/pngpriv.h
--- opencv-4.5.1/3rdparty/libpng/pngpriv.h	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/3rdparty/libpng/pngpriv.h	2020-12-29 23:58:58.599331412 +0900
@@ -195,13 +195,13 @@
 #  endif
 #endif
 
-#ifndef PNG_POWERPC_VSX_OPT
-#  if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)
-#     define PNG_POWERPC_VSX_OPT 2
-#  else
-#     define PNG_POWERPC_VSX_OPT 0
-#  endif
-#endif
+//#ifndef PNG_POWERPC_VSX_OPT
+//#  if defined(__PPC64__) && defined(__ALTIVEC__) && defined(__VSX__)
+//#     define PNG_POWERPC_VSX_OPT 2
+//#  else
+//#     define PNG_POWERPC_VSX_OPT 0
+//#  endif
+//#endif
 
 #ifndef PNG_INTEL_SSE_OPT
 #   ifdef PNG_INTEL_SSE
diff -ruN opencv-4.5.1/CMakeLists.txt opencv-4.5.1-patch/CMakeLists.txt
--- opencv-4.5.1/CMakeLists.txt	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/CMakeLists.txt	2020-12-29 23:58:58.600331416 +0900
@@ -7,12 +7,12 @@
 # ----------------------------------------------------------------------------
 
 # Disable in-source builds to prevent source tree corruption.
-if(" ${CMAKE_SOURCE_DIR}" STREQUAL " ${CMAKE_BINARY_DIR}")
-  message(FATAL_ERROR "
-FATAL: In-source builds are not allowed.
-       You should create a separate directory for build files.
-")
-endif()
+#if(" ${CMAKE_SOURCE_DIR}" STREQUAL " ${CMAKE_BINARY_DIR}")
+#  message(FATAL_ERROR "
+#FATAL: In-source builds are not allowed.
+#       You should create a separate directory for build files.
+#")
+#endif()
 
 
 include(cmake/OpenCVMinDepVersions.cmake)
diff -ruN opencv-4.5.1/modules/core/include/opencv2/core/fast_math.hpp opencv-4.5.1-patch/modules/core/include/opencv2/core/fast_math.hpp
--- opencv-4.5.1/modules/core/include/opencv2/core/fast_math.hpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/core/include/opencv2/core/fast_math.hpp	2020-12-29 23:58:58.601331420 +0900
@@ -86,7 +86,6 @@
     #define ARM_ROUND(_value, _asm_string) \
         int res; \
         float temp; \
-        CV_UNUSED(temp); \
         __asm__(_asm_string : [res] "=r" (res), [temp] "=w" (temp) : [value] "w" (_value)); \
         return res
     // 2. version for double
diff -ruN opencv-4.5.1/modules/core/include/opencv2/core/utils/instrumentation.hpp opencv-4.5.1-patch/modules/core/include/opencv2/core/utils/instrumentation.hpp
--- opencv-4.5.1/modules/core/include/opencv2/core/utils/instrumentation.hpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/core/include/opencv2/core/utils/instrumentation.hpp	2020-12-29 23:58:58.601331420 +0900
@@ -92,7 +92,7 @@
     double getTotalMs()   const { return ((double)m_ticksTotal / cv::getTickFrequency()) * 1000; }
     double getMeanMs()    const { return (((double)m_ticksTotal/m_counter) / cv::getTickFrequency()) * 1000; }
 };
-bool operator==(const NodeData& lhs, const NodeData& rhs);
+CV_EXPORTS bool operator==(const NodeData& lhs, const NodeData& rhs);
 
 typedef Node<NodeData> InstrNode;
 
diff -ruN opencv-4.5.1/modules/core/src/system.cpp opencv-4.5.1-patch/modules/core/src/system.cpp
--- opencv-4.5.1/modules/core/src/system.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/core/src/system.cpp	2020-12-29 23:58:58.602331424 +0900
@@ -2131,7 +2131,7 @@
 NodeData::~NodeData()
 {
 }
-bool operator==(const NodeData& left, const NodeData& right)
+CV_EXPORTS bool operator==(const NodeData& left, const NodeData& right)
 {
     if(left.m_lineNum == right.m_lineNum && left.m_funName == right.m_funName && left.m_fileName == right.m_fileName)
     {
diff -ruN opencv-4.5.1/modules/dnn/include/opencv2/dnn/dnn.hpp opencv-4.5.1-patch/modules/dnn/include/opencv2/dnn/dnn.hpp
--- opencv-4.5.1/modules/dnn/include/opencv2/dnn/dnn.hpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/dnn/include/opencv2/dnn/dnn.hpp	2020-12-29 23:58:58.604331432 +0900
@@ -118,7 +118,7 @@
    /**
     * @brief Derivatives of this class encapsulates functions of certain backends.
     */
-    class BackendNode
+    class CV_EXPORTS BackendNode
     {
     public:
         BackendNode(int backendId);
@@ -310,7 +310,7 @@
         * Layer don't use own Halide::Func members because we can have applied
         * layers fusing. In this way the fused function should be scheduled.
         */
-        virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+        virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                           const std::vector<Mat*> &inputs,
                                           const std::vector<Mat> &outputs,
                                           int targetId) const;
@@ -339,7 +339,7 @@
          * @param[in] top Next layer to be fused.
          * @returns True if fusion was performed.
          */
-        virtual bool tryFuse(Ptr<Layer>& top);
+        virtual bool tryFuse(const Ptr<Layer>& top);
 
         /**
          * @brief Returns parameters of layers with channel-wise multiplication and addition.
diff -ruN opencv-4.5.1/modules/dnn/src/dnn.cpp opencv-4.5.1-patch/modules/dnn/src/dnn.cpp
--- opencv-4.5.1/modules/dnn/src/dnn.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/dnn/src/dnn.cpp	2020-12-29 23:58:58.606331440 +0900
@@ -5064,7 +5064,7 @@
     return Ptr<BackendNode>();
 }
 
-void Layer::applyHalideScheduler(Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
+void Layer::applyHalideScheduler(const Ptr<BackendNode>& node, const std::vector<Mat*> &inputs,
                                  const std::vector<Mat> &outputs, int targetId) const
 {
 #ifdef  HAVE_HALIDE
@@ -5141,7 +5141,7 @@
 }
 
 bool Layer::setActivation(const Ptr<ActivationLayer>&) { return false; }
-bool Layer::tryFuse(Ptr<Layer>&) { return false; }
+bool Layer::tryFuse(const Ptr<Layer>&) { return false; }
 void Layer::getScaleShift(Mat& scale, Mat& shift) const
 {
     scale = Mat();
diff -ruN opencv-4.5.1/modules/dnn/src/layers/batch_norm_layer.cpp opencv-4.5.1-patch/modules/dnn/src/layers/batch_norm_layer.cpp
--- opencv-4.5.1/modules/dnn/src/layers/batch_norm_layer.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/dnn/src/layers/batch_norm_layer.cpp	2020-12-29 23:58:58.607331444 +0900
@@ -117,7 +117,7 @@
         shift = bias_;
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Mat w, b;
         top->getScaleShift(w, b);
diff -ruN opencv-4.5.1/modules/dnn/src/layers/convolution_layer.cpp opencv-4.5.1-patch/modules/dnn/src/layers/convolution_layer.cpp
--- opencv-4.5.1/modules/dnn/src/layers/convolution_layer.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/dnn/src/layers/convolution_layer.cpp	2020-12-29 23:58:58.609331452 +0900
@@ -173,7 +173,7 @@
                (dilation.height == 1 && dilation.width == 1);
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
         Ptr<BlankLayer> blank_layer = top.dynamicCast<BlankLayer>();
         if (blank_layer)
@@ -193,7 +193,7 @@
 
     virtual void fuseWeights(const Mat& w_, const Mat& b_) = 0;
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
@@ -554,7 +554,7 @@
         return !activ.empty();
     }
 
-    virtual bool tryFuse(Ptr<Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<Layer>& top) CV_OVERRIDE
     {
 #ifdef HAVE_CUDA
         if(IS_DNN_CUDA_TARGET(preferableTarget))
diff -ruN opencv-4.5.1/modules/dnn/src/layers/elementwise_layers.cpp opencv-4.5.1-patch/modules/dnn/src/layers/elementwise_layers.cpp
--- opencv-4.5.1/modules/dnn/src/layers/elementwise_layers.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/dnn/src/layers/elementwise_layers.cpp	2020-12-29 23:58:58.610331457 +0900
@@ -189,7 +189,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual bool tryFuse(Ptr<dnn::Layer>& top) CV_OVERRIDE
+    virtual bool tryFuse(const Ptr<dnn::Layer>& top) CV_OVERRIDE
     {
         return func.tryFuse(top);
     }
@@ -285,7 +285,7 @@
 {
     void finalize() {}
 
-    bool tryFuse(Ptr<dnn::Layer>&) { return false; }
+    bool tryFuse(const Ptr<dnn::Layer>&) { return false; }
 
     void getScaleShift(Mat&, Mat&) const {}
 };
@@ -1371,7 +1371,7 @@
     }
 #endif  // HAVE_VULKAN
 
-    bool tryFuse(Ptr<dnn::Layer>& top)
+    bool tryFuse(const Ptr<dnn::Layer>& top)
     {
         if (power != 1.0f && shift != 0.0f)
             return false;
diff -ruN opencv-4.5.1/modules/dnn/src/layers/lrn_layer.cpp opencv-4.5.1-patch/modules/dnn/src/layers/lrn_layer.cpp
--- opencv-4.5.1/modules/dnn/src/layers/lrn_layer.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/dnn/src/layers/lrn_layer.cpp	2020-12-29 23:58:58.611331461 +0900
@@ -412,7 +412,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
diff -ruN opencv-4.5.1/modules/dnn/src/layers/pooling_layer.cpp opencv-4.5.1-patch/modules/dnn/src/layers/pooling_layer.cpp
--- opencv-4.5.1/modules/dnn/src/layers/pooling_layer.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/dnn/src/layers/pooling_layer.cpp	2020-12-29 23:58:58.613331469 +0900
@@ -1181,7 +1181,7 @@
         return Ptr<BackendNode>();
     }
 
-    virtual void applyHalideScheduler(Ptr<BackendNode>& node,
+    virtual void applyHalideScheduler(const Ptr<BackendNode>& node,
                                       const std::vector<Mat*> &inputs,
                                       const std::vector<Mat> &outputs,
                                       int targetId) const CV_OVERRIDE
diff -ruN opencv-4.5.1/modules/flann/include/opencv2/flann/miniflann.hpp opencv-4.5.1-patch/modules/flann/include/opencv2/flann/miniflann.hpp
--- opencv-4.5.1/modules/flann/include/opencv2/flann/miniflann.hpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/flann/include/opencv2/flann/miniflann.hpp	2020-12-29 23:58:58.614331473 +0900
@@ -91,10 +91,6 @@
                 std::vector<double>& numValues) const;
 
     void* params;
-
-private:
-    IndexParams(const IndexParams &); // copy disabled
-    IndexParams& operator=(const IndexParams &); // assign disabled
 };
 
 struct CV_EXPORTS KDTreeIndexParams : public IndexParams
diff -ruN opencv-4.5.1/modules/imgproc/src/resize.cpp opencv-4.5.1-patch/modules/imgproc/src/resize.cpp
--- opencv-4.5.1/modules/imgproc/src/resize.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/imgproc/src/resize.cpp	2020-12-29 23:58:58.617331485 +0900
@@ -858,11 +858,11 @@
     void(*hResize)(ET* src, int cn, int *ofst, fixedpoint* m, fixedpoint* dst, int dst_min, int dst_max, int dst_width);
     switch (cn)
     {
-    case  1: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 1> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 1>; break;
-    case  2: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 2> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 2>; break;
-    case  3: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 3> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 3>; break;
-    case  4: hResize = src_width > interpolation::len ? hlineResizeCn<ET, fixedpoint, interpolation::len, true, 4> : hlineResizeCn<ET, fixedpoint, interpolation::len, false, 4>; break;
-    default: hResize = src_width > interpolation::len ? hlineResize<ET, fixedpoint, interpolation::len, true>      : hlineResize<ET, fixedpoint, interpolation::len, false>     ; break;
+    case  1: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 1>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 1>; break;
+    case  2: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 2>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 2>; break;
+    case  3: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 3>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 3>; break;
+    case  4: if (src_width > interpolation::len) hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, true, 4>; else hResize = hlineResizeCn<ET, fixedpoint, interpolation::len, false, 4>; break;
+    default: if (src_width > interpolation::len) hResize = hlineResize<ET, fixedpoint, interpolation::len, true>     ; else hResize = hlineResize<ET, fixedpoint, interpolation::len, false>     ; break;
     }
 
     interpolation interp_x(inv_scale_x, src_width, dst_width);
diff -ruN opencv-4.5.1/modules/java/CMakeLists.txt opencv-4.5.1-patch/modules/java/CMakeLists.txt
--- opencv-4.5.1/modules/java/CMakeLists.txt	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/java/CMakeLists.txt	2020-12-29 23:58:58.618331489 +0900
@@ -3,13 +3,6 @@
   add_subdirectory(generator)
 endif()
 
-if(APPLE_FRAMEWORK OR WINRT OR NOT PYTHON_DEFAULT_AVAILABLE OR NOT (ANT_EXECUTABLE OR ANDROID_PROJECTS_BUILD_TYPE STREQUAL "GRADLE")
-    OR NOT (JNI_FOUND OR (ANDROID AND (NOT DEFINED ANDROID_NATIVE_API_LEVEL OR ANDROID_NATIVE_API_LEVEL GREATER 7)))
-    OR BUILD_opencv_world
-    )
-  ocv_module_disable(java)
-endif()
-
 set(the_description "The java bindings")
 ocv_add_module(java BINDINGS opencv_core opencv_imgproc PRIVATE_REQUIRED opencv_java_bindings_generator)
 
@@ -56,11 +49,6 @@
 
 
 add_subdirectory(jni)  # generates ${the_module} target (${the_module}_jni doesn't work properly with Android non-gradle samples)
-if(ANDROID)
-  add_subdirectory(android_sdk)  # generates ${the_module}_android target
-else()
-  add_subdirectory(jar)  # generates ${the_module}_jar target
-endif()
 
 if(BUILD_TESTS)
   if(ANDROID)
diff -ruN opencv-4.5.1/modules/java/common.cmake opencv-4.5.1-patch/modules/java/common.cmake
--- opencv-4.5.1/modules/java/common.cmake	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/java/common.cmake	2020-12-29 23:58:58.619331493 +0900
@@ -1,10 +1,3 @@
-if(ANDROID)
-  ocv_update(OPENCV_JAVA_LIB_NAME_SUFFIX "${OPENCV_VERSION_MAJOR}")
-  ocv_update(JAVA_INSTALL_ROOT "sdk/java")
-else()
-  ocv_update(OPENCV_JAVA_LIB_NAME_SUFFIX "${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}")
-endif()
-
 if(MSVC)
   ocv_warnings_disable(CMAKE_CXX_FLAGS /wd4996)
 else()
diff -ruN opencv-4.5.1/modules/java/generator/CMakeLists.txt opencv-4.5.1-patch/modules/java/generator/CMakeLists.txt
--- opencv-4.5.1/modules/java/generator/CMakeLists.txt	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/java/generator/CMakeLists.txt	2020-12-29 23:58:58.620331497 +0900
@@ -5,9 +5,6 @@
 set(OPENCV_JAVA_SIGNATURES_FILE "${CMAKE_CURRENT_BINARY_DIR}/opencv_java_signatures.json" CACHE INTERNAL "")
 set(OPENCV_JAVA_BINDINGS_DIR "${CMAKE_CURRENT_BINARY_DIR}" CACHE INTERNAL "")
 
-file(REMOVE_RECURSE "${OPENCV_JAVA_BINDINGS_DIR}/gen")
-file(REMOVE "${OPENCV_DEPHELPER}/gen_opencv_java_source")  # force re-run after CMake
-
 # This file is included from a subdirectory
 set(JAVA_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/..")
 include(${JAVA_SOURCE_DIR}/common.cmake)
@@ -75,7 +72,6 @@
 endif()
 if(NOT "${__content}" STREQUAL "${__config_str}")
   file(WRITE "${CONFIG_FILE}" "${__config_str}")
-  file(REMOVE "${OPENCV_DEPHELPER}/gen_opencv_java_source")
 endif()
 unset(__config_str)
 
diff -ruN opencv-4.5.1/modules/java/jni/CMakeLists.txt opencv-4.5.1-patch/modules/java/jni/CMakeLists.txt
--- opencv-4.5.1/modules/java/jni/CMakeLists.txt	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/java/jni/CMakeLists.txt	2020-12-29 23:58:58.621331501 +0900
@@ -25,6 +25,9 @@
 elseif(APPLE)
   set(CMAKE_SHARED_MODULE_SUFFIX ".dylib")  # Java is not able to load .so files
 endif()
+if(NOT BUILD_SHARED_LIBS)
+  set(__type STATIC)
+endif()
 ocv_add_library(${the_module} ${__type}
     ${handwritten_h_sources} ${handwritten_cpp_sources} ${generated_cpp_sources}
     ${copied_files}
@@ -62,6 +65,8 @@
   ocv_target_link_libraries(${the_module} PRIVATE ${__deps} ${OPENCV_LINKER_LIBS})
 endif()
 
+string(REPLACE "<CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME>" "" CMAKE_CXX_CREATE_SHARED_MODULE "${CMAKE_CXX_CREATE_SHARED_MODULE}")
+
 # Additional target properties
 set_target_properties(${the_module} PROPERTIES
     OUTPUT_NAME "${the_module}${OPENCV_JAVA_LIB_NAME_SUFFIX}"
diff -ruN opencv-4.5.1/modules/stitching/include/opencv2/stitching.hpp opencv-4.5.1-patch/modules/stitching/include/opencv2/stitching.hpp
--- opencv-4.5.1/modules/stitching/include/opencv2/stitching.hpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/stitching/include/opencv2/stitching.hpp	2020-12-29 23:58:58.622331505 +0900
@@ -329,12 +329,12 @@
 /**
  * @deprecated use Stitcher::create
  */
-CV_DEPRECATED Ptr<Stitcher> createStitcher(bool try_use_gpu = false);
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcher(bool try_use_gpu = false);
 
 /**
  * @deprecated use Stitcher::create
  */
-CV_DEPRECATED Ptr<Stitcher> createStitcherScans(bool try_use_gpu = false);
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcherScans(bool try_use_gpu = false);
 
 //! @} stitching
 
diff -ruN opencv-4.5.1/modules/stitching/src/stitcher.cpp opencv-4.5.1-patch/modules/stitching/src/stitcher.cpp
--- opencv-4.5.1/modules/stitching/src/stitcher.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/stitching/src/stitcher.cpp	2020-12-29 23:58:58.622331505 +0900
@@ -542,14 +542,14 @@
 }
 
 
-CV_DEPRECATED Ptr<Stitcher> createStitcher(bool /*ignored*/)
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcher(bool /*ignored*/)
 {
     CV_INSTRUMENT_REGION();
 
     return Stitcher::create(Stitcher::PANORAMA);
 }
 
-CV_DEPRECATED Ptr<Stitcher> createStitcherScans(bool /*ignored*/)
+CV_DEPRECATED CV_EXPORTS Ptr<Stitcher> createStitcherScans(bool /*ignored*/)
 {
     CV_INSTRUMENT_REGION();
 
diff -ruN opencv-4.5.1/modules/video/src/tracking/detail/tracker_mil_state.hpp opencv-4.5.1-patch/modules/video/src/tracking/detail/tracker_mil_state.hpp
--- opencv-4.5.1/modules/video/src/tracking/detail/tracker_mil_state.hpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/video/src/tracking/detail/tracker_mil_state.hpp	2020-12-30 00:02:32.336581450 +0900
@@ -20,7 +20,7 @@
     /**
     * Implementation of the target state for TrackerStateEstimatorMILBoosting
     */
-    class TrackerMILTargetState : public TrackerTargetState
+    class CV_EXPORTS TrackerMILTargetState : public TrackerTargetState
     {
 
     public:
diff -ruN opencv-4.5.1/modules/video/src/tracking/detail/tracking_online_mil.cpp opencv-4.5.1-patch/modules/video/src/tracking/detail/tracking_online_mil.cpp
--- opencv-4.5.1/modules/video/src/tracking/detail/tracking_online_mil.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/video/src/tracking/detail/tracking_online_mil.cpp	2020-12-29 23:59:29.167455018 +0900
@@ -339,7 +339,7 @@
     return float(log_p1 - log_p0);
 }
 
-inline std::vector<float> ClfOnlineStump::classifySetF(const Mat& x)
+CV_EXPORTS inline std::vector<float> ClfOnlineStump::classifySetF(const Mat& x)
 {
     std::vector<float> res(x.rows);
 
diff -ruN opencv-4.5.1/modules/video/src/tracking/detail/tracking_online_mil.hpp opencv-4.5.1-patch/modules/video/src/tracking/detail/tracking_online_mil.hpp
--- opencv-4.5.1/modules/video/src/tracking/detail/tracking_online_mil.hpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/video/src/tracking/detail/tracking_online_mil.hpp	2020-12-29 23:58:58.624331513 +0900
@@ -49,7 +49,7 @@
     uint _counter;
 };
 
-class ClfOnlineStump
+class CV_EXPORTS ClfOnlineStump
 {
 public:
     float _mu0, _mu1, _sig0, _sig1;
diff -ruN opencv-4.5.1/modules/videoio/src/cap_v4l.cpp opencv-4.5.1-patch/modules/videoio/src/cap_v4l.cpp
--- opencv-4.5.1/modules/videoio/src/cap_v4l.cpp	2020-12-22 05:01:38.000000000 +0900
+++ opencv-4.5.1-patch/modules/videoio/src/cap_v4l.cpp	2020-12-29 23:58:58.623331509 +0900
@@ -1772,8 +1772,6 @@
         return V4L2_CID_FOCUS_ABSOLUTE;
     case cv::CAP_PROP_GUID:
         return -1;
-    case cv::CAP_PROP_ISO_SPEED:
-        return V4L2_CID_ISO_SENSITIVITY;
     case cv::CAP_PROP_BACKLIGHT:
         return V4L2_CID_BACKLIGHT_COMPENSATION;
     case cv::CAP_PROP_PAN:
@@ -1790,10 +1788,6 @@
         return -1;
     case cv::CAP_PROP_AUTOFOCUS:
         return V4L2_CID_FOCUS_AUTO;
-    case cv::CAP_PROP_SAR_NUM:
-        return V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT;
-    case cv::CAP_PROP_SAR_DEN:
-        return V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH;
     case CAP_PROP_AUTO_WB:
         return V4L2_CID_AUTO_WHITE_BALANCE;
     case CAP_PROP_WB_TEMPERATURE:
