diff -ruN opencv_contrib-4.5.1/modules/bgsegm/src/bgfg_gsoc.cpp opencv_contrib-4.5.1-patch/modules/bgsegm/src/bgfg_gsoc.cpp
--- opencv_contrib-4.5.1/modules/bgsegm/src/bgfg_gsoc.cpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/bgsegm/src/bgfg_gsoc.cpp	2020-12-30 00:01:17.605076328 +0900
@@ -265,7 +265,7 @@
 
 class BackgroundModelGSOC : public BackgroundModel<BackgroundSampleGSOC> {
 public:
-    BackgroundModelGSOC(Size sz, int S) : BackgroundModel(sz, S) {};
+    BackgroundModelGSOC(Size sz, int S) : BackgroundModel<BackgroundSampleGSOC>(sz, S) {};
 
     float findClosest(int i, int j, const Point3f& color, int& indOut) const {
         const int end = i * stride + (j + 1) * nSamples;
@@ -316,7 +316,7 @@
 
 class BackgroundModelLSBP : public BackgroundModel<BackgroundSampleLSBP> {
 public:
-    BackgroundModelLSBP(Size sz, int S) : BackgroundModel(sz, S) {};
+    BackgroundModelLSBP(Size sz, int S) : BackgroundModel<BackgroundSampleLSBP>(sz, S) {};
 
     int countMatches(int i, int j, const Point3f& color, int desc, float threshold, int descThreshold, float& minDist) const {
         const int end = i * stride + (j + 1) * nSamples;
diff -ruN opencv_contrib-4.5.1/modules/face/include/opencv2/face/facemarkLBF.hpp opencv_contrib-4.5.1-patch/modules/face/include/opencv2/face/facemarkLBF.hpp
--- opencv_contrib-4.5.1/modules/face/include/opencv2/face/facemarkLBF.hpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/face/include/opencv2/face/facemarkLBF.hpp	2020-12-30 00:01:17.606076334 +0900
@@ -93,7 +93,7 @@
 
     };
 
-    class BBox {
+    class CV_EXPORTS BBox {
     public:
         BBox();
         ~BBox();
diff -ruN opencv_contrib-4.5.1/modules/quality/include/opencv2/quality/qualitymse.hpp opencv_contrib-4.5.1-patch/modules/quality/include/opencv2/quality/qualitymse.hpp
--- opencv_contrib-4.5.1/modules/quality/include/opencv2/quality/qualitymse.hpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/quality/include/opencv2/quality/qualitymse.hpp	2020-12-30 00:01:17.606076334 +0900
@@ -22,7 +22,7 @@
     @param cmpImgs Comparison image(s)
     @returns cv::Scalar with per-channel quality values.  Values range from 0 (best) to potentially max float (worst)
     */
-    CV_WRAP cv::Scalar compute( InputArrayOfArrays cmpImgs ) CV_OVERRIDE;
+    CV_WRAP cv::Scalar compute( InputArray cmpImgs ) CV_OVERRIDE;
 
     /** @brief Implements Algorithm::empty()  */
     CV_WRAP bool empty() const CV_OVERRIDE { return _ref.empty() && QualityBase::empty(); }
@@ -61,4 +61,4 @@
 };  // QualityMSE
 }   // quality
 }   // cv
-#endif
\ No newline at end of file
+#endif
diff -ruN opencv_contrib-4.5.1/modules/tracking/include/opencv2/tracking/feature.hpp opencv_contrib-4.5.1-patch/modules/tracking/include/opencv2/tracking/feature.hpp
--- opencv_contrib-4.5.1/modules/tracking/include/opencv2/tracking/feature.hpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/tracking/include/opencv2/tracking/feature.hpp	2020-12-30 00:01:17.607076341 +0900
@@ -103,8 +103,6 @@
     (p3) = (rect).x + (rect).width - (rect).height                        \
            + (step) * ((rect).y + (rect).width + (rect).height);
 
-float calcNormFactor( const Mat& sum, const Mat& sqSum );
-
 template<class Feature>
 void _writeFeatures( const std::vector<Feature> features, FileStorage &fs, const Mat& featureMap )
 {
@@ -120,7 +118,7 @@
   fs << "]";
 }
 
-class CvParams
+class CV_EXPORTS CvParams
 {
  public:
   CvParams();
@@ -137,7 +135,7 @@
   std::string name;
 };
 
-class CvFeatureParams : public CvParams
+class CV_EXPORTS CvFeatureParams : public CvParams
 {
  public:
   enum FeatureType
@@ -157,7 +155,7 @@
   int numFeatures;
 };
 
-class CvFeatureEvaluator
+class CV_EXPORTS CvFeatureEvaluator
 {
  public:
   virtual ~CvFeatureEvaluator()
@@ -199,7 +197,7 @@
   Mat cls;
 };
 
-class CvHaarFeatureParams : public CvFeatureParams
+class CV_EXPORTS CvHaarFeatureParams : public CvFeatureParams
 {
  public:
 
@@ -216,11 +214,11 @@
   bool isIntegral;
 };
 
-class CvHaarEvaluator : public CvFeatureEvaluator
+class CV_EXPORTS CvHaarEvaluator : public CvFeatureEvaluator
 {
  public:
 
-  class FeatureHaar
+  class CV_EXPORTS FeatureHaar
   {
 
    public:
@@ -293,12 +291,12 @@
   Mat sum; /* sum images (each row represents image) */
 };
 
-struct CvHOGFeatureParams : public CvFeatureParams
+struct CV_EXPORTS CvHOGFeatureParams : public CvFeatureParams
 {
   CvHOGFeatureParams();
 };
 
-class CvHOGEvaluator : public CvFeatureEvaluator
+class CV_EXPORTS CvHOGEvaluator : public CvFeatureEvaluator
 {
  public:
   virtual ~CvHOGEvaluator()
@@ -359,13 +357,13 @@
   return res;
 }
 
-struct CvLBPFeatureParams : CvFeatureParams
+struct CV_EXPORTS CvLBPFeatureParams : CvFeatureParams
 {
   CvLBPFeatureParams();
 
 };
 
-class CvLBPEvaluator : public CvFeatureEvaluator
+class CV_EXPORTS CvLBPEvaluator : public CvFeatureEvaluator
 {
  public:
   virtual ~CvLBPEvaluator() CV_OVERRIDE
diff -ruN opencv_contrib-4.5.1/modules/tracking/include/opencv2/tracking/onlineBoosting.hpp opencv_contrib-4.5.1-patch/modules/tracking/include/opencv2/tracking/onlineBoosting.hpp
--- opencv_contrib-4.5.1/modules/tracking/include/opencv2/tracking/onlineBoosting.hpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/tracking/include/opencv2/tracking/onlineBoosting.hpp	2020-12-30 00:01:17.608076348 +0900
@@ -62,7 +62,7 @@
 class ClassifierThreshold;
 class Detector;
 
-class StrongClassifierDirectSelection
+class CV_EXPORTS StrongClassifierDirectSelection
 {
  public:
 
@@ -109,7 +109,7 @@
   int swappedClassifier;
 };
 
-class BaseClassifier
+class CV_EXPORTS BaseClassifier
 {
  public:
 
@@ -151,7 +151,7 @@
 
 };
 
-class EstimatedGaussDistribution
+class CV_EXPORTS EstimatedGaussDistribution
 {
  public:
 
@@ -173,7 +173,7 @@
   float m_R_sigma;
 };
 
-class WeakClassifierHaarFeature
+class CV_EXPORTS WeakClassifierHaarFeature
 {
 
  public:
@@ -195,7 +195,7 @@
 
 };
 
-class Detector
+class CV_EXPORTS Detector
 {
  public:
 
@@ -263,7 +263,7 @@
   cv::Mat_<unsigned char> m_confImageDisplay;
 };
 
-class ClassifierThreshold
+class CV_EXPORTS ClassifierThreshold
 {
  public:
 
diff -ruN opencv_contrib-4.5.1/modules/tracking/include/opencv2/tracking/tracking_by_matching.hpp opencv_contrib-4.5.1-patch/modules/tracking/include/opencv2/tracking/tracking_by_matching.hpp
--- opencv_contrib-4.5.1/modules/tracking/include/opencv2/tracking/tracking_by_matching.hpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/tracking/include/opencv2/tracking/tracking_by_matching.hpp	2020-12-30 12:12:08.477104867 +0900
@@ -317,6 +317,7 @@
 ///
 class CV_EXPORTS Track {
 public:
+    Track() {}
     ///
     /// \brief Track constructor.
     /// \param objs Detected objects sequence.
diff -ruN opencv_contrib-4.5.1/modules/tracking/include/opencv2/tracking/tracking_internals.hpp opencv_contrib-4.5.1-patch/modules/tracking/include/opencv2/tracking/tracking_internals.hpp
--- opencv_contrib-4.5.1/modules/tracking/include/opencv2/tracking/tracking_internals.hpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/tracking/include/opencv2/tracking/tracking_internals.hpp	2020-12-30 00:01:53.529319146 +0900
@@ -363,7 +363,7 @@
   /** @overload
     @param feature The TrackerContribFeature class
     */
-  bool addTrackerFeature( Ptr<TrackerContribFeature>& feature );
+  bool addTrackerFeature( Ptr<TrackerContribFeature> feature );
 
   /** @brief Get the TrackerContribFeature collection (TrackerContribFeature name, TrackerContribFeature pointer)
      */
@@ -497,7 +497,7 @@
   /** @overload
     @param sampler The TrackerContribSamplerAlgorithm
     */
-  bool addTrackerSamplerAlgorithm( Ptr<TrackerContribSamplerAlgorithm>& sampler );
+  bool addTrackerSamplerAlgorithm( Ptr<TrackerContribSamplerAlgorithm> sampler );
 
  private:
   std::vector<std::pair<String, Ptr<TrackerContribSamplerAlgorithm> > > samplers;
diff -ruN opencv_contrib-4.5.1/modules/tracking/src/trackerFeatureSet.cpp opencv_contrib-4.5.1-patch/modules/tracking/src/trackerFeatureSet.cpp
--- opencv_contrib-4.5.1/modules/tracking/src/trackerFeatureSet.cpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/tracking/src/trackerFeatureSet.cpp	2020-12-30 00:04:12.670259622 +0900
@@ -112,7 +112,7 @@
   return true;
 }
 
-bool TrackerContribFeatureSet::addTrackerFeature( Ptr<TrackerContribFeature>& feature )
+bool TrackerContribFeatureSet::addTrackerFeature( Ptr<TrackerContribFeature> feature )
 {
   if( blockAddTrackerFeature )
   {
diff -ruN opencv_contrib-4.5.1/modules/tracking/src/trackerSampler.cpp opencv_contrib-4.5.1-patch/modules/tracking/src/trackerSampler.cpp
--- opencv_contrib-4.5.1/modules/tracking/src/trackerSampler.cpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/tracking/src/trackerSampler.cpp	2020-12-30 00:03:43.908065214 +0900
@@ -107,7 +107,7 @@
   return true;
 }
 
-bool TrackerContribSampler::addTrackerSamplerAlgorithm( Ptr<TrackerContribSamplerAlgorithm>& sampler )
+bool TrackerContribSampler::addTrackerSamplerAlgorithm( Ptr<TrackerContribSamplerAlgorithm> sampler )
 {
   if( blockAddTrackerSampler )
   {
diff -ruN opencv_contrib-4.5.1/modules/ximgproc/include/opencv2/ximgproc/brightedges.hpp opencv_contrib-4.5.1-patch/modules/ximgproc/include/opencv2/ximgproc/brightedges.hpp
--- opencv_contrib-4.5.1/modules/ximgproc/include/opencv2/ximgproc/brightedges.hpp	2020-12-22 03:14:07.000000000 +0900
+++ opencv_contrib-4.5.1-patch/modules/ximgproc/include/opencv2/ximgproc/brightedges.hpp	2020-12-30 00:01:17.610076361 +0900
@@ -1,4 +1,4 @@
-ï»¿/*M///////////////////////////////////////////////////////////////////////////////////////
+/*M///////////////////////////////////////////////////////////////////////////////////////
 //
 //  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.
 //
@@ -41,10 +41,14 @@
 // the use of this software, even if advised of the possibility of such damage.
 //
 //M*/
+#ifndef __OPENCV_BRIGHTEDGES_HPP__
+#define __OPENCV_BRIGHTEDGES_HPP__
+
 #include "opencv2/core.hpp"
 namespace cv
 {
     namespace ximgproc {
         CV_EXPORTS_W void  BrightEdges(Mat &_original, Mat &_edgeview, int contrast = 1, int shortrange = 3, int longrange = 9);
     }
-}
\ No newline at end of file
+}
+#endif
