diff -ruN opencv-4.1.1/modules/core/include/opencv2/core/hal/intrin_vsx.hpp opencv-4.1.1-linux-ppc64le/modules/core/include/opencv2/core/hal/intrin_vsx.hpp
--- opencv-4.1.1/modules/core/include/opencv2/core/hal/intrin_vsx.hpp	2019-07-26 12:24:45.000000000 +0900
+++ opencv-4.1.1-linux-ppc64le/modules/core/include/opencv2/core/hal/intrin_vsx.hpp	2019-07-31 11:50:38.594957264 +0900
@@ -1129,63 +1129,46 @@
 
 inline v_int32x4 v_lut(const int* tab, const v_int32x4& idxvec)
 {
-    const int idx[4] = {
-        vec_extract(idxvec.val, 0),
-        vec_extract(idxvec.val, 1),
-        vec_extract(idxvec.val, 2),
-        vec_extract(idxvec.val, 3)
-    };
+    int CV_DECL_ALIGNED(32) idx[4];
+    v_store_aligned(idx, idxvec);
     return v_int32x4(tab[idx[0]], tab[idx[1]], tab[idx[2]], tab[idx[3]]);
 }
 
 inline v_uint32x4 v_lut(const unsigned* tab, const v_int32x4& idxvec)
 {
-    const int idx[4] = {
-        vec_extract(idxvec.val, 0),
-        vec_extract(idxvec.val, 1),
-        vec_extract(idxvec.val, 2),
-        vec_extract(idxvec.val, 3)
-    };
+    int CV_DECL_ALIGNED(32) idx[4];
+    v_store_aligned(idx, idxvec);
     return v_uint32x4(tab[idx[0]], tab[idx[1]], tab[idx[2]], tab[idx[3]]);
 }
 
 inline v_float32x4 v_lut(const float* tab, const v_int32x4& idxvec)
 {
-    const int idx[4] = {
-        vec_extract(idxvec.val, 0),
-        vec_extract(idxvec.val, 1),
-        vec_extract(idxvec.val, 2),
-        vec_extract(idxvec.val, 3)
-    };
+    int CV_DECL_ALIGNED(32) idx[4];
+    v_store_aligned(idx, idxvec);
     return v_float32x4(tab[idx[0]], tab[idx[1]], tab[idx[2]], tab[idx[3]]);
 }
 
 inline v_float64x2 v_lut(const double* tab, const v_int32x4& idxvec)
 {
-    const int idx[2] = {
-        vec_extract(idxvec.val, 0),
-        vec_extract(idxvec.val, 1)
-    };
+    int CV_DECL_ALIGNED(32) idx[4];
+    v_store_aligned(idx, idxvec);
     return v_float64x2(tab[idx[0]], tab[idx[1]]);
 }
 
 inline void v_lut_deinterleave(const float* tab, const v_int32x4& idxvec, v_float32x4& x, v_float32x4& y)
 {
-    vec_float4 xy0 = vec_ld_l8(tab + vec_extract(idxvec.val, 0));
-    vec_float4 xy1 = vec_ld_l8(tab + vec_extract(idxvec.val, 1));
-    vec_float4 xy2 = vec_ld_l8(tab + vec_extract(idxvec.val, 2));
-    vec_float4 xy3 = vec_ld_l8(tab + vec_extract(idxvec.val, 3));
-    vec_float4 xy02 = vec_mergeh(xy0, xy2); // x0, x2, y0, y2
-    vec_float4 xy13 = vec_mergeh(xy1, xy3); // x1, x3, y1, y3
-    x.val = vec_mergeh(xy02, xy13);
-    y.val = vec_mergel(xy02, xy13);
+    int CV_DECL_ALIGNED(32) idx[4];
+    v_store_aligned(idx, idxvec);
+    x = v_float32x4(tab[idx[0]], tab[idx[1]], tab[idx[2]], tab[idx[3]]);
+    y = v_float32x4(tab[idx[0]+1], tab[idx[1]+1], tab[idx[2]+1], tab[idx[3]+1]);
 }
+
 inline void v_lut_deinterleave(const double* tab, const v_int32x4& idxvec, v_float64x2& x, v_float64x2& y)
 {
-    vec_double2 xy0 = vsx_ld(vec_extract(idxvec.val, 0), tab);
-    vec_double2 xy1 = vsx_ld(vec_extract(idxvec.val, 1), tab);
-    x.val = vec_mergeh(xy0, xy1);
-    y.val = vec_mergel(xy0, xy1);
+    int CV_DECL_ALIGNED(32) idx[4];
+    v_store_aligned(idx, idxvec);
+    x = v_float64x2(tab[idx[0]], tab[idx[1]]);
+    y = v_float64x2(tab[idx[0]+1], tab[idx[1]+1]);
 }
 
 inline v_int8x16 v_interleave_pairs(const v_int8x16& vec)
