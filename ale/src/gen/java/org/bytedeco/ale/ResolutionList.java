// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ale;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ale.global.ale.*;


@Name("Common::Array<Resolution>") @NoOffset @Properties(inherit = org.bytedeco.ale.presets.ale.class)
public class ResolutionList extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ResolutionList(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ResolutionList(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ResolutionList position(long position) {
        return (ResolutionList)super.position(position);
    }

    public ResolutionList() { super((Pointer)null); allocate(); }
    private native void allocate();
    public ResolutionList(@Const @ByRef ResolutionList array) { super((Pointer)null); allocate(array); }
    private native void allocate(@Const @ByRef ResolutionList array);

    public native void push_back(@Const @ByRef Resolution element);

    public native void push_back(@Const @ByRef ResolutionList array);

    public native void insert_at(int idx, @Const @ByRef Resolution element);

    public native @ByVal Resolution remove_at(int idx);

    // TODO: insert, remove, ...

    public native @ByRef @Name("operator []") Resolution get(int idx);

    public native @ByRef @Name("operator =") ResolutionList put(@Const @ByRef ResolutionList array);

    public native @Cast("unsigned int") int size();

    public native void clear();
    
    public native @Cast("bool") boolean isEmpty();

    public native @Cast("Common::Array<Resolution>::iterator") Resolution begin();

    public native @Cast("Common::Array<Resolution>::iterator") Resolution end();

    
}
