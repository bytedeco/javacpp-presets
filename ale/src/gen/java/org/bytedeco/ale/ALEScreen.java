// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ale;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ale.global.ale.*;


/** A simple wrapper around an Atari screen. */ 
@NoOffset @Properties(inherit = org.bytedeco.ale.presets.ale.class)
public class ALEScreen extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ALEScreen(Pointer p) { super(p); }

    public ALEScreen(int h, int w) { super((Pointer)null); allocate(h, w); }
    private native void allocate(int h, int w);
    public ALEScreen(@Const @ByRef ALEScreen rhs) { super((Pointer)null); allocate(rhs); }
    private native void allocate(@Const @ByRef ALEScreen rhs);

    public native @ByRef @Name("operator =") ALEScreen put(@Const @ByRef ALEScreen rhs);

    /** pixel accessors, (row, column)-ordered */
    public native @Cast("pixel_t") byte get(int r, int c);
    public native @Cast("pixel_t*") BytePointer pixel(int r, int c);
    
    /** Access a whole row */
    public native @Cast("pixel_t*") BytePointer getRow(int r);
    
    /** Access the whole array */
    public native @Cast("pixel_t*") BytePointer getArray();

    /** Dimensionality information */
    public native @Cast("size_t") long height();
    public native @Cast("size_t") long width();

    /** Returns the size of the underlying array */
    public native @Cast("size_t") long arraySize();

    /** Returns whether two screens are equal */
    public native @Cast("bool") boolean equals(@Const @ByRef ALEScreen rhs); 
}
