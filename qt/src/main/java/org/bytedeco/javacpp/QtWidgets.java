// Targeted by JavaCPP version 1.4.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.QtCore.*;
import static org.bytedeco.javacpp.QtGui.*;

public class QtWidgets extends org.bytedeco.javacpp.helper.QtWidgets {
    static { Loader.load(); }

// Parsed from QtWidgets/qabstractbutton.h

public static class QAbstractButton extends QWidget {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QAbstractButton(Pointer p) { super(p); }


    public native void setText(@Const @ByRef QString text);
    public native @ByVal QString text();

    public native @ByVal QSize iconSize();

// #ifndef QT_NO_SHORTCUT
// #endif

    public native void setCheckable(@Cast("bool") boolean arg0);
    public native @Cast("bool") boolean isCheckable();

    public native @Cast("bool") boolean isChecked();

    public native void setDown(@Cast("bool") boolean arg0);
    public native @Cast("bool") boolean isDown();

    public native void setAutoRepeat(@Cast("bool") boolean arg0);
    public native @Cast("bool") boolean autoRepeat();

    public native void setAutoRepeatDelay(int arg0);
    public native int autoRepeatDelay();

    public native void setAutoRepeatInterval(int arg0);
    public native int autoRepeatInterval();

    public native void setAutoExclusive(@Cast("bool") boolean arg0);
    public native @Cast("bool") boolean autoExclusive();

// #if QT_CONFIG(buttongroup)
    public native void setIconSize(@Const @ByRef QSize size);
    public native void animateClick(int msec/*=100*/);
    public native void animateClick();
    public native void click();
    public native void toggle();
    public native void setChecked(@Cast("bool") boolean arg0);
}


// Parsed from QtWidgets/qapplication.h

public static class QApplication extends QGuiApplication {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QApplication(Pointer p) { super(p); }

// #ifdef Q_QDOC
    public QApplication(@ByRef IntPointer argc, @Cast("char**") PointerPointer argv) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(@ByRef IntPointer argc, @Cast("char**") PointerPointer argv);
    public QApplication(@ByRef IntPointer argc, @Cast("char**") @ByPtrPtr BytePointer argv) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(@ByRef IntPointer argc, @Cast("char**") @ByPtrPtr BytePointer argv);
    public QApplication(@ByRef IntBuffer argc, @Cast("char**") @ByPtrPtr ByteBuffer argv) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(@ByRef IntBuffer argc, @Cast("char**") @ByPtrPtr ByteBuffer argv);
    public QApplication(@ByRef int[] argc, @Cast("char**") @ByPtrPtr byte[] argv) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(@ByRef int[] argc, @Cast("char**") @ByPtrPtr byte[] argv);
// #else
// #endif
    /** enum QApplication::ColorSpec */
    public static final int NormalColor = 0, CustomColor = 1, ManyColor = 2;
// #if QT_DEPRECATED_SINCE(5, 8)
    public static native @Deprecated int colorSpec();
    public static native @Deprecated void setColorSpec(int arg0);
// #endif // QT_DEPRECATED_SINCE(5, 8)
// #if QT_DEPRECATED_SINCE(5, 0)
// #endif
    public static native @ByVal QFont font();
    public static native @ByVal QFont font(@Const QWidget arg0);
    public static native @ByVal QFont font(@Cast("const char*") BytePointer className);
    public static native @ByVal QFont font(String className);
    public static native void setFont(@Const @ByRef QFont arg0, @Cast("const char*") BytePointer className/*=nullptr*/);
    public static native void setFont(@Const @ByRef QFont arg0);
    public static native void setFont(@Const @ByRef QFont arg0, String className/*=nullptr*/);

// #if QT_VERSION < 0x060000 // remove these forwarders in Qt 6
// #endif

    public static native QWidget activePopupWidget();
    public static native QWidget activeModalWidget();
    public static native QWidget focusWidget();

    public static native QWidget activeWindow();
    public static native void setActiveWindow(QWidget act);
    public static native QWidget widgetAt(int x, int y);
    public static native QWidget topLevelAt(int x, int y);

// #if QT_DEPRECATED_SINCE(5, 0)
// #endif
    public static native void beep();
    public static native void alert(QWidget widget, int duration/*=0*/);
    public static native void alert(QWidget widget);

    public static native void setCursorFlashTime(int arg0);
    public static native int cursorFlashTime();

    public static native void setDoubleClickInterval(int arg0);
    public static native int doubleClickInterval();

    public static native void setKeyboardInputInterval(int arg0);
    public static native int keyboardInputInterval();

// #if QT_CONFIG(wheelevent)
    public static native void setWheelScrollLines(int arg0);
    public static native int wheelScrollLines();
// #endif
    public static native void setGlobalStrut(@Const @ByRef QSize arg0);
    public static native @ByVal QSize globalStrut();

    public static native void setStartDragTime(int ms);
    public static native int startDragTime();
    public static native void setStartDragDistance(int l);
    public static native int startDragDistance();

    public static native @Cast("bool") boolean isEffectEnabled(@Cast("Qt::UIEffect") int arg0);
    public static native void setEffectEnabled(@Cast("Qt::UIEffect") int arg0, @Cast("bool") boolean enable/*=true*/);
    public static native void setEffectEnabled(@Cast("Qt::UIEffect") int arg0);

// #if QT_DEPRECATED_SINCE(5, 0)
// #endif

    public static native int exec();
    public native @ByVal QString styleSheet();
// #ifndef QT_NO_STYLE_STYLESHEET
    public native void setStyleSheet(@Const @ByRef QString sheet);
// #endif
    public native void setAutoSipEnabled(@Cast("const bool") boolean enabled);
    public native @Cast("bool") boolean autoSipEnabled();
    public static native void closeAllWindows();
    public static native void aboutQt();
}


// Parsed from QtWidgets/qgridlayout.h

public static class QGridLayout extends QLayout {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QGridLayout(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QGridLayout(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QGridLayout position(long position) {
        return (QGridLayout)super.position(position);
    }

    public QGridLayout(QWidget parent) { super((Pointer)null); allocate(parent); }
    private native void allocate(QWidget parent);
    public QGridLayout() { super((Pointer)null); allocate(); }
    private native void allocate();

    public native @ByVal QSize sizeHint();
    public native @ByVal QSize minimumSize();
    public native @ByVal QSize maximumSize();

    public native void setHorizontalSpacing(int spacing);
    public native int horizontalSpacing();
    public native void setVerticalSpacing(int spacing);
    public native int verticalSpacing();
    public native void setSpacing(int spacing);
    public native int spacing();

    public native void setRowStretch(int row, int stretch);
    public native void setColumnStretch(int column, int stretch);
    public native int rowStretch(int row);
    public native int columnStretch(int column);

    public native void setRowMinimumHeight(int row, int minSize);
    public native void setColumnMinimumWidth(int column, int minSize);
    public native int rowMinimumHeight(int row);
    public native int columnMinimumWidth(int column);

    public native int columnCount();
    public native int rowCount();

    public native @Cast("bool") boolean hasHeightForWidth();
    public native int heightForWidth(int arg0);
    public native int minimumHeightForWidth(int arg0);
    public native void invalidate();

    public native void addWidget(QWidget w);
    public native void addWidget(QWidget arg0, int row, int column, @ByVal(nullValue = "Qt::Alignment()") @Cast("Qt::Alignment") int arg3);
    public native void addWidget(QWidget arg0, int row, int column);
    public native void addWidget(QWidget arg0, int row, int column, int rowSpan, int columnSpan, @ByVal(nullValue = "Qt::Alignment()") @Cast("Qt::Alignment") int arg5);
    public native void addWidget(QWidget arg0, int row, int column, int rowSpan, int columnSpan);
    public native void addLayout(QLayout arg0, int row, int column, @ByVal(nullValue = "Qt::Alignment()") @Cast("Qt::Alignment") int arg3);
    public native void addLayout(QLayout arg0, int row, int column);
    public native void addLayout(QLayout arg0, int row, int column, int rowSpan, int columnSpan, @ByVal(nullValue = "Qt::Alignment()") @Cast("Qt::Alignment") int arg5);
    public native void addLayout(QLayout arg0, int row, int column, int rowSpan, int columnSpan);

    public native void setOriginCorner(@Cast("Qt::Corner") int arg0);
    public native @Cast("Qt::Corner") int originCorner();

    public native QLayoutItem itemAt(int index);
    public native QLayoutItem itemAtPosition(int row, int column);
    public native QLayoutItem takeAt(int index);
    public native int count();

    public native void addItem(QLayoutItem item, int row, int column, int rowSpan/*=1*/, int columnSpan/*=1*/, @ByVal(nullValue = "Qt::Alignment()") @Cast("Qt::Alignment") int arg5);
    public native void addItem(QLayoutItem item, int row, int column);

    public native void setDefaultPositioning(int n, Orientation orient);
    public native void getItemPosition(int idx, IntPointer row, IntPointer column, IntPointer rowSpan, IntPointer columnSpan);
    public native void getItemPosition(int idx, IntBuffer row, IntBuffer column, IntBuffer rowSpan, IntBuffer columnSpan);
    public native void getItemPosition(int idx, int[] row, int[] column, int[] rowSpan, int[] columnSpan);

}


// Parsed from QtWidgets/qlayout.h

public static class QLayout extends QObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QLayout(Pointer p) { super(p); }
    public QLayoutItem asQLayoutItem() { return asQLayoutItem(this); }
    @Namespace public static native @Name("static_cast<QLayoutItem*>") QLayoutItem asQLayoutItem(QLayout pointer);

    /** enum QLayout::SizeConstraint */
    public static final int
        SetDefaultConstraint = 0,
        SetNoConstraint = 1,
        SetMinimumSize = 2,
        SetFixedSize = 3,
        SetMaximumSize = 4,
        SetMinAndMaxSize = 5;
    

    public native int margin();
    public native int spacing();

    public native void setMargin(int arg0);
    public native void setSpacing(int arg0);

    public native void setContentsMargins(int left, int top, int right, int bottom);
    public native void getContentsMargins(IntPointer left, IntPointer top, IntPointer right, IntPointer bottom);
    public native void getContentsMargins(IntBuffer left, IntBuffer top, IntBuffer right, IntBuffer bottom);
    public native void getContentsMargins(int[] left, int[] top, int[] right, int[] bottom);

    public native @Cast("bool") boolean setAlignment(QWidget w, @ByVal @Cast("Qt::Alignment") int alignment);
    public native @Cast("bool") boolean setAlignment(QLayout l, @ByVal @Cast("Qt::Alignment") int alignment);

    public native void setSizeConstraint(@Cast("QLayout::SizeConstraint") int arg0);
    public native @Cast("QLayout::SizeConstraint") int sizeConstraint();
    public native void setMenuBar(QWidget w);
    public native QWidget menuBar();

    public native QWidget parentWidget();

    public native void invalidate();
    public native @Cast("bool") boolean activate();
    public native void update();

    public native void addWidget(QWidget w);
    public native void addItem(QLayoutItem arg0);

    public native void removeWidget(QWidget w);
    public native void removeItem(QLayoutItem arg0);
    public native @ByVal QSize minimumSize();
    public native @ByVal QSize maximumSize();
    public native QLayoutItem itemAt(int index);
    public native QLayoutItem takeAt(int index);
    public native int indexOf(QWidget arg0);
    public native int indexOf(QLayoutItem arg0);
    public native int count();
    public native @Cast("bool") boolean isEmpty();

    public native QLayoutItem replaceWidget(QWidget from, QWidget to);

    public native int totalHeightForWidth(int w);
    public native @ByVal QSize totalMinimumSize();
    public native @ByVal QSize totalMaximumSize();
    public native @ByVal QSize totalSizeHint();
    public native QLayout layout();

    public native void setEnabled(@Cast("bool") boolean arg0);
    public native @Cast("bool") boolean isEnabled();


    public static native @ByVal QSize closestAcceptableSize(@Const QWidget w, @Const @ByRef QSize s);

}


// Parsed from QtWidgets/qlineedit.h

public static class QLineEdit extends QWidget {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QLineEdit(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QLineEdit(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QLineEdit position(long position) {
        return (QLineEdit)super.position(position);
    }

    /** enum QLineEdit::ActionPosition */
    public static final int
        LeadingPosition = 0,
        TrailingPosition = 1;
    

    public QLineEdit(QWidget parent/*=nullptr*/) { super((Pointer)null); allocate(parent); }
    private native void allocate(QWidget parent/*=nullptr*/);
    public QLineEdit() { super((Pointer)null); allocate(); }
    private native void allocate();
    public QLineEdit(@Const @ByRef QString arg0, QWidget parent/*=nullptr*/) { super((Pointer)null); allocate(arg0, parent); }
    private native void allocate(@Const @ByRef QString arg0, QWidget parent/*=nullptr*/);
    public QLineEdit(@Const @ByRef QString arg0) { super((Pointer)null); allocate(arg0); }
    private native void allocate(@Const @ByRef QString arg0);

    public native @ByVal QString text();

    public native @ByVal QString displayText();

    public native @ByVal QString placeholderText();
    public native void setPlaceholderText(@Const @ByRef QString arg0);

    public native int maxLength();
    public native void setMaxLength(int arg0);

    public native void setFrame(@Cast("bool") boolean arg0);
    public native @Cast("bool") boolean hasFrame();

    public native void setClearButtonEnabled(@Cast("bool") boolean enable);
    public native @Cast("bool") boolean isClearButtonEnabled();

    /** enum QLineEdit::EchoMode */
    public static final int Normal = 0, NoEcho = 1, Password = 2, PasswordEchoOnEdit = 3;
    
    public native @Cast("QLineEdit::EchoMode") int echoMode();
    public native void setEchoMode(@Cast("QLineEdit::EchoMode") int arg0);

    public native @Cast("bool") boolean isReadOnly();
    public native void setReadOnly(@Cast("bool") boolean arg0);

// #ifndef QT_NO_VALIDATOR
// #endif

// #if QT_CONFIG(completer)
// #endif

    public native @ByVal QSize sizeHint();
    public native @ByVal QSize minimumSizeHint();

    public native int cursorPosition();
    public native void setCursorPosition(int arg0);

    public native void setAlignment(@ByVal @Cast("Qt::Alignment") int flag);
    public native @ByVal @Cast("Qt::Alignment") int alignment();

    public native void cursorForward(@Cast("bool") boolean mark, int steps/*=1*/);
    public native void cursorForward(@Cast("bool") boolean mark);
    public native void cursorBackward(@Cast("bool") boolean mark, int steps/*=1*/);
    public native void cursorBackward(@Cast("bool") boolean mark);
    public native void cursorWordForward(@Cast("bool") boolean mark);
    public native void cursorWordBackward(@Cast("bool") boolean mark);
    public native void backspace();
    public native void del();
    public native void home(@Cast("bool") boolean mark);
    public native void end(@Cast("bool") boolean mark);

    public native @Cast("bool") boolean isModified();
    public native void setModified(@Cast("bool") boolean arg0);

    public native void setSelection(int arg0, int arg1);
    public native @Cast("bool") boolean hasSelectedText();
    public native @ByVal QString selectedText();
    public native int selectionStart();
    public native int selectionEnd();
    public native int selectionLength();

    public native @Cast("bool") boolean isUndoAvailable();
    public native @Cast("bool") boolean isRedoAvailable();

    public native void setDragEnabled(@Cast("bool") boolean b);
    public native @Cast("bool") boolean dragEnabled();

    public native void setCursorMoveStyle(@Cast("Qt::CursorMoveStyle") int style);
    public native @Cast("Qt::CursorMoveStyle") int cursorMoveStyle();

    public native @ByVal QString inputMask();
    public native void setInputMask(@Const @ByRef QString inputMask);
    public native @Cast("bool") boolean hasAcceptableInput();

    public native void setTextMargins(int left, int top, int right, int bottom);
    public native void getTextMargins(IntPointer left, IntPointer top, IntPointer right, IntPointer bottom);
    public native void getTextMargins(IntBuffer left, IntBuffer top, IntBuffer right, IntBuffer bottom);
    public native void getTextMargins(int[] left, int[] top, int[] right, int[] bottom);
    public native void setText(@Const @ByRef QString arg0);
    public native void clear();
    public native void selectAll();
    public native void undo();
    public native void redo();
// #ifndef QT_NO_CLIPBOARD
    public native void cut();
    public native void copy();
    public native void paste();
    public native void deselect();
    public native void insert(@Const @ByRef QString arg0);
// #ifndef QT_NO_CONTEXTMENU
}


// Parsed from QtWidgets/qsizepolicy.h

public static class QSizePolicy extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QSizePolicy(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QSizePolicy(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QSizePolicy position(long position) {
        return (QSizePolicy)super.position(position);
    }

    /** enum QSizePolicy::PolicyFlag */
    public static final int
        GrowFlag = 1,
        ExpandFlag = 2,
        ShrinkFlag = 4,
        IgnoreFlag = 8;

    /** enum QSizePolicy::Policy */
    public static final int
        Fixed = 0,
        Minimum = GrowFlag,
        Maximum = ShrinkFlag,
        Preferred = GrowFlag | ShrinkFlag,
        MinimumExpanding = GrowFlag | ExpandFlag,
        Expanding = GrowFlag | ShrinkFlag | ExpandFlag,
        Ignored = ShrinkFlag | GrowFlag | IgnoreFlag;
    

    public enum ControlType {
        DefaultType     (0x00000001),
        ButtonBox       (0x00000002),
        CheckBox        (0x00000004),
        ComboBox        (0x00000008),
        Frame           (0x00000010),
        GroupBox        (0x00000020),
        Label           (0x00000040),
        Line            (0x00000080),
        LineEdit        (0x00000100),
        PushButton      (0x00000200),
        RadioButton     (0x00000400),
        Slider          (0x00000800),
        SpinBox         (0x00001000),
        TabWidget       (0x00002000),
        ToolButton      (0x00004000);

        public final int value;
        private ControlType(int v) { this.value = v; }
        private ControlType(ControlType e) { this.value = e.value; }
        public ControlType intern() { for (ControlType e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(ControlTypes, ControlType)
    

     public QSizePolicy() { super((Pointer)null); allocate(); }
private native void allocate();

// #if defined(Q_COMPILER_UNIFORM_INIT) && !defined(Q_QDOC)
// #else
    public QSizePolicy(@Cast("QSizePolicy::Policy") int horizontal, @Cast("QSizePolicy::Policy") int vertical, ControlType type/*=QSizePolicy::DefaultType*/) { super((Pointer)null); allocate(horizontal, vertical, type); }
    private native void allocate(@Cast("QSizePolicy::Policy") int horizontal, @Cast("QSizePolicy::Policy") int vertical, ControlType type/*=QSizePolicy::DefaultType*/);
    public QSizePolicy(@Cast("QSizePolicy::Policy") int horizontal, @Cast("QSizePolicy::Policy") int vertical) { super((Pointer)null); allocate(horizontal, vertical); }
    private native void allocate(@Cast("QSizePolicy::Policy") int horizontal, @Cast("QSizePolicy::Policy") int vertical);
// #endif // uniform-init
     public native @Cast("QSizePolicy::Policy") int horizontalPolicy();
     public native @Cast("QSizePolicy::Policy") int verticalPolicy();
    public native ControlType controlType();

     public native void setHorizontalPolicy(@Cast("QSizePolicy::Policy") int d);
     public native void setVerticalPolicy(@Cast("QSizePolicy::Policy") int d);
    public native void setControlType(ControlType type);

    

     public native void setHeightForWidth(@Cast("bool") boolean b);
     public native @Cast("bool") boolean hasHeightForWidth();
     public native void setWidthForHeight(@Cast("bool") boolean b);
     public native @Cast("bool") boolean hasWidthForHeight();

     public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef QSizePolicy s);
     public native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef QSizePolicy s);

    

     public native int horizontalStretch();
     public native int verticalStretch();
     public native void setHorizontalStretch(int stretchFactor);
     public native void setVerticalStretch(int stretchFactor);

     public native @Cast("bool") boolean retainSizeWhenHidden();
     public native void setRetainSizeWhenHidden(@Cast("bool") boolean retainSize);

     public native void transpose();
    
// #ifndef Q_QDOC
// #endif
    public native @ByVal QSizePolicy transposed();
}


// Parsed from QtWidgets/qtoolbutton.h

public static class QToolButton extends QAbstractButton {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QToolButton(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QToolButton(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QToolButton position(long position) {
        return (QToolButton)super.position(position);
    }

    /** enum QToolButton::ToolButtonPopupMode */
    public static final int
        DelayedPopup = 0,
        MenuButtonPopup = 1,
        InstantPopup = 2;
    

    public QToolButton(QWidget parent/*=nullptr*/) { super((Pointer)null); allocate(parent); }
    private native void allocate(QWidget parent/*=nullptr*/);
    public QToolButton() { super((Pointer)null); allocate(); }
    private native void allocate();

    @Virtual public native @ByVal @Const({false, false, true}) QSize sizeHint();
    public native @ByVal QSize minimumSizeHint();

    public native @Cast("Qt::ToolButtonStyle") int toolButtonStyle();

    public native @Cast("Qt::ArrowType") int arrowType();
    public native void setArrowType(@Cast("Qt::ArrowType") int type);

// #if QT_CONFIG(menu)

    public native void setPopupMode(@Cast("QToolButton::ToolButtonPopupMode") int mode);
    public native @Cast("QToolButton::ToolButtonPopupMode") int popupMode();
// #endif

    public native void setAutoRaise(@Cast("bool") boolean enable);
    public native @Cast("bool") boolean autoRaise();
// #if QT_CONFIG(menu)
    public native void showMenu();
// #endif
    public native void setToolButtonStyle(@Cast("Qt::ToolButtonStyle") int style);

}


// Parsed from QtWidgets/qwidget.h

@NoOffset public static class QWidget extends QObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QWidget(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QWidget(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QWidget position(long position) {
        return (QWidget)super.position(position);
    }
    public QPaintDevice asQPaintDevice() { return asQPaintDevice(this); }
    @Namespace public static native @Name("static_cast<QPaintDevice*>") QPaintDevice asQPaintDevice(QWidget pointer);

    /** enum QWidget::RenderFlag */
    public static final int
        DrawWindowBackground = 0x1,
        DrawChildren = 0x2,
        IgnoreMask = 0x4;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(RenderFlags, RenderFlag)

    public QWidget(QWidget parent/*=nullptr*/, @ByVal(nullValue = "Qt::WindowFlags()") @Cast("Qt::WindowFlags") int f) { super((Pointer)null); allocate(parent, f); }
    private native void allocate(QWidget parent/*=nullptr*/, @ByVal(nullValue = "Qt::WindowFlags()") @Cast("Qt::WindowFlags") int f);
    public QWidget() { super((Pointer)null); allocate(); }
    private native void allocate();

    public native int devType();

    public native @Cast("size_t") long winId();
    public native void createWinId(); // internal, going away
    public native @Cast("size_t") long internalWinId();
    public native @Cast("size_t") long effectiveWinId();

    // GUI style setting
    // Widget types and states

    public native @Cast("bool") boolean isTopLevel();
    public native @Cast("bool") boolean isWindow();

    public native @Cast("bool") boolean isModal();
    public native @Cast("Qt::WindowModality") int windowModality();
    public native void setWindowModality(@Cast("Qt::WindowModality") int windowModality);

    public native @Cast("bool") boolean isEnabled();
    public native @Cast("bool") boolean isEnabledTo(@Const QWidget arg0);
    public native @Cast("bool") boolean isEnabledToTLW();
    public native void setEnabled(@Cast("bool") boolean arg0);
    public native void setDisabled(@Cast("bool") boolean arg0);
    public native void setWindowModified(@Cast("bool") boolean arg0);

    public native int x();
    public native int y();
    public native @ByVal QSize frameSize();
    public native @ByVal QSize size();
    public native int width();
    public native int height();

    public native @ByVal QSize minimumSize();
    public native @ByVal QSize maximumSize();
    public native int minimumWidth();
    public native int minimumHeight();
    public native int maximumWidth();
    public native int maximumHeight();
    public native void setMinimumSize(@Const @ByRef QSize arg0);
    public native void setMinimumSize(int minw, int minh);
    public native void setMaximumSize(@Const @ByRef QSize arg0);
    public native void setMaximumSize(int maxw, int maxh);
    public native void setMinimumWidth(int minw);
    public native void setMinimumHeight(int minh);
    public native void setMaximumWidth(int maxw);
    public native void setMaximumHeight(int maxh);

// #ifdef Q_QDOC
    
// #endif

    public native @ByVal QSize sizeIncrement();
    public native void setSizeIncrement(@Const @ByRef QSize arg0);
    public native void setSizeIncrement(int w, int h);
    public native @ByVal QSize baseSize();
    public native void setBaseSize(@Const @ByRef QSize arg0);
    public native void setBaseSize(int basew, int baseh);

    public native void setFixedSize(@Const @ByRef QSize arg0);
    public native void setFixedSize(int w, int h);
    public native void setFixedWidth(int w);
    public native void setFixedHeight(int h);

    // Widget coordinate mapping

    public native QWidget window();
    public native QWidget nativeParentWidget();
    public native QWidget topLevelWidget();

    // Widget appearance functions

    public native @Const @ByRef QFont font();
    public native void setFont(@Const @ByRef QFont arg0);

// #ifndef QT_NO_CURSOR
    public native void unsetCursor();
// #endif

    public native void setMouseTracking(@Cast("bool") boolean enable);
    public native @Cast("bool") boolean hasMouseTracking();
    public native @Cast("bool") boolean underMouse();

    public native void setTabletTracking(@Cast("bool") boolean enable);
    public native @Cast("bool") boolean hasTabletTracking();
    public native void clearMask();

    public native void render(QPaintDevice target);

// #if QT_CONFIG(graphicseffect)
// #endif // QT_CONFIG(graphicseffect)

// #ifndef QT_NO_GESTURES
    public native void grabGesture(@Cast("Qt::GestureType") long type);
    public native void ungrabGesture(@Cast("Qt::GestureType") long type);
    public native void setWindowTitle(@Const @ByRef QString arg0);
// #ifndef QT_NO_STYLE_STYLESHEET
    public native void setStyleSheet(@Const @ByRef QString styleSheet);
// #ifndef QT_NO_STYLE_STYLESHEET
    public native @ByVal QString styleSheet();
// #endif
    public native @ByVal QString windowTitle();
    public native void setWindowIconText(@Const @ByRef QString arg0);
    public native @ByVal QString windowIconText();
    public native void setWindowRole(@Const @ByRef QString arg0);
    public native @ByVal QString windowRole();
    public native void setWindowFilePath(@Const @ByRef QString filePath);
    public native @ByVal QString windowFilePath();

    public native void setWindowOpacity(double level);
    public native double windowOpacity();

    public native @Cast("bool") boolean isWindowModified();
// #ifndef QT_NO_TOOLTIP
    public native void setToolTip(@Const @ByRef QString arg0);
    public native @ByVal QString toolTip();
    public native void setToolTipDuration(int msec);
    public native int toolTipDuration();
// #endif
// #if QT_CONFIG(statustip)
    public native void setStatusTip(@Const @ByRef QString arg0);
    public native @ByVal QString statusTip();
// #endif
// #if QT_CONFIG(whatsthis)
    public native void setWhatsThis(@Const @ByRef QString arg0);
    public native @ByVal QString whatsThis();
// #endif
// #ifndef QT_NO_ACCESSIBILITY
    public native @ByVal QString accessibleName();
    public native void setAccessibleName(@Const @ByRef QString name);
    public native @ByVal QString accessibleDescription();
    public native void setAccessibleDescription(@Const @ByRef QString description);
// #endif

    public native void setLayoutDirection(@Cast("Qt::LayoutDirection") int direction);
    public native @Cast("Qt::LayoutDirection") int layoutDirection();
    public native void unsetLayoutDirection();
    public native void unsetLocale();

    public native @Cast("bool") boolean isRightToLeft();
    public native @Cast("bool") boolean isLeftToRight();
    public native void setFocus();
    public native @Cast("bool") boolean isActiveWindow();
    public native void activateWindow();
    public native void clearFocus();

    public native void setFocus(@Cast("Qt::FocusReason") int reason);
    public native @Cast("Qt::FocusPolicy") int focusPolicy();
    public native void setFocusPolicy(@Cast("Qt::FocusPolicy") int policy);
    public native @Cast("bool") boolean hasFocus();
    public static native void setTabOrder(QWidget arg0, QWidget arg1);
    public native void setFocusProxy(QWidget arg0);
    public native QWidget focusProxy();
    public native @Cast("Qt::ContextMenuPolicy") int contextMenuPolicy();
    public native void setContextMenuPolicy(@Cast("Qt::ContextMenuPolicy") int policy);

    // Grab functions
    public native void grabMouse();
// #ifndef QT_NO_CURSOR
// #endif
    public native void releaseMouse();
    public native void grabKeyboard();
    public native void releaseKeyboard();
// #ifndef QT_NO_SHORTCUT
    public native void releaseShortcut(int id);
    public native void setShortcutEnabled(int id, @Cast("bool") boolean enable/*=true*/);
    public native void setShortcutEnabled(int id);
    public native void setShortcutAutoRepeat(int id, @Cast("bool") boolean enable/*=true*/);
    public native void setShortcutAutoRepeat(int id);
// #endif
    public static native QWidget mouseGrabber();
    public static native QWidget keyboardGrabber();

    // Update/refresh functions
    public native @Cast("bool") boolean updatesEnabled();
    public native void setUpdatesEnabled(@Cast("bool") boolean enable);

// #if QT_CONFIG(graphicsview)
    public native void update();
    public native void repaint();
    public native void update(int x, int y, int w, int h);

    public native void repaint(int x, int y, int w, int h);
    // Widget management functions

    public native void setVisible(@Cast("bool") boolean visible);
    public native void setHidden(@Cast("bool") boolean hidden);
    public native void show();
    public native void hide();

    public native void showMinimized();
    public native void showMaximized();
    public native void showFullScreen();
    public native void showNormal();

    public native @Cast("bool") @Name("close") boolean _close();
    public native void raise();
    public native void lower();
    public native void stackUnder(QWidget arg0);
    public native void move(int x, int y);
    public native void resize(int w, int h);
    public native void resize(@Const @ByRef QSize arg0);
    public native void setGeometry(int x, int y, int w, int h);
    public native void adjustSize();
    public native @Cast("bool") boolean isVisible();
    public native @Cast("bool") boolean isVisibleTo(@Const QWidget arg0);
    public native @Cast("bool") boolean isHidden();

    public native @Cast("bool") boolean isMinimized();
    public native @Cast("bool") boolean isMaximized();
    public native @Cast("bool") boolean isFullScreen();

    public native @ByVal QSize sizeHint();
    public native @ByVal QSize minimumSizeHint();

    public native @ByVal QSizePolicy sizePolicy();
    public native void setSizePolicy(@ByVal QSizePolicy arg0);
    public native void setSizePolicy(@Cast("QSizePolicy::Policy") int horizontal, @Cast("QSizePolicy::Policy") int vertical);
    public native int heightForWidth(int arg0);
    public native @Cast("bool") boolean hasHeightForWidth();

    public native void setContentsMargins(int left, int top, int right, int bottom);
    public native void getContentsMargins(IntPointer left, IntPointer top, IntPointer right, IntPointer bottom);
    public native void getContentsMargins(IntBuffer left, IntBuffer top, IntBuffer right, IntBuffer bottom);
    public native void getContentsMargins(int[] left, int[] top, int[] right, int[] bottom);
    public native QLayout layout();
    public native void setLayout(QLayout arg0);
    public native void updateGeometry();

    public native void setParent(QWidget parent);
    public native void setParent(QWidget parent, @ByVal @Cast("Qt::WindowFlags") int f);

    public native void scroll(int dx, int dy);

    // Misc. functions

    public native QWidget focusWidget();
    public native QWidget nextInFocusChain();
    public native QWidget previousInFocusChain();

    // drag and drop
    public native @Cast("bool") boolean acceptDrops();
    public native void setAcceptDrops(@Cast("bool") boolean on);

// #ifndef QT_NO_ACTION
    //actions
// #if QT_VERSION >= QT_VERSION_CHECK(6,0,0)
// #else
// #endif
// #endif

    public native QWidget parentWidget();

    public native void setWindowFlags(@ByVal @Cast("Qt::WindowFlags") int type);
    public native @ByVal @Cast("Qt::WindowFlags") int windowFlags();
    public native void setWindowFlag(@Cast("Qt::WindowType") int arg0, @Cast("bool") boolean on/*=true*/);
    public native void setWindowFlag(@Cast("Qt::WindowType") int arg0);
    public native void overrideWindowFlags(@ByVal @Cast("Qt::WindowFlags") int type);

    public native @Cast("Qt::WindowType") int windowType();

    public static native QWidget find(@Cast("size_t") long arg0);
    public native QWidget childAt(int x, int y);

    public native void setAttribute(@Cast("Qt::WidgetAttribute") int arg0, @Cast("bool") boolean on/*=true*/);
    public native void setAttribute(@Cast("Qt::WidgetAttribute") int arg0);
    public native @Cast("bool") boolean testAttribute(@Cast("Qt::WidgetAttribute") int arg0);

    public native void ensurePolished();

    public native @Cast("bool") boolean isAncestorOf(@Const QWidget child);

// #ifdef QT_KEYPAD_NAVIGATION
// #endif

    public native @Cast("bool") boolean autoFillBackground();
    public native void setAutoFillBackground(@Cast("bool") boolean enabled);
}


}
