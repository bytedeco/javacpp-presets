// Targeted by JavaCPP version 1.4.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.javacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class QtCore extends org.bytedeco.javacpp.helper.QtCore {
    static { Loader.load(); }

// Parsed from QtCore/qcoreevent.h

@NoOffset public static class QEvent extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QEvent(Pointer p) { super(p); }

    public enum Type {
        /*
          If you get a strange compiler error on the line with None,
          it's probably because you're also including X11 headers,
          which #define the symbol None. Put the X11 includes after
          the Qt includes to solve this problem.
        */
        None(0),                               // invalid event
        Timer(1),                              // timer event
        MouseButtonPress(2),                   // mouse button pressed
        MouseButtonRelease(3),                 // mouse button released
        MouseButtonDblClick(4),                // mouse button double click
        MouseMove(5),                          // mouse move
        KeyPress(6),                           // key pressed
        KeyRelease(7),                         // key released
        FocusIn(8),                            // keyboard focus received
        FocusOut(9),                           // keyboard focus lost
        FocusAboutToChange(23),                // keyboard focus is about to be lost
        Enter(10),                             // mouse enters widget
        Leave(11),                             // mouse leaves widget
        Paint(12),                             // paint widget
        Move(13),                              // move widget
        Resize(14),                            // resize widget
        Create(15),                            // after widget creation
        Destroy(16),                           // during widget destruction
        Show(17),                              // widget is shown
        Hide(18),                              // widget is hidden
        Close(19),                             // request to close widget
        Quit(20),                              // request to quit application
        ParentChange(21),                      // widget has been reparented
        ParentAboutToChange(131),              // sent just before the parent change is done
        ThreadChange(22),                      // object has changed threads
        WindowActivate(24),                    // window was activated
        WindowDeactivate(25),                  // window was deactivated
        ShowToParent(26),                      // widget is shown to parent
        HideToParent(27),                      // widget is hidden to parent
        Wheel(31),                             // wheel event
        WindowTitleChange(33),                 // window title changed
        WindowIconChange(34),                  // icon changed
        ApplicationWindowIconChange(35),       // application icon changed
        ApplicationFontChange(36),             // application font changed
        ApplicationLayoutDirectionChange(37),  // application layout direction changed
        ApplicationPaletteChange(38),          // application palette changed
        PaletteChange(39),                     // widget palette changed
        Clipboard(40),                         // internal clipboard event
        Speech(42),                            // reserved for speech input
        MetaCall(43),                         // meta call event
        SockAct(50),                           // socket activation
        WinEventAct(132),                      // win event activation
        DeferredDelete(52),                    // deferred delete event
        DragEnter(60),                         // drag moves into widget
        DragMove(61),                          // drag moves in widget
        DragLeave(62),                         // drag leaves or is cancelled
        Drop(63),                              // actual drop
        DragResponse(64),                      // drag accepted/rejected
        ChildAdded(68),                        // new child widget
        ChildPolished(69),                     // polished child widget
        ChildRemoved(71),                      // deleted child widget
        ShowWindowRequest(73),                 // widget's window should be mapped
        PolishRequest(74),                     // widget should be polished
        Polish(75),                            // widget is polished
        LayoutRequest(76),                     // widget should be relayouted
        UpdateRequest(77),                     // widget should be repainted
        UpdateLater(78),                       // request update() later

        EmbeddingControl(79),                  // ActiveX embedding
        ActivateControl(80),                   // ActiveX activation
        DeactivateControl(81),                 // ActiveX deactivation
        ContextMenu(82),                       // context popup menu
        InputMethod(83),                       // input method
        TabletMove(87),                        // Wacom tablet event
        LocaleChange(88),                      // the system locale changed
        LanguageChange(89),                    // the application language changed
        LayoutDirectionChange(90),             // the layout direction changed
        Style(91),                             // internal style event
        TabletPress(92),                       // tablet press
        TabletRelease(93),                     // tablet release
        OkRequest(94),                         // CE (Ok) button pressed
        HelpRequest(95),                       // CE (?)  button pressed

        IconDrag(96),                          // proxy icon dragged

        FontChange(97),                        // font has changed
        EnabledChange(98),                     // enabled state has changed
        ActivationChange(99),                  // window activation has changed
        StyleChange(100),                      // style has changed
        IconTextChange(101),                   // icon text has changed.  Deprecated.
        ModifiedChange(102),                   // modified state has changed
        MouseTrackingChange(109),              // mouse tracking state has changed

        WindowBlocked(103),                    // window is about to be blocked modally
        WindowUnblocked(104),                  // windows modal blocking has ended
        WindowStateChange(105),

        ReadOnlyChange(106),                   // readonly state has changed

        ToolTip(110),
        WhatsThis(111),
        StatusTip(112),

        ActionChanged(113),
        ActionAdded(114),
        ActionRemoved(115),

        FileOpen(116),                         // file open request

        Shortcut(117),                         // shortcut triggered
        ShortcutOverride(51),                  // shortcut override request

        WhatsThisClicked(118),

        ToolBarChange(120),                    // toolbar visibility toggled

        ApplicationActivate(121),              // deprecated. Use ApplicationStateChange instead.
        ApplicationActivated(ApplicationActivate), // deprecated
        ApplicationDeactivate(122),            // deprecated. Use ApplicationStateChange instead.
        ApplicationDeactivated(ApplicationDeactivate), // deprecated

        QueryWhatsThis(123),                   // query what's this widget help
        EnterWhatsThisMode(124),
        LeaveWhatsThisMode(125),

        ZOrderChange(126),                     // child widget has had its z-order changed

        HoverEnter(127),                       // mouse cursor enters a hover widget
        HoverLeave(128),                       // mouse cursor leaves a hover widget
        HoverMove(129),                        // mouse cursor move inside a hover widget

        // last event id used = 132

// #ifdef QT_KEYPAD_NAVIGATION
        EnterEditFocus(150),                   // enter edit mode in keypad navigation
        LeaveEditFocus(151),                   // enter edit mode in keypad navigation
// #endif
        AcceptDropsChange(152),

        ZeroTimerEvent(154),                   // Used for Windows Zero timer events

        GraphicsSceneMouseMove(155),           // GraphicsView
        GraphicsSceneMousePress(156),
        GraphicsSceneMouseRelease(157),
        GraphicsSceneMouseDoubleClick(158),
        GraphicsSceneContextMenu(159),
        GraphicsSceneHoverEnter(160),
        GraphicsSceneHoverMove(161),
        GraphicsSceneHoverLeave(162),
        GraphicsSceneHelp(163),
        GraphicsSceneDragEnter(164),
        GraphicsSceneDragMove(165),
        GraphicsSceneDragLeave(166),
        GraphicsSceneDrop(167),
        GraphicsSceneWheel(168),

        KeyboardLayoutChange(169),             // keyboard layout changed

        DynamicPropertyChange(170),            // A dynamic property was changed through setProperty/property

        TabletEnterProximity(171),
        TabletLeaveProximity(172),

        NonClientAreaMouseMove(173),
        NonClientAreaMouseButtonPress(174),
        NonClientAreaMouseButtonRelease(175),
        NonClientAreaMouseButtonDblClick(176),

        MacSizeChange(177),                    // when the Qt::WA_Mac{Normal,Small,Mini}Size changes

        ContentsRectChange(178),               // sent by QWidget::setContentsMargins (internal)

        MacGLWindowChange(179),                // Internal! the window of the GLWidget has changed

        FutureCallOut(180),

        GraphicsSceneResize (181),
        GraphicsSceneMove (182),

        CursorChange(183),
        ToolTipChange(184),

        NetworkReplyUpdated(185),              // Internal for QNetworkReply

        GrabMouse(186),
        UngrabMouse(187),
        GrabKeyboard(188),
        UngrabKeyboard(189),
        MacGLClearDrawable(191),               // Internal Cocoa, the window has changed, so we must clear

        StateMachineSignal(192),
        StateMachineWrapped(193),

        TouchBegin(194),
        TouchUpdate(195),
        TouchEnd(196),

// #ifndef QT_NO_GESTURES
        NativeGesture(197),                    // QtGui native gesture
// #endif
        RequestSoftwareInputPanel(199),
        CloseSoftwareInputPanel(200),

        WinIdChange(203),
// #ifndef QT_NO_GESTURES
        Gesture(198),
        GestureOverride(202),
// #endif
        ScrollPrepare(204),
        Scroll(205),

        Expose(206),

        InputMethodQuery(207),
        OrientationChange(208),                // Screen orientation has changed

        TouchCancel(209),

        ThemeChange(210),

        SockClose(211),                        // socket closed

        PlatformPanel(212),

        StyleAnimationUpdate(213),             // style animation target should be updated
        ApplicationStateChange(214),

        WindowChangeInternal(215),             // internal for QQuickWidget
        ScreenChangeInternal(216),

        PlatformSurface(217),                  // Platform surface created or about to be destroyed

        Pointer(218),                          // QQuickPointerEvent; ### Qt 6: QPointerEvent

        TabletTrackingChange(219),             // tablet tracking state has changed

        // 512 reserved for Qt Jambi's MetaCall event
        // 513 reserved for Qt Jambi's DeleteOnMainThread event

        User(1000),                            // first user event id
        MaxUser(65535);                        // last user event id

        public final int value;
        private Type(int v) { this.value = v; }
        private Type(Type e) { this.value = e.value; }
        public Type intern() { for (Type e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
    

    public QEvent(Type type) { super((Pointer)null); allocate(type); }
    private native void allocate(Type type);
    public QEvent(@Const @ByRef QEvent other) { super((Pointer)null); allocate(other); }
    private native void allocate(@Const @ByRef QEvent other);
    public native @ByRef @Name("operator =") QEvent put(@Const @ByRef QEvent other);
    public native Type type();
    public native @Cast("bool") boolean spontaneous();

    public native void setAccepted(@Cast("bool") boolean accepted);
    public native @Cast("bool") boolean isAccepted();

    public native void accept();
    public native void ignore();

    public static native int registerEventType(int hint/*=-1*/);
    public static native int registerEventType();
}

@NoOffset public static class QTimerEvent extends QEvent {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QTimerEvent(Pointer p) { super(p); }

    public QTimerEvent( int timerId ) { super((Pointer)null); allocate(timerId); }
    private native void allocate( int timerId );
    public native int timerId();
}

@NoOffset public static class QChildEvent extends QEvent {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QChildEvent(Pointer p) { super(p); }

    public QChildEvent( @ByVal Type type, QObject child ) { super((Pointer)null); allocate(type, child); }
    private native void allocate( @ByVal Type type, QObject child );
    public native QObject child();
    public native @Cast("bool") boolean added();
    public native @Cast("bool") boolean polished();
    public native @Cast("bool") boolean removed();
}

@NoOffset public static class QDynamicPropertyChangeEvent extends QEvent {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QDynamicPropertyChangeEvent(Pointer p) { super(p); }

    public QDynamicPropertyChangeEvent(@Const @ByRef QByteArray name) { super((Pointer)null); allocate(name); }
    private native void allocate(@Const @ByRef QByteArray name);

    public native @ByVal QByteArray propertyName();
}

@NoOffset public static class QDeferredDeleteEvent extends QEvent {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QDeferredDeleteEvent(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QDeferredDeleteEvent(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QDeferredDeleteEvent position(long position) {
        return (QDeferredDeleteEvent)super.position(position);
    }

    public QDeferredDeleteEvent() { super((Pointer)null); allocate(); }
    private native void allocate();
    public native int loopLevel();
}



// Parsed from QtCore/qlogging.h

public enum QtMsgType { QtDebugMsg(0), QtWarningMsg(1), QtCriticalMsg(2), QtFatalMsg(3), QtInfoMsg(4), QtSystemMsg(QtCriticalMsg);

    public final int value;
    private QtMsgType(int v) { this.value = v; }
    private QtMsgType(QtMsgType e) { this.value = e.value; }
    public QtMsgType intern() { for (QtMsgType e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

@NoOffset public static class QMessageLogContext extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QMessageLogContext(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QMessageLogContext(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QMessageLogContext position(long position) {
        return (QMessageLogContext)super.position(position);
    }

     public QMessageLogContext() { super((Pointer)null); allocate(); }
private native void allocate();
     public QMessageLogContext(@Cast("const char*") BytePointer fileName, int lineNumber, @Cast("const char*") BytePointer functionName, @Cast("const char*") BytePointer categoryName) { super((Pointer)null); allocate(fileName, lineNumber, functionName, categoryName); }
private native void allocate(@Cast("const char*") BytePointer fileName, int lineNumber, @Cast("const char*") BytePointer functionName, @Cast("const char*") BytePointer categoryName);
public QMessageLogContext(String fileName, int lineNumber, String functionName, String categoryName) { super((Pointer)null); allocate(fileName, lineNumber, functionName, categoryName); }
private native void allocate(String fileName, int lineNumber, String functionName, String categoryName);

    public native void copy(@Const @ByRef QMessageLogContext logContext);

    public native int version(); public native QMessageLogContext version(int version);
    public native int line(); public native QMessageLogContext line(int line);
    @MemberGetter public native @Cast("const char*") BytePointer file();
    @MemberGetter public native @Cast("const char*") BytePointer function();
    @MemberGetter public native @Cast("const char*") BytePointer category();
}
@NoOffset public static class QMessageLogger extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QMessageLogger(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QMessageLogger(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QMessageLogger position(long position) {
        return (QMessageLogger)super.position(position);
    }

     public QMessageLogger() { super((Pointer)null); allocate(); }
private native void allocate();
     public QMessageLogger(@Cast("const char*") BytePointer file, int line, @Cast("const char*") BytePointer function) { super((Pointer)null); allocate(file, line, function); }
private native void allocate(@Cast("const char*") BytePointer file, int line, @Cast("const char*") BytePointer function);
public QMessageLogger(String file, int line, String function) { super((Pointer)null); allocate(file, line, function); }
private native void allocate(String file, int line, String function);
     public QMessageLogger(@Cast("const char*") BytePointer file, int line, @Cast("const char*") BytePointer function, @Cast("const char*") BytePointer category) { super((Pointer)null); allocate(file, line, function, category); }
private native void allocate(@Cast("const char*") BytePointer file, int line, @Cast("const char*") BytePointer function, @Cast("const char*") BytePointer category);
public QMessageLogger(String file, int line, String function, String category) { super((Pointer)null); allocate(file, line, function, category); }
private native void allocate(String file, int line, String function, String category);

    public native void debug(@Cast("const char*") BytePointer msg);
    public native void debug(String msg);
    public native void noDebug(@Cast("const char*") BytePointer arg0);
    public native void noDebug(String arg0);
    public native void info(@Cast("const char*") BytePointer msg);
    public native void info(String msg);
    
    public native void warning(@Cast("const char*") BytePointer msg);
    public native void warning(String msg);
    
    public native void critical(@Cast("const char*") BytePointer msg);
    public native void critical(String msg);
    public native void fatal(@Cast("const char*") BytePointer msg);
    public native void fatal(String msg);
}
public static class QtMessageHandler extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    QtMessageHandler(Pointer p) { super(p); }
    protected QtMessageHandler() { allocate(); }
    private native void allocate();
    public native void call(QtMsgType arg0, @Const @ByRef QMessageLogContext arg1, @Const @ByRef QString arg2);
}
public static native QtMessageHandler qInstallMessageHandler(QtMessageHandler arg0);

public static native void qSetMessagePattern(@Const @ByRef QString messagePattern);
public static native @ByVal QString qFormatLogMessage(QtMsgType type, @Const @ByRef QMessageLogContext context,
                                        @Const @ByRef QString buf);

// #endif // QLOGGING_H


// Parsed from QtCore/qnamespace.h

// #ifndef Q_MOC_RUN
// #endif

    /** enum Qt::GlobalColor */
    public static final int
        color0 = 0,
        color1 = 1,
        black = 2,
        white = 3,
        darkGray = 4,
        gray = 5,
        lightGray = 6,
        red = 7,
        green = 8,
        blue = 9,
        cyan = 10,
        magenta = 11,
        yellow = 12,
        darkRed = 13,
        darkGreen = 14,
        darkBlue = 15,
        darkCyan = 16,
        darkMagenta = 17,
        darkYellow = 18,
        transparent = 19;

    /** enum Qt::KeyboardModifier */
    public static final int
        NoModifier           = 0x00000000,
        ShiftModifier        = 0x02000000,
        ControlModifier      = 0x04000000,
        AltModifier          = 0x08000000,
        MetaModifier         = 0x10000000,
        KeypadModifier       = 0x20000000,
        GroupSwitchModifier  = 0x40000000,
        // Do not extend the mask to include 0x01000000
        KeyboardModifierMask = 0xfe000000;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(KeyboardModifiers, KeyboardModifier)
    

    //shorter names for shortcuts
    // The use of all-caps identifiers has the potential for clashing with
    // user-defined or third-party macros. More so when the identifiers are not
    // "namespace"-prefixed. This is considered bad practice and is why
    // KeypadModifier was not added to the Modifier enum.
    /** enum Qt::Modifier */
    public static final int
        META          = MetaModifier,
        SHIFT         = ShiftModifier,
        CTRL          = ControlModifier,
        ALT           = AltModifier,
        MODIFIER_MASK = KeyboardModifierMask,
        UNICODE_ACCEL = 0x00000000;

    @Namespace("Qt") public enum MouseButton {
        NoButton        (0x00000000),
        LeftButton      (0x00000001),
        RightButton     (0x00000002),
        MidButton       (0x00000004), // ### Qt 6: remove me
        MiddleButton    (MidButton),
        BackButton      (0x00000008),
        XButton1        (BackButton),
        ExtraButton1    (XButton1),
        ForwardButton   (0x00000010),
        XButton2        (ForwardButton),
        ExtraButton2    (ForwardButton),
        TaskButton      (0x00000020),
        ExtraButton3    (TaskButton),
        ExtraButton4    (0x00000040),
        ExtraButton5    (0x00000080),
        ExtraButton6    (0x00000100),
        ExtraButton7    (0x00000200),
        ExtraButton8    (0x00000400),
        ExtraButton9    (0x00000800),
        ExtraButton10   (0x00001000),
        ExtraButton11   (0x00002000),
        ExtraButton12   (0x00004000),
        ExtraButton13   (0x00008000),
        ExtraButton14   (0x00010000),
        ExtraButton15   (0x00020000),
        ExtraButton16   (0x00040000),
        ExtraButton17   (0x00080000),
        ExtraButton18   (0x00100000),
        ExtraButton19   (0x00200000),
        ExtraButton20   (0x00400000),
        ExtraButton21   (0x00800000),
        ExtraButton22   (0x01000000),
        ExtraButton23   (0x02000000),
        ExtraButton24   (0x04000000),
        AllButtons      (0x07ffffff),
        MaxMouseButton  (ExtraButton24),
        // 4 high-order bits remain available for future use (0x08000000 through 0x40000000).
        MouseButtonMask (0xffffffff);

        public final int value;
        private MouseButton(int v) { this.value = v; }
        private MouseButton(MouseButton e) { this.value = e.value; }
        public MouseButton intern() { for (MouseButton e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(MouseButtons, MouseButton)
    

    @Namespace("Qt") public enum Orientation {
        Horizontal(0x1),
        Vertical(0x2);

        public final int value;
        private Orientation(int v) { this.value = v; }
        private Orientation(Orientation e) { this.value = e.value; }
        public Orientation intern() { for (Orientation e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }

//     #define Q_DECLARE_FLAGS(arg0, arg1)(Orientations, Orientation)
    

    /** enum Qt::FocusPolicy */
    public static final int
        NoFocus = 0,
        TabFocus = 0x1,
        ClickFocus = 0x2,
        StrongFocus = TabFocus | ClickFocus | 0x8,
        WheelFocus = StrongFocus | 0x4;

    /** enum Qt::TabFocusBehavior */
    public static final int
        NoTabFocus           = 0x00,
        TabFocusTextControls = 0x01,
        TabFocusListControls = 0x02,
        TabFocusAllControls  = 0xff;

    /** enum Qt::SortOrder */
    public static final int
        AscendingOrder = 0,
        DescendingOrder = 1;

    /** enum Qt::TileRule */
    public static final int
        StretchTile = 0,
        RepeatTile = 1,
        RoundTile = 2;

    // Text formatting flags for QPainter::drawText and QLabel.
    // The following two enums can be combined to one integer which
    // is passed as 'flags' to QPainter::drawText, QFontMetrics::boundingRect and qt_format_text.

    /** enum Qt::AlignmentFlag */
    public static final int
        AlignLeft = 0x0001,
        AlignLeading = AlignLeft,
        AlignRight = 0x0002,
        AlignTrailing = AlignRight,
        AlignHCenter = 0x0004,
        AlignJustify = 0x0008,
        AlignAbsolute = 0x0010,
        AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,

        AlignTop = 0x0020,
        AlignBottom = 0x0040,
        AlignVCenter = 0x0080,
        AlignBaseline = 0x0100,
        // Note that 0x100 will clash with Qt::TextSingleLine = 0x100 due to what the comment above
        // this enum declaration states. However, since Qt::AlignBaseline is only used by layouts,
        // it doesn't make sense to pass Qt::AlignBaseline to QPainter::drawText(), so there
        // shouldn't really be any ambiguity between the two overlapping enum values.
        AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter | AlignBaseline,

        AlignCenter = AlignVCenter | AlignHCenter;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(Alignment, AlignmentFlag)
    

    /** enum Qt::TextFlag */
    public static final int
        TextSingleLine = 0x0100,
        TextDontClip = 0x0200,
        TextExpandTabs = 0x0400,
        TextShowMnemonic = 0x0800,
        TextWordWrap = 0x1000,
        TextWrapAnywhere = 0x2000,
        TextDontPrint = 0x4000,
        TextIncludeTrailingSpaces = 0x08000000,
        TextHideMnemonic = 0x8000,
        TextJustificationForced = 0x10000,
        TextForceLeftToRight = 0x20000,
        TextForceRightToLeft = 0x40000,
        // Ensures that the longest variant is always used when computing the
        // size of a multi-variant string.
        TextLongestVariant = 0x80000, TextBypassShaping = 0x100000;
// #endif

    /** enum Qt::TextElideMode */
    public static final int
        ElideLeft = 0,
        ElideRight = 1,
        ElideMiddle = 2,
        ElideNone = 3;

    /** enum Qt::WhiteSpaceMode */
    public static final int
        WhiteSpaceNormal = 0,
        WhiteSpacePre = 1,
        WhiteSpaceNoWrap = 2,
        WhiteSpaceModeUndefined = -1;

    /** enum Qt::HitTestAccuracy */
    public static final int ExactHit = 0, FuzzyHit = 1;

    /** enum Qt::WindowType */
    public static final int
        Widget = 0x00000000,
        Window = 0x00000001,
        Dialog = 0x00000002 | Window,
        Sheet = 0x00000004 | Window,
        Drawer = Sheet | Dialog,
        Popup = 0x00000008 | Window,
        Tool = Popup | Dialog,
        ToolTip = Popup | Sheet,
        SplashScreen = ToolTip | Dialog,
        Desktop = 0x00000010 | Window,
        SubWindow = 0x00000012,
        ForeignWindow = 0x00000020 | Window,
        CoverWindow = 0x00000040 | Window,

        WindowType_Mask = 0x000000ff,
        MSWindowsFixedSizeDialogHint = 0x00000100,
        MSWindowsOwnDC = 0x00000200,
        BypassWindowManagerHint = 0x00000400,
        X11BypassWindowManagerHint = BypassWindowManagerHint,
        FramelessWindowHint = 0x00000800,
        WindowTitleHint = 0x00001000,
        WindowSystemMenuHint = 0x00002000,
        WindowMinimizeButtonHint = 0x00004000,
        WindowMaximizeButtonHint = 0x00008000,
        WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint,
        WindowContextHelpButtonHint = 0x00010000,
        WindowShadeButtonHint = 0x00020000,
        WindowStaysOnTopHint = 0x00040000,
        WindowTransparentForInput = 0x00080000,
        WindowOverridesSystemGestures = 0x00100000,
        WindowDoesNotAcceptFocus = 0x00200000,
        MaximizeUsingFullscreenGeometryHint = 0x00400000,

        CustomizeWindowHint = 0x02000000,
        WindowStaysOnBottomHint = 0x04000000,
        WindowCloseButtonHint = 0x08000000,
        MacWindowToolBarButtonHint = 0x10000000,
        BypassGraphicsProxyWidget = 0x20000000,
        NoDropShadowWindowHint = 0x40000000,
        WindowFullscreenButtonHint = 0x80000000;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(WindowFlags, WindowType)
    

    @Namespace("Qt") public enum WindowState {
        WindowNoState   (0x00000000),
        WindowMinimized (0x00000001),
        WindowMaximized (0x00000002),
        WindowFullScreen(0x00000004),
        WindowActive    (0x00000008);

        public final int value;
        private WindowState(int v) { this.value = v; }
        private WindowState(WindowState e) { this.value = e.value; }
        public WindowState intern() { for (WindowState e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }

//     #define Q_DECLARE_FLAGS(arg0, arg1)(WindowStates, WindowState)
    

    /** enum Qt::ApplicationState */
    public static final int
        ApplicationSuspended    = 0x00000000,
        ApplicationHidden       = 0x00000001,
        ApplicationInactive     = 0x00000002,
        ApplicationActive       = 0x00000004;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(ApplicationStates, ApplicationState)

    /** enum Qt::ScreenOrientation */
    public static final int
        PrimaryOrientation           = 0x00000000,
        PortraitOrientation          = 0x00000001,
        LandscapeOrientation         = 0x00000002,
        InvertedPortraitOrientation  = 0x00000004,
        InvertedLandscapeOrientation = 0x00000008;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(ScreenOrientations, ScreenOrientation)
    

    /** enum Qt::WidgetAttribute */
    public static final int
        WA_Disabled = 0,
        WA_UnderMouse = 1,
        WA_MouseTracking = 2,
        WA_ContentsPropagated = 3, // ## deprecated
        WA_OpaquePaintEvent = 4,
        WA_NoBackground = WA_OpaquePaintEvent, // ## deprecated
        WA_StaticContents = 5,
        WA_LaidOut = 7,
        WA_PaintOnScreen = 8,
        WA_NoSystemBackground = 9,
        WA_UpdatesDisabled = 10,
        WA_Mapped = 11,
        WA_MacNoClickThrough = 12, // Mac only
        WA_InputMethodEnabled = 14,
        WA_WState_Visible = 15,
        WA_WState_Hidden = 16,

        WA_ForceDisabled = 32,
        WA_KeyCompression = 33,
        WA_PendingMoveEvent = 34,
        WA_PendingResizeEvent = 35,
        WA_SetPalette = 36,
        WA_SetFont = 37,
        WA_SetCursor = 38,
        WA_NoChildEventsFromChildren = 39,
        WA_WindowModified = 41,
        WA_Resized = 42,
        WA_Moved = 43,
        WA_PendingUpdate = 44,
        WA_InvalidSize = 45,
        WA_MacBrushedMetal = 46, // Mac only
        WA_MacMetalStyle = WA_MacBrushedMetal, // obsolete
        WA_CustomWhatsThis = 47,
        WA_LayoutOnEntireRect = 48,
        WA_OutsideWSRange = 49,
        WA_GrabbedShortcut = 50,
        WA_TransparentForMouseEvents = 51,
        WA_PaintUnclipped = 52,
        WA_SetWindowIcon = 53,
        WA_NoMouseReplay = 54,
        WA_DeleteOnClose = 55,
        WA_RightToLeft = 56,
        WA_SetLayoutDirection = 57,
        WA_NoChildEventsForParent = 58,
        WA_ForceUpdatesDisabled = 59,

        WA_WState_Created = 60,
        WA_WState_CompressKeys = 61,
        WA_WState_InPaintEvent = 62,
        WA_WState_Reparented = 63,
        WA_WState_ConfigPending = 64,
        WA_WState_Polished = 66,
        WA_WState_DND = 67, // ## deprecated
        WA_WState_OwnSizePolicy = 68,
        WA_WState_ExplicitShowHide = 69,

        WA_ShowModal = 70, // ## deprecated
        WA_MouseNoMask = 71,
        WA_GroupLeader = 72, // ## deprecated
        WA_NoMousePropagation = 73, // ## for now, might go away.
        WA_Hover = 74,
        WA_InputMethodTransparent = 75, // Don't reset IM when user clicks on this (for virtual keyboards on embedded)
        WA_QuitOnClose = 76,

        WA_KeyboardFocusChange = 77,

        WA_AcceptDrops = 78,
        WA_DropSiteRegistered = 79, // internal
        WA_ForceAcceptDrops = WA_DropSiteRegistered, // ## deprecated

        WA_WindowPropagation = 80,

        WA_NoX11EventCompression = 81,
        WA_TintedBackground = 82,
        WA_X11OpenGLOverlay = 83,
        WA_AlwaysShowToolTips = 84,
        WA_MacOpaqueSizeGrip = 85,
        WA_SetStyle = 86,

        WA_SetLocale = 87,
        WA_MacShowFocusRect = 88,

        WA_MacNormalSize = 89,  // Mac only
        WA_MacSmallSize = 90,   // Mac only
        WA_MacMiniSize = 91,    // Mac only

        WA_LayoutUsesWidgetRect = 92,
        WA_StyledBackground = 93, // internal
        WA_MSWindowsUseDirect3D = 94, // Win only
        WA_CanHostQMdiSubWindowTitleBar = 95, // Internal

        WA_MacAlwaysShowToolWindow = 96, // Mac only

        WA_StyleSheet = 97, // internal

        WA_ShowWithoutActivating = 98,

        WA_X11BypassTransientForHint = 99,

        WA_NativeWindow = 100,
        WA_DontCreateNativeAncestors = 101,

        WA_MacVariableSize = 102,    // Mac only

        WA_DontShowOnScreen = 103,

        // window types from http://standards.freedesktop.org/wm-spec/
        WA_X11NetWmWindowTypeDesktop = 104,
        WA_X11NetWmWindowTypeDock = 105,
        WA_X11NetWmWindowTypeToolBar = 106,
        WA_X11NetWmWindowTypeMenu = 107,
        WA_X11NetWmWindowTypeUtility = 108,
        WA_X11NetWmWindowTypeSplash = 109,
        WA_X11NetWmWindowTypeDialog = 110,
        WA_X11NetWmWindowTypeDropDownMenu = 111,
        WA_X11NetWmWindowTypePopupMenu = 112,
        WA_X11NetWmWindowTypeToolTip = 113,
        WA_X11NetWmWindowTypeNotification = 114,
        WA_X11NetWmWindowTypeCombo = 115,
        WA_X11NetWmWindowTypeDND = 116,

        WA_MacFrameworkScaled  = 117,

        WA_SetWindowModality = 118,
        WA_WState_WindowOpacitySet = 119, // internal
        WA_TranslucentBackground = 120,

        WA_AcceptTouchEvents = 121,
        WA_WState_AcceptedTouchBeginEvent = 122,
        WA_TouchPadAcceptSingleTouchEvents = 123,

        WA_X11DoNotAcceptFocus = 126,
        WA_MacNoShadow = 127,

        WA_AlwaysStackOnTop = 128,

        WA_TabletTracking = 129,

        WA_ContentsMarginsRespectsSafeArea = 130,

        WA_StyleSheetTarget = 131,

        // Add new attributes before this line
        WA_AttributeCount = 132;

    @Namespace("Qt") public enum ApplicationAttribute {
        AA_ImmediateWidgetCreation(0),
        AA_MSWindowsUseDirect3DByDefault(1), // Win only
        AA_DontShowIconsInMenus(2),
        AA_NativeWindows(3),
        AA_DontCreateNativeWidgetSiblings(4),
        AA_PluginApplication(5),
        AA_MacPluginApplication(AA_PluginApplication),  // ### Qt 6: remove me
        AA_DontUseNativeMenuBar(6),
        AA_MacDontSwapCtrlAndMeta(7),
        AA_Use96Dpi(8),
        AA_X11InitThreads(10),
        AA_SynthesizeTouchForUnhandledMouseEvents(11),
        AA_SynthesizeMouseForUnhandledTouchEvents(12),
        AA_UseHighDpiPixmaps(13),
        AA_ForceRasterWidgets(14),
        AA_UseDesktopOpenGL(15),
        AA_UseOpenGLES(16),
        AA_UseSoftwareOpenGL(17),
        AA_ShareOpenGLContexts(18),
        AA_SetPalette(19),
        AA_EnableHighDpiScaling(20),
        AA_DisableHighDpiScaling(21),
        AA_UseStyleSheetPropagationInWidgetStyles(22), // ### Qt 6: remove me
        AA_DontUseNativeDialogs(23),
        AA_SynthesizeMouseForUnhandledTabletEvents(24),
        AA_CompressHighFrequencyEvents(25),
        AA_DontCheckOpenGLContextThreadAffinity(26),
        AA_DisableShaderDiskCache(27),
        AA_DontShowShortcutsInContextMenus(28),
        AA_CompressTabletEvents(29),
        AA_DisableWindowContextHelpButton(30), // ### Qt 6: remove me

        // Add new attributes before this line
        AA_AttributeCount(31);

        public final int value;
        private ApplicationAttribute(int v) { this.value = v; }
        private ApplicationAttribute(ApplicationAttribute e) { this.value = e.value; }
        public ApplicationAttribute intern() { for (ApplicationAttribute e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }


    // Image conversion flags.  The unusual ordering is caused by
    // compatibility and default requirements.

    /** enum Qt::ImageConversionFlag */
    public static final int
        ColorMode_Mask          = 0x00000003,
        AutoColor               = 0x00000000,
        ColorOnly               = 0x00000003,
        MonoOnly                = 0x00000002,
        // Reserved             = 0x00000001,

        AlphaDither_Mask        = 0x0000000c,
        ThresholdAlphaDither    = 0x00000000,
        OrderedAlphaDither      = 0x00000004,
        DiffuseAlphaDither      = 0x00000008,
        NoAlpha                 = 0x0000000c, // Not supported

        Dither_Mask             = 0x00000030,
        DiffuseDither           = 0x00000000,
        OrderedDither           = 0x00000010,
        ThresholdDither         = 0x00000020,
        // ReservedDither       = 0x00000030,

        DitherMode_Mask         = 0x000000c0,
        AutoDither              = 0x00000000,
        PreferDither            = 0x00000040,
        AvoidDither             = 0x00000080,

        NoOpaqueDetection       = 0x00000100,
        NoFormatConversion      = 0x00000200;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(ImageConversionFlags, ImageConversionFlag)
    

    /** enum Qt::BGMode */
    public static final int
        TransparentMode = 0,
        OpaqueMode = 1;

    /** enum Qt::Key */
    public static final int
        Key_Escape = 0x01000000,                // misc keys
        Key_Tab = 0x01000001,
        Key_Backtab = 0x01000002,
        Key_Backspace = 0x01000003,
        Key_Return = 0x01000004,
        Key_Enter = 0x01000005,
        Key_Insert = 0x01000006,
        Key_Delete = 0x01000007,
        Key_Pause = 0x01000008,
        Key_Print = 0x01000009,               // print screen
        Key_SysReq = 0x0100000a,
        Key_Clear = 0x0100000b,
        Key_Home = 0x01000010,                // cursor movement
        Key_End = 0x01000011,
        Key_Left = 0x01000012,
        Key_Up = 0x01000013,
        Key_Right = 0x01000014,
        Key_Down = 0x01000015,
        Key_PageUp = 0x01000016,
        Key_PageDown = 0x01000017,
        Key_Shift = 0x01000020,                // modifiers
        Key_Control = 0x01000021,
        Key_Meta = 0x01000022,
        Key_Alt = 0x01000023,
        Key_CapsLock = 0x01000024,
        Key_NumLock = 0x01000025,
        Key_ScrollLock = 0x01000026,
        Key_F1 = 0x01000030,                // function keys
        Key_F2 = 0x01000031,
        Key_F3 = 0x01000032,
        Key_F4 = 0x01000033,
        Key_F5 = 0x01000034,
        Key_F6 = 0x01000035,
        Key_F7 = 0x01000036,
        Key_F8 = 0x01000037,
        Key_F9 = 0x01000038,
        Key_F10 = 0x01000039,
        Key_F11 = 0x0100003a,
        Key_F12 = 0x0100003b,
        Key_F13 = 0x0100003c,
        Key_F14 = 0x0100003d,
        Key_F15 = 0x0100003e,
        Key_F16 = 0x0100003f,
        Key_F17 = 0x01000040,
        Key_F18 = 0x01000041,
        Key_F19 = 0x01000042,
        Key_F20 = 0x01000043,
        Key_F21 = 0x01000044,
        Key_F22 = 0x01000045,
        Key_F23 = 0x01000046,
        Key_F24 = 0x01000047,
        Key_F25 = 0x01000048,                // F25 .. F35 only on X11
        Key_F26 = 0x01000049,
        Key_F27 = 0x0100004a,
        Key_F28 = 0x0100004b,
        Key_F29 = 0x0100004c,
        Key_F30 = 0x0100004d,
        Key_F31 = 0x0100004e,
        Key_F32 = 0x0100004f,
        Key_F33 = 0x01000050,
        Key_F34 = 0x01000051,
        Key_F35 = 0x01000052,
        Key_Super_L = 0x01000053,                 // extra keys
        Key_Super_R = 0x01000054,
        Key_Menu = 0x01000055,
        Key_Hyper_L = 0x01000056,
        Key_Hyper_R = 0x01000057,
        Key_Help = 0x01000058,
        Key_Direction_L = 0x01000059,
        Key_Direction_R = 0x01000060,
        Key_Space = 0x20,                // 7 bit printable ASCII
        Key_Any = Key_Space,
        Key_Exclam = 0x21,
        Key_QuoteDbl = 0x22,
        Key_NumberSign = 0x23,
        Key_Dollar = 0x24,
        Key_Percent = 0x25,
        Key_Ampersand = 0x26,
        Key_Apostrophe = 0x27,
        Key_ParenLeft = 0x28,
        Key_ParenRight = 0x29,
        Key_Asterisk = 0x2a,
        Key_Plus = 0x2b,
        Key_Comma = 0x2c,
        Key_Minus = 0x2d,
        Key_Period = 0x2e,
        Key_Slash = 0x2f,
        Key_0 = 0x30,
        Key_1 = 0x31,
        Key_2 = 0x32,
        Key_3 = 0x33,
        Key_4 = 0x34,
        Key_5 = 0x35,
        Key_6 = 0x36,
        Key_7 = 0x37,
        Key_8 = 0x38,
        Key_9 = 0x39,
        Key_Colon = 0x3a,
        Key_Semicolon = 0x3b,
        Key_Less = 0x3c,
        Key_Equal = 0x3d,
        Key_Greater = 0x3e,
        Key_Question = 0x3f,
        Key_At = 0x40,
        Key_A = 0x41,
        Key_B = 0x42,
        Key_C = 0x43,
        Key_D = 0x44,
        Key_E = 0x45,
        Key_F = 0x46,
        Key_G = 0x47,
        Key_H = 0x48,
        Key_I = 0x49,
        Key_J = 0x4a,
        Key_K = 0x4b,
        Key_L = 0x4c,
        Key_M = 0x4d,
        Key_N = 0x4e,
        Key_O = 0x4f,
        Key_P = 0x50,
        Key_Q = 0x51,
        Key_R = 0x52,
        Key_S = 0x53,
        Key_T = 0x54,
        Key_U = 0x55,
        Key_V = 0x56,
        Key_W = 0x57,
        Key_X = 0x58,
        Key_Y = 0x59,
        Key_Z = 0x5a,
        Key_BracketLeft = 0x5b,
        Key_Backslash = 0x5c,
        Key_BracketRight = 0x5d,
        Key_AsciiCircum = 0x5e,
        Key_Underscore = 0x5f,
        Key_QuoteLeft = 0x60,
        Key_BraceLeft = 0x7b,
        Key_Bar = 0x7c,
        Key_BraceRight = 0x7d,
        Key_AsciiTilde = 0x7e,

        Key_nobreakspace = 0x0a0,
        Key_exclamdown = 0x0a1,
        Key_cent = 0x0a2,
        Key_sterling = 0x0a3,
        Key_currency = 0x0a4,
        Key_yen = 0x0a5,
        Key_brokenbar = 0x0a6,
        Key_section = 0x0a7,
        Key_diaeresis = 0x0a8,
        Key_copyright = 0x0a9,
        Key_ordfeminine = 0x0aa,
        Key_guillemotleft = 0x0ab,        // left angle quotation mark
        Key_notsign = 0x0ac,
        Key_hyphen = 0x0ad,
        Key_registered = 0x0ae,
        Key_macron = 0x0af,
        Key_degree = 0x0b0,
        Key_plusminus = 0x0b1,
        Key_twosuperior = 0x0b2,
        Key_threesuperior = 0x0b3,
        Key_acute = 0x0b4,
        Key_mu = 0x0b5,
        Key_paragraph = 0x0b6,
        Key_periodcentered = 0x0b7,
        Key_cedilla = 0x0b8,
        Key_onesuperior = 0x0b9,
        Key_masculine = 0x0ba,
        Key_guillemotright = 0x0bb,        // right angle quotation mark
        Key_onequarter = 0x0bc,
        Key_onehalf = 0x0bd,
        Key_threequarters = 0x0be,
        Key_questiondown = 0x0bf,
        Key_Agrave = 0x0c0,
        Key_Aacute = 0x0c1,
        Key_Acircumflex = 0x0c2,
        Key_Atilde = 0x0c3,
        Key_Adiaeresis = 0x0c4,
        Key_Aring = 0x0c5,
        Key_AE = 0x0c6,
        Key_Ccedilla = 0x0c7,
        Key_Egrave = 0x0c8,
        Key_Eacute = 0x0c9,
        Key_Ecircumflex = 0x0ca,
        Key_Ediaeresis = 0x0cb,
        Key_Igrave = 0x0cc,
        Key_Iacute = 0x0cd,
        Key_Icircumflex = 0x0ce,
        Key_Idiaeresis = 0x0cf,
        Key_ETH = 0x0d0,
        Key_Ntilde = 0x0d1,
        Key_Ograve = 0x0d2,
        Key_Oacute = 0x0d3,
        Key_Ocircumflex = 0x0d4,
        Key_Otilde = 0x0d5,
        Key_Odiaeresis = 0x0d6,
        Key_multiply = 0x0d7,
        Key_Ooblique = 0x0d8,
        Key_Ugrave = 0x0d9,
        Key_Uacute = 0x0da,
        Key_Ucircumflex = 0x0db,
        Key_Udiaeresis = 0x0dc,
        Key_Yacute = 0x0dd,
        Key_THORN = 0x0de,
        Key_ssharp = 0x0df,
        Key_division = 0x0f7,
        Key_ydiaeresis = 0x0ff,

        // International input method support (X keycode - 0xEE00, the
        // definition follows Qt/Embedded 2.3.7) Only interesting if
        // you are writing your own input method

        // International & multi-key character composition
        Key_AltGr               = 0x01001103,
        Key_Multi_key           = 0x01001120,  // Multi-key character compose
        Key_Codeinput           = 0x01001137,
        Key_SingleCandidate     = 0x0100113c,
        Key_MultipleCandidate   = 0x0100113d,
        Key_PreviousCandidate   = 0x0100113e,

        // Misc Functions
        Key_Mode_switch         = 0x0100117e,  // Character set switch
        //Key_script_switch       = 0x0100117e,  // Alias for mode_switch

        // Japanese keyboard support
        Key_Kanji               = 0x01001121,  // Kanji, Kanji convert
        Key_Muhenkan            = 0x01001122,  // Cancel Conversion
        //Key_Henkan_Mode         = 0x01001123,  // Start/Stop Conversion
        Key_Henkan              = 0x01001123,  // Alias for Henkan_Mode
        Key_Romaji              = 0x01001124,  // to Romaji
        Key_Hiragana            = 0x01001125,  // to Hiragana
        Key_Katakana            = 0x01001126,  // to Katakana
        Key_Hiragana_Katakana   = 0x01001127,  // Hiragana/Katakana toggle
        Key_Zenkaku             = 0x01001128,  // to Zenkaku
        Key_Hankaku             = 0x01001129,  // to Hankaku
        Key_Zenkaku_Hankaku     = 0x0100112a,  // Zenkaku/Hankaku toggle
        Key_Touroku             = 0x0100112b,  // Add to Dictionary
        Key_Massyo              = 0x0100112c,  // Delete from Dictionary
        Key_Kana_Lock           = 0x0100112d,  // Kana Lock
        Key_Kana_Shift          = 0x0100112e,  // Kana Shift
        Key_Eisu_Shift          = 0x0100112f,  // Alphanumeric Shift
        Key_Eisu_toggle         = 0x01001130,  // Alphanumeric toggle
        //Key_Kanji_Bangou        = 0x01001137,  // Codeinput
        //Key_Zen_Koho            = 0x0100113d,  // Multiple/All Candidate(s)
        //Key_Mae_Koho            = 0x0100113e,  // Previous Candidate

        // Korean keyboard support
        //
        // In fact, many Korean users need only 2 keys, Key_Hangul and
        // Key_Hangul_Hanja. But rest of the keys are good for future.

        Key_Hangul              = 0x01001131,  // Hangul start/stop(toggle)
        Key_Hangul_Start        = 0x01001132,  // Hangul start
        Key_Hangul_End          = 0x01001133,  // Hangul end, English start
        Key_Hangul_Hanja        = 0x01001134,  // Start Hangul->Hanja Conversion
        Key_Hangul_Jamo         = 0x01001135,  // Hangul Jamo mode
        Key_Hangul_Romaja       = 0x01001136,  // Hangul Romaja mode
        //Key_Hangul_Codeinput    = 0x01001137,  // Hangul code input mode
        Key_Hangul_Jeonja       = 0x01001138,  // Jeonja mode
        Key_Hangul_Banja        = 0x01001139,  // Banja mode
        Key_Hangul_PreHanja     = 0x0100113a,  // Pre Hanja conversion
        Key_Hangul_PostHanja    = 0x0100113b,  // Post Hanja conversion
        //Key_Hangul_SingleCandidate   = 0x0100113c,  // Single candidate
        //Key_Hangul_MultipleCandidate = 0x0100113d,  // Multiple candidate
        //Key_Hangul_PreviousCandidate = 0x0100113e,  // Previous candidate
        Key_Hangul_Special      = 0x0100113f,  // Special symbols
        //Key_Hangul_switch       = 0x0100117e,  // Alias for mode_switch

        // dead keys (X keycode - 0xED00 to avoid the conflict)
        Key_Dead_Grave          = 0x01001250,
        Key_Dead_Acute          = 0x01001251,
        Key_Dead_Circumflex     = 0x01001252,
        Key_Dead_Tilde          = 0x01001253,
        Key_Dead_Macron         = 0x01001254,
        Key_Dead_Breve          = 0x01001255,
        Key_Dead_Abovedot       = 0x01001256,
        Key_Dead_Diaeresis      = 0x01001257,
        Key_Dead_Abovering      = 0x01001258,
        Key_Dead_Doubleacute    = 0x01001259,
        Key_Dead_Caron          = 0x0100125a,
        Key_Dead_Cedilla        = 0x0100125b,
        Key_Dead_Ogonek         = 0x0100125c,
        Key_Dead_Iota           = 0x0100125d,
        Key_Dead_Voiced_Sound   = 0x0100125e,
        Key_Dead_Semivoiced_Sound = 0x0100125f,
        Key_Dead_Belowdot       = 0x01001260,
        Key_Dead_Hook           = 0x01001261,
        Key_Dead_Horn           = 0x01001262,
        Key_Dead_Stroke         = 0x01001263,
        Key_Dead_Abovecomma     = 0x01001264,
        Key_Dead_Abovereversedcomma = 0x01001265,
        Key_Dead_Doublegrave    = 0x01001266,
        Key_Dead_Belowring      = 0x01001267,
        Key_Dead_Belowmacron    = 0x01001268,
        Key_Dead_Belowcircumflex = 0x01001269,
        Key_Dead_Belowtilde     = 0x0100126a,
        Key_Dead_Belowbreve     = 0x0100126b,
        Key_Dead_Belowdiaeresis = 0x0100126c,
        Key_Dead_Invertedbreve  = 0x0100126d,
        Key_Dead_Belowcomma     = 0x0100126e,
        Key_Dead_Currency       = 0x0100126f,
        Key_Dead_a              = 0x01001280,
        Key_Dead_A              = 0x01001281,
        Key_Dead_e              = 0x01001282,
        Key_Dead_E              = 0x01001283,
        Key_Dead_i              = 0x01001284,
        Key_Dead_I              = 0x01001285,
        Key_Dead_o              = 0x01001286,
        Key_Dead_O              = 0x01001287,
        Key_Dead_u              = 0x01001288,
        Key_Dead_U              = 0x01001289,
        Key_Dead_Small_Schwa    = 0x0100128a,
        Key_Dead_Capital_Schwa  = 0x0100128b,
        Key_Dead_Greek          = 0x0100128c,
        Key_Dead_Lowline        = 0x01001290,
        Key_Dead_Aboveverticalline = 0x01001291,
        Key_Dead_Belowverticalline = 0x01001292,
        Key_Dead_Longsolidusoverlay = 0x01001293,

        // multimedia/internet keys - ignored by default - see QKeyEvent c'tor
        Key_Back  = 0x01000061,
        Key_Forward  = 0x01000062,
        Key_Stop  = 0x01000063,
        Key_Refresh  = 0x01000064,
        Key_VolumeDown = 0x01000070,
        Key_VolumeMute  = 0x01000071,
        Key_VolumeUp = 0x01000072,
        Key_BassBoost = 0x01000073,
        Key_BassUp = 0x01000074,
        Key_BassDown = 0x01000075,
        Key_TrebleUp = 0x01000076,
        Key_TrebleDown = 0x01000077,
        Key_MediaPlay  = 0x01000080,
        Key_MediaStop  = 0x01000081,
        Key_MediaPrevious  = 0x01000082,
        Key_MediaNext  = 0x01000083,
        Key_MediaRecord = 0x01000084,
        Key_MediaPause = 0x1000085,
        Key_MediaTogglePlayPause = 0x1000086,
        Key_HomePage  = 0x01000090,
        Key_Favorites  = 0x01000091,
        Key_Search  = 0x01000092,
        Key_Standby = 0x01000093,
        Key_OpenUrl = 0x01000094,
        Key_LaunchMail  = 0x010000a0,
        Key_LaunchMedia = 0x010000a1,
        Key_Launch0  = 0x010000a2,
        Key_Launch1  = 0x010000a3,
        Key_Launch2  = 0x010000a4,
        Key_Launch3  = 0x010000a5,
        Key_Launch4  = 0x010000a6,
        Key_Launch5  = 0x010000a7,
        Key_Launch6  = 0x010000a8,
        Key_Launch7  = 0x010000a9,
        Key_Launch8  = 0x010000aa,
        Key_Launch9  = 0x010000ab,
        Key_LaunchA  = 0x010000ac,
        Key_LaunchB  = 0x010000ad,
        Key_LaunchC  = 0x010000ae,
        Key_LaunchD  = 0x010000af,
        Key_LaunchE  = 0x010000b0,
        Key_LaunchF  = 0x010000b1,
        Key_MonBrightnessUp = 0x010000b2,
        Key_MonBrightnessDown = 0x010000b3,
        Key_KeyboardLightOnOff = 0x010000b4,
        Key_KeyboardBrightnessUp = 0x010000b5,
        Key_KeyboardBrightnessDown = 0x010000b6,
        Key_PowerOff = 0x010000b7,
        Key_WakeUp = 0x010000b8,
        Key_Eject = 0x010000b9,
        Key_ScreenSaver = 0x010000ba,
        Key_WWW = 0x010000bb,
        Key_Memo = 0x010000bc,
        Key_LightBulb = 0x010000bd,
        Key_Shop = 0x010000be,
        Key_History = 0x010000bf,
        Key_AddFavorite = 0x010000c0,
        Key_HotLinks = 0x010000c1,
        Key_BrightnessAdjust = 0x010000c2,
        Key_Finance = 0x010000c3,
        Key_Community = 0x010000c4,
        Key_AudioRewind = 0x010000c5, // Media rewind
        Key_BackForward = 0x010000c6,
        Key_ApplicationLeft = 0x010000c7,
        Key_ApplicationRight = 0x010000c8,
        Key_Book = 0x010000c9,
        Key_CD = 0x010000ca,
        Key_Calculator = 0x010000cb,
        Key_ToDoList = 0x010000cc,
        Key_ClearGrab = 0x010000cd,
        Key_Close = 0x010000ce,
        Key_Copy = 0x010000cf,
        Key_Cut = 0x010000d0,
        Key_Display = 0x010000d1, // Output switch key
        Key_DOS = 0x010000d2,
        Key_Documents = 0x010000d3,
        Key_Excel = 0x010000d4,
        Key_Explorer = 0x010000d5,
        Key_Game = 0x010000d6,
        Key_Go = 0x010000d7,
        Key_iTouch = 0x010000d8,
        Key_LogOff = 0x010000d9,
        Key_Market = 0x010000da,
        Key_Meeting = 0x010000db,
        Key_MenuKB = 0x010000dc,
        Key_MenuPB = 0x010000dd,
        Key_MySites = 0x010000de,
        Key_News = 0x010000df,
        Key_OfficeHome = 0x010000e0,
        Key_Option = 0x010000e1,
        Key_Paste = 0x010000e2,
        Key_Phone = 0x010000e3,
        Key_Calendar = 0x010000e4,
        Key_Reply = 0x010000e5,
        Key_Reload = 0x010000e6,
        Key_RotateWindows = 0x010000e7,
        Key_RotationPB = 0x010000e8,
        Key_RotationKB = 0x010000e9,
        Key_Save = 0x010000ea,
        Key_Send = 0x010000eb,
        Key_Spell = 0x010000ec,
        Key_SplitScreen = 0x010000ed,
        Key_Support = 0x010000ee,
        Key_TaskPane = 0x010000ef,
        Key_Terminal = 0x010000f0,
        Key_Tools = 0x010000f1,
        Key_Travel = 0x010000f2,
        Key_Video = 0x010000f3,
        Key_Word = 0x010000f4,
        Key_Xfer = 0x010000f5,
        Key_ZoomIn = 0x010000f6,
        Key_ZoomOut = 0x010000f7,
        Key_Away = 0x010000f8,
        Key_Messenger = 0x010000f9,
        Key_WebCam = 0x010000fa,
        Key_MailForward = 0x010000fb,
        Key_Pictures = 0x010000fc,
        Key_Music = 0x010000fd,
        Key_Battery = 0x010000fe,
        Key_Bluetooth = 0x010000ff,
        Key_WLAN = 0x01000100,
        Key_UWB = 0x01000101,
        Key_AudioForward = 0x01000102, // Media fast-forward
        Key_AudioRepeat = 0x01000103, // Toggle repeat mode
        Key_AudioRandomPlay = 0x01000104, // Toggle shuffle mode
        Key_Subtitle = 0x01000105,
        Key_AudioCycleTrack = 0x01000106,
        Key_Time = 0x01000107,
        Key_Hibernate = 0x01000108,
        Key_View = 0x01000109,
        Key_TopMenu = 0x0100010a,
        Key_PowerDown = 0x0100010b,
        Key_Suspend = 0x0100010c,
        Key_ContrastAdjust = 0x0100010d,

        Key_LaunchG  = 0x0100010e,
        Key_LaunchH  = 0x0100010f,

        Key_TouchpadToggle = 0x01000110,
        Key_TouchpadOn = 0x01000111,
        Key_TouchpadOff = 0x01000112,

        Key_MicMute = 0x01000113,

        Key_Red = 0x01000114,
        Key_Green = 0x01000115,
        Key_Yellow = 0x01000116,
        Key_Blue = 0x01000117,

        Key_ChannelUp = 0x01000118,
        Key_ChannelDown = 0x01000119,

        Key_Guide    = 0x0100011a,
        Key_Info     = 0x0100011b,
        Key_Settings = 0x0100011c,

        Key_MicVolumeUp   = 0x0100011d,
        Key_MicVolumeDown = 0x0100011e,

        Key_New      = 0x01000120,
        Key_Open     = 0x01000121,
        Key_Find     = 0x01000122,
        Key_Undo     = 0x01000123,
        Key_Redo     = 0x01000124,

        Key_MediaLast = 0x0100ffff,

        // Keypad navigation keys
        Key_Select = 0x01010000,
        Key_Yes = 0x01010001,
        Key_No = 0x01010002,

        // Newer misc keys
        Key_Cancel  = 0x01020001,
        Key_Printer = 0x01020002,
        Key_Execute = 0x01020003,
        Key_Sleep   = 0x01020004,
        Key_Play    = 0x01020005, // Not the same as Key_MediaPlay
        Key_Zoom    = 0x01020006,
        //Key_Jisho   = 0x01020007, // IME: Dictionary key
        //Key_Oyayubi_Left = 0x01020008, // IME: Left Oyayubi key
        //Key_Oyayubi_Right = 0x01020009, // IME: Right Oyayubi key
        Key_Exit    = 0x0102000a,

        // Device keys
        Key_Context1 = 0x01100000,
        Key_Context2 = 0x01100001,
        Key_Context3 = 0x01100002,
        Key_Context4 = 0x01100003,
        Key_Call = 0x01100004,      // set absolute state to in a call (do not toggle state)
        Key_Hangup = 0x01100005,    // set absolute state to hang up (do not toggle state)
        Key_Flip = 0x01100006,
        Key_ToggleCallHangup = 0x01100007, // a toggle key for answering, or hanging up, based on current call state
        Key_VoiceDial = 0x01100008,
        Key_LastNumberRedial = 0x01100009,

        Key_Camera = 0x01100020,
        Key_CameraFocus = 0x01100021,

        Key_unknown = 0x01ffffff;

    /** enum Qt::ArrowType */
    public static final int
        NoArrow = 0,
        UpArrow = 1,
        DownArrow = 2,
        LeftArrow = 3,
        RightArrow = 4;

    /** enum Qt::PenStyle */
    public static final int // pen style
        NoPen = 0,
        SolidLine = 1,
        DashLine = 2,
        DotLine = 3,
        DashDotLine = 4,
        DashDotDotLine = 5,
        CustomDashLine = 6, MPenStyle = 0x0f;
// #endif

    /** enum Qt::PenCapStyle */
    public static final int // line endcap style
        FlatCap = 0x00,
        SquareCap = 0x10,
        RoundCap = 0x20,
        MPenCapStyle = 0x30;

    /** enum Qt::PenJoinStyle */
    public static final int // line join style
        MiterJoin = 0x00,
        BevelJoin = 0x40,
        RoundJoin = 0x80,
        SvgMiterJoin = 0x100,
        MPenJoinStyle = 0x1c0;

    /** enum Qt::BrushStyle */
    public static final int // brush style
        NoBrush = 0,
        SolidPattern = 1,
        Dense1Pattern = 2,
        Dense2Pattern = 3,
        Dense3Pattern = 4,
        Dense4Pattern = 5,
        Dense5Pattern = 6,
        Dense6Pattern = 7,
        Dense7Pattern = 8,
        HorPattern = 9,
        VerPattern = 10,
        CrossPattern = 11,
        BDiagPattern = 12,
        FDiagPattern = 13,
        DiagCrossPattern = 14,
        LinearGradientPattern = 15,
        RadialGradientPattern = 16,
        ConicalGradientPattern = 17,
        TexturePattern = 24;

    /** enum Qt::SizeMode */
    public static final int
        AbsoluteSize = 0,
        RelativeSize = 1;

    /** enum Qt::UIEffect */
    public static final int
        UI_General = 0,
        UI_AnimateMenu = 1,
        UI_FadeMenu = 2,
        UI_AnimateCombo = 3,
        UI_AnimateTooltip = 4,
        UI_FadeTooltip = 5,
        UI_AnimateToolBox = 6;

    /** enum Qt::CursorShape */
    public static final int
        ArrowCursor = 0,
        UpArrowCursor = 1,
        CrossCursor = 2,
        WaitCursor = 3,
        IBeamCursor = 4,
        SizeVerCursor = 5,
        SizeHorCursor = 6,
        SizeBDiagCursor = 7,
        SizeFDiagCursor = 8,
        SizeAllCursor = 9,
        BlankCursor = 10,
        SplitVCursor = 11,
        SplitHCursor = 12,
        PointingHandCursor = 13,
        ForbiddenCursor = 14,
        WhatsThisCursor = 15,
        BusyCursor = 16,
        OpenHandCursor = 17,
        ClosedHandCursor = 18,
        DragCopyCursor = 19,
        DragMoveCursor = 20,
        DragLinkCursor = 21,
        LastCursor = DragLinkCursor,
        BitmapCursor = 24,
        CustomCursor = 25;

    /** enum Qt::TextFormat */
    public static final int
        PlainText = 0,
        RichText = 1,
        AutoText = 2;

    /** enum Qt::AspectRatioMode */
    public static final int
        IgnoreAspectRatio = 0,
        KeepAspectRatio = 1,
        KeepAspectRatioByExpanding = 2;

    /** enum Qt::DockWidgetArea */
    public static final int
        LeftDockWidgetArea = 0x1,
        RightDockWidgetArea = 0x2,
        TopDockWidgetArea = 0x4,
        BottomDockWidgetArea = 0x8,

        DockWidgetArea_Mask = 0xf,
        AllDockWidgetAreas = DockWidgetArea_Mask,
        NoDockWidgetArea = 0;
    /** enum Qt::DockWidgetAreaSizes */
    public static final int
        NDockWidgetAreas = 4;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(DockWidgetAreas, DockWidgetArea)
    

    /** enum Qt::ToolBarArea */
    public static final int
        LeftToolBarArea = 0x1,
        RightToolBarArea = 0x2,
        TopToolBarArea = 0x4,
        BottomToolBarArea = 0x8,

        ToolBarArea_Mask = 0xf,
        AllToolBarAreas = ToolBarArea_Mask,
        NoToolBarArea = 0;

    /** enum Qt::ToolBarAreaSizes */
    public static final int
        NToolBarAreas = 4;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(ToolBarAreas, ToolBarArea)
    

    /** enum Qt::DateFormat */
    public static final int
        TextDate = 0,      // default Qt
        ISODate = 1,       // ISO 8601
        SystemLocaleDate = 2, // deprecated
        LocalDate = SystemLocaleDate, // deprecated
        LocaleDate = SystemLocaleDate + 1,     // deprecated
        SystemLocaleShortDate = SystemLocaleDate + 2,
        SystemLocaleLongDate = SystemLocaleDate + 3,
        DefaultLocaleShortDate = SystemLocaleDate + 4,
        DefaultLocaleLongDate = SystemLocaleDate + 5,
        RFC2822Date = SystemLocaleDate + 6,        // RFC 2822 (+ 850 and 1036 during parsing)
        ISODateWithMs = SystemLocaleDate + 7;

    /** enum Qt::TimeSpec */
    public static final int
        LocalTime = 0,
        UTC = 1,
        OffsetFromUTC = 2,
        TimeZone = 3;

    /** enum Qt::DayOfWeek */
    public static final int
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
        Sunday = 7;

    /** enum Qt::ScrollBarPolicy */
    public static final int
        ScrollBarAsNeeded = 0,
        ScrollBarAlwaysOff = 1,
        ScrollBarAlwaysOn = 2;

    @Namespace("Qt") public enum CaseSensitivity {
        CaseInsensitive(0),
        CaseSensitive(1);

        public final int value;
        private CaseSensitivity(int v) { this.value = v; }
        private CaseSensitivity(CaseSensitivity e) { this.value = e.value; }
        public CaseSensitivity intern() { for (CaseSensitivity e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }

    /** enum Qt::Corner */
    public static final int
        TopLeftCorner = 0x00000,
        TopRightCorner = 0x00001,
        BottomLeftCorner = 0x00002,
        BottomRightCorner = 0x00003;

    /** enum Qt::Edge */
    public static final int
        TopEdge = 0x00001,
        LeftEdge = 0x00002,
        RightEdge = 0x00004,
        BottomEdge = 0x00008;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(Edges, Edge)
    

    /** enum Qt::ConnectionType */
    public static final int
        AutoConnection = 0,
        DirectConnection = 1,
        QueuedConnection = 2,
        BlockingQueuedConnection = 3,
        UniqueConnection =  0x80;

    /** enum Qt::ShortcutContext */
    public static final int
        WidgetShortcut = 0,
        WindowShortcut = 1,
        ApplicationShortcut = 2,
        WidgetWithChildrenShortcut = 3;

    /** enum Qt::FillRule */
    public static final int
        OddEvenFill = 0,
        WindingFill = 1;

    /** enum Qt::MaskMode */
    public static final int
        MaskInColor = 0,
        MaskOutColor = 1;

    /** enum Qt::ClipOperation */
    public static final int
        NoClip = 0,
        ReplaceClip = 1,
        IntersectClip = 2;

    // Shape = 0x1, BoundingRect = 0x2
    /** enum Qt::ItemSelectionMode */
    public static final int
        ContainsItemShape = 0x0,
        IntersectsItemShape = 0x1,
        ContainsItemBoundingRect = 0x2,
        IntersectsItemBoundingRect = 0x3;

    /** enum Qt::ItemSelectionOperation */
    public static final int
        ReplaceSelection = 0,
        AddToSelection = 1;

    /** enum Qt::TransformationMode */
    public static final int
        FastTransformation = 0,
        SmoothTransformation = 1;

    /** enum Qt::Axis */
    public static final int
        XAxis = 0,
        YAxis = 1,
        ZAxis = 2;

    /** enum Qt::FocusReason */
    public static final int
        MouseFocusReason = 0,
        TabFocusReason = 1,
        BacktabFocusReason = 2,
        ActiveWindowFocusReason = 3,
        PopupFocusReason = 4,
        ShortcutFocusReason = 5,
        MenuBarFocusReason = 6,
        OtherFocusReason = 7,
        NoFocusReason = 8;

    /** enum Qt::ContextMenuPolicy */
    public static final int
        NoContextMenu = 0,
        DefaultContextMenu = 1,
        ActionsContextMenu = 2,
        CustomContextMenu = 3,
        PreventContextMenu = 4;

    /** enum Qt::InputMethodQuery */
    public static final int
        ImEnabled = 0x1,
        ImCursorRectangle = 0x2,
        ImMicroFocus = 0x2, // deprecated
        ImFont = 0x4,
        ImCursorPosition = 0x8,
        ImSurroundingText = 0x10,
        ImCurrentSelection = 0x20,
        ImMaximumTextLength = 0x40,
        ImAnchorPosition = 0x80,
        ImHints = 0x100,
        ImPreferredLanguage = 0x200,

        ImAbsolutePosition = 0x400,
        ImTextBeforeCursor = 0x800,
        ImTextAfterCursor = 0x1000,
        ImEnterKeyType = 0x2000,
        ImAnchorRectangle = 0x4000,
        ImInputItemClipRectangle = 0x8000,

        ImPlatformData = 0x80000000,
        ImQueryInput = ImCursorRectangle | ImCursorPosition | ImSurroundingText |
                       ImCurrentSelection | ImAnchorRectangle | ImAnchorPosition,
        ImQueryAll = 0xffffffff;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(InputMethodQueries, InputMethodQuery)
    

    @Namespace("Qt") public enum InputMethodHint {
        ImhNone(0x0),

        ImhHiddenText(0x1),
        ImhSensitiveData(0x2),
        ImhNoAutoUppercase(0x4),
        ImhPreferNumbers(0x8),
        ImhPreferUppercase(0x10),
        ImhPreferLowercase(0x20),
        ImhNoPredictiveText(0x40),

        ImhDate(0x80),
        ImhTime(0x100),

        ImhPreferLatin(0x200),

        ImhMultiLine(0x400),

        ImhNoEditMenu(0x800),
        ImhNoTextHandles(0x1000),

        ImhDigitsOnly(0x10000),
        ImhFormattedNumbersOnly(0x20000),
        ImhUppercaseOnly(0x40000),
        ImhLowercaseOnly(0x80000),
        ImhDialableCharactersOnly(0x100000),
        ImhEmailCharactersOnly(0x200000),
        ImhUrlCharactersOnly(0x400000),
        ImhLatinOnly(0x800000),

        ImhExclusiveInputMask(0xffff0000);

        public final int value;
        private InputMethodHint(int v) { this.value = v; }
        private InputMethodHint(InputMethodHint e) { this.value = e.value; }
        public InputMethodHint intern() { for (InputMethodHint e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(InputMethodHints, InputMethodHint)
    

    /** enum Qt::EnterKeyType */
    public static final int
        EnterKeyDefault = 0,
        EnterKeyReturn = 1,
        EnterKeyDone = 2,
        EnterKeyGo = 3,
        EnterKeySend = 4,
        EnterKeySearch = 5,
        EnterKeyNext = 6,
        EnterKeyPrevious = 7;

    /** enum Qt::ToolButtonStyle */
    public static final int
        ToolButtonIconOnly = 0,
        ToolButtonTextOnly = 1,
        ToolButtonTextBesideIcon = 2,
        ToolButtonTextUnderIcon = 3,
        ToolButtonFollowStyle = 4;

    /** enum Qt::LayoutDirection */
    public static final int
        LeftToRight = 0,
        RightToLeft = 1,
        LayoutDirectionAuto = 2;

    /** enum Qt::AnchorPoint */
    public static final int
        AnchorLeft = 0,
        AnchorHorizontalCenter = 1,
        AnchorRight = 2,
        AnchorTop = 3,
        AnchorVerticalCenter = 4,
        AnchorBottom = 5;

    @Namespace("Qt") public enum FindChildOption {
        FindDirectChildrenOnly(0x0),
        FindChildrenRecursively(0x1);

        public final int value;
        private FindChildOption(int v) { this.value = v; }
        private FindChildOption(FindChildOption e) { this.value = e.value; }
        public FindChildOption intern() { for (FindChildOption e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(FindChildOptions, FindChildOption)

    /** enum Qt::DropAction */
    public static final int
        CopyAction = 0x1,
        MoveAction = 0x2,
        LinkAction = 0x4,
        ActionMask = 0xff,
        TargetMoveAction = 0x8002,
        IgnoreAction = 0x0;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(DropActions, DropAction)
    

    /** enum Qt::CheckState */
    public static final int
        Unchecked = 0,
        PartiallyChecked = 1,
        Checked = 2;

    /** enum Qt::ItemDataRole */
    public static final int
        DisplayRole = 0,
        DecorationRole = 1,
        EditRole = 2,
        ToolTipRole = 3,
        StatusTipRole = 4,
        WhatsThisRole = 5,
        // Metadata
        FontRole = 6,
        TextAlignmentRole = 7,
        BackgroundColorRole = 8,
        BackgroundRole = 8,
        TextColorRole = 9,
        ForegroundRole = 9,
        CheckStateRole = 10,
        // Accessibility
        AccessibleTextRole = 11,
        AccessibleDescriptionRole = 12,
        // More general purpose
        SizeHintRole = 13,
        InitialSortOrderRole = 14,
        // Internal UiLib roles. Start worrying when public roles go that high.
        DisplayPropertyRole = 27,
        DecorationPropertyRole = 28,
        ToolTipPropertyRole = 29,
        StatusTipPropertyRole = 30,
        WhatsThisPropertyRole = 31,
        // Reserved
        UserRole = 0x0100;

    /** enum Qt::ItemFlag */
    public static final int
        NoItemFlags = 0,
        ItemIsSelectable = 1,
        ItemIsEditable = 2,
        ItemIsDragEnabled = 4,
        ItemIsDropEnabled = 8,
        ItemIsUserCheckable = 16,
        ItemIsEnabled = 32,
        ItemIsAutoTristate = 64,
// #if QT_DEPRECATED_SINCE(5, 6)
        ItemIsTristate = ItemIsAutoTristate,
// #endif
        ItemNeverHasChildren = 128,
        ItemIsUserTristate = 256;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(ItemFlags, ItemFlag)
    

    /** enum Qt::MatchFlag */
    public static final int
        MatchExactly = 0,
        MatchContains = 1,
        MatchStartsWith = 2,
        MatchEndsWith = 3,
        MatchRegExp = 4,
        MatchWildcard = 5,
        MatchFixedString = 8,
        MatchCaseSensitive = 16,
        MatchWrap = 32,
        MatchRecursive = 64;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(MatchFlags, MatchFlag)
    

    @Namespace @Name("void") @Opaque public static class HANDLE extends Pointer {
        /** Empty constructor. Calls {@code super((Pointer)null)}. */
        public HANDLE() { super((Pointer)null); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public HANDLE(Pointer p) { super(p); }
    }
// #if QT_DEPRECATED_SINCE(5, 0)
// #endif

    /** enum Qt::WindowModality */
    public static final int
        NonModal = 0,
        WindowModal = 1,
        ApplicationModal = 2;

    /** enum Qt::TextInteractionFlag */
    public static final int
        NoTextInteraction         = 0,
        TextSelectableByMouse     = 1,
        TextSelectableByKeyboard  = 2,
        LinksAccessibleByMouse    = 4,
        LinksAccessibleByKeyboard = 8,
        TextEditable              = 16,

        TextEditorInteraction     = TextSelectableByMouse | TextSelectableByKeyboard | TextEditable,
        TextBrowserInteraction    = TextSelectableByMouse | LinksAccessibleByMouse | LinksAccessibleByKeyboard;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(TextInteractionFlags, TextInteractionFlag)
    

    /** enum Qt::EventPriority */
    public static final int
        HighEventPriority = 1,
        NormalEventPriority = 0,
        LowEventPriority = -1;

    /** enum Qt::SizeHint */
    public static final int
        MinimumSize = 0,
        PreferredSize = 1,
        MaximumSize = 2,
        MinimumDescent = 3,
        NSizeHints = 4;

    /** enum Qt::WindowFrameSection */
    public static final int
        NoSection = 0,
        LeftSection = 1,           // For resize
        TopLeftSection = 2,
        TopSection = 3,
        TopRightSection = 4,
        RightSection = 5,
        BottomRightSection = 6,
        BottomSection = 7,
        BottomLeftSection = 8,
        TitleBarArea = 9;    // For move

// #if defined(Q_COMPILER_CLASS_ENUM) && defined(Q_COMPILER_CONSTEXPR)
// #else
    /** enum Qt::Initialization */
    public static final int
        Uninitialized = 0;
// #endif

    /** enum Qt::CoordinateSystem */
    public static final int
        DeviceCoordinates = 0,
        LogicalCoordinates = 1;

    /** enum Qt::TouchPointState */
    public static final int
        TouchPointPressed    = 0x01,
        TouchPointMoved      = 0x02,
        TouchPointStationary = 0x04,
        TouchPointReleased   = 0x08;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(TouchPointStates, TouchPointState)
    

// #ifndef QT_NO_GESTURES
    /** enum Qt::GestureState */
    public static final int
        NoGesture = 0,
        GestureStarted  = 1,
        GestureUpdated  = 2,
        GestureFinished = 3,
        GestureCanceled = 4;

    /** enum Qt::GestureType */
    public static final long
        TapGesture        = 1,
        TapAndHoldGesture = 2,
        PanGesture        = 3,
        PinchGesture      = 4,
        SwipeGesture      = 5,

        CustomGesture     = 0x0100,

        LastGestureType   = ~0L;

    @Namespace("Qt") public enum GestureFlag {
        DontStartGestureOnChildren(0x01),
        ReceivePartialGestures    (0x02),
        IgnoredGesturesPropagateToParent(0x04);

        public final int value;
        private GestureFlag(int v) { this.value = v; }
        private GestureFlag(GestureFlag e) { this.value = e.value; }
        public GestureFlag intern() { for (GestureFlag e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(GestureFlags, GestureFlag)
    

    /** enum Qt::NativeGestureType */
    public static final int
        BeginNativeGesture = 0,
        EndNativeGesture = 1,
        PanNativeGesture = 2,
        ZoomNativeGesture = 3,
        SmartZoomNativeGesture = 4,
        RotateNativeGesture = 5,
        SwipeNativeGesture = 6;

// #endif // QT_NO_GESTURES

    /** enum Qt::NavigationMode */
    public static final int
        NavigationModeNone = 0,
        NavigationModeKeypadTabOrder = 1,
        NavigationModeKeypadDirectional = 2,
        NavigationModeCursorAuto = 3,
        NavigationModeCursorForceVisible = 4;

    /** enum Qt::CursorMoveStyle */
    public static final int
        LogicalMoveStyle = 0,
        VisualMoveStyle = 1;

    /** enum Qt::TimerType */
    public static final int
        PreciseTimer = 0,
        CoarseTimer = 1,
        VeryCoarseTimer = 2;

    /** enum Qt::ScrollPhase */
    public static final int
        NoScrollPhase = 0,
        ScrollBegin = 1,
        ScrollUpdate = 2,
        ScrollEnd = 3,
        ScrollMomentum = 4;

    /** enum Qt::MouseEventSource */
    public static final int
        MouseEventNotSynthesized = 0,
        MouseEventSynthesizedBySystem = 1,
        MouseEventSynthesizedByQt = 2,
        MouseEventSynthesizedByApplication = 3;

    /** enum Qt::MouseEventFlag */
    public static final int
        MouseEventCreatedDoubleClick = 0x01,
        MouseEventFlagMask = 0xFF;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(MouseEventFlags, MouseEventFlag)
    

    /** enum Qt::ChecksumType */
    public static final int
        ChecksumIso3309 = 0,
        ChecksumItuV41 = 1;

// #ifndef Q_QDOC
// #endif // Q_DOC




// Parsed from QtCore/qabstracteventdispatcher.h

public static class QAbstractEventDispatcher extends QObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QAbstractEventDispatcher(Pointer p) { super(p); }

    @NoOffset public static class TimerInfo extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public TimerInfo(Pointer p) { super(p); }
    
        public native int timerId(); public native TimerInfo timerId(int timerId);
        public native int interval(); public native TimerInfo interval(int interval);
        public native @Cast("Qt::TimerType") int timerType(); public native TimerInfo timerType(int timerType);

        public TimerInfo(int id, int i, @Cast("Qt::TimerType") int t) { super((Pointer)null); allocate(id, i, t); }
        private native void allocate(int id, int i, @Cast("Qt::TimerType") int t);
    }

    public static native QAbstractEventDispatcher instance();
    public native @Cast("bool") boolean hasPendingEvents(); // ### Qt6: remove, mark final or make protected

// #if QT_DEPRECATED_SINCE(5,0)
// #endif
    // ### Qt6: change interval range to qint64 (or use QDeadlineTimer)
    public native int registerTimer(int interval, @Cast("Qt::TimerType") int timerType, QObject object);
    public native void registerTimer(int timerId, int interval, @Cast("Qt::TimerType") int timerType, QObject object);
    public native @Cast("bool") boolean unregisterTimer(int timerId);
    public native @Cast("bool") boolean unregisterTimers(QObject object);

    public native int remainingTime(int timerId);

// #if defined(Q_OS_WIN) || defined(Q_CLANG_QDOC)
// #endif

    public native void wakeUp();
    public native void interrupt();
    public native void flush(); // ### Qt6: remove, mark final or make protected

    public native void startingUp();
    public native void closingDown();
    public native @Cast("bool") boolean filterNativeEvent(@Const @ByRef QByteArray eventType, Pointer message, CLongPointer result);
}


// Parsed from QtCore/qbytearray.h

@NoOffset public static class QByteArray extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QByteArray(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QByteArray(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QByteArray position(long position) {
        return (QByteArray)super.position(position);
    }

    public enum Base64Option {
        Base64Encoding(0),
        Base64UrlEncoding(1),

        KeepTrailingEquals(0),
        OmitTrailingEquals(2);

        public final int value;
        private Base64Option(int v) { this.value = v; }
        private Base64Option(Base64Option e) { this.value = e.value; }
        public Base64Option intern() { for (Base64Option e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(Base64Options, Base64Option)

    public QByteArray() { super((Pointer)null); allocate(); }
    private native void allocate();
    public QByteArray(@Cast("const char*") BytePointer arg0, int size/*=-1*/) { super((Pointer)null); allocate(arg0, size); }
    private native void allocate(@Cast("const char*") BytePointer arg0, int size/*=-1*/);
    public QByteArray(@Cast("const char*") BytePointer arg0) { super((Pointer)null); allocate(arg0); }
    private native void allocate(@Cast("const char*") BytePointer arg0);
    public QByteArray(String arg0, int size/*=-1*/) { super((Pointer)null); allocate(arg0, size); }
    private native void allocate(String arg0, int size/*=-1*/);
    public QByteArray(String arg0) { super((Pointer)null); allocate(arg0); }
    private native void allocate(String arg0);
    public QByteArray(int size, @Cast("char") byte c) { super((Pointer)null); allocate(size, c); }
    private native void allocate(int size, @Cast("char") byte c);
    public QByteArray(int size, @Cast("Qt::Initialization") int arg1) { super((Pointer)null); allocate(size, arg1); }
    private native void allocate(int size, @Cast("Qt::Initialization") int arg1);
    public QByteArray(@Const @ByRef QByteArray arg0) { super((Pointer)null); allocate(arg0); }
    private native void allocate(@Const @ByRef QByteArray arg0);

    public native @ByRef @Name("operator =") QByteArray put(@Const @ByRef QByteArray arg0);
    public native @ByRef @Name("operator =") QByteArray put(@Cast("const char*") BytePointer str);
    public native @ByRef @Name("operator =") QByteArray put(String str);
// #ifdef Q_COMPILER_RVALUE_REFS
// #endif

    public native void swap(@ByRef QByteArray other);

    public native int size();
    public native @Cast("bool") boolean isEmpty();
    public native void resize(int size);

    public native @ByRef @Name("fill") QByteArray _fill(@Cast("char") byte c, int size/*=-1*/);
    public native @ByRef @Name("fill") QByteArray _fill(@Cast("char") byte c);

    public native @Name("capacity") int _capacity();
    public native void reserve(int size);
    public native void squeeze();

// #ifndef QT_NO_CAST_FROM_BYTEARRAY
    public native @Const @Name("operator const char*") @Cast("const char*") BytePointer asBytePointer();
    public native @Const @Name("operator const void*") Pointer asPointer();
// #endif
    public native @Cast("char*") BytePointer data();
    public native @Cast("const char*") BytePointer constData();
    public native void detach();
    public native @Cast("bool") boolean isDetached();
    public native @Cast("bool") boolean isSharedWith(@Const @ByRef QByteArray other);
    public native void clear();

    public native @Cast("char") byte at(int i);
    public native @Cast("char") @Name("operator []") byte get(int i);
     public native @Cast("char") byte front();
    
     public native @Cast("char") byte back();
    

    public native int indexOf(@Cast("char") byte c, int from/*=0*/);
    public native int indexOf(@Cast("char") byte c);
    public native int indexOf(@Cast("const char*") BytePointer c, int from/*=0*/);
    public native int indexOf(@Cast("const char*") BytePointer c);
    public native int indexOf(String c, int from/*=0*/);
    public native int indexOf(String c);
    public native int indexOf(@Const @ByRef QByteArray a, int from/*=0*/);
    public native int indexOf(@Const @ByRef QByteArray a);
    public native int lastIndexOf(@Cast("char") byte c, int from/*=-1*/);
    public native int lastIndexOf(@Cast("char") byte c);
    public native int lastIndexOf(@Cast("const char*") BytePointer c, int from/*=-1*/);
    public native int lastIndexOf(@Cast("const char*") BytePointer c);
    public native int lastIndexOf(String c, int from/*=-1*/);
    public native int lastIndexOf(String c);
    public native int lastIndexOf(@Const @ByRef QByteArray a, int from/*=-1*/);
    public native int lastIndexOf(@Const @ByRef QByteArray a);

    public native @Cast("bool") boolean contains(@Cast("char") byte c);
    public native @Cast("bool") boolean contains(@Cast("const char*") BytePointer a);
    public native @Cast("bool") boolean contains(String a);
    public native @Cast("bool") boolean contains(@Const @ByRef QByteArray a);
    public native int count(@Cast("char") byte c);
    public native int count(@Cast("const char*") BytePointer a);
    public native int count(String a);
    public native int count(@Const @ByRef QByteArray a);

    public native int compare(@Cast("const char*") BytePointer c, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native int compare(@Cast("const char*") BytePointer c);
    public native int compare(String c, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native int compare(String c);
    public native int compare(@Const @ByRef QByteArray a, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native int compare(@Const @ByRef QByteArray a);

     public native @ByVal QByteArray left(int len);
     public native @ByVal QByteArray right(int len);
     public native @ByVal QByteArray mid(int index, int len/*=-1*/);
public native @ByVal QByteArray mid(int index);
     public native @ByVal QByteArray chopped(int len);

    public native @Cast("bool") boolean startsWith(@Const @ByRef QByteArray a);
    public native @Cast("bool") boolean startsWith(@Cast("char") byte c);
    public native @Cast("bool") boolean startsWith(@Cast("const char*") BytePointer c);
    public native @Cast("bool") boolean startsWith(String c);

    public native @Cast("bool") boolean endsWith(@Const @ByRef QByteArray a);
    public native @Cast("bool") boolean endsWith(@Cast("char") byte c);
    public native @Cast("bool") boolean endsWith(@Cast("const char*") BytePointer c);
    public native @Cast("bool") boolean endsWith(String c);

    public native @Cast("bool") boolean isUpper();
    public native @Cast("bool") boolean isLower();

    public native void truncate(int pos);
    public native void chop(int n);

// #if defined(Q_COMPILER_REF_QUALIFIERS) && !defined(QT_COMPILING_QSTRING_COMPAT_CPP) && !defined(Q_CLANG_QDOC)
// #else
     public native @ByVal QByteArray toLower();
     public native @ByVal QByteArray toUpper();
     public native @ByVal QByteArray trimmed();
     public native @ByVal QByteArray simplified();
// #endif

     public native @ByVal QByteArray leftJustified(int width, @Cast("char") byte fill/*=' '*/, @Cast("bool") boolean truncate/*=false*/);
public native @ByVal QByteArray leftJustified(int width);
     public native @ByVal QByteArray rightJustified(int width, @Cast("char") byte fill/*=' '*/, @Cast("bool") boolean truncate/*=false*/);
public native @ByVal QByteArray rightJustified(int width);

    public native @ByRef QByteArray prepend(@Cast("char") byte c);
    public native @ByRef QByteArray prepend(int count, @Cast("char") byte c);
    public native @ByRef QByteArray prepend(@Cast("const char*") BytePointer s);
    public native @ByRef QByteArray prepend(String s);
    public native @ByRef QByteArray prepend(@Cast("const char*") BytePointer s, int len);
    public native @ByRef QByteArray prepend(String s, int len);
    public native @ByRef QByteArray prepend(@Const @ByRef QByteArray a);
    public native @ByRef QByteArray append(@Cast("char") byte c);
    public native @ByRef QByteArray append(int count, @Cast("char") byte c);
    public native @ByRef QByteArray append(@Cast("const char*") BytePointer s);
    public native @ByRef QByteArray append(String s);
    public native @ByRef QByteArray append(@Cast("const char*") BytePointer s, int len);
    public native @ByRef QByteArray append(String s, int len);
    public native @ByRef QByteArray append(@Const @ByRef QByteArray a);
    public native @ByRef QByteArray insert(int i, @Cast("char") byte c);
    public native @ByRef QByteArray insert(int i, int count, @Cast("char") byte c);
    public native @ByRef QByteArray insert(int i, @Cast("const char*") BytePointer s);
    public native @ByRef QByteArray insert(int i, String s);
    public native @ByRef QByteArray insert(int i, @Cast("const char*") BytePointer s, int len);
    public native @ByRef QByteArray insert(int i, String s, int len);
    public native @ByRef QByteArray insert(int i, @Const @ByRef QByteArray a);
    public native @ByRef QByteArray remove(int index, int len);
    public native @ByRef QByteArray replace(int index, int len, @Cast("const char*") BytePointer s);
    public native @ByRef QByteArray replace(int index, int len, String s);
    public native @ByRef QByteArray replace(int index, int len, @Cast("const char*") BytePointer s, int alen);
    public native @ByRef QByteArray replace(int index, int len, String s, int alen);
    public native @ByRef QByteArray replace(int index, int len, @Const @ByRef QByteArray s);
    public native @ByRef QByteArray replace(@Cast("char") byte before, @Cast("const char*") BytePointer after);
    public native @ByRef QByteArray replace(@Cast("char") byte before, String after);
    public native @ByRef QByteArray replace(@Cast("char") byte before, @Const @ByRef QByteArray after);
    public native @ByRef QByteArray replace(@Cast("const char*") BytePointer before, @Cast("const char*") BytePointer after);
    public native @ByRef QByteArray replace(String before, String after);
    public native @ByRef QByteArray replace(@Cast("const char*") BytePointer before, int bsize, @Cast("const char*") BytePointer after, int asize);
    public native @ByRef QByteArray replace(String before, int bsize, String after, int asize);
    public native @ByRef QByteArray replace(@Const @ByRef QByteArray before, @Const @ByRef QByteArray after);
    public native @ByRef QByteArray replace(@Const @ByRef QByteArray before, @Cast("const char*") BytePointer after);
    public native @ByRef QByteArray replace(@Const @ByRef QByteArray before, String after);
    public native @ByRef QByteArray replace(@Cast("const char*") BytePointer before, @Const @ByRef QByteArray after);
    public native @ByRef QByteArray replace(String before, @Const @ByRef QByteArray after);
    public native @ByRef QByteArray replace(@Cast("char") byte before, @Cast("char") byte after);
    public native @ByRef @Name("operator +=") QByteArray addPut(@Cast("char") byte c);
    public native @ByRef @Name("operator +=") QByteArray addPut(@Cast("const char*") BytePointer s);
    public native @ByRef @Name("operator +=") QByteArray addPut(String s);
    public native @ByRef @Name("operator +=") QByteArray addPut(@Const @ByRef QByteArray a);

     public native @ByVal QByteArray repeated(int times);

// #ifndef QT_NO_CAST_TO_ASCII
    public native @Deprecated @ByRef QByteArray append(@Const @ByRef QString s);
    public native @Deprecated @ByRef QByteArray insert(int i, @Const @ByRef QString s);
    public native @Deprecated @ByRef QByteArray replace(@Const @ByRef QString before, @Cast("const char*") BytePointer after);
    public native @Deprecated @ByRef QByteArray replace(@Const @ByRef QString before, String after);
    public native @Deprecated @ByRef QByteArray replace(@Cast("char") byte c, @Const @ByRef QString after);
    public native @Deprecated @ByRef QByteArray replace(@Const @ByRef QString before, @Const @ByRef QByteArray after);

    public native @Deprecated @ByRef @Name("operator +=") QByteArray addPut(@Const @ByRef QString s);
    public native @Deprecated int indexOf(@Const @ByRef QString s, int from/*=0*/);
    public native @Deprecated int indexOf(@Const @ByRef QString s);
    public native @Deprecated int lastIndexOf(@Const @ByRef QString s, int from/*=-1*/);
    public native @Deprecated int lastIndexOf(@Const @ByRef QString s);
// #endif
// #if !defined(QT_NO_CAST_FROM_ASCII) && !defined(QT_RESTRICTED_CAST_FROM_ASCII)
// #endif

    public native short toShort(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native short toShort();
    public native short toShort(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned short") short toUShort(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned short") short toUShort();
    public native @Cast("unsigned short") short toUShort(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native int toInt(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native int toInt();
    public native int toInt(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned int") int toUInt(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned int") int toUInt();
    public native @Cast("unsigned int") int toUInt(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native long toLong(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native long toLong();
    public native long toLong(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned long") long toULong(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned long") long toULong();
    public native @Cast("unsigned long") long toULong(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native long toLongLong(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native long toLongLong();
    public native long toLongLong(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned long long") long toULongLong(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned long long") long toULongLong();
    public native @Cast("unsigned long long") long toULongLong(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native float toFloat(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native float toFloat();
    public native float toFloat(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native double toDouble(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native double toDouble();
    public native double toDouble(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native @ByVal QByteArray toBase64(); // ### Qt6 merge with previous
    public native @ByVal QByteArray toHex();
    public native @ByVal QByteArray toHex(@Cast("char") byte separator); // ### Qt6 merge with previous
    public native @ByVal QByteArray toPercentEncoding(@Const @ByRef(nullValue = "QByteArray()") QByteArray exclude,
                                     @Const @ByRef(nullValue = "QByteArray()") QByteArray include,
                                     @Cast("char") byte percent/*='%'*/);
    public native @ByVal QByteArray toPercentEncoding();

    public native @ByRef QByteArray setNum(short arg0, int base/*=10*/);
    public native @ByRef QByteArray setNum(short arg0);
    public native @ByRef QByteArray setNum(int arg0, int base/*=10*/);
    public native @ByRef QByteArray setNum(int arg0);
    public native @ByRef QByteArray setNum(long arg0, int base/*=10*/);
    public native @ByRef QByteArray setNum(long arg0);
    public native @ByRef QByteArray setNum(float arg0, @Cast("char") byte f/*='g'*/, int prec/*=6*/);
    public native @ByRef QByteArray setNum(float arg0);
    public native @ByRef QByteArray setNum(double arg0, @Cast("char") byte f/*='g'*/, int prec/*=6*/);
    public native @ByRef QByteArray setNum(double arg0);
    public native @ByRef QByteArray setRawData(@Cast("const char*") BytePointer a, @Cast("unsigned int") int n);
    public native @ByRef QByteArray setRawData(String a, @Cast("unsigned int") int n); // ### Qt 6: use an int

     public static native @ByVal QByteArray number(int arg0, int base/*=10*/);
public static native @ByVal QByteArray number(int arg0);
    
     public static native @ByVal QByteArray number(long arg0, int base/*=10*/);
public static native @ByVal QByteArray number(long arg0);
    
     public static native @ByVal QByteArray number(double arg0, @Cast("char") byte f/*='g'*/, int prec/*=6*/);
public static native @ByVal QByteArray number(double arg0);
     public static native @ByVal QByteArray fromRawData(@Cast("const char*") BytePointer arg0, int size);
public static native @ByVal QByteArray fromRawData(String arg0, int size);
    
     public static native @ByVal QByteArray fromBase64(@Const @ByRef QByteArray base64); // ### Qt6 merge with previous
     public static native @ByVal QByteArray fromHex(@Const @ByRef QByteArray hexEncoded);
     public static native @ByVal QByteArray fromPercentEncoding(@Const @ByRef QByteArray pctEncoded, @Cast("char") byte percent/*='%'*/);
public static native @ByVal QByteArray fromPercentEncoding(@Const @ByRef QByteArray pctEncoded);

// #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
// #endif

    // stl compatibility
    public native void push_back(@Cast("char") byte c);
    public native void push_back(@Cast("const char*") BytePointer c);
    public native void push_back(String c);
    public native void push_back(@Const @ByRef QByteArray a);
    public native void push_front(@Cast("char") byte c);
    public native void push_front(@Cast("const char*") BytePointer c);
    public native void push_front(String c);
    public native void push_front(@Const @ByRef QByteArray a);
    public native void shrink_to_fit();

    public static native @ByVal QByteArray fromStdString(@StdString BytePointer s);
    public static native @ByVal QByteArray fromStdString(@StdString String s);
    public native @StdString BytePointer toStdString();

    public native int count();
    public native int length();
    public native @Cast("bool") boolean isNull();
    public native @Cast("QByteArray::DataPtr*") @ByRef PointerPointer data_ptr();
}


// Parsed from QtCore/qcoreapplication.h

@NoOffset public static class QCoreApplication extends QObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QCoreApplication(Pointer p) { super(p); }

    /** enum QCoreApplication:: */
    public static final int ApplicationFlags = 0;

    public QCoreApplication(@ByRef IntPointer argc, @Cast("char**") PointerPointer argv
                ) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(@ByRef IntPointer argc, @Cast("char**") PointerPointer argv
                );
    public QCoreApplication(@ByRef IntPointer argc, @Cast("char**") @ByPtrPtr BytePointer argv
                ) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(@ByRef IntPointer argc, @Cast("char**") @ByPtrPtr BytePointer argv
                );
    public QCoreApplication(@ByRef IntBuffer argc, @Cast("char**") @ByPtrPtr ByteBuffer argv
                ) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(@ByRef IntBuffer argc, @Cast("char**") @ByPtrPtr ByteBuffer argv
                );
    public QCoreApplication(@ByRef int[] argc, @Cast("char**") @ByPtrPtr byte[] argv
                ) { super((Pointer)null); allocate(argc, argv); }
    private native void allocate(@ByRef int[] argc, @Cast("char**") @ByPtrPtr byte[] argv
                );

    public static native void setAttribute(ApplicationAttribute attribute, @Cast("bool") boolean on/*=true*/);
    public static native void setAttribute(ApplicationAttribute attribute);
    public static native @Cast("bool") boolean testAttribute(ApplicationAttribute attribute);

    public static native void setOrganizationDomain(@Const @ByRef QString orgDomain);
    public static native @ByVal QString organizationDomain();
    public static native void setOrganizationName(@Const @ByRef QString orgName);
    public static native @ByVal QString organizationName();
    public static native void setApplicationName(@Const @ByRef QString application);
    public static native @ByVal QString applicationName();
    public static native void setApplicationVersion(@Const @ByRef QString version);
    public static native @ByVal QString applicationVersion();

    public static native void setSetuidAllowed(@Cast("bool") boolean allow);
    public static native @Cast("bool") boolean isSetuidAllowed();

    public static native QCoreApplication instance();

// #ifndef QT_NO_QOBJECT
    public static native int exec();
    public static native void processEvents();
    public static native void exit(int retcode/*=0*/);
    public static native void exit();

    public static native @Cast("bool") boolean sendEvent(QObject receiver, QEvent event);
    public static native void postEvent(QObject receiver, QEvent event, int priority/*=Qt::NormalEventPriority*/);
    public static native void postEvent(QObject receiver, QEvent event);
    public static native void sendPostedEvents(QObject receiver/*=nullptr*/, int event_type/*=0*/);
    public static native void sendPostedEvents();
    public static native void removePostedEvents(QObject receiver, int eventType/*=0*/);
    public static native void removePostedEvents(QObject receiver);
// #if QT_DEPRECATED_SINCE(5, 3)
    public static native @Cast("bool") @Deprecated boolean hasPendingEvents();
// #endif
    public static native QAbstractEventDispatcher eventDispatcher();
    public static native void setEventDispatcher(QAbstractEventDispatcher eventDispatcher);

    public native @Cast("bool") @Name("notify") boolean _notify(QObject arg0, QEvent arg1);

    public static native @Cast("bool") boolean startingUp();
    public static native @Cast("bool") boolean closingDown();
// #endif

    public static native @ByVal QString applicationDirPath();
    public static native @ByVal QString applicationFilePath();
    public static native long applicationPid();

// #if QT_CONFIG(library)
    public static native void addLibraryPath(@Const @ByRef QString arg0);
    public static native void removeLibraryPath(@Const @ByRef QString arg0);
// #endif // QT_CONFIG(library)

// #ifndef QT_NO_TRANSLATION
// #endif

    public static native @ByVal QString translate(@Cast("const char*") BytePointer context,
                                 @Cast("const char*") BytePointer key,
                                 @Cast("const char*") BytePointer disambiguation/*=nullptr*/,
                                 int n/*=-1*/);
    public static native @ByVal QString translate(@Cast("const char*") BytePointer context,
                                 @Cast("const char*") BytePointer key);
    public static native @ByVal QString translate(String context,
                                 String key,
                                 String disambiguation/*=nullptr*/,
                                 int n/*=-1*/);
    public static native @ByVal QString translate(String context,
                                 String key);
// #if QT_DEPRECATED_SINCE(5, 0)
// #endif

// #ifndef QT_NO_QOBJECT
// #  if QT_DEPRECATED_SINCE(5, 9)
// #  endif

    public static native @Cast("bool") boolean isQuitLockEnabled();
    public static native void setQuitLockEnabled(@Cast("bool") boolean enabled);
    public static native void quit();
}


// Parsed from QtCore/qcoreevent.h





// Parsed from QtCore/qeventloop.h

public static class QEventLoop extends QObject {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QEventLoop(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QEventLoop(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QEventLoop position(long position) {
        return (QEventLoop)super.position(position);
    }

    public QEventLoop(QObject parent/*=nullptr*/) { super((Pointer)null); allocate(parent); }
    private native void allocate(QObject parent/*=nullptr*/);
    public QEventLoop() { super((Pointer)null); allocate(); }
    private native void allocate();

    public enum ProcessEventsFlag {
        AllEvents(0x00),
        ExcludeUserInputEvents(0x01),
        ExcludeSocketNotifiers(0x02),
        WaitForMoreEvents(0x04),
        X11ExcludeTimers(0x08),
        EventLoopExec(0x20),
        DialogExec(0x40);

        public final int value;
        private ProcessEventsFlag(int v) { this.value = v; }
        private ProcessEventsFlag(ProcessEventsFlag e) { this.value = e.value; }
        public ProcessEventsFlag intern() { for (ProcessEventsFlag e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(ProcessEventsFlags, ProcessEventsFlag)

    public native @Cast("bool") boolean processEvents();

    public native int exec();
    public native void exit(int returnCode/*=0*/);
    public native void exit();
    public native @Cast("bool") boolean isRunning();

    public native void wakeUp();

    public native @Cast("bool") boolean event(QEvent event);
    public native void quit();
}


// Parsed from QtCore/qobject.h

@NoOffset public static class QObject extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QObject(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QObject(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QObject position(long position) {
        return (QObject)super.position(position);
    }

    public QObject(QObject parent/*=nullptr*/) { super((Pointer)null); allocate(parent); }
    private native void allocate(QObject parent/*=nullptr*/);
    public QObject() { super((Pointer)null); allocate(); }
    private native void allocate();

    public native @Cast("bool") boolean event(QEvent event);
    public native @Cast("bool") boolean eventFilter(QObject watched, QEvent event);

// #if defined(QT_NO_TRANSLATION)
    public static native @ByVal QString tr(@Cast("const char*") BytePointer sourceText, @Cast("const char*") BytePointer arg1/*=nullptr*/, int arg2/*=-1*/);
    public static native @ByVal QString tr(@Cast("const char*") BytePointer sourceText);
    public static native @ByVal QString tr(String sourceText, String arg1/*=nullptr*/, int arg2/*=-1*/);
    public static native @ByVal QString tr(String sourceText);
// #if QT_DEPRECATED_SINCE(5, 0)
// #endif
// #endif //QT_NO_TRANSLATION

    public native @ByVal QString objectName();
    public native void setObjectName(@Const @ByRef QString name);

    public native @Cast("bool") boolean isWidgetType();
    public native @Cast("bool") boolean isWindowType();

    public native @Cast("bool") boolean signalsBlocked();
    public native @Cast("bool") boolean blockSignals(@Cast("bool") boolean b);

    public native int startTimer(int interval, @Cast("Qt::TimerType") int timerType/*=Qt::CoarseTimer*/);
    public native int startTimer(int interval);
// #if QT_HAS_INCLUDE(<chrono>)
// #endif
    public native void killTimer(int id);

// #ifndef QT_NO_REGEXP
// #endif

// #if QT_CONFIG(regularexpression)
// #endif // QT_CONFIG(regularexpression)

    public native void setParent(QObject parent);
    public native void installEventFilter(QObject filterObj);
    public native void removeEventFilter(QObject obj);

// #ifdef Q_CLANG_QDOC
// #else
// #endif //Q_CLANG_QDOC

    public static native @Cast("bool") boolean disconnect(@Const QObject sender, @Cast("const char*") BytePointer signal,
                               @Const QObject receiver, @Cast("const char*") BytePointer member);
    public static native @Cast("bool") boolean disconnect(@Const QObject sender, String signal,
                               @Const QObject receiver, String member);
    public native @Cast("bool") boolean disconnect(@Cast("const char*") BytePointer signal/*=nullptr*/,
                               @Const QObject receiver/*=nullptr*/, @Cast("const char*") BytePointer member/*=nullptr*/);
    public native @Cast("bool") boolean disconnect();
    public native @Cast("bool") boolean disconnect(String signal/*=nullptr*/,
                               @Const QObject receiver/*=nullptr*/, String member/*=nullptr*/);
    public native @Cast("bool") boolean disconnect(@Const QObject receiver, @Cast("const char*") BytePointer member/*=nullptr*/);
    public native @Cast("bool") boolean disconnect(@Const QObject receiver);
    public native @Cast("bool") boolean disconnect(@Const QObject receiver, String member/*=nullptr*/);

// #ifdef Q_CLANG_QDOC
// #else
// #endif //Q_CLANG_QDOC


// #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
// #endif
    public native void dumpObjectTree();
    public native void dumpObjectInfo();

// #ifndef QT_NO_PROPERTIES
    public native @Cast("bool") boolean setProperty(@Cast("const char*") BytePointer name, @Const @ByRef QVariant value);
    public native @Cast("bool") boolean setProperty(String name, @Const @ByRef QVariant value);
    
// #endif // QT_NO_PROPERTIES

// #ifndef QT_NO_USERDATA
    public static native @Cast("unsigned int") int registerUserData();
    public native QObject parent();

    public native @Cast("bool") boolean inherits(@Cast("const char*") BytePointer classname);
    public native @Cast("bool") boolean inherits(String classname);
    public native void deleteLater();

}


// Parsed from QtCore/qsize.h

@NoOffset public static class QSize extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QSize(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QSize(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QSize position(long position) {
        return (QSize)super.position(position);
    }

     public QSize() { super((Pointer)null); allocate(); }
private native void allocate();
     public QSize(int w, int h) { super((Pointer)null); allocate(w, h); }
private native void allocate(int w, int h);

     public native @Cast("bool") boolean isNull();
     public native @Cast("bool") boolean isEmpty();
     public native @Cast("bool") boolean isValid();

     public native int width();
     public native int height();
     public native void setWidth(int w);
     public native void setHeight(int h);
    public native void transpose();
      public native @ByVal QSize transposed();

    public native void scale(int w, int h, @Cast("Qt::AspectRatioMode") int mode);
    public native void scale(@Const @ByRef QSize s, @Cast("Qt::AspectRatioMode") int mode);
     public native @ByVal QSize scaled(int w, int h, @Cast("Qt::AspectRatioMode") int mode);
     public native @ByVal QSize scaled(@Const @ByRef QSize s, @Cast("Qt::AspectRatioMode") int mode);

      public native @ByVal QSize expandedTo(@Const @ByRef QSize arg0);
      public native @ByVal QSize boundedTo(@Const @ByRef QSize arg0);

     public native @ByRef IntPointer rwidth();
     public native @ByRef IntPointer rheight();

     public native @ByRef @Name("operator +=") QSize addPut(@Const @ByRef QSize arg0);
     public native @ByRef @Name("operator -=") QSize subtractPut(@Const @ByRef QSize arg0);
     public native @ByRef @Name("operator *=") QSize multiplyPut(double c);
    public native @ByRef @Name("operator /=") QSize dividePut(double c);

    
    
    
    
    
    
    
}


// Parsed from QtCore/qstring.h

@NoOffset public static class QString extends AbstractQString {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QString(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QString(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QString position(long position) {
        return (QString)super.position(position);
    }


    public QString() { super((Pointer)null); allocate(); }
    private native void allocate();
    public QString(@Const @ByRef QString arg0) { super((Pointer)null); allocate(arg0); }
    private native void allocate(@Const @ByRef QString arg0);
    public native @ByRef @Name("operator =") QString put(@Const @ByRef QString arg0);
// #ifdef Q_COMPILER_RVALUE_REFS
// #endif
    public native void swap(@ByRef QString other);
    public native int size();
    public native int count();
    public native int length();
    public native @Cast("bool") boolean isEmpty();
    public native void resize(int size);
    public native void truncate(int pos);
    public native void chop(int n);

    public native @Name("capacity") int _capacity();
    public native void reserve(int size);
    public native void squeeze();

    public native void detach();
    public native @Cast("bool") boolean isDetached();
    public native @Cast("bool") boolean isSharedWith(@Const @ByRef QString other);
    public native void clear();

    
    
    
    

     public native @ByVal QString arg(long a);
    
    
    
     public native @ByVal QString arg(int a);
    
     public native @ByVal QString arg(short a);
    
     public native @ByVal QString arg(double a);
     public native @ByVal QString arg(@Cast("char") byte a);
    
// #if QT_STRINGVIEW_LEVEL < 2
     public native @ByVal QString arg(@Const @ByRef QString a);
// #endif
    
    
     public native @ByVal QString arg(@Const @ByRef QString a1, @Const @ByRef QString a2);
     public native @ByVal QString arg(@Const @ByRef QString a1, @Const @ByRef QString a2, @Const @ByRef QString a3);
     public native @ByVal QString arg(@Const @ByRef QString a1, @Const @ByRef QString a2, @Const @ByRef QString a3,
                @Const @ByRef QString a4);
     public native @ByVal QString arg(@Const @ByRef QString a1, @Const @ByRef QString a2, @Const @ByRef QString a3,
                @Const @ByRef QString a4, @Const @ByRef QString a5);
     public native @ByVal QString arg(@Const @ByRef QString a1, @Const @ByRef QString a2, @Const @ByRef QString a3,
                @Const @ByRef QString a4, @Const @ByRef QString a5, @Const @ByRef QString a6);
     public native @ByVal QString arg(@Const @ByRef QString a1, @Const @ByRef QString a2, @Const @ByRef QString a3,
                @Const @ByRef QString a4, @Const @ByRef QString a5, @Const @ByRef QString a6,
                @Const @ByRef QString a7);
     public native @ByVal QString arg(@Const @ByRef QString a1, @Const @ByRef QString a2, @Const @ByRef QString a3,
                @Const @ByRef QString a4, @Const @ByRef QString a5, @Const @ByRef QString a6,
                @Const @ByRef QString a7, @Const @ByRef QString a8);
     public native @ByVal QString arg(@Const @ByRef QString a1, @Const @ByRef QString a2, @Const @ByRef QString a3,
                @Const @ByRef QString a4, @Const @ByRef QString a5, @Const @ByRef QString a6,
                @Const @ByRef QString a7, @Const @ByRef QString a8, @Const @ByRef QString a9);

    public native @ByRef QString vsprintf(@Cast("const char*") BytePointer format, @ByVal @Cast("va_list*") Pointer ap);
    public native @ByRef QString vsprintf(String format, @ByVal @Cast("va_list*") Pointer ap);
    public native @ByRef QString sprintf(@Cast("const char*") BytePointer format);
    public native @ByRef QString sprintf(String format);
    public static native @ByVal QString vasprintf(@Cast("const char*") BytePointer format, @ByVal @Cast("va_list*") Pointer ap);
    public static native @ByVal QString vasprintf(String format, @ByVal @Cast("va_list*") Pointer ap);
    public static native @ByVal QString asprintf(@Cast("const char*") BytePointer format);
    public static native @ByVal QString asprintf(String format);
    public native int indexOf(@Const @ByRef QString s, int from/*=0*/, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native int indexOf(@Const @ByRef QString s);
    public native int lastIndexOf(@Const @ByRef QString s, int from/*=-1*/, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native int lastIndexOf(@Const @ByRef QString s);
    public native @Cast("bool") boolean contains(@Const @ByRef QString s, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native @Cast("bool") boolean contains(@Const @ByRef QString s);
    public native int count(@Const @ByRef QString s, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native int count(@Const @ByRef QString s);

// #ifndef QT_NO_REGEXP
// #endif

// #if QT_CONFIG(regularexpression) // ### Qt 6: merge overloads // ### Qt 6: merge overloads // ### Qt 6: merge overloads
// #endif

    public enum SectionFlag {
        SectionDefault            (0x00),
        SectionSkipEmpty          (0x01),
        SectionIncludeLeadingSep  (0x02),
        SectionIncludeTrailingSep (0x04),
        SectionCaseInsensitiveSeps(0x08);

        public final int value;
        private SectionFlag(int v) { this.value = v; }
        private SectionFlag(SectionFlag e) { this.value = e.value; }
        public SectionFlag intern() { for (SectionFlag e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(SectionFlags, SectionFlag)
    public native @ByVal QString section(@Const @ByRef QString in_sep, int start);
// #ifndef QT_NO_REGEXP
// #endif
// #if QT_CONFIG(regularexpression)
// #endif
     public native @ByVal QString left(int n);
     public native @ByVal QString right(int n);
     public native @ByVal QString mid(int position, int n/*=-1*/);
public native @ByVal QString mid(int position);
     public native @ByVal QString chopped(int n);


    
    
    

// #if QT_STRINGVIEW_LEVEL < 2
    public native @Cast("bool") boolean startsWith(@Const @ByRef QString s, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native @Cast("bool") boolean startsWith(@Const @ByRef QString s);
// #endif
    

// #if QT_STRINGVIEW_LEVEL < 2
    public native @Cast("bool") boolean endsWith(@Const @ByRef QString s, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native @Cast("bool") boolean endsWith(@Const @ByRef QString s);
// #endif
    

    public native @Cast("bool") boolean isUpper();
    public native @Cast("bool") boolean isLower();

     public native @ByVal QString leftJustified(int width);
     public native @ByVal QString rightJustified(int width);

// #if defined(Q_COMPILER_REF_QUALIFIERS) && !defined(QT_COMPILING_QSTRING_COMPAT_CPP) && !defined(Q_CLANG_QDOC)
// #else
     public native @ByVal QString toLower();
     public native @ByVal QString toUpper();
     public native @ByVal QString toCaseFolded();
     public native @ByVal QString trimmed();
     public native @ByVal QString simplified();
// #endif
     public native @ByVal QString toHtmlEscaped();
    public native @ByRef QString insert(int i, @Const @ByRef QString s);
    public native @ByRef QString append(@Const @ByRef QString s);
    public native @ByRef QString prepend(@Const @ByRef QString s);
    public native @ByRef @Name("operator +=") QString addPut(@Const @ByRef QString s);

    public native @ByRef QString remove(int i, int len);
    public native @ByRef QString remove(@Const @ByRef QString s, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native @ByRef QString remove(@Const @ByRef QString s);
    public native @ByRef QString replace(int i, int len, @Const @ByRef QString after);
    public native @ByRef QString replace(@Const @ByRef QString before, @Const @ByRef QString after,
                         CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native @ByRef QString replace(@Const @ByRef QString before, @Const @ByRef QString after);
// #ifndef QT_NO_REGEXP
// #endif
// #if QT_CONFIG(regularexpression)
// #endif

    /** enum QString::SplitBehavior */
    public static final int KeepEmptyParts = 0, SkipEmptyParts = 1;

    
    
    
    
// #ifndef QT_NO_REGEXP
    
    
// #endif
// #if QT_CONFIG(regularexpression)
    
    
// #endif
    /** enum QString::NormalizationForm */
    public static final int
        NormalizationForm_D = 0,
        NormalizationForm_C = 1,
        NormalizationForm_KD = 2,
        NormalizationForm_KC = 3;
     public native @ByVal QString normalized(@Cast("QString::NormalizationForm") int mode);

     public native @ByVal QString repeated(int times);

    public native @Cast("const unsigned short*") ShortPointer utf16();

// #if defined(Q_COMPILER_REF_QUALIFIERS) && !defined(QT_COMPILING_QSTRING_COMPAT_CPP) && !defined(Q_CLANG_QDOC)
// #else
     public native @ByVal QByteArray toLatin1();
     public native @ByVal QByteArray toUtf8();
     public native @ByVal QByteArray toLocal8Bit();
// #endif
    

    // note - this are all inline so we can benefit from strlen() compile time optimizations
    public static native @ByVal QString fromLatin1(@Cast("const char*") BytePointer str, int size/*=-1*/);
    public static native @ByVal QString fromLatin1(@Cast("const char*") BytePointer str);
    public static native @ByVal QString fromLatin1(String str, int size/*=-1*/);
    public static native @ByVal QString fromLatin1(String str);
    public static native @ByVal QString fromUtf8(@Cast("const char*") BytePointer str, int size/*=-1*/);
    public static native @ByVal QString fromUtf8(@Cast("const char*") BytePointer str);
    public static native @ByVal QString fromUtf8(String str, int size/*=-1*/);
    public static native @ByVal QString fromUtf8(String str);
    public static native @ByVal QString fromLocal8Bit(@Cast("const char*") BytePointer str, int size/*=-1*/);
    public static native @ByVal QString fromLocal8Bit(@Cast("const char*") BytePointer str);
    public static native @ByVal QString fromLocal8Bit(String str, int size/*=-1*/);
    public static native @ByVal QString fromLocal8Bit(String str);
    public static native @ByVal QString fromLatin1(@Const @ByRef QByteArray str);
    public static native @ByVal QString fromUtf8(@Const @ByRef QByteArray str);
    public static native @ByVal QString fromLocal8Bit(@Const @ByRef QByteArray str);
    public static native @ByVal QString fromUtf16(@Cast("const unsigned short*") ShortPointer arg0, int size/*=-1*/);
    public static native @ByVal QString fromUtf16(@Cast("const unsigned short*") ShortPointer arg0);
    public static native @ByVal QString fromUtf16(@Cast("const unsigned short*") ShortBuffer arg0, int size/*=-1*/);
    public static native @ByVal QString fromUtf16(@Cast("const unsigned short*") ShortBuffer arg0);
    public static native @ByVal QString fromUtf16(@Cast("const unsigned short*") short[] arg0, int size/*=-1*/);
    public static native @ByVal QString fromUtf16(@Cast("const unsigned short*") short[] arg0);
    public static native @ByVal QString fromUcs4(@Cast("const unsigned int*") IntPointer arg0, int size/*=-1*/);
    public static native @ByVal QString fromUcs4(@Cast("const unsigned int*") IntPointer arg0);
    public static native @ByVal QString fromUcs4(@Cast("const unsigned int*") IntBuffer arg0, int size/*=-1*/);
    public static native @ByVal QString fromUcs4(@Cast("const unsigned int*") IntBuffer arg0);
    public static native @ByVal QString fromUcs4(@Cast("const unsigned int*") int[] arg0, int size/*=-1*/);
    public static native @ByVal QString fromUcs4(@Cast("const unsigned int*") int[] arg0);

// #if defined(Q_COMPILER_UNICODE_STRINGS)
// #endif

// #if QT_DEPRECATED_SINCE(5, 0)
// #endif

    public native int toWCharArray(@Cast("wchar_t*") CharPointer array);
    public native int toWCharArray(@Cast("wchar_t*") IntPointer array);
     public static native @ByVal QString fromWCharArray(@Cast("const wchar_t*") CharPointer string, int size/*=-1*/);
public static native @ByVal QString fromWCharArray(@Cast("const wchar_t*") CharPointer string);
public static native @ByVal QString fromWCharArray(@Cast("const wchar_t*") IntPointer string, int size/*=-1*/);
public static native @ByVal QString fromWCharArray(@Cast("const wchar_t*") IntPointer string);
    public native @ByRef QString setUtf16(@Cast("const unsigned short*") ShortPointer utf16, int size);
    public native @ByRef QString setUtf16(@Cast("const unsigned short*") ShortBuffer utf16, int size);
    public native @ByRef QString setUtf16(@Cast("const unsigned short*") short[] utf16, int size);

// #if QT_STRINGVIEW_LEVEL < 2
    public native int compare(@Const @ByRef QString s, CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public native int compare(@Const @ByRef QString s);
// #endif

    public static native int compare(@Const @ByRef QString s1, @Const @ByRef QString s2,
                                  CaseSensitivity cs/*=Qt::CaseSensitive*/);
    public static native int compare(@Const @ByRef QString s1, @Const @ByRef QString s2);

    public native int localeAwareCompare(@Const @ByRef QString s);
    public static native int localeAwareCompare(@Const @ByRef QString s1, @Const @ByRef QString s2);

    // ### Qt6: make inline except for the long long versions
    public native short toShort(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native short toShort();
    public native short toShort(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned short") short toUShort(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned short") short toUShort();
    public native @Cast("unsigned short") short toUShort(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native int toInt(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native int toInt();
    public native int toInt(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned int") int toUInt(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned int") int toUInt();
    public native @Cast("unsigned int") int toUInt(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native long toLong(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native long toLong();
    public native long toLong(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned long") long toULong(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned long") long toULong();
    public native @Cast("unsigned long") long toULong(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native long toLongLong(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native long toLongLong();
    public native long toLongLong(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned long long") long toULongLong(@Cast("bool*") BoolPointer ok/*=nullptr*/, int base/*=10*/);
    public native @Cast("unsigned long long") long toULongLong();
    public native @Cast("unsigned long long") long toULongLong(@Cast("bool*") boolean[] ok/*=nullptr*/, int base/*=10*/);
    public native float toFloat(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native float toFloat();
    public native float toFloat(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native double toDouble(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native double toDouble();
    public native double toDouble(@Cast("bool*") boolean[] ok/*=nullptr*/);

    public native @ByRef QString setNum(short arg0, int base/*=10*/);
    public native @ByRef QString setNum(short arg0);
    public native @ByRef QString setNum(int arg0, int base/*=10*/);
    public native @ByRef QString setNum(int arg0);
    public native @ByRef QString setNum(long arg0, int base/*=10*/);
    public native @ByRef QString setNum(long arg0);
    public native @ByRef QString setNum(float arg0, @Cast("char") byte f/*='g'*/, int prec/*=6*/);
    public native @ByRef QString setNum(float arg0);
    public native @ByRef QString setNum(double arg0, @Cast("char") byte f/*='g'*/, int prec/*=6*/);
    public native @ByRef QString setNum(double arg0);

    public static native @ByVal QString number(int arg0, int base/*=10*/);
    public static native @ByVal QString number(int arg0);
    public static native @ByVal QString number(long arg0, int base/*=10*/);
    public static native @ByVal QString number(long arg0);
    public static native @ByVal QString number(double arg0, @Cast("char") byte f/*='g'*/, int prec/*=6*/);
    public static native @ByVal QString number(double arg0);

    
    
    
    
    
    

    // ASCII compatibility
// #if defined(QT_RESTRICTED_CAST_FROM_ASCII)
    
    
// #endif
// #if !defined(QT_NO_CAST_FROM_ASCII) && !defined(QT_RESTRICTED_CAST_FROM_ASCII)
// #endif

    // STL compatibility
    public native void push_back(@Const @ByRef QString s);
    public native void push_front(@Const @ByRef QString s);
    public native void shrink_to_fit();

    public static native @ByVal QString fromStdString(@StdString BytePointer s);
    public static native @ByVal QString fromStdString(@StdString String s);
    public native @StdString String toStdString();
    public static native @ByVal QString fromStdWString(@StdWString CharPointer s);
    public static native @ByVal QString fromStdWString(@StdWString IntPointer s);
    public native @StdWString CharPointer toStdWString();

// #if defined(Q_STDLIB_UNICODE_STRINGS) || defined(Q_QDOC)
// #endif

// #if defined(Q_OS_DARWIN) || defined(Q_QDOC)
// #endif
    // compatibility
// #if QT_DEPRECATED_SINCE(5, 9)
// #endif
    public native @Cast("bool") boolean isNull();


    public native @Cast("bool") boolean isSimpleText();
    public native @Cast("bool") boolean isRightToLeft();

    public QString(int size, @Cast("Qt::Initialization") int arg1) { super((Pointer)null); allocate(size, arg1); }
    private native void allocate(int size, @Cast("Qt::Initialization") int arg1);
    
    public native @Cast("QString::DataPtr*") @ByRef PointerPointer data_ptr();
}


// Parsed from QtCore/qstringlist.h

// #ifdef Q_QDOC


// Parsed from QtCore/qthread.h




// Parsed from QtCore/qvariant.h

public static class QVariant extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QVariant(Pointer p) { super(p); }

    

    public QVariant() { super((Pointer)null); allocate(); }
    private native void allocate();
    public QVariant(int typeId, @Const Pointer copy) { super((Pointer)null); allocate(typeId, copy); }
    private native void allocate(int typeId, @Const Pointer copy);
    public QVariant(int typeId, @Const Pointer copy, @Cast("unsigned int") int flags) { super((Pointer)null); allocate(typeId, copy, flags); }
    private native void allocate(int typeId, @Const Pointer copy, @Cast("unsigned int") int flags);
    public QVariant(@Const @ByRef QVariant other) { super((Pointer)null); allocate(other); }
    private native void allocate(@Const @ByRef QVariant other);

// #ifndef QT_NO_DATASTREAM
// #endif

    public QVariant(int i) { super((Pointer)null); allocate(i); }
    private native void allocate(int i);
    public QVariant(long ll) { super((Pointer)null); allocate(ll); }
    private native void allocate(long ll);
    public QVariant(@Cast("bool") boolean b) { super((Pointer)null); allocate(b); }
    private native void allocate(@Cast("bool") boolean b);
    public QVariant(double d) { super((Pointer)null); allocate(d); }
    private native void allocate(double d);
    public QVariant(float f) { super((Pointer)null); allocate(f); }
    private native void allocate(float f);
// #ifndef QT_NO_CAST_FROM_ASCII
    public QVariant(@Cast("const char*") BytePointer str) { super((Pointer)null); allocate(str); }
    private native @Deprecated void allocate(@Cast("const char*") BytePointer str);
    public QVariant(String str) { super((Pointer)null); allocate(str); }
    private native @Deprecated void allocate(String str);
// #endif

    public QVariant(@Const @ByRef QByteArray bytearray) { super((Pointer)null); allocate(bytearray); }
    private native void allocate(@Const @ByRef QByteArray bytearray);
    public QVariant(@Const @ByRef QString string) { super((Pointer)null); allocate(string); }
    private native void allocate(@Const @ByRef QString string);
// #ifndef QT_NO_GEOM_VARIANT
    public QVariant(@Const @ByRef QSize size) { super((Pointer)null); allocate(size); }
    private native void allocate(@Const @ByRef QSize size);
// #endif
// #ifndef QT_NO_REGEXP
// #endif // QT_NO_REGEXP
// #if QT_CONFIG(regularexpression)
// #endif // QT_CONFIG(regularexpression)
// #ifndef QT_BOOTSTRAPPED
// #endif // QT_BOOTSTRAPPED
// #if QT_CONFIG(itemmodel)
// #endif

    public native @ByRef @Name("operator =") QVariant put(@Const @ByRef QVariant other);
// #ifdef Q_COMPILER_RVALUE_REFS
// #endif

    public native void swap(@ByRef QVariant other);
    public native int userType();
    public native @Cast("const char*") BytePointer typeName();

    public native @Cast("bool") boolean canConvert(int targetTypeId);
    public native @Cast("bool") boolean convert(int targetTypeId);

    public native @Cast("bool") boolean isValid();
    public native @Cast("bool") boolean isNull();

    public native void clear();

    public native void detach();
    public native @Cast("bool") boolean isDetached();

    public native int toInt(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native int toInt();
    public native int toInt(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native @Cast("unsigned int") int toUInt(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native @Cast("unsigned int") int toUInt();
    public native @Cast("unsigned int") int toUInt(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native long toLongLong(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native long toLongLong();
    public native long toLongLong(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native @Cast("unsigned long long") long toULongLong(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native @Cast("unsigned long long") long toULongLong();
    public native @Cast("unsigned long long") long toULongLong(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native @Cast("bool") boolean toBool();
    public native double toDouble(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native double toDouble();
    public native double toDouble(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native float toFloat(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native float toFloat();
    public native float toFloat(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native double toReal(@Cast("bool*") BoolPointer ok/*=nullptr*/);
    public native double toReal();
    public native double toReal(@Cast("bool*") boolean[] ok/*=nullptr*/);
    public native @ByVal QByteArray toByteArray();
    public native @ByVal @Name("toString") QString toQString();

// #ifndef QT_NO_GEOM_VARIANT
    public native @ByVal QSize toSize();
// #endif
// #ifndef QT_NO_REGEXP
// #endif // QT_NO_REGEXP
// #if QT_CONFIG(regularexpression)
// #endif // QT_CONFIG(regularexpression)
// #ifndef QT_BOOTSTRAPPED
// #endif // QT_BOOTSTRAPPED
// #if QT_CONFIG(itemmodel)
// #endif

// #ifndef QT_NO_DATASTREAM
// #endif
    
    
    
}


}
