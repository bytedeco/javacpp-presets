// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.qt.Qt5Core;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.qt.global.Qt5Core.*;

@Name("QByteArray::FromBase64Result") @Properties(inherit = org.bytedeco.qt.presets.Qt5Core.class)
public class FromBase64Result extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FromBase64Result() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FromBase64Result(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FromBase64Result(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FromBase64Result position(long position) {
        return (FromBase64Result)super.position(position);
    }
    @Override public FromBase64Result getPointer(long i) {
        return new FromBase64Result((Pointer)this).position(position + i);
    }

    public native @ByRef QByteArray decoded(); public native FromBase64Result decoded(QByteArray setter);
    public native @Cast("QByteArray::Base64DecodingStatus") int decodingStatus(); public native FromBase64Result decodingStatus(int setter);

    public native @NoException void swap(@ByRef FromBase64Result other);

    public native @Cast("bool") @Name("operator bool") @NoException boolean asBoolean();

// #if defined(Q_COMPILER_REF_QUALIFIERS) && !defined(Q_QDOC)
    public native @ByRef @Name("operator *") @NoException QByteArray multiply();
    
// #else
// #endif
}
