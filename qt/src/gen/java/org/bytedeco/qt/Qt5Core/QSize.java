// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.qt.Qt5Core;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.qt.global.Qt5Core.*;

// Parsed from QtCore/qsize.h

@NoOffset @Properties(inherit = org.bytedeco.qt.presets.Qt5Core.class)
public class QSize extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QSize(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QSize(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QSize position(long position) {
        return (QSize)super.position(position);
    }
    @Override public QSize getPointer(long i) {
        return new QSize((Pointer)this).position(position + i);
    }

     public QSize() { super((Pointer)null); allocate(); }
@NoException private native void allocate();
     public QSize(int w, int h) { super((Pointer)null); allocate(w, h); }
@NoException private native void allocate(int w, int h);

     public native @Cast("bool") @NoException boolean isNull();
     public native @Cast("bool") @NoException boolean isEmpty();
     public native @Cast("bool") @NoException boolean isValid();

     public native @NoException int width();
     public native @NoException int height();
     public native @NoException void setWidth(int w);
     public native @NoException void setHeight(int h);
    public native @NoException void transpose();
      public native @ByVal @NoException QSize transposed();

    public native @NoException void scale(int w, int h, @Cast("Qt::AspectRatioMode") int mode);
    public native @NoException void scale(@Const @ByRef QSize s, @Cast("Qt::AspectRatioMode") int mode);
     public native @ByVal @NoException QSize scaled(int w, int h, @Cast("Qt::AspectRatioMode") int mode);
     public native @ByVal @NoException QSize scaled(@Const @ByRef QSize s, @Cast("Qt::AspectRatioMode") int mode);

      public native @ByVal @NoException QSize expandedTo(@Const @ByRef QSize arg0);
      public native @ByVal @NoException QSize boundedTo(@Const @ByRef QSize arg0);

     
     

     public native @ByRef @NoException IntPointer rwidth();
     public native @ByRef @NoException IntPointer rheight();

     public native @ByRef @Name("operator +=") @NoException QSize addPut(@Const @ByRef QSize arg0);
     public native @ByRef @Name("operator -=") @NoException QSize subtractPut(@Const @ByRef QSize arg0);
     public native @ByRef @Name("operator *=") @NoException QSize multiplyPut(double c);
    public native @ByRef @Name("operator /=") QSize dividePut(double c);

    
    
    
    
    
    
    
}
