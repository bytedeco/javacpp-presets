// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.qt.QtWidgets;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.qt.QtCore.*;
import static org.bytedeco.qt.global.QtCore.*;
import org.bytedeco.qt.QtGui.*;
import static org.bytedeco.qt.global.QtGui.*;

import static org.bytedeco.qt.global.QtWidgets.*;

// Parsed from QtWidgets/qcombobox.h

@Properties(inherit = org.bytedeco.qt.presets.QtWidgets.class)
public class QComboBox extends QWidget {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QComboBox(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QComboBox(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QComboBox position(long position) {
        return (QComboBox)super.position(position);
    }

    public QComboBox(QWidget parent/*=nullptr*/) { super((Pointer)null); allocate(parent); }
    private native void allocate(QWidget parent/*=nullptr*/);
    public QComboBox() { super((Pointer)null); allocate(); }
    private native void allocate();

    public native int maxVisibleItems();
    public native void setMaxVisibleItems(int maxItems);

    public native int count();
    public native void setMaxCount(int max);
    public native int maxCount();

// #if QT_CONFIG(completer)
    public native @Cast("bool") boolean autoCompletion();
    public native void setAutoCompletion(@Cast("bool") boolean enable);

    public native CaseSensitivity autoCompletionCaseSensitivity();
    public native void setAutoCompletionCaseSensitivity(CaseSensitivity sensitivity);
// #endif

    public native @Cast("bool") boolean duplicatesEnabled();
    public native void setDuplicatesEnabled(@Cast("bool") boolean enable);

    public native void setFrame(@Cast("bool") boolean arg0);
    public native @Cast("bool") boolean hasFrame();

    public native int findText(@Const @ByRef QString text,
                            @ByVal(nullValue = "Qt::MatchFlags(static_cast<Qt::MatchFlags>(Qt::MatchExactly|Qt::MatchCaseSensitive))") @Cast("Qt::MatchFlags") int flags);
    public native int findText(@Const @ByRef QString text);
    public native int findData(@Const @ByRef QVariant data, int role/*=Qt::UserRole*/,
                     @ByVal(nullValue = "Qt::MatchFlags(static_cast<Qt::MatchFlags>(Qt::MatchExactly|Qt::MatchCaseSensitive))") @Cast("Qt::MatchFlags") int flags);
    public native int findData(@Const @ByRef QVariant data);

    /** enum QComboBox::InsertPolicy */
    public static final int
        NoInsert = 0,
        InsertAtTop = 1,
        InsertAtCurrent = 2,
        InsertAtBottom = 3,
        InsertAfterCurrent = 4,
        InsertBeforeCurrent = 5,
        InsertAlphabetically = 6;
    

    public native @Cast("QComboBox::InsertPolicy") int insertPolicy();
    public native void setInsertPolicy(@Cast("QComboBox::InsertPolicy") int policy);

    /** enum QComboBox::SizeAdjustPolicy */
    public static final int
        AdjustToContents = 0,
        AdjustToContentsOnFirstShow = 1,
        AdjustToMinimumContentsLength = 2, // ### Qt 6: remove
        AdjustToMinimumContentsLengthWithIcon = 3;
    

    public native @Cast("QComboBox::SizeAdjustPolicy") int sizeAdjustPolicy();
    public native void setSizeAdjustPolicy(@Cast("QComboBox::SizeAdjustPolicy") int policy);
    public native int minimumContentsLength();
    public native void setMinimumContentsLength(int characters);
    public native @ByVal QSize iconSize();
    public native void setIconSize(@Const @ByRef QSize size);

    public native @Cast("bool") boolean isEditable();
    public native void setEditable(@Cast("bool") boolean editable);
    public native void setLineEdit(QLineEdit edit);
    public native QLineEdit lineEdit();
// #ifndef QT_NO_VALIDATOR
// #endif

// #if QT_CONFIG(completer)
// #endif

    public native int modelColumn();
    public native void setModelColumn(int visibleColumn);

    public native int currentIndex();
    public native @ByVal QString currentText();
    public native @ByVal QVariant currentData(int role/*=Qt::UserRole*/);
    public native @ByVal QVariant currentData();

    public native @ByVal QString itemText(int index);
    public native @ByVal QIcon itemIcon(int index);
    public native @ByVal QVariant itemData(int index, int role/*=Qt::UserRole*/);
    public native @ByVal QVariant itemData(int index);

    public native void addItem(@Const @ByRef QString text, @Const @ByRef(nullValue = "QVariant()") QVariant userData);
    public native void addItem(@Const @ByRef QString text);
    public native void addItem(@Const @ByRef QIcon icon, @Const @ByRef QString text,
                            @Const @ByRef(nullValue = "QVariant()") QVariant userData);
    public native void addItem(@Const @ByRef QIcon icon, @Const @ByRef QString text);

    public native void insertItem(int index, @Const @ByRef QString text, @Const @ByRef(nullValue = "QVariant()") QVariant userData);
    public native void insertItem(int index, @Const @ByRef QString text);
    public native void insertItem(int index, @Const @ByRef QIcon icon, @Const @ByRef QString text,
                        @Const @ByRef(nullValue = "QVariant()") QVariant userData);
    public native void insertItem(int index, @Const @ByRef QIcon icon, @Const @ByRef QString text);
    public native void insertSeparator(int index);

    public native void removeItem(int index);

    public native void setItemText(int index, @Const @ByRef QString text);
    public native void setItemIcon(int index, @Const @ByRef QIcon icon);
    public native void setItemData(int index, @Const @ByRef QVariant value, int role/*=Qt::UserRole*/);
    public native void setItemData(int index, @Const @ByRef QVariant value);

    public native @ByVal QSize sizeHint();
    public native @ByVal QSize minimumSizeHint();

    public native void showPopup();
    public native void hidePopup();

    public native @Cast("bool") boolean event(QEvent event);
    public native @ByVal QVariant inputMethodQuery(@Cast("Qt::InputMethodQuery") int arg0);
    public native @ByVal QVariant inputMethodQuery(@Cast("Qt::InputMethodQuery") int query, @Const @ByRef QVariant argument);
    public native void clear();
    public native void clearEditText();
    public native void setEditText(@Const @ByRef QString text);
    public native void setCurrentIndex(int index);
    public native void setCurrentText(@Const @ByRef QString text);
}
