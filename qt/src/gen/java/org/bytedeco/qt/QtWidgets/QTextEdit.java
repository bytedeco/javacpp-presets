// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.qt.QtWidgets;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.qt.QtCore.*;
import static org.bytedeco.qt.global.QtCore.*;
import org.bytedeco.qt.QtGui.*;
import static org.bytedeco.qt.global.QtGui.*;

import static org.bytedeco.qt.global.QtWidgets.*;

// Parsed from QtWidgets/qtextedit.h

@Properties(inherit = org.bytedeco.qt.presets.QtWidgets.class)
public class QTextEdit extends QAbstractScrollArea {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public QTextEdit(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public QTextEdit(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public QTextEdit position(long position) {
        return (QTextEdit)super.position(position);
    }

    /** enum QTextEdit::LineWrapMode */
    public static final int
        NoWrap = 0,
        WidgetWidth = 1,
        FixedPixelWidth = 2,
        FixedColumnWidth = 3;
    

    public enum AutoFormattingFlag {
        AutoNone(0),
        AutoBulletList(0x00000001),
        AutoAll(0xffffffff);

        public final int value;
        private AutoFormattingFlag(int v) { this.value = v; }
        private AutoFormattingFlag(AutoFormattingFlag e) { this.value = e.value; }
        public AutoFormattingFlag intern() { for (AutoFormattingFlag e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }

//     #define Q_DECLARE_FLAGS(arg0, arg1)(AutoFormatting, AutoFormattingFlag)
    

    public QTextEdit(QWidget parent/*=nullptr*/) { super((Pointer)null); allocate(parent); }
    private native void allocate(QWidget parent/*=nullptr*/);
    public QTextEdit() { super((Pointer)null); allocate(); }
    private native void allocate();
    public QTextEdit(@Const @ByRef QString text, QWidget parent/*=nullptr*/) { super((Pointer)null); allocate(text, parent); }
    private native void allocate(@Const @ByRef QString text, QWidget parent/*=nullptr*/);
    public QTextEdit(@Const @ByRef QString text) { super((Pointer)null); allocate(text); }
    private native void allocate(@Const @ByRef QString text);

    public native void setPlaceholderText(@Const @ByRef QString placeholderText);
    public native @ByVal QString placeholderText();

    public native @Cast("bool") boolean isReadOnly();
    public native void setReadOnly(@Cast("bool") boolean ro);

    public native void setTextInteractionFlags(@ByVal @Cast("Qt::TextInteractionFlags") int flags);
    public native @ByVal @Cast("Qt::TextInteractionFlags") int textInteractionFlags();

    public native double fontPointSize();
    public native @ByVal QString fontFamily();
    public native int fontWeight();
    public native @Cast("bool") boolean fontUnderline();
    public native @Cast("bool") boolean fontItalic();
    public native @ByVal QFont currentFont();
    public native @ByVal @Cast("Qt::Alignment") int alignment();

    public native @Cast("bool") boolean tabChangesFocus();
    public native void setTabChangesFocus(@Cast("bool") boolean b);

    public native void setDocumentTitle(@Const @ByRef QString title);
    public native @ByVal QString documentTitle();

    public native @Cast("bool") boolean isUndoRedoEnabled();
    public native void setUndoRedoEnabled(@Cast("bool") boolean enable);

    public native @Cast("QTextEdit::LineWrapMode") int lineWrapMode();
    public native void setLineWrapMode(@Cast("QTextEdit::LineWrapMode") int mode);

    public native int lineWrapColumnOrWidth();
    public native void setLineWrapColumnOrWidth(int w);

    public native @Cast("bool") boolean find(@Const @ByRef QString exp);
// #ifndef QT_NO_REGEXP
// #endif

    public native @ByVal QString toPlainText();
// #ifndef QT_NO_TEXTHTMLPARSER
    public native @ByVal QString toHtml();
// #endif

    public native void ensureCursorVisible();
// #ifndef QT_NO_CONTEXTMENU
    public native QMenu createStandardContextMenu();
// #endif

    public native @Cast("bool") boolean overwriteMode();
    public native void setOverwriteMode(@Cast("bool") boolean overwrite);

// #if QT_DEPRECATED_SINCE(5, 10)
    public native @Deprecated int tabStopWidth();
    public native @Deprecated void setTabStopWidth(int width);
// #endif

    public native double tabStopDistance();
    public native void setTabStopDistance(double distance);

    public native int cursorWidth();
    public native void setCursorWidth(int width);

    public native @Cast("bool") boolean acceptRichText();
    public native void setAcceptRichText(@Cast("bool") boolean accept);

    public static class ExtraSelection extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public ExtraSelection() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public ExtraSelection(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public ExtraSelection(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public ExtraSelection position(long position) {
            return (ExtraSelection)super.position(position);
        }
    
    }

    public native @Cast("bool") boolean canPaste();

    public native @ByVal QVariant inputMethodQuery(@Cast("Qt::InputMethodQuery") int property);
    public native @ByVal QVariant inputMethodQuery(@Cast("Qt::InputMethodQuery") int query, @ByVal QVariant argument);
    public native void setFontPointSize(double s);
    public native void setFontFamily(@Const @ByRef QString fontFamily);
    public native void setFontWeight(int w);
    public native void setFontUnderline(@Cast("bool") boolean b);
    public native void setFontItalic(@Cast("bool") boolean b);
    public native void setCurrentFont(@Const @ByRef QFont f);
    public native void setAlignment(@ByVal @Cast("Qt::Alignment") int a);

    public native void setPlainText(@Const @ByRef QString text);
// #ifndef QT_NO_TEXTHTMLPARSER
    public native void setHtml(@Const @ByRef QString text);
// #endif
    public native void setText(@Const @ByRef QString text);

// #ifndef QT_NO_CLIPBOARD
    public native void cut();
    public native void copy();
    public native void paste();
// #endif

    public native void undo();
    public native void redo();

    public native void clear();
    public native void selectAll();

    public native void insertPlainText(@Const @ByRef QString text);
// #ifndef QT_NO_TEXTHTMLPARSER
    public native void insertHtml(@Const @ByRef QString text);
// #endif // QT_NO_TEXTHTMLPARSER

    public native void append(@Const @ByRef QString text);

    public native void scrollToAnchor(@Const @ByRef QString name);

    public native void zoomIn(int range/*=1*/);
    public native void zoomIn();
    public native void zoomOut(int range/*=1*/);
    public native void zoomOut();
}
