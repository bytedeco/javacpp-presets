// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.qt.global;

import org.bytedeco.qt.QtCore.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class QtCore extends org.bytedeco.qt.helper.QtCore {
    static { Loader.load(); }

// Targeting ../QtCore/QEvent.java


// Targeting ../QtCore/QTimerEvent.java


// Targeting ../QtCore/QChildEvent.java


// Targeting ../QtCore/QDynamicPropertyChangeEvent.java


// Targeting ../QtCore/QDeferredDeleteEvent.java





// Parsed from QtCore/qlogging.h

public enum QtMsgType { QtDebugMsg(0), QtWarningMsg(1), QtCriticalMsg(2), QtFatalMsg(3), QtInfoMsg(4), QtSystemMsg(QtCriticalMsg);

    public final int value;
    private QtMsgType(int v) { this.value = v; }
    private QtMsgType(QtMsgType e) { this.value = e.value; }
    public QtMsgType intern() { for (QtMsgType e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting ../QtCore/QMessageLogContext.java


// Targeting ../QtCore/QMessageLogger.java


// Targeting ../QtCore/QtMessageHandler.java


public static native QtMessageHandler qInstallMessageHandler(QtMessageHandler arg0);

public static native void qSetMessagePattern(@Const @ByRef QString messagePattern);
public static native @ByVal QString qFormatLogMessage(QtMsgType type, @Const @ByRef QMessageLogContext context,
                                        @Const @ByRef QString buf);

// #endif // QLOGGING_H


// Parsed from QtCore/qnamespace.h

// #ifndef Q_MOC_RUN
// #endif

    /** enum Qt::GlobalColor */
    public static final int
        color0 = 0,
        color1 = 1,
        black = 2,
        white = 3,
        darkGray = 4,
        gray = 5,
        lightGray = 6,
        red = 7,
        green = 8,
        blue = 9,
        cyan = 10,
        magenta = 11,
        yellow = 12,
        darkRed = 13,
        darkGreen = 14,
        darkBlue = 15,
        darkCyan = 16,
        darkMagenta = 17,
        darkYellow = 18,
        transparent = 19;

    /** enum Qt::KeyboardModifier */
    public static final int
        NoModifier           = 0x00000000,
        ShiftModifier        = 0x02000000,
        ControlModifier      = 0x04000000,
        AltModifier          = 0x08000000,
        MetaModifier         = 0x10000000,
        KeypadModifier       = 0x20000000,
        GroupSwitchModifier  = 0x40000000,
        // Do not extend the mask to include 0x01000000
        KeyboardModifierMask = 0xfe000000;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(KeyboardModifiers, KeyboardModifier)
    

    //shorter names for shortcuts
    // The use of all-caps identifiers has the potential for clashing with
    // user-defined or third-party macros. More so when the identifiers are not
    // "namespace"-prefixed. This is considered bad practice and is why
    // KeypadModifier was not added to the Modifier enum.
    /** enum Qt::Modifier */
    public static final int
        META          = MetaModifier,
        SHIFT         = ShiftModifier,
        CTRL          = ControlModifier,
        ALT           = AltModifier,
        MODIFIER_MASK = KeyboardModifierMask,
        UNICODE_ACCEL = 0x00000000;

    @Namespace("Qt") public enum MouseButton {
        NoButton        (0x00000000),
        LeftButton      (0x00000001),
        RightButton     (0x00000002),
        MidButton       (0x00000004), // ### Qt 6: remove me
        MiddleButton    (MidButton),
        BackButton      (0x00000008),
        XButton1        (BackButton),
        ExtraButton1    (XButton1),
        ForwardButton   (0x00000010),
        XButton2        (ForwardButton),
        ExtraButton2    (ForwardButton),
        TaskButton      (0x00000020),
        ExtraButton3    (TaskButton),
        ExtraButton4    (0x00000040),
        ExtraButton5    (0x00000080),
        ExtraButton6    (0x00000100),
        ExtraButton7    (0x00000200),
        ExtraButton8    (0x00000400),
        ExtraButton9    (0x00000800),
        ExtraButton10   (0x00001000),
        ExtraButton11   (0x00002000),
        ExtraButton12   (0x00004000),
        ExtraButton13   (0x00008000),
        ExtraButton14   (0x00010000),
        ExtraButton15   (0x00020000),
        ExtraButton16   (0x00040000),
        ExtraButton17   (0x00080000),
        ExtraButton18   (0x00100000),
        ExtraButton19   (0x00200000),
        ExtraButton20   (0x00400000),
        ExtraButton21   (0x00800000),
        ExtraButton22   (0x01000000),
        ExtraButton23   (0x02000000),
        ExtraButton24   (0x04000000),
        AllButtons      (0x07ffffff),
        MaxMouseButton  (ExtraButton24),
        // 4 high-order bits remain available for future use (0x08000000 through 0x40000000).
        MouseButtonMask (0xffffffff);

        public final int value;
        private MouseButton(int v) { this.value = v; }
        private MouseButton(MouseButton e) { this.value = e.value; }
        public MouseButton intern() { for (MouseButton e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(MouseButtons, MouseButton)
    

    @Namespace("Qt") public enum Orientation {
        Horizontal(0x1),
        Vertical(0x2);

        public final int value;
        private Orientation(int v) { this.value = v; }
        private Orientation(Orientation e) { this.value = e.value; }
        public Orientation intern() { for (Orientation e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }

//     #define Q_DECLARE_FLAGS(arg0, arg1)(Orientations, Orientation)
    

    /** enum Qt::FocusPolicy */
    public static final int
        NoFocus = 0,
        TabFocus = 0x1,
        ClickFocus = 0x2,
        StrongFocus = TabFocus | ClickFocus | 0x8,
        WheelFocus = StrongFocus | 0x4;

    /** enum Qt::TabFocusBehavior */
    public static final int
        NoTabFocus           = 0x00,
        TabFocusTextControls = 0x01,
        TabFocusListControls = 0x02,
        TabFocusAllControls  = 0xff;

    /** enum Qt::SortOrder */
    public static final int
        AscendingOrder = 0,
        DescendingOrder = 1;

    /** enum Qt::TileRule */
    public static final int
        StretchTile = 0,
        RepeatTile = 1,
        RoundTile = 2;

    // Text formatting flags for QPainter::drawText and QLabel.
    // The following two enums can be combined to one integer which
    // is passed as 'flags' to QPainter::drawText, QFontMetrics::boundingRect and qt_format_text.

    /** enum Qt::AlignmentFlag */
    public static final int
        AlignLeft = 0x0001,
        AlignLeading = AlignLeft,
        AlignRight = 0x0002,
        AlignTrailing = AlignRight,
        AlignHCenter = 0x0004,
        AlignJustify = 0x0008,
        AlignAbsolute = 0x0010,
        AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,

        AlignTop = 0x0020,
        AlignBottom = 0x0040,
        AlignVCenter = 0x0080,
        AlignBaseline = 0x0100,
        // Note that 0x100 will clash with Qt::TextSingleLine = 0x100 due to what the comment above
        // this enum declaration states. However, since Qt::AlignBaseline is only used by layouts,
        // it doesn't make sense to pass Qt::AlignBaseline to QPainter::drawText(), so there
        // shouldn't really be any ambiguity between the two overlapping enum values.
        AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter | AlignBaseline,

        AlignCenter = AlignVCenter | AlignHCenter;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(Alignment, AlignmentFlag)
    

    /** enum Qt::TextFlag */
    public static final int
        TextSingleLine = 0x0100,
        TextDontClip = 0x0200,
        TextExpandTabs = 0x0400,
        TextShowMnemonic = 0x0800,
        TextWordWrap = 0x1000,
        TextWrapAnywhere = 0x2000,
        TextDontPrint = 0x4000,
        TextIncludeTrailingSpaces = 0x08000000,
        TextHideMnemonic = 0x8000,
        TextJustificationForced = 0x10000,
        TextForceLeftToRight = 0x20000,
        TextForceRightToLeft = 0x40000,
        // Ensures that the longest variant is always used when computing the
        // size of a multi-variant string.
        TextLongestVariant = 0x80000, TextBypassShaping = 0x100000;
// #endif

    /** enum Qt::TextElideMode */
    public static final int
        ElideLeft = 0,
        ElideRight = 1,
        ElideMiddle = 2,
        ElideNone = 3;

    /** enum Qt::WhiteSpaceMode */
    public static final int
        WhiteSpaceNormal = 0,
        WhiteSpacePre = 1,
        WhiteSpaceNoWrap = 2,
        WhiteSpaceModeUndefined = -1;

    /** enum Qt::HitTestAccuracy */
    public static final int ExactHit = 0, FuzzyHit = 1;

    /** enum Qt::WindowType */
    public static final int
        Widget = 0x00000000,
        Window = 0x00000001,
        Dialog = 0x00000002 | Window,
        Sheet = 0x00000004 | Window,
        Drawer = Sheet | Dialog,
        Popup = 0x00000008 | Window,
        Tool = Popup | Dialog,
        ToolTip = Popup | Sheet,
        SplashScreen = ToolTip | Dialog,
        Desktop = 0x00000010 | Window,
        SubWindow = 0x00000012,
        ForeignWindow = 0x00000020 | Window,
        CoverWindow = 0x00000040 | Window,

        WindowType_Mask = 0x000000ff,
        MSWindowsFixedSizeDialogHint = 0x00000100,
        MSWindowsOwnDC = 0x00000200,
        BypassWindowManagerHint = 0x00000400,
        X11BypassWindowManagerHint = BypassWindowManagerHint,
        FramelessWindowHint = 0x00000800,
        WindowTitleHint = 0x00001000,
        WindowSystemMenuHint = 0x00002000,
        WindowMinimizeButtonHint = 0x00004000,
        WindowMaximizeButtonHint = 0x00008000,
        WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint,
        WindowContextHelpButtonHint = 0x00010000,
        WindowShadeButtonHint = 0x00020000,
        WindowStaysOnTopHint = 0x00040000,
        WindowTransparentForInput = 0x00080000,
        WindowOverridesSystemGestures = 0x00100000,
        WindowDoesNotAcceptFocus = 0x00200000,
        MaximizeUsingFullscreenGeometryHint = 0x00400000,

        CustomizeWindowHint = 0x02000000,
        WindowStaysOnBottomHint = 0x04000000,
        WindowCloseButtonHint = 0x08000000,
        MacWindowToolBarButtonHint = 0x10000000,
        BypassGraphicsProxyWidget = 0x20000000,
        NoDropShadowWindowHint = 0x40000000,
        WindowFullscreenButtonHint = 0x80000000;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(WindowFlags, WindowType)
    

    @Namespace("Qt") public enum WindowState {
        WindowNoState   (0x00000000),
        WindowMinimized (0x00000001),
        WindowMaximized (0x00000002),
        WindowFullScreen(0x00000004),
        WindowActive    (0x00000008);

        public final int value;
        private WindowState(int v) { this.value = v; }
        private WindowState(WindowState e) { this.value = e.value; }
        public WindowState intern() { for (WindowState e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }

//     #define Q_DECLARE_FLAGS(arg0, arg1)(WindowStates, WindowState)
    

    /** enum Qt::ApplicationState */
    public static final int
        ApplicationSuspended    = 0x00000000,
        ApplicationHidden       = 0x00000001,
        ApplicationInactive     = 0x00000002,
        ApplicationActive       = 0x00000004;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(ApplicationStates, ApplicationState)

    /** enum Qt::ScreenOrientation */
    public static final int
        PrimaryOrientation           = 0x00000000,
        PortraitOrientation          = 0x00000001,
        LandscapeOrientation         = 0x00000002,
        InvertedPortraitOrientation  = 0x00000004,
        InvertedLandscapeOrientation = 0x00000008;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(ScreenOrientations, ScreenOrientation)
    

    /** enum Qt::WidgetAttribute */
    public static final int
        WA_Disabled = 0,
        WA_UnderMouse = 1,
        WA_MouseTracking = 2,
        WA_ContentsPropagated = 3, // ## deprecated
        WA_OpaquePaintEvent = 4,
        WA_NoBackground = WA_OpaquePaintEvent, // ## deprecated
        WA_StaticContents = 5,
        WA_LaidOut = 7,
        WA_PaintOnScreen = 8,
        WA_NoSystemBackground = 9,
        WA_UpdatesDisabled = 10,
        WA_Mapped = 11,
        WA_MacNoClickThrough = 12, // Mac only
        WA_InputMethodEnabled = 14,
        WA_WState_Visible = 15,
        WA_WState_Hidden = 16,

        WA_ForceDisabled = 32,
        WA_KeyCompression = 33,
        WA_PendingMoveEvent = 34,
        WA_PendingResizeEvent = 35,
        WA_SetPalette = 36,
        WA_SetFont = 37,
        WA_SetCursor = 38,
        WA_NoChildEventsFromChildren = 39,
        WA_WindowModified = 41,
        WA_Resized = 42,
        WA_Moved = 43,
        WA_PendingUpdate = 44,
        WA_InvalidSize = 45,
        WA_MacBrushedMetal = 46, // Mac only
        WA_MacMetalStyle = WA_MacBrushedMetal, // obsolete
        WA_CustomWhatsThis = 47,
        WA_LayoutOnEntireRect = 48,
        WA_OutsideWSRange = 49,
        WA_GrabbedShortcut = 50,
        WA_TransparentForMouseEvents = 51,
        WA_PaintUnclipped = 52,
        WA_SetWindowIcon = 53,
        WA_NoMouseReplay = 54,
        WA_DeleteOnClose = 55,
        WA_RightToLeft = 56,
        WA_SetLayoutDirection = 57,
        WA_NoChildEventsForParent = 58,
        WA_ForceUpdatesDisabled = 59,

        WA_WState_Created = 60,
        WA_WState_CompressKeys = 61,
        WA_WState_InPaintEvent = 62,
        WA_WState_Reparented = 63,
        WA_WState_ConfigPending = 64,
        WA_WState_Polished = 66,
        WA_WState_DND = 67, // ## deprecated
        WA_WState_OwnSizePolicy = 68,
        WA_WState_ExplicitShowHide = 69,

        WA_ShowModal = 70, // ## deprecated
        WA_MouseNoMask = 71,
        WA_GroupLeader = 72, // ## deprecated
        WA_NoMousePropagation = 73, // ## for now, might go away.
        WA_Hover = 74,
        WA_InputMethodTransparent = 75, // Don't reset IM when user clicks on this (for virtual keyboards on embedded)
        WA_QuitOnClose = 76,

        WA_KeyboardFocusChange = 77,

        WA_AcceptDrops = 78,
        WA_DropSiteRegistered = 79, // internal
        WA_ForceAcceptDrops = WA_DropSiteRegistered, // ## deprecated

        WA_WindowPropagation = 80,

        WA_NoX11EventCompression = 81,
        WA_TintedBackground = 82,
        WA_X11OpenGLOverlay = 83,
        WA_AlwaysShowToolTips = 84,
        WA_MacOpaqueSizeGrip = 85,
        WA_SetStyle = 86,

        WA_SetLocale = 87,
        WA_MacShowFocusRect = 88,

        WA_MacNormalSize = 89,  // Mac only
        WA_MacSmallSize = 90,   // Mac only
        WA_MacMiniSize = 91,    // Mac only

        WA_LayoutUsesWidgetRect = 92,
        WA_StyledBackground = 93, // internal
        WA_MSWindowsUseDirect3D = 94, // Win only
        WA_CanHostQMdiSubWindowTitleBar = 95, // Internal

        WA_MacAlwaysShowToolWindow = 96, // Mac only

        WA_StyleSheet = 97, // internal

        WA_ShowWithoutActivating = 98,

        WA_X11BypassTransientForHint = 99,

        WA_NativeWindow = 100,
        WA_DontCreateNativeAncestors = 101,

        WA_MacVariableSize = 102,    // Mac only

        WA_DontShowOnScreen = 103,

        // window types from http://standards.freedesktop.org/wm-spec/
        WA_X11NetWmWindowTypeDesktop = 104,
        WA_X11NetWmWindowTypeDock = 105,
        WA_X11NetWmWindowTypeToolBar = 106,
        WA_X11NetWmWindowTypeMenu = 107,
        WA_X11NetWmWindowTypeUtility = 108,
        WA_X11NetWmWindowTypeSplash = 109,
        WA_X11NetWmWindowTypeDialog = 110,
        WA_X11NetWmWindowTypeDropDownMenu = 111,
        WA_X11NetWmWindowTypePopupMenu = 112,
        WA_X11NetWmWindowTypeToolTip = 113,
        WA_X11NetWmWindowTypeNotification = 114,
        WA_X11NetWmWindowTypeCombo = 115,
        WA_X11NetWmWindowTypeDND = 116,

        WA_MacFrameworkScaled  = 117,

        WA_SetWindowModality = 118,
        WA_WState_WindowOpacitySet = 119, // internal
        WA_TranslucentBackground = 120,

        WA_AcceptTouchEvents = 121,
        WA_WState_AcceptedTouchBeginEvent = 122,
        WA_TouchPadAcceptSingleTouchEvents = 123,

        WA_X11DoNotAcceptFocus = 126,
        WA_MacNoShadow = 127,

        WA_AlwaysStackOnTop = 128,

        WA_TabletTracking = 129,

        WA_ContentsMarginsRespectsSafeArea = 130,

        WA_StyleSheetTarget = 131,

        // Add new attributes before this line
        WA_AttributeCount = 132;

    @Namespace("Qt") public enum ApplicationAttribute {
        AA_ImmediateWidgetCreation(0),
        AA_MSWindowsUseDirect3DByDefault(1), // Win only
        AA_DontShowIconsInMenus(2),
        AA_NativeWindows(3),
        AA_DontCreateNativeWidgetSiblings(4),
        AA_PluginApplication(5),
        AA_MacPluginApplication(AA_PluginApplication),  // ### Qt 6: remove me
        AA_DontUseNativeMenuBar(6),
        AA_MacDontSwapCtrlAndMeta(7),
        AA_Use96Dpi(8),
        AA_X11InitThreads(10),
        AA_SynthesizeTouchForUnhandledMouseEvents(11),
        AA_SynthesizeMouseForUnhandledTouchEvents(12),
        AA_UseHighDpiPixmaps(13),
        AA_ForceRasterWidgets(14),
        AA_UseDesktopOpenGL(15),
        AA_UseOpenGLES(16),
        AA_UseSoftwareOpenGL(17),
        AA_ShareOpenGLContexts(18),
        AA_SetPalette(19),
        AA_EnableHighDpiScaling(20),
        AA_DisableHighDpiScaling(21),
        AA_UseStyleSheetPropagationInWidgetStyles(22), // ### Qt 6: remove me
        AA_DontUseNativeDialogs(23),
        AA_SynthesizeMouseForUnhandledTabletEvents(24),
        AA_CompressHighFrequencyEvents(25),
        AA_DontCheckOpenGLContextThreadAffinity(26),
        AA_DisableShaderDiskCache(27),
        AA_DontShowShortcutsInContextMenus(28),
        AA_CompressTabletEvents(29),
        AA_DisableWindowContextHelpButton(30), // ### Qt 6: remove me

        // Add new attributes before this line
        AA_AttributeCount(31);

        public final int value;
        private ApplicationAttribute(int v) { this.value = v; }
        private ApplicationAttribute(ApplicationAttribute e) { this.value = e.value; }
        public ApplicationAttribute intern() { for (ApplicationAttribute e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }


    // Image conversion flags.  The unusual ordering is caused by
    // compatibility and default requirements.

    /** enum Qt::ImageConversionFlag */
    public static final int
        ColorMode_Mask          = 0x00000003,
        AutoColor               = 0x00000000,
        ColorOnly               = 0x00000003,
        MonoOnly                = 0x00000002,
        // Reserved             = 0x00000001,

        AlphaDither_Mask        = 0x0000000c,
        ThresholdAlphaDither    = 0x00000000,
        OrderedAlphaDither      = 0x00000004,
        DiffuseAlphaDither      = 0x00000008,
        NoAlpha                 = 0x0000000c, // Not supported

        Dither_Mask             = 0x00000030,
        DiffuseDither           = 0x00000000,
        OrderedDither           = 0x00000010,
        ThresholdDither         = 0x00000020,
        // ReservedDither       = 0x00000030,

        DitherMode_Mask         = 0x000000c0,
        AutoDither              = 0x00000000,
        PreferDither            = 0x00000040,
        AvoidDither             = 0x00000080,

        NoOpaqueDetection       = 0x00000100,
        NoFormatConversion      = 0x00000200;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(ImageConversionFlags, ImageConversionFlag)
    

    /** enum Qt::BGMode */
    public static final int
        TransparentMode = 0,
        OpaqueMode = 1;

    /** enum Qt::Key */
    public static final int
        Key_Escape = 0x01000000,                // misc keys
        Key_Tab = 0x01000001,
        Key_Backtab = 0x01000002,
        Key_Backspace = 0x01000003,
        Key_Return = 0x01000004,
        Key_Enter = 0x01000005,
        Key_Insert = 0x01000006,
        Key_Delete = 0x01000007,
        Key_Pause = 0x01000008,
        Key_Print = 0x01000009,               // print screen
        Key_SysReq = 0x0100000a,
        Key_Clear = 0x0100000b,
        Key_Home = 0x01000010,                // cursor movement
        Key_End = 0x01000011,
        Key_Left = 0x01000012,
        Key_Up = 0x01000013,
        Key_Right = 0x01000014,
        Key_Down = 0x01000015,
        Key_PageUp = 0x01000016,
        Key_PageDown = 0x01000017,
        Key_Shift = 0x01000020,                // modifiers
        Key_Control = 0x01000021,
        Key_Meta = 0x01000022,
        Key_Alt = 0x01000023,
        Key_CapsLock = 0x01000024,
        Key_NumLock = 0x01000025,
        Key_ScrollLock = 0x01000026,
        Key_F1 = 0x01000030,                // function keys
        Key_F2 = 0x01000031,
        Key_F3 = 0x01000032,
        Key_F4 = 0x01000033,
        Key_F5 = 0x01000034,
        Key_F6 = 0x01000035,
        Key_F7 = 0x01000036,
        Key_F8 = 0x01000037,
        Key_F9 = 0x01000038,
        Key_F10 = 0x01000039,
        Key_F11 = 0x0100003a,
        Key_F12 = 0x0100003b,
        Key_F13 = 0x0100003c,
        Key_F14 = 0x0100003d,
        Key_F15 = 0x0100003e,
        Key_F16 = 0x0100003f,
        Key_F17 = 0x01000040,
        Key_F18 = 0x01000041,
        Key_F19 = 0x01000042,
        Key_F20 = 0x01000043,
        Key_F21 = 0x01000044,
        Key_F22 = 0x01000045,
        Key_F23 = 0x01000046,
        Key_F24 = 0x01000047,
        Key_F25 = 0x01000048,                // F25 .. F35 only on X11
        Key_F26 = 0x01000049,
        Key_F27 = 0x0100004a,
        Key_F28 = 0x0100004b,
        Key_F29 = 0x0100004c,
        Key_F30 = 0x0100004d,
        Key_F31 = 0x0100004e,
        Key_F32 = 0x0100004f,
        Key_F33 = 0x01000050,
        Key_F34 = 0x01000051,
        Key_F35 = 0x01000052,
        Key_Super_L = 0x01000053,                 // extra keys
        Key_Super_R = 0x01000054,
        Key_Menu = 0x01000055,
        Key_Hyper_L = 0x01000056,
        Key_Hyper_R = 0x01000057,
        Key_Help = 0x01000058,
        Key_Direction_L = 0x01000059,
        Key_Direction_R = 0x01000060,
        Key_Space = 0x20,                // 7 bit printable ASCII
        Key_Any = Key_Space,
        Key_Exclam = 0x21,
        Key_QuoteDbl = 0x22,
        Key_NumberSign = 0x23,
        Key_Dollar = 0x24,
        Key_Percent = 0x25,
        Key_Ampersand = 0x26,
        Key_Apostrophe = 0x27,
        Key_ParenLeft = 0x28,
        Key_ParenRight = 0x29,
        Key_Asterisk = 0x2a,
        Key_Plus = 0x2b,
        Key_Comma = 0x2c,
        Key_Minus = 0x2d,
        Key_Period = 0x2e,
        Key_Slash = 0x2f,
        Key_0 = 0x30,
        Key_1 = 0x31,
        Key_2 = 0x32,
        Key_3 = 0x33,
        Key_4 = 0x34,
        Key_5 = 0x35,
        Key_6 = 0x36,
        Key_7 = 0x37,
        Key_8 = 0x38,
        Key_9 = 0x39,
        Key_Colon = 0x3a,
        Key_Semicolon = 0x3b,
        Key_Less = 0x3c,
        Key_Equal = 0x3d,
        Key_Greater = 0x3e,
        Key_Question = 0x3f,
        Key_At = 0x40,
        Key_A = 0x41,
        Key_B = 0x42,
        Key_C = 0x43,
        Key_D = 0x44,
        Key_E = 0x45,
        Key_F = 0x46,
        Key_G = 0x47,
        Key_H = 0x48,
        Key_I = 0x49,
        Key_J = 0x4a,
        Key_K = 0x4b,
        Key_L = 0x4c,
        Key_M = 0x4d,
        Key_N = 0x4e,
        Key_O = 0x4f,
        Key_P = 0x50,
        Key_Q = 0x51,
        Key_R = 0x52,
        Key_S = 0x53,
        Key_T = 0x54,
        Key_U = 0x55,
        Key_V = 0x56,
        Key_W = 0x57,
        Key_X = 0x58,
        Key_Y = 0x59,
        Key_Z = 0x5a,
        Key_BracketLeft = 0x5b,
        Key_Backslash = 0x5c,
        Key_BracketRight = 0x5d,
        Key_AsciiCircum = 0x5e,
        Key_Underscore = 0x5f,
        Key_QuoteLeft = 0x60,
        Key_BraceLeft = 0x7b,
        Key_Bar = 0x7c,
        Key_BraceRight = 0x7d,
        Key_AsciiTilde = 0x7e,

        Key_nobreakspace = 0x0a0,
        Key_exclamdown = 0x0a1,
        Key_cent = 0x0a2,
        Key_sterling = 0x0a3,
        Key_currency = 0x0a4,
        Key_yen = 0x0a5,
        Key_brokenbar = 0x0a6,
        Key_section = 0x0a7,
        Key_diaeresis = 0x0a8,
        Key_copyright = 0x0a9,
        Key_ordfeminine = 0x0aa,
        Key_guillemotleft = 0x0ab,        // left angle quotation mark
        Key_notsign = 0x0ac,
        Key_hyphen = 0x0ad,
        Key_registered = 0x0ae,
        Key_macron = 0x0af,
        Key_degree = 0x0b0,
        Key_plusminus = 0x0b1,
        Key_twosuperior = 0x0b2,
        Key_threesuperior = 0x0b3,
        Key_acute = 0x0b4,
        Key_mu = 0x0b5,
        Key_paragraph = 0x0b6,
        Key_periodcentered = 0x0b7,
        Key_cedilla = 0x0b8,
        Key_onesuperior = 0x0b9,
        Key_masculine = 0x0ba,
        Key_guillemotright = 0x0bb,        // right angle quotation mark
        Key_onequarter = 0x0bc,
        Key_onehalf = 0x0bd,
        Key_threequarters = 0x0be,
        Key_questiondown = 0x0bf,
        Key_Agrave = 0x0c0,
        Key_Aacute = 0x0c1,
        Key_Acircumflex = 0x0c2,
        Key_Atilde = 0x0c3,
        Key_Adiaeresis = 0x0c4,
        Key_Aring = 0x0c5,
        Key_AE = 0x0c6,
        Key_Ccedilla = 0x0c7,
        Key_Egrave = 0x0c8,
        Key_Eacute = 0x0c9,
        Key_Ecircumflex = 0x0ca,
        Key_Ediaeresis = 0x0cb,
        Key_Igrave = 0x0cc,
        Key_Iacute = 0x0cd,
        Key_Icircumflex = 0x0ce,
        Key_Idiaeresis = 0x0cf,
        Key_ETH = 0x0d0,
        Key_Ntilde = 0x0d1,
        Key_Ograve = 0x0d2,
        Key_Oacute = 0x0d3,
        Key_Ocircumflex = 0x0d4,
        Key_Otilde = 0x0d5,
        Key_Odiaeresis = 0x0d6,
        Key_multiply = 0x0d7,
        Key_Ooblique = 0x0d8,
        Key_Ugrave = 0x0d9,
        Key_Uacute = 0x0da,
        Key_Ucircumflex = 0x0db,
        Key_Udiaeresis = 0x0dc,
        Key_Yacute = 0x0dd,
        Key_THORN = 0x0de,
        Key_ssharp = 0x0df,
        Key_division = 0x0f7,
        Key_ydiaeresis = 0x0ff,

        // International input method support (X keycode - 0xEE00, the
        // definition follows Qt/Embedded 2.3.7) Only interesting if
        // you are writing your own input method

        // International & multi-key character composition
        Key_AltGr               = 0x01001103,
        Key_Multi_key           = 0x01001120,  // Multi-key character compose
        Key_Codeinput           = 0x01001137,
        Key_SingleCandidate     = 0x0100113c,
        Key_MultipleCandidate   = 0x0100113d,
        Key_PreviousCandidate   = 0x0100113e,

        // Misc Functions
        Key_Mode_switch         = 0x0100117e,  // Character set switch
        //Key_script_switch       = 0x0100117e,  // Alias for mode_switch

        // Japanese keyboard support
        Key_Kanji               = 0x01001121,  // Kanji, Kanji convert
        Key_Muhenkan            = 0x01001122,  // Cancel Conversion
        //Key_Henkan_Mode         = 0x01001123,  // Start/Stop Conversion
        Key_Henkan              = 0x01001123,  // Alias for Henkan_Mode
        Key_Romaji              = 0x01001124,  // to Romaji
        Key_Hiragana            = 0x01001125,  // to Hiragana
        Key_Katakana            = 0x01001126,  // to Katakana
        Key_Hiragana_Katakana   = 0x01001127,  // Hiragana/Katakana toggle
        Key_Zenkaku             = 0x01001128,  // to Zenkaku
        Key_Hankaku             = 0x01001129,  // to Hankaku
        Key_Zenkaku_Hankaku     = 0x0100112a,  // Zenkaku/Hankaku toggle
        Key_Touroku             = 0x0100112b,  // Add to Dictionary
        Key_Massyo              = 0x0100112c,  // Delete from Dictionary
        Key_Kana_Lock           = 0x0100112d,  // Kana Lock
        Key_Kana_Shift          = 0x0100112e,  // Kana Shift
        Key_Eisu_Shift          = 0x0100112f,  // Alphanumeric Shift
        Key_Eisu_toggle         = 0x01001130,  // Alphanumeric toggle
        //Key_Kanji_Bangou        = 0x01001137,  // Codeinput
        //Key_Zen_Koho            = 0x0100113d,  // Multiple/All Candidate(s)
        //Key_Mae_Koho            = 0x0100113e,  // Previous Candidate

        // Korean keyboard support
        //
        // In fact, many Korean users need only 2 keys, Key_Hangul and
        // Key_Hangul_Hanja. But rest of the keys are good for future.

        Key_Hangul              = 0x01001131,  // Hangul start/stop(toggle)
        Key_Hangul_Start        = 0x01001132,  // Hangul start
        Key_Hangul_End          = 0x01001133,  // Hangul end, English start
        Key_Hangul_Hanja        = 0x01001134,  // Start Hangul->Hanja Conversion
        Key_Hangul_Jamo         = 0x01001135,  // Hangul Jamo mode
        Key_Hangul_Romaja       = 0x01001136,  // Hangul Romaja mode
        //Key_Hangul_Codeinput    = 0x01001137,  // Hangul code input mode
        Key_Hangul_Jeonja       = 0x01001138,  // Jeonja mode
        Key_Hangul_Banja        = 0x01001139,  // Banja mode
        Key_Hangul_PreHanja     = 0x0100113a,  // Pre Hanja conversion
        Key_Hangul_PostHanja    = 0x0100113b,  // Post Hanja conversion
        //Key_Hangul_SingleCandidate   = 0x0100113c,  // Single candidate
        //Key_Hangul_MultipleCandidate = 0x0100113d,  // Multiple candidate
        //Key_Hangul_PreviousCandidate = 0x0100113e,  // Previous candidate
        Key_Hangul_Special      = 0x0100113f,  // Special symbols
        //Key_Hangul_switch       = 0x0100117e,  // Alias for mode_switch

        // dead keys (X keycode - 0xED00 to avoid the conflict)
        Key_Dead_Grave          = 0x01001250,
        Key_Dead_Acute          = 0x01001251,
        Key_Dead_Circumflex     = 0x01001252,
        Key_Dead_Tilde          = 0x01001253,
        Key_Dead_Macron         = 0x01001254,
        Key_Dead_Breve          = 0x01001255,
        Key_Dead_Abovedot       = 0x01001256,
        Key_Dead_Diaeresis      = 0x01001257,
        Key_Dead_Abovering      = 0x01001258,
        Key_Dead_Doubleacute    = 0x01001259,
        Key_Dead_Caron          = 0x0100125a,
        Key_Dead_Cedilla        = 0x0100125b,
        Key_Dead_Ogonek         = 0x0100125c,
        Key_Dead_Iota           = 0x0100125d,
        Key_Dead_Voiced_Sound   = 0x0100125e,
        Key_Dead_Semivoiced_Sound = 0x0100125f,
        Key_Dead_Belowdot       = 0x01001260,
        Key_Dead_Hook           = 0x01001261,
        Key_Dead_Horn           = 0x01001262,
        Key_Dead_Stroke         = 0x01001263,
        Key_Dead_Abovecomma     = 0x01001264,
        Key_Dead_Abovereversedcomma = 0x01001265,
        Key_Dead_Doublegrave    = 0x01001266,
        Key_Dead_Belowring      = 0x01001267,
        Key_Dead_Belowmacron    = 0x01001268,
        Key_Dead_Belowcircumflex = 0x01001269,
        Key_Dead_Belowtilde     = 0x0100126a,
        Key_Dead_Belowbreve     = 0x0100126b,
        Key_Dead_Belowdiaeresis = 0x0100126c,
        Key_Dead_Invertedbreve  = 0x0100126d,
        Key_Dead_Belowcomma     = 0x0100126e,
        Key_Dead_Currency       = 0x0100126f,
        Key_Dead_a              = 0x01001280,
        Key_Dead_A              = 0x01001281,
        Key_Dead_e              = 0x01001282,
        Key_Dead_E              = 0x01001283,
        Key_Dead_i              = 0x01001284,
        Key_Dead_I              = 0x01001285,
        Key_Dead_o              = 0x01001286,
        Key_Dead_O              = 0x01001287,
        Key_Dead_u              = 0x01001288,
        Key_Dead_U              = 0x01001289,
        Key_Dead_Small_Schwa    = 0x0100128a,
        Key_Dead_Capital_Schwa  = 0x0100128b,
        Key_Dead_Greek          = 0x0100128c,
        Key_Dead_Lowline        = 0x01001290,
        Key_Dead_Aboveverticalline = 0x01001291,
        Key_Dead_Belowverticalline = 0x01001292,
        Key_Dead_Longsolidusoverlay = 0x01001293,

        // multimedia/internet keys - ignored by default - see QKeyEvent c'tor
        Key_Back  = 0x01000061,
        Key_Forward  = 0x01000062,
        Key_Stop  = 0x01000063,
        Key_Refresh  = 0x01000064,
        Key_VolumeDown = 0x01000070,
        Key_VolumeMute  = 0x01000071,
        Key_VolumeUp = 0x01000072,
        Key_BassBoost = 0x01000073,
        Key_BassUp = 0x01000074,
        Key_BassDown = 0x01000075,
        Key_TrebleUp = 0x01000076,
        Key_TrebleDown = 0x01000077,
        Key_MediaPlay  = 0x01000080,
        Key_MediaStop  = 0x01000081,
        Key_MediaPrevious  = 0x01000082,
        Key_MediaNext  = 0x01000083,
        Key_MediaRecord = 0x01000084,
        Key_MediaPause = 0x1000085,
        Key_MediaTogglePlayPause = 0x1000086,
        Key_HomePage  = 0x01000090,
        Key_Favorites  = 0x01000091,
        Key_Search  = 0x01000092,
        Key_Standby = 0x01000093,
        Key_OpenUrl = 0x01000094,
        Key_LaunchMail  = 0x010000a0,
        Key_LaunchMedia = 0x010000a1,
        Key_Launch0  = 0x010000a2,
        Key_Launch1  = 0x010000a3,
        Key_Launch2  = 0x010000a4,
        Key_Launch3  = 0x010000a5,
        Key_Launch4  = 0x010000a6,
        Key_Launch5  = 0x010000a7,
        Key_Launch6  = 0x010000a8,
        Key_Launch7  = 0x010000a9,
        Key_Launch8  = 0x010000aa,
        Key_Launch9  = 0x010000ab,
        Key_LaunchA  = 0x010000ac,
        Key_LaunchB  = 0x010000ad,
        Key_LaunchC  = 0x010000ae,
        Key_LaunchD  = 0x010000af,
        Key_LaunchE  = 0x010000b0,
        Key_LaunchF  = 0x010000b1,
        Key_MonBrightnessUp = 0x010000b2,
        Key_MonBrightnessDown = 0x010000b3,
        Key_KeyboardLightOnOff = 0x010000b4,
        Key_KeyboardBrightnessUp = 0x010000b5,
        Key_KeyboardBrightnessDown = 0x010000b6,
        Key_PowerOff = 0x010000b7,
        Key_WakeUp = 0x010000b8,
        Key_Eject = 0x010000b9,
        Key_ScreenSaver = 0x010000ba,
        Key_WWW = 0x010000bb,
        Key_Memo = 0x010000bc,
        Key_LightBulb = 0x010000bd,
        Key_Shop = 0x010000be,
        Key_History = 0x010000bf,
        Key_AddFavorite = 0x010000c0,
        Key_HotLinks = 0x010000c1,
        Key_BrightnessAdjust = 0x010000c2,
        Key_Finance = 0x010000c3,
        Key_Community = 0x010000c4,
        Key_AudioRewind = 0x010000c5, // Media rewind
        Key_BackForward = 0x010000c6,
        Key_ApplicationLeft = 0x010000c7,
        Key_ApplicationRight = 0x010000c8,
        Key_Book = 0x010000c9,
        Key_CD = 0x010000ca,
        Key_Calculator = 0x010000cb,
        Key_ToDoList = 0x010000cc,
        Key_ClearGrab = 0x010000cd,
        Key_Close = 0x010000ce,
        Key_Copy = 0x010000cf,
        Key_Cut = 0x010000d0,
        Key_Display = 0x010000d1, // Output switch key
        Key_DOS = 0x010000d2,
        Key_Documents = 0x010000d3,
        Key_Excel = 0x010000d4,
        Key_Explorer = 0x010000d5,
        Key_Game = 0x010000d6,
        Key_Go = 0x010000d7,
        Key_iTouch = 0x010000d8,
        Key_LogOff = 0x010000d9,
        Key_Market = 0x010000da,
        Key_Meeting = 0x010000db,
        Key_MenuKB = 0x010000dc,
        Key_MenuPB = 0x010000dd,
        Key_MySites = 0x010000de,
        Key_News = 0x010000df,
        Key_OfficeHome = 0x010000e0,
        Key_Option = 0x010000e1,
        Key_Paste = 0x010000e2,
        Key_Phone = 0x010000e3,
        Key_Calendar = 0x010000e4,
        Key_Reply = 0x010000e5,
        Key_Reload = 0x010000e6,
        Key_RotateWindows = 0x010000e7,
        Key_RotationPB = 0x010000e8,
        Key_RotationKB = 0x010000e9,
        Key_Save = 0x010000ea,
        Key_Send = 0x010000eb,
        Key_Spell = 0x010000ec,
        Key_SplitScreen = 0x010000ed,
        Key_Support = 0x010000ee,
        Key_TaskPane = 0x010000ef,
        Key_Terminal = 0x010000f0,
        Key_Tools = 0x010000f1,
        Key_Travel = 0x010000f2,
        Key_Video = 0x010000f3,
        Key_Word = 0x010000f4,
        Key_Xfer = 0x010000f5,
        Key_ZoomIn = 0x010000f6,
        Key_ZoomOut = 0x010000f7,
        Key_Away = 0x010000f8,
        Key_Messenger = 0x010000f9,
        Key_WebCam = 0x010000fa,
        Key_MailForward = 0x010000fb,
        Key_Pictures = 0x010000fc,
        Key_Music = 0x010000fd,
        Key_Battery = 0x010000fe,
        Key_Bluetooth = 0x010000ff,
        Key_WLAN = 0x01000100,
        Key_UWB = 0x01000101,
        Key_AudioForward = 0x01000102, // Media fast-forward
        Key_AudioRepeat = 0x01000103, // Toggle repeat mode
        Key_AudioRandomPlay = 0x01000104, // Toggle shuffle mode
        Key_Subtitle = 0x01000105,
        Key_AudioCycleTrack = 0x01000106,
        Key_Time = 0x01000107,
        Key_Hibernate = 0x01000108,
        Key_View = 0x01000109,
        Key_TopMenu = 0x0100010a,
        Key_PowerDown = 0x0100010b,
        Key_Suspend = 0x0100010c,
        Key_ContrastAdjust = 0x0100010d,

        Key_LaunchG  = 0x0100010e,
        Key_LaunchH  = 0x0100010f,

        Key_TouchpadToggle = 0x01000110,
        Key_TouchpadOn = 0x01000111,
        Key_TouchpadOff = 0x01000112,

        Key_MicMute = 0x01000113,

        Key_Red = 0x01000114,
        Key_Green = 0x01000115,
        Key_Yellow = 0x01000116,
        Key_Blue = 0x01000117,

        Key_ChannelUp = 0x01000118,
        Key_ChannelDown = 0x01000119,

        Key_Guide    = 0x0100011a,
        Key_Info     = 0x0100011b,
        Key_Settings = 0x0100011c,

        Key_MicVolumeUp   = 0x0100011d,
        Key_MicVolumeDown = 0x0100011e,

        Key_New      = 0x01000120,
        Key_Open     = 0x01000121,
        Key_Find     = 0x01000122,
        Key_Undo     = 0x01000123,
        Key_Redo     = 0x01000124,

        Key_MediaLast = 0x0100ffff,

        // Keypad navigation keys
        Key_Select = 0x01010000,
        Key_Yes = 0x01010001,
        Key_No = 0x01010002,

        // Newer misc keys
        Key_Cancel  = 0x01020001,
        Key_Printer = 0x01020002,
        Key_Execute = 0x01020003,
        Key_Sleep   = 0x01020004,
        Key_Play    = 0x01020005, // Not the same as Key_MediaPlay
        Key_Zoom    = 0x01020006,
        //Key_Jisho   = 0x01020007, // IME: Dictionary key
        //Key_Oyayubi_Left = 0x01020008, // IME: Left Oyayubi key
        //Key_Oyayubi_Right = 0x01020009, // IME: Right Oyayubi key
        Key_Exit    = 0x0102000a,

        // Device keys
        Key_Context1 = 0x01100000,
        Key_Context2 = 0x01100001,
        Key_Context3 = 0x01100002,
        Key_Context4 = 0x01100003,
        Key_Call = 0x01100004,      // set absolute state to in a call (do not toggle state)
        Key_Hangup = 0x01100005,    // set absolute state to hang up (do not toggle state)
        Key_Flip = 0x01100006,
        Key_ToggleCallHangup = 0x01100007, // a toggle key for answering, or hanging up, based on current call state
        Key_VoiceDial = 0x01100008,
        Key_LastNumberRedial = 0x01100009,

        Key_Camera = 0x01100020,
        Key_CameraFocus = 0x01100021,

        Key_unknown = 0x01ffffff;

    /** enum Qt::ArrowType */
    public static final int
        NoArrow = 0,
        UpArrow = 1,
        DownArrow = 2,
        LeftArrow = 3,
        RightArrow = 4;

    /** enum Qt::PenStyle */
    public static final int // pen style
        NoPen = 0,
        SolidLine = 1,
        DashLine = 2,
        DotLine = 3,
        DashDotLine = 4,
        DashDotDotLine = 5,
        CustomDashLine = 6, MPenStyle = 0x0f;
// #endif

    /** enum Qt::PenCapStyle */
    public static final int // line endcap style
        FlatCap = 0x00,
        SquareCap = 0x10,
        RoundCap = 0x20,
        MPenCapStyle = 0x30;

    /** enum Qt::PenJoinStyle */
    public static final int // line join style
        MiterJoin = 0x00,
        BevelJoin = 0x40,
        RoundJoin = 0x80,
        SvgMiterJoin = 0x100,
        MPenJoinStyle = 0x1c0;

    /** enum Qt::BrushStyle */
    public static final int // brush style
        NoBrush = 0,
        SolidPattern = 1,
        Dense1Pattern = 2,
        Dense2Pattern = 3,
        Dense3Pattern = 4,
        Dense4Pattern = 5,
        Dense5Pattern = 6,
        Dense6Pattern = 7,
        Dense7Pattern = 8,
        HorPattern = 9,
        VerPattern = 10,
        CrossPattern = 11,
        BDiagPattern = 12,
        FDiagPattern = 13,
        DiagCrossPattern = 14,
        LinearGradientPattern = 15,
        RadialGradientPattern = 16,
        ConicalGradientPattern = 17,
        TexturePattern = 24;

    /** enum Qt::SizeMode */
    public static final int
        AbsoluteSize = 0,
        RelativeSize = 1;

    /** enum Qt::UIEffect */
    public static final int
        UI_General = 0,
        UI_AnimateMenu = 1,
        UI_FadeMenu = 2,
        UI_AnimateCombo = 3,
        UI_AnimateTooltip = 4,
        UI_FadeTooltip = 5,
        UI_AnimateToolBox = 6;

    /** enum Qt::CursorShape */
    public static final int
        ArrowCursor = 0,
        UpArrowCursor = 1,
        CrossCursor = 2,
        WaitCursor = 3,
        IBeamCursor = 4,
        SizeVerCursor = 5,
        SizeHorCursor = 6,
        SizeBDiagCursor = 7,
        SizeFDiagCursor = 8,
        SizeAllCursor = 9,
        BlankCursor = 10,
        SplitVCursor = 11,
        SplitHCursor = 12,
        PointingHandCursor = 13,
        ForbiddenCursor = 14,
        WhatsThisCursor = 15,
        BusyCursor = 16,
        OpenHandCursor = 17,
        ClosedHandCursor = 18,
        DragCopyCursor = 19,
        DragMoveCursor = 20,
        DragLinkCursor = 21,
        LastCursor = DragLinkCursor,
        BitmapCursor = 24,
        CustomCursor = 25;

    /** enum Qt::TextFormat */
    public static final int
        PlainText = 0,
        RichText = 1,
        AutoText = 2;

    /** enum Qt::AspectRatioMode */
    public static final int
        IgnoreAspectRatio = 0,
        KeepAspectRatio = 1,
        KeepAspectRatioByExpanding = 2;

    /** enum Qt::DockWidgetArea */
    public static final int
        LeftDockWidgetArea = 0x1,
        RightDockWidgetArea = 0x2,
        TopDockWidgetArea = 0x4,
        BottomDockWidgetArea = 0x8,

        DockWidgetArea_Mask = 0xf,
        AllDockWidgetAreas = DockWidgetArea_Mask,
        NoDockWidgetArea = 0;
    /** enum Qt::DockWidgetAreaSizes */
    public static final int
        NDockWidgetAreas = 4;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(DockWidgetAreas, DockWidgetArea)
    

    /** enum Qt::ToolBarArea */
    public static final int
        LeftToolBarArea = 0x1,
        RightToolBarArea = 0x2,
        TopToolBarArea = 0x4,
        BottomToolBarArea = 0x8,

        ToolBarArea_Mask = 0xf,
        AllToolBarAreas = ToolBarArea_Mask,
        NoToolBarArea = 0;

    /** enum Qt::ToolBarAreaSizes */
    public static final int
        NToolBarAreas = 4;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(ToolBarAreas, ToolBarArea)
    

    /** enum Qt::DateFormat */
    public static final int
        TextDate = 0,      // default Qt
        ISODate = 1,       // ISO 8601
        SystemLocaleDate = 2, // deprecated
        LocalDate = SystemLocaleDate, // deprecated
        LocaleDate = SystemLocaleDate + 1,     // deprecated
        SystemLocaleShortDate = SystemLocaleDate + 2,
        SystemLocaleLongDate = SystemLocaleDate + 3,
        DefaultLocaleShortDate = SystemLocaleDate + 4,
        DefaultLocaleLongDate = SystemLocaleDate + 5,
        RFC2822Date = SystemLocaleDate + 6,        // RFC 2822 (+ 850 and 1036 during parsing)
        ISODateWithMs = SystemLocaleDate + 7;

    /** enum Qt::TimeSpec */
    public static final int
        LocalTime = 0,
        UTC = 1,
        OffsetFromUTC = 2,
        TimeZone = 3;

    /** enum Qt::DayOfWeek */
    public static final int
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
        Sunday = 7;

    /** enum Qt::ScrollBarPolicy */
    public static final int
        ScrollBarAsNeeded = 0,
        ScrollBarAlwaysOff = 1,
        ScrollBarAlwaysOn = 2;

    @Namespace("Qt") public enum CaseSensitivity {
        CaseInsensitive(0),
        CaseSensitive(1);

        public final int value;
        private CaseSensitivity(int v) { this.value = v; }
        private CaseSensitivity(CaseSensitivity e) { this.value = e.value; }
        public CaseSensitivity intern() { for (CaseSensitivity e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }

    /** enum Qt::Corner */
    public static final int
        TopLeftCorner = 0x00000,
        TopRightCorner = 0x00001,
        BottomLeftCorner = 0x00002,
        BottomRightCorner = 0x00003;

    /** enum Qt::Edge */
    public static final int
        TopEdge = 0x00001,
        LeftEdge = 0x00002,
        RightEdge = 0x00004,
        BottomEdge = 0x00008;

//     #define Q_DECLARE_FLAGS(arg0, arg1)(Edges, Edge)
    

    /** enum Qt::ConnectionType */
    public static final int
        AutoConnection = 0,
        DirectConnection = 1,
        QueuedConnection = 2,
        BlockingQueuedConnection = 3,
        UniqueConnection =  0x80;

    /** enum Qt::ShortcutContext */
    public static final int
        WidgetShortcut = 0,
        WindowShortcut = 1,
        ApplicationShortcut = 2,
        WidgetWithChildrenShortcut = 3;

    /** enum Qt::FillRule */
    public static final int
        OddEvenFill = 0,
        WindingFill = 1;

    /** enum Qt::MaskMode */
    public static final int
        MaskInColor = 0,
        MaskOutColor = 1;

    /** enum Qt::ClipOperation */
    public static final int
        NoClip = 0,
        ReplaceClip = 1,
        IntersectClip = 2;

    // Shape = 0x1, BoundingRect = 0x2
    /** enum Qt::ItemSelectionMode */
    public static final int
        ContainsItemShape = 0x0,
        IntersectsItemShape = 0x1,
        ContainsItemBoundingRect = 0x2,
        IntersectsItemBoundingRect = 0x3;

    /** enum Qt::ItemSelectionOperation */
    public static final int
        ReplaceSelection = 0,
        AddToSelection = 1;

    /** enum Qt::TransformationMode */
    public static final int
        FastTransformation = 0,
        SmoothTransformation = 1;

    /** enum Qt::Axis */
    public static final int
        XAxis = 0,
        YAxis = 1,
        ZAxis = 2;

    /** enum Qt::FocusReason */
    public static final int
        MouseFocusReason = 0,
        TabFocusReason = 1,
        BacktabFocusReason = 2,
        ActiveWindowFocusReason = 3,
        PopupFocusReason = 4,
        ShortcutFocusReason = 5,
        MenuBarFocusReason = 6,
        OtherFocusReason = 7,
        NoFocusReason = 8;

    /** enum Qt::ContextMenuPolicy */
    public static final int
        NoContextMenu = 0,
        DefaultContextMenu = 1,
        ActionsContextMenu = 2,
        CustomContextMenu = 3,
        PreventContextMenu = 4;

    /** enum Qt::InputMethodQuery */
    public static final int
        ImEnabled = 0x1,
        ImCursorRectangle = 0x2,
        ImMicroFocus = 0x2, // deprecated
        ImFont = 0x4,
        ImCursorPosition = 0x8,
        ImSurroundingText = 0x10,
        ImCurrentSelection = 0x20,
        ImMaximumTextLength = 0x40,
        ImAnchorPosition = 0x80,
        ImHints = 0x100,
        ImPreferredLanguage = 0x200,

        ImAbsolutePosition = 0x400,
        ImTextBeforeCursor = 0x800,
        ImTextAfterCursor = 0x1000,
        ImEnterKeyType = 0x2000,
        ImAnchorRectangle = 0x4000,
        ImInputItemClipRectangle = 0x8000,

        ImPlatformData = 0x80000000,
        ImQueryInput = ImCursorRectangle | ImCursorPosition | ImSurroundingText |
                       ImCurrentSelection | ImAnchorRectangle | ImAnchorPosition,
        ImQueryAll = 0xffffffff;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(InputMethodQueries, InputMethodQuery)
    

    @Namespace("Qt") public enum InputMethodHint {
        ImhNone(0x0),

        ImhHiddenText(0x1),
        ImhSensitiveData(0x2),
        ImhNoAutoUppercase(0x4),
        ImhPreferNumbers(0x8),
        ImhPreferUppercase(0x10),
        ImhPreferLowercase(0x20),
        ImhNoPredictiveText(0x40),

        ImhDate(0x80),
        ImhTime(0x100),

        ImhPreferLatin(0x200),

        ImhMultiLine(0x400),

        ImhNoEditMenu(0x800),
        ImhNoTextHandles(0x1000),

        ImhDigitsOnly(0x10000),
        ImhFormattedNumbersOnly(0x20000),
        ImhUppercaseOnly(0x40000),
        ImhLowercaseOnly(0x80000),
        ImhDialableCharactersOnly(0x100000),
        ImhEmailCharactersOnly(0x200000),
        ImhUrlCharactersOnly(0x400000),
        ImhLatinOnly(0x800000),

        ImhExclusiveInputMask(0xffff0000);

        public final int value;
        private InputMethodHint(int v) { this.value = v; }
        private InputMethodHint(InputMethodHint e) { this.value = e.value; }
        public InputMethodHint intern() { for (InputMethodHint e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(InputMethodHints, InputMethodHint)
    

    /** enum Qt::EnterKeyType */
    public static final int
        EnterKeyDefault = 0,
        EnterKeyReturn = 1,
        EnterKeyDone = 2,
        EnterKeyGo = 3,
        EnterKeySend = 4,
        EnterKeySearch = 5,
        EnterKeyNext = 6,
        EnterKeyPrevious = 7;

    /** enum Qt::ToolButtonStyle */
    public static final int
        ToolButtonIconOnly = 0,
        ToolButtonTextOnly = 1,
        ToolButtonTextBesideIcon = 2,
        ToolButtonTextUnderIcon = 3,
        ToolButtonFollowStyle = 4;

    /** enum Qt::LayoutDirection */
    public static final int
        LeftToRight = 0,
        RightToLeft = 1,
        LayoutDirectionAuto = 2;

    /** enum Qt::AnchorPoint */
    public static final int
        AnchorLeft = 0,
        AnchorHorizontalCenter = 1,
        AnchorRight = 2,
        AnchorTop = 3,
        AnchorVerticalCenter = 4,
        AnchorBottom = 5;

    @Namespace("Qt") public enum FindChildOption {
        FindDirectChildrenOnly(0x0),
        FindChildrenRecursively(0x1);

        public final int value;
        private FindChildOption(int v) { this.value = v; }
        private FindChildOption(FindChildOption e) { this.value = e.value; }
        public FindChildOption intern() { for (FindChildOption e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(FindChildOptions, FindChildOption)

    /** enum Qt::DropAction */
    public static final int
        CopyAction = 0x1,
        MoveAction = 0x2,
        LinkAction = 0x4,
        ActionMask = 0xff,
        TargetMoveAction = 0x8002,
        IgnoreAction = 0x0;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(DropActions, DropAction)
    

    /** enum Qt::CheckState */
    public static final int
        Unchecked = 0,
        PartiallyChecked = 1,
        Checked = 2;

    /** enum Qt::ItemDataRole */
    public static final int
        DisplayRole = 0,
        DecorationRole = 1,
        EditRole = 2,
        ToolTipRole = 3,
        StatusTipRole = 4,
        WhatsThisRole = 5,
        // Metadata
        FontRole = 6,
        TextAlignmentRole = 7,
        BackgroundColorRole = 8,
        BackgroundRole = 8,
        TextColorRole = 9,
        ForegroundRole = 9,
        CheckStateRole = 10,
        // Accessibility
        AccessibleTextRole = 11,
        AccessibleDescriptionRole = 12,
        // More general purpose
        SizeHintRole = 13,
        InitialSortOrderRole = 14,
        // Internal UiLib roles. Start worrying when public roles go that high.
        DisplayPropertyRole = 27,
        DecorationPropertyRole = 28,
        ToolTipPropertyRole = 29,
        StatusTipPropertyRole = 30,
        WhatsThisPropertyRole = 31,
        // Reserved
        UserRole = 0x0100;

    /** enum Qt::ItemFlag */
    public static final int
        NoItemFlags = 0,
        ItemIsSelectable = 1,
        ItemIsEditable = 2,
        ItemIsDragEnabled = 4,
        ItemIsDropEnabled = 8,
        ItemIsUserCheckable = 16,
        ItemIsEnabled = 32,
        ItemIsAutoTristate = 64,
// #if QT_DEPRECATED_SINCE(5, 6)
        ItemIsTristate = ItemIsAutoTristate,
// #endif
        ItemNeverHasChildren = 128,
        ItemIsUserTristate = 256;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(ItemFlags, ItemFlag)
    

    /** enum Qt::MatchFlag */
    public static final int
        MatchExactly = 0,
        MatchContains = 1,
        MatchStartsWith = 2,
        MatchEndsWith = 3,
        MatchRegExp = 4,
        MatchWildcard = 5,
        MatchFixedString = 8,
        MatchCaseSensitive = 16,
        MatchWrap = 32,
        MatchRecursive = 64;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(MatchFlags, MatchFlag)
// Targeting ../QtCore/HANDLE.java


// #if QT_DEPRECATED_SINCE(5, 0)
// #endif

    /** enum Qt::WindowModality */
    public static final int
        NonModal = 0,
        WindowModal = 1,
        ApplicationModal = 2;

    /** enum Qt::TextInteractionFlag */
    public static final int
        NoTextInteraction         = 0,
        TextSelectableByMouse     = 1,
        TextSelectableByKeyboard  = 2,
        LinksAccessibleByMouse    = 4,
        LinksAccessibleByKeyboard = 8,
        TextEditable              = 16,

        TextEditorInteraction     = TextSelectableByMouse | TextSelectableByKeyboard | TextEditable,
        TextBrowserInteraction    = TextSelectableByMouse | LinksAccessibleByMouse | LinksAccessibleByKeyboard;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(TextInteractionFlags, TextInteractionFlag)
    

    /** enum Qt::EventPriority */
    public static final int
        HighEventPriority = 1,
        NormalEventPriority = 0,
        LowEventPriority = -1;

    /** enum Qt::SizeHint */
    public static final int
        MinimumSize = 0,
        PreferredSize = 1,
        MaximumSize = 2,
        MinimumDescent = 3,
        NSizeHints = 4;

    /** enum Qt::WindowFrameSection */
    public static final int
        NoSection = 0,
        LeftSection = 1,           // For resize
        TopLeftSection = 2,
        TopSection = 3,
        TopRightSection = 4,
        RightSection = 5,
        BottomRightSection = 6,
        BottomSection = 7,
        BottomLeftSection = 8,
        TitleBarArea = 9;    // For move

// #if defined(Q_COMPILER_CLASS_ENUM) && defined(Q_COMPILER_CONSTEXPR)
// #else
    /** enum Qt::Initialization */
    public static final int
        Uninitialized = 0;
// #endif

    /** enum Qt::CoordinateSystem */
    public static final int
        DeviceCoordinates = 0,
        LogicalCoordinates = 1;

    /** enum Qt::TouchPointState */
    public static final int
        TouchPointPressed    = 0x01,
        TouchPointMoved      = 0x02,
        TouchPointStationary = 0x04,
        TouchPointReleased   = 0x08;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(TouchPointStates, TouchPointState)
    

// #ifndef QT_NO_GESTURES
    /** enum Qt::GestureState */
    public static final int
        NoGesture = 0,
        GestureStarted  = 1,
        GestureUpdated  = 2,
        GestureFinished = 3,
        GestureCanceled = 4;

    /** enum Qt::GestureType */
    public static final long
        TapGesture        = 1,
        TapAndHoldGesture = 2,
        PanGesture        = 3,
        PinchGesture      = 4,
        SwipeGesture      = 5,

        CustomGesture     = 0x0100,

        LastGestureType   = ~0L;

    @Namespace("Qt") public enum GestureFlag {
        DontStartGestureOnChildren(0x01),
        ReceivePartialGestures    (0x02),
        IgnoredGesturesPropagateToParent(0x04);

        public final int value;
        private GestureFlag(int v) { this.value = v; }
        private GestureFlag(GestureFlag e) { this.value = e.value; }
        public GestureFlag intern() { for (GestureFlag e : values()) if (e.value == value) return e; return this; }
        @Override public String toString() { return intern().name(); }
    }
//     #define Q_DECLARE_FLAGS(arg0, arg1)(GestureFlags, GestureFlag)
    

    /** enum Qt::NativeGestureType */
    public static final int
        BeginNativeGesture = 0,
        EndNativeGesture = 1,
        PanNativeGesture = 2,
        ZoomNativeGesture = 3,
        SmartZoomNativeGesture = 4,
        RotateNativeGesture = 5,
        SwipeNativeGesture = 6;

// #endif // QT_NO_GESTURES

    /** enum Qt::NavigationMode */
    public static final int
        NavigationModeNone = 0,
        NavigationModeKeypadTabOrder = 1,
        NavigationModeKeypadDirectional = 2,
        NavigationModeCursorAuto = 3,
        NavigationModeCursorForceVisible = 4;

    /** enum Qt::CursorMoveStyle */
    public static final int
        LogicalMoveStyle = 0,
        VisualMoveStyle = 1;

    /** enum Qt::TimerType */
    public static final int
        PreciseTimer = 0,
        CoarseTimer = 1,
        VeryCoarseTimer = 2;

    /** enum Qt::ScrollPhase */
    public static final int
        NoScrollPhase = 0,
        ScrollBegin = 1,
        ScrollUpdate = 2,
        ScrollEnd = 3,
        ScrollMomentum = 4;

    /** enum Qt::MouseEventSource */
    public static final int
        MouseEventNotSynthesized = 0,
        MouseEventSynthesizedBySystem = 1,
        MouseEventSynthesizedByQt = 2,
        MouseEventSynthesizedByApplication = 3;

    /** enum Qt::MouseEventFlag */
    public static final int
        MouseEventCreatedDoubleClick = 0x01,
        MouseEventFlagMask = 0xFF;
//     #define Q_DECLARE_FLAGS(arg0, arg1)(MouseEventFlags, MouseEventFlag)
    

    /** enum Qt::ChecksumType */
    public static final int
        ChecksumIso3309 = 0,
        ChecksumItuV41 = 1;

// #ifndef Q_QDOC
// #endif // Q_DOC




// Targeting ../QtCore/QAbstractEventDispatcher.java




// Targeting ../QtCore/QByteArray.java




// Targeting ../QtCore/QCoreApplication.java




// Parsed from QtCore/qcoreevent.h





// Targeting ../QtCore/QEventLoop.java




// Targeting ../QtCore/QObject.java




// Targeting ../QtCore/QSize.java




// Targeting ../QtCore/QString.java




// Parsed from QtCore/qstringlist.h

// #ifdef Q_QDOC


// Parsed from QtCore/qthread.h




// Targeting ../QtCore/QVariant.java




}
