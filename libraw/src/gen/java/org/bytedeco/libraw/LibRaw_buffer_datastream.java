// Targeted by JavaCPP version 1.5.9: DO NOT EDIT THIS FILE

package org.bytedeco.libraw;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.libraw.global.LibRaw.*;


// #ifndef LIBRAW_NO_IOSTREAMS_DATASTREAM
// #endif

// #if defined (LIBRAW_NO_IOSTREAMS_DATASTREAM)  && defined (LIBRAW_WIN32_CALLS)

// #endif

@NoOffset @Properties(inherit = org.bytedeco.libraw.presets.LibRaw.class)
public class LibRaw_buffer_datastream extends LibRaw_abstract_datastream {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LibRaw_buffer_datastream(Pointer p) { super(p); }

  public LibRaw_buffer_datastream(@Const Pointer buffer, @Cast("size_t") long bsize) { super((Pointer)null); allocate(buffer, bsize); }
  private native void allocate(@Const Pointer buffer, @Cast("size_t") long bsize);
  public native int valid();
// #ifdef LIBRAW_OLD_VIDEO_SUPPORT
// #endif
  public native int jpeg_src(Pointer jpegdata);
  public native int read(Pointer ptr, @Cast("size_t") long sz, @Cast("size_t") long nmemb);
  public native int eof();
  public native int seek(@Cast("INT64") long o, int whence);
  public native @Cast("INT64") long tell();
  public native @Cast("INT64") long size();
  public native @Cast("char*") BytePointer gets(@Cast("char*") BytePointer s, int sz);
  public native @Cast("char*") ByteBuffer gets(@Cast("char*") ByteBuffer s, int sz);
  public native @Cast("char*") byte[] gets(@Cast("char*") byte[] s, int sz);
  public native int scanf_one(@Cast("const char*") BytePointer fmt, Pointer val);
  public native int scanf_one(String fmt, Pointer val);
  public native int get_char();
}
