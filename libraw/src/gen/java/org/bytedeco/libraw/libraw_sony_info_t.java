// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libraw;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.libraw.global.LibRaw.*;


  @Properties(inherit = org.bytedeco.libraw.presets.LibRaw.class)
public class libraw_sony_info_t extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public libraw_sony_info_t() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public libraw_sony_info_t(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public libraw_sony_info_t(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public libraw_sony_info_t position(long position) {
          return (libraw_sony_info_t)super.position(position);
      }
      @Override public libraw_sony_info_t getPointer(long i) {
          return new libraw_sony_info_t((Pointer)this).offsetAddress(i);
      }
  
    public native @Cast("ushort") short CameraType(); public native libraw_sony_info_t CameraType(short setter);
    public native @Cast("uchar") byte Sony0x9400_version(); public native libraw_sony_info_t Sony0x9400_version(byte setter); /* 0 if not found/deciphered, 0xa, 0xb, 0xc
                                 following exiftool convention */
    public native @Cast("uchar") byte Sony0x9400_ReleaseMode2(); public native libraw_sony_info_t Sony0x9400_ReleaseMode2(byte setter);
    public native @Cast("unsigned") int Sony0x9400_SequenceImageNumber(); public native libraw_sony_info_t Sony0x9400_SequenceImageNumber(int setter);
    public native @Cast("uchar") byte Sony0x9400_SequenceLength1(); public native libraw_sony_info_t Sony0x9400_SequenceLength1(byte setter);
    public native @Cast("unsigned") int Sony0x9400_SequenceFileNumber(); public native libraw_sony_info_t Sony0x9400_SequenceFileNumber(int setter);
    public native @Cast("uchar") byte Sony0x9400_SequenceLength2(); public native libraw_sony_info_t Sony0x9400_SequenceLength2(byte setter);
    public native @Cast("uint8_t") byte AFAreaModeSetting(); public native libraw_sony_info_t AFAreaModeSetting(byte setter);
    public native @Cast("ushort") short FlexibleSpotPosition(int i); public native libraw_sony_info_t FlexibleSpotPosition(int i, short setter);
    @MemberGetter public native @Cast("ushort*") ShortPointer FlexibleSpotPosition();
    public native @Cast("uint8_t") byte AFPointSelected(); public native libraw_sony_info_t AFPointSelected(byte setter);
    public native @Cast("uint8_t") byte AFPointsUsed(int i); public native libraw_sony_info_t AFPointsUsed(int i, byte setter);
    @MemberGetter public native @Cast("uint8_t*") BytePointer AFPointsUsed();
    public native @Cast("uint8_t") byte AFTracking(); public native libraw_sony_info_t AFTracking(byte setter);
    public native @Cast("uint8_t") byte AFType(); public native libraw_sony_info_t AFType(byte setter);
    public native @Cast("ushort") short FocusLocation(int i); public native libraw_sony_info_t FocusLocation(int i, short setter);
    @MemberGetter public native @Cast("ushort*") ShortPointer FocusLocation();
    
    
    public native @Cast("uchar") byte AFMicroAdjRegisteredLenses(); public native libraw_sony_info_t AFMicroAdjRegisteredLenses(byte setter);
    public native @Cast("ushort") short VariableLowPassFilter(); public native libraw_sony_info_t VariableLowPassFilter(short setter);
    public native @Cast("unsigned") int LongExposureNoiseReduction(); public native libraw_sony_info_t LongExposureNoiseReduction(int setter);
    public native @Cast("ushort") short HighISONoiseReduction(); public native libraw_sony_info_t HighISONoiseReduction(short setter);
    public native @Cast("ushort") short HDR(int i); public native libraw_sony_info_t HDR(int i, short setter);
    @MemberGetter public native @Cast("ushort*") ShortPointer HDR();
    public native @Cast("ushort") short group2010(); public native libraw_sony_info_t group2010(short setter);
    public native @Cast("ushort") short real_iso_offset(); public native libraw_sony_info_t real_iso_offset(short setter);
    public native @Cast("ushort") short MeteringMode_offset(); public native libraw_sony_info_t MeteringMode_offset(short setter);
    public native @Cast("ushort") short ExposureProgram_offset(); public native libraw_sony_info_t ExposureProgram_offset(short setter);
    public native @Cast("ushort") short ReleaseMode2_offset(); public native libraw_sony_info_t ReleaseMode2_offset(short setter);
    public native @Cast("unsigned") int MinoltaCamID(); public native libraw_sony_info_t MinoltaCamID(int setter);
    public native float firmware(); public native libraw_sony_info_t firmware(float setter);
    public native @Cast("ushort") short ImageCount3_offset(); public native libraw_sony_info_t ImageCount3_offset(short setter);
    public native @Cast("unsigned") int ImageCount3(); public native libraw_sony_info_t ImageCount3(int setter);
    public native @Cast("unsigned") int ElectronicFrontCurtainShutter(); public native libraw_sony_info_t ElectronicFrontCurtainShutter(int setter);
    public native @Cast("ushort") short MeteringMode2(); public native libraw_sony_info_t MeteringMode2(short setter);
    public native @Cast("char") byte SonyDateTime(int i); public native libraw_sony_info_t SonyDateTime(int i, byte setter);
    @MemberGetter public native @Cast("char*") BytePointer SonyDateTime();
    public native @Cast("unsigned") int ShotNumberSincePowerUp(); public native libraw_sony_info_t ShotNumberSincePowerUp(int setter);
    public native @Cast("ushort") short PixelShiftGroupPrefix(); public native libraw_sony_info_t PixelShiftGroupPrefix(short setter);
    public native @Cast("unsigned") int PixelShiftGroupID(); public native libraw_sony_info_t PixelShiftGroupID(int setter);
    public native @Cast("char") byte nShotsInPixelShiftGroup(); public native libraw_sony_info_t nShotsInPixelShiftGroup(byte setter);
    public native @Cast("char") byte numInPixelShiftGroup(); public native libraw_sony_info_t numInPixelShiftGroup(byte setter); /* '0' if ARQ, first shot in the group has '1'
                                  here */
    public native @Cast("ushort") short prd_ImageHeight(); public native libraw_sony_info_t prd_ImageHeight(short setter);
    public native @Cast("ushort") short prd_ImageWidth(); public native libraw_sony_info_t prd_ImageWidth(short setter);
    public native @Cast("ushort") short prd_RawBitDepth(); public native libraw_sony_info_t prd_RawBitDepth(short setter);
    public native @Cast("ushort") short prd_StorageMethod(); public native libraw_sony_info_t prd_StorageMethod(short setter); /* 82 -> Padded; 89 -> Linear */
    public native @Cast("ushort") short prd_BayerPattern(); public native libraw_sony_info_t prd_BayerPattern(short setter);  /* 0 -> not valid; 1 -> RGGB; 4 -> GBRG */

    public native @Cast("ushort") short SonyRawFileType(); public native libraw_sony_info_t SonyRawFileType(short setter); /* takes precedence over RAWFileType and Quality:
                               0  for uncompressed 14-bit raw
                               1  for uncompressed 12-bit raw
                               2  for compressed raw
                               3  for lossless compressed raw
                            */
    public native @Cast("ushort") short RAWFileType(); public native libraw_sony_info_t RAWFileType(short setter);     /* takes precedence over Quality
                               0 for compressed raw, 1 for uncompressed;
                            */
    public native @Cast("unsigned") int Quality(); public native libraw_sony_info_t Quality(int setter);       /* 0 or 6 for raw, 7 or 8 for compressed raw */
    public native @Cast("ushort") short FileFormat(); public native libraw_sony_info_t FileFormat(short setter);      /*  1000 SR2
                                2000 ARW 1.0
                                3000 ARW 2.0
                                3100 ARW 2.1
                                3200 ARW 2.2
                                3300 ARW 2.3
                                3310 ARW 2.3.1
                                3320 ARW 2.3.2
                                3330 ARW 2.3.3
                                3350 ARW 2.3.5
                             */
  }
