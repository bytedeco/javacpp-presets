// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.libraw;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.libraw.global.LibRaw.*;

// #endif

// #ifdef __cplusplus

@NoOffset @Properties(inherit = org.bytedeco.libraw.presets.LibRaw.class)
public class LibRaw extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LibRaw(Pointer p) { super(p); }

  public native @ByRef libraw_data_t imgdata(); public native LibRaw imgdata(libraw_data_t setter);

  public LibRaw(@Cast("unsigned int") int flags/*=LIBRAW_OPTIONS_NONE*/) { super((Pointer)null); allocate(flags); }
  private native void allocate(@Cast("unsigned int") int flags/*=LIBRAW_OPTIONS_NONE*/);
  public LibRaw() { super((Pointer)null); allocate(); }
  private native void allocate();
  public native libraw_output_params_t output_params_ptr();
// #ifndef LIBRAW_NO_IOSTREAMS_DATASTREAM
// #else
  public native int open_file(@Cast("const char*") BytePointer fname);
  public native int open_file(String fname);
// #if defined(_WIN32) || defined(WIN32)
// #endif

// #endif
  public native int open_buffer(@Const Pointer buffer, @Cast("size_t") long size);
  public native int open_datastream(LibRaw_abstract_datastream arg0);
  public native int open_bayer(@Cast("const unsigned char*") BytePointer data, @Cast("unsigned") int datalen,
                           @Cast("ushort") short _raw_width, @Cast("ushort") short _raw_height,
                           @Cast("ushort") short _left_margin, @Cast("ushort") short _top_margin,
                           @Cast("ushort") short _right_margin, @Cast("ushort") short _bottom_margin,
                           @Cast("unsigned char") byte procflags, @Cast("unsigned char") byte bayer_pattern,
                           @Cast("unsigned") int unused_bits, @Cast("unsigned") int otherflags,
                           @Cast("unsigned") int black_level);
  public native int open_bayer(@Cast("const unsigned char*") ByteBuffer data, @Cast("unsigned") int datalen,
                           @Cast("ushort") short _raw_width, @Cast("ushort") short _raw_height,
                           @Cast("ushort") short _left_margin, @Cast("ushort") short _top_margin,
                           @Cast("ushort") short _right_margin, @Cast("ushort") short _bottom_margin,
                           @Cast("unsigned char") byte procflags, @Cast("unsigned char") byte bayer_pattern,
                           @Cast("unsigned") int unused_bits, @Cast("unsigned") int otherflags,
                           @Cast("unsigned") int black_level);
  public native int open_bayer(@Cast("const unsigned char*") byte[] data, @Cast("unsigned") int datalen,
                           @Cast("ushort") short _raw_width, @Cast("ushort") short _raw_height,
                           @Cast("ushort") short _left_margin, @Cast("ushort") short _top_margin,
                           @Cast("ushort") short _right_margin, @Cast("ushort") short _bottom_margin,
                           @Cast("unsigned char") byte procflags, @Cast("unsigned char") byte bayer_pattern,
                           @Cast("unsigned") int unused_bits, @Cast("unsigned") int otherflags,
                           @Cast("unsigned") int black_level);
  public native int error_count();
  public native void recycle_datastream();
  public native int unpack();
  public native int unpack_thumb();
  public native int unpack_thumb_ex(int arg0);
  public native int thumbOK(@Cast("INT64") long maxsz/*=-1*/);
  public native int thumbOK();
  public native int adjust_sizes_info_only();
  public native int subtract_black();
  public native int subtract_black_internal();
  public native int raw2image();
  public native int raw2image_ex(int do_subtract_black);
  public native void raw2image_start();
  public native void free_image();
  public native int adjust_maximum();
  public native int adjust_to_raw_inset_crop(@Cast("unsigned") int mask, float maxcrop/*=0.55f*/);
  public native int adjust_to_raw_inset_crop(@Cast("unsigned") int mask); 
  public native void set_exifparser_handler(exif_parser_callback cb, Pointer data);
  public native void set_dataerror_handler(data_callback func, Pointer data);
  public native void set_progress_handler(progress_callback pcb, Pointer data);

  public static native @Cast("const char*") BytePointer cameramakeridx2maker(@Cast("unsigned") int maker);
  public native int setMakeFromIndex(@Cast("unsigned") int index);

  public native void convertFloatToInt(float dmin/*=4096.f*/, float dmax/*=32767.f*/,
                           float dtarget/*=16383.f*/);
  public native void convertFloatToInt();
  /* helpers */
  public static native @Cast("unsigned") int capabilities();
  public static native @Cast("const char*") BytePointer version();
  public static native int versionNumber();
  public static native @Cast("const char**") PointerPointer cameraList();
  public static native int cameraCount();
  public static native @Cast("const char*") BytePointer strprogress(LibRaw_progress arg0);
  public static native String strprogress(@Cast("LibRaw_progress") int arg0);
  public static native @Cast("const char*") BytePointer strerror(int p);
  /* dcraw emulation */
  public native int dcraw_ppm_tiff_writer(@Cast("const char*") BytePointer filename);
  public native int dcraw_ppm_tiff_writer(String filename);
  public native int dcraw_thumb_writer(@Cast("const char*") BytePointer fname);
  public native int dcraw_thumb_writer(String fname);
  public native int dcraw_process();
  /* information calls */
  public native int is_fuji_rotated();
  public native int is_sraw();
  public native int sraw_midpoint();
  public native int is_nikon_sraw();
  public native int is_coolscan_nef();
  public native int is_jpeg_thumb();
  public native int is_floating_point();
  public native int have_fpdata();
  /* memory writers */
  public native libraw_processed_image_t dcraw_make_mem_image(IntPointer errcode/*=NULL*/);
  public native libraw_processed_image_t dcraw_make_mem_image();
  public native libraw_processed_image_t dcraw_make_mem_image(IntBuffer errcode/*=NULL*/);
  public native libraw_processed_image_t dcraw_make_mem_image(int[] errcode/*=NULL*/);
  public native libraw_processed_image_t dcraw_make_mem_thumb(IntPointer errcode/*=NULL*/);
  public native libraw_processed_image_t dcraw_make_mem_thumb();
  public native libraw_processed_image_t dcraw_make_mem_thumb(IntBuffer errcode/*=NULL*/);
  public native libraw_processed_image_t dcraw_make_mem_thumb(int[] errcode/*=NULL*/);
  public static native void dcraw_clear_mem(libraw_processed_image_t arg0);

  /* Additional calls for make_mem_image */
  public native void get_mem_image_format(IntPointer width, IntPointer height, IntPointer colors,
                              IntPointer bps);
  public native void get_mem_image_format(IntBuffer width, IntBuffer height, IntBuffer colors,
                              IntBuffer bps);
  public native void get_mem_image_format(int[] width, int[] height, int[] colors,
                              int[] bps);
  public native int copy_mem_image(Pointer scan0, int stride, int bgr);

  /* free all internal data structures */
  public native void recycle();

  public native int COLOR(int row, int col);

  public native int FC(int row, int col);
  public native int fcol(int row, int col);

  public native @Cast("const char*") BytePointer unpack_function_name();
  public native int get_decoder_info(libraw_decoder_info_t d_info);
  

  public static native float powf_lim(float a, float b, float limup);
  public static native float libraw_powf64l(float a, float b);

  public static native @Cast("unsigned") int sgetn(int n, @Cast("uchar*") BytePointer s);
  public static native @Cast("unsigned") int sgetn(int n, @Cast("uchar*") ByteBuffer s);
  public static native @Cast("unsigned") int sgetn(int n, @Cast("uchar*") byte[] s);

  /* Phase one correction/subtractBL calls */
  /* Returns libraw error code */

  public native int phase_one_subtract_black(@Cast("ushort*") ShortPointer src, @Cast("ushort*") ShortPointer dest);
  public native int phase_one_subtract_black(@Cast("ushort*") ShortBuffer src, @Cast("ushort*") ShortBuffer dest);
  public native int phase_one_subtract_black(@Cast("ushort*") short[] src, @Cast("ushort*") short[] dest);
  public native int phase_one_correct();

  public native int set_rawspeed_camerafile(@Cast("char*") BytePointer filename);
  public native int set_rawspeed_camerafile(@Cast("char*") ByteBuffer filename);
  public native int set_rawspeed_camerafile(@Cast("char*") byte[] filename);
  public native void setCancelFlag();
  public native void clearCancelFlag();
  public native int adobe_coeff(@Cast("unsigned") int arg0, @Cast("const char*") BytePointer arg1, int internal_only/*=0*/);
  public native int adobe_coeff(@Cast("unsigned") int arg0, @Cast("const char*") BytePointer arg1);
  public native int adobe_coeff(@Cast("unsigned") int arg0, String arg1, int internal_only/*=0*/);
  public native int adobe_coeff(@Cast("unsigned") int arg0, String arg1);

  public native void set_dng_host(Pointer arg0);
}
