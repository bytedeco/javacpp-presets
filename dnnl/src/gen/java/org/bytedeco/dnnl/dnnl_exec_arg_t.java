// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.dnnl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;

import static org.bytedeco.dnnl.global.dnnl.*;


// XXX: next define should have a (1 << 20) = 1048576 value to preserve 5 bits
// for DNNL_ARG_ATTR_MULTIPLE_POST_OP argument.

/** A structure that contains an index and a memory object, and is used to pass
 *  arguments to dnnl_primitive_execute(). */
@Properties(inherit = org.bytedeco.dnnl.presets.dnnl.class)
public class dnnl_exec_arg_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public dnnl_exec_arg_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public dnnl_exec_arg_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public dnnl_exec_arg_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public dnnl_exec_arg_t position(long position) {
        return (dnnl_exec_arg_t)super.position(position);
    }
    @Override public dnnl_exec_arg_t getPointer(long i) {
        return new dnnl_exec_arg_t((Pointer)this).position(position + i);
    }

    /** An argument index, e.g. DNNL_ARG_SRC */
    public native int arg(); public native dnnl_exec_arg_t arg(int setter);
    /** Input/output memory */
    public native dnnl_memory memory(); public native dnnl_exec_arg_t memory(dnnl_memory setter);
}
