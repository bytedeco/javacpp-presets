// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.dnnl;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.opencl.*;
import static org.bytedeco.opencl.global.OpenCL.*;

import static org.bytedeco.dnnl.global.dnnl.*;

/** \endcond
 <p>
 *  A container for stream attributes. */
@Namespace("dnnl") @Properties(inherit = org.bytedeco.dnnl.presets.dnnl.class)
public class stream_attr extends dnnl_stream_attr_handle {
    static { Loader.load(); }

    
        public stream_attr() { super((Pointer)null); allocate(); }
        private native void allocate();
        public stream_attr(@Const @ByRef stream_attr arg0) { super((Pointer)null); allocate(arg0); }
        private native void allocate(@Const @ByRef stream_attr arg0);
        
        ///
        public stream_attr(dnnl_stream_attr t, @Cast("bool") boolean weak/*=false*/) { super((Pointer)null); allocate(t, weak); }
        private native void allocate(dnnl_stream_attr t, @Cast("bool") boolean weak/*=false*/);
        public stream_attr(dnnl_stream_attr t) { super((Pointer)null); allocate(t); }
        private native void allocate(dnnl_stream_attr t);
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public stream_attr(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public stream_attr(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public stream_attr position(long position) {
        return (stream_attr)super.position(position);
    }
    @Override public stream_attr getPointer(long i) {
        return new stream_attr((Pointer)this).position(position + i);
    }


    /** Constructs default (empty) stream attributes. */

    /** Constructs stream attributes for a stream that runs on an engine of a
     *  particular kind.
     * 
     *  @param akind Target engine kind. */
    public stream_attr(engine.kind akind) { super((Pointer)null); allocate(akind); }
    private native void allocate(engine.kind akind);
    public stream_attr(@Cast("dnnl::engine::kind") int akind) { super((Pointer)null); allocate(akind); }
    private native void allocate(@Cast("dnnl::engine::kind") int akind);

// #if DNNL_CPU_THREADING_RUNTIME == DNNL_RUNTIME_THREADPOOL
// #endif
}
