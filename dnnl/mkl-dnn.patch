diff -ruN oneDNN-2.4/include/oneapi/dnnl/dnnl.hpp oneDNN-2.4-patch/include/oneapi/dnnl/dnnl.hpp
--- oneDNN-2.4/include/oneapi/dnnl/dnnl.hpp	2021-10-07 07:03:52.000000000 +0900
+++ oneDNN-2.4-patch/include/oneapi/dnnl/dnnl.hpp	2021-10-11 13:22:21.592769863 +0900
@@ -103,6 +103,8 @@
     static void wrap_c_api(dnnl_status_t status, const char *message) {
         if (status != dnnl_success) DNNL_THROW_ERROR(status, message);
     }
+
+    const std::string& toStdString() { return std::string(message).append(": status = ").append(std::to_string(status)); }
 };
 
 /// @cond DO_NOT_DOCUMENT_THIS
diff -ruN oneDNN-2.4/src/cpu/cpu_engine.cpp oneDNN-2.4-patch/src/cpu/cpu_engine.cpp
--- oneDNN-2.4/src/cpu/cpu_engine.cpp	2021-10-07 07:03:52.000000000 +0900
+++ oneDNN-2.4-patch/src/cpu/cpu_engine.cpp	2021-10-11 13:22:26.248804321 +0900
@@ -23,10 +23,31 @@
 #include "cpu/cpu_memory_storage.hpp"
 #include "cpu/cpu_stream.hpp"
 
+#include "cpu/x64/jit_uni_dw_conv_kernel_utils.hpp"
+
 namespace dnnl {
 namespace impl {
 namespace cpu {
 
+namespace x64 {
+template struct jit_uni_dw_conv_fwd_kernel<avx512_core, data_type::bf16>;
+template struct jit_uni_dw_conv_fwd_kernel<avx512_common, data_type::f32>;
+template struct jit_uni_dw_conv_fwd_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_fwd_kernel<sse41, data_type::f32>;
+
+template struct jit_uni_dw_conv_bwd_data_kernel<avx512_core, data_type::bf16>;
+template struct jit_uni_dw_conv_bwd_data_kernel<avx512_common, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_data_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_data_kernel<sse41, data_type::f32>;
+
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_core,
+        data_type::bf16>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_common,
+        data_type::f32>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<sse41, data_type::f32>;
+} // namespace x64
+
 status_t cpu_engine_t::create_memory_storage(
         memory_storage_t **storage, unsigned flags, size_t size, void *handle) {
     auto _storage = new cpu_memory_storage_t(this);
