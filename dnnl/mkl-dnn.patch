diff -ruN oneDNN-2.4/include/oneapi/dnnl/dnnl.hpp oneDNN-2.4-patch/include/oneapi/dnnl/dnnl.hpp
--- oneDNN-2.4/include/oneapi/dnnl/dnnl.hpp	2021-10-07 07:03:52.000000000 +0900
+++ oneDNN-2.4-patch/include/oneapi/dnnl/dnnl.hpp	2021-10-11 13:22:21.592769863 +0900
@@ -103,6 +103,8 @@
     static void wrap_c_api(dnnl_status_t status, const char *message) {
         if (status != dnnl_success) DNNL_THROW_ERROR(status, message);
     }
+
+    const std::string& toStdString() { return std::string(message).append(": status = ").append(std::to_string(status)); }
 };
 
 /// @cond DO_NOT_DOCUMENT_THIS
diff -ruN oneDNN-2.4/src/CMakeLists.txt oneDNN-2.4-patch/src/CMakeLists.txt
--- oneDNN-2.4/src/CMakeLists.txt	2021-10-07 07:03:52.000000000 +0900
+++ oneDNN-2.4-patch/src/CMakeLists.txt	2021-10-11 13:23:39.895349360 +0900
@@ -177,60 +177,6 @@
     install(CODE "execute_process(COMMAND ${CMAKE_COMMAND}
         -DDIR=\$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake
         -P ${PROJECT_SOURCE_DIR}/cmake/gen_mkldnn_compat_cmakes.cmake)")
-
-    # Intel MKL-DNN compat libraries
-    if (WIN32)
-        if (NOT MINGW)
-            set(prefix "")
-            set(ext ".lib")
-        else()
-            set(prefix "lib")
-            if (DNNL_LIBRARY_TYPE STREQUAL "SHARED")
-                set(ext ".dll.a")
-            else()
-                set(ext ".a")
-            endif()
-        endif()
-        add_custom_target(compat_libs ALL
-            ${CMAKE_COMMAND} -E copy
-            $<TARGET_LINKER_FILE_DIR:${DNNL_LIBRARY_NAME}>/$<TARGET_LINKER_FILE_NAME:${DNNL_LIBRARY_NAME}>
-            $<TARGET_LINKER_FILE_DIR:${DNNL_LIBRARY_NAME}>/${prefix}mkldnn${ext}
-            # Workaround for MSB8065 warning.
-            COMMAND ${CMAKE_COMMAND} -E touch "CMakeFiles/compat_libs"
-            DEPENDS ${DNNL_LIBRARY_NAME})
-        install(FILES $<TARGET_LINKER_FILE_DIR:${DNNL_LIBRARY_NAME}>/${prefix}mkldnn${ext}
-            DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
-    else()
-        if(DNNL_LIBRARY_TYPE STREQUAL "SHARED")
-            set_ternary(ext APPLE ".dylib" ".so")
-            set(vers ".${DNNL_VERSION_MAJOR};.${DNNL_VERSION_MAJOR}.${DNNL_VERSION_MINOR}")
-        else()
-            set(ext ".a")
-            set(vers "")
-        endif()
-        foreach(ver "" ${vers})
-            set_ternary(ext_and_ver APPLE "${ver}${ext}" "${ext}${ver}")
-            get_property(lib_location TARGET ${DNNL_LIBRARY_NAME} PROPERTY LIBRARY_OUTPUT_DIRECTORY)
-            if(lib_location)
-                set(compat_link "${lib_location}/libmkldnn${ext_and_ver}")
-            else()
-                set(compat_link "${CMAKE_CURRENT_BINARY_DIR}/libmkldnn${ext_and_ver}")
-            endif()
-            if(CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)               
-                add_custom_command(OUTPUT ${compat_link}
-                    COMMAND ${CMAKE_COMMAND} -E copy libdnnl${ext_and_ver} ${compat_link}
-                    DEPENDS ${DNNL_LIBRARY_NAME})
-            else()
-                add_custom_command(OUTPUT ${compat_link}
-                    # to make the next command work fine
-                    COMMAND ${CMAKE_COMMAND} -E remove -f ${compat_link}
-                    COMMAND ${CMAKE_COMMAND} -E create_symlink libdnnl${ext_and_ver} ${compat_link}
-                    DEPENDS ${DNNL_LIBRARY_NAME})
-            endif()
-            add_custom_target(compat_libs${ver} ALL DEPENDS ${compat_link})
-            install(FILES ${compat_link} DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
-        endforeach()
-    endif()
 endif()
 
 # Install custom find modules for transitive dependencies
diff -ruN oneDNN-2.4/src/cpu/cpu_engine.cpp oneDNN-2.4-patch/src/cpu/cpu_engine.cpp
--- oneDNN-2.4/src/cpu/cpu_engine.cpp	2021-10-07 07:03:52.000000000 +0900
+++ oneDNN-2.4-patch/src/cpu/cpu_engine.cpp	2021-10-11 13:22:26.248804321 +0900
@@ -23,10 +23,31 @@
 #include "cpu/cpu_memory_storage.hpp"
 #include "cpu/cpu_stream.hpp"
 
+#include "cpu/x64/jit_uni_dw_conv_kernel_utils.hpp"
+
 namespace dnnl {
 namespace impl {
 namespace cpu {
 
+namespace x64 {
+template struct jit_uni_dw_conv_fwd_kernel<avx512_core, data_type::bf16>;
+template struct jit_uni_dw_conv_fwd_kernel<avx512_common, data_type::f32>;
+template struct jit_uni_dw_conv_fwd_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_fwd_kernel<sse41, data_type::f32>;
+
+template struct jit_uni_dw_conv_bwd_data_kernel<avx512_core, data_type::bf16>;
+template struct jit_uni_dw_conv_bwd_data_kernel<avx512_common, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_data_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_data_kernel<sse41, data_type::f32>;
+
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_core,
+        data_type::bf16>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_common,
+        data_type::f32>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<sse41, data_type::f32>;
+} // namespace x64
+
 status_t cpu_engine_t::create_memory_storage(
         memory_storage_t **storage, unsigned flags, size_t size, void *handle) {
     auto _storage = new cpu_memory_storage_t(this);
