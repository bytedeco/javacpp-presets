// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.tritonserver.tritondevelopertoolsserver;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tritonserver.global.tritondevelopertoolsserver.*;



//==============================================================================
/** Custom Allocator object for providing custom functions for allocator.
 *  If there is no custom allocator provided, will use the default allocator.
 *  */
@Namespace("triton::developer_tools::server") @NoOffset @Properties(inherit = org.bytedeco.tritonserver.presets.tritondevelopertoolsserver.class)
public class Allocator extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Allocator(Pointer p) { super(p); }

  public Allocator(
        ResponseAllocatorAllocFn_t alloc_fn, OutputBufferReleaseFn_t release_fn,
        ResponseAllocatorStartFn_t start_fn/*=nullptr*/) { super((Pointer)null); allocate(alloc_fn, release_fn, start_fn); }
  private native void allocate(
        ResponseAllocatorAllocFn_t alloc_fn, OutputBufferReleaseFn_t release_fn,
        ResponseAllocatorStartFn_t start_fn/*=nullptr*/);
  public Allocator(
        ResponseAllocatorAllocFn_t alloc_fn, OutputBufferReleaseFn_t release_fn) { super((Pointer)null); allocate(alloc_fn, release_fn); }
  private native void allocate(
        ResponseAllocatorAllocFn_t alloc_fn, OutputBufferReleaseFn_t release_fn);

  public native ResponseAllocatorAllocFn_t AllocFn();
  public native OutputBufferReleaseFn_t ReleaseFn();
  public native ResponseAllocatorStartFn_t StartFn();
}
