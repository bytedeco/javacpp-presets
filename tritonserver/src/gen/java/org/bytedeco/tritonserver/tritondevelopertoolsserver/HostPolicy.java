// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.tritonserver.tritondevelopertoolsserver;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tritonserver.global.tritondevelopertoolsserver.*;


//==============================================================================
/** Structure to hold host policy for setting 'ServerOptions'.
 *  See here for more information:
 *  https://github.com/triton-inference-server/server/blob/main/docs/user_guide/optimization.md#host-policy. */
@Namespace("triton::developer_tools::server") @NoOffset @Properties(inherit = org.bytedeco.tritonserver.presets.tritondevelopertoolsserver.class)
public class HostPolicy extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HostPolicy(Pointer p) { super(p); }

  /** enum class triton::developer_tools::server::HostPolicy::Setting */
  public static final int NUMA_NODE = 0, CPU_CORES = 1;

  public HostPolicy(
        @StdString BytePointer name, @Cast("const triton::developer_tools::server::HostPolicy::Setting") int setting,
        @StdString BytePointer value) { super((Pointer)null); allocate(name, setting, value); }
  private native void allocate(
        @StdString BytePointer name, @Cast("const triton::developer_tools::server::HostPolicy::Setting") int setting,
        @StdString BytePointer value);
  public HostPolicy(
        @StdString String name, @Cast("const triton::developer_tools::server::HostPolicy::Setting") int setting,
        @StdString String value) { super((Pointer)null); allocate(name, setting, value); }
  private native void allocate(
        @StdString String name, @Cast("const triton::developer_tools::server::HostPolicy::Setting") int setting,
        @StdString String value);

  // The name of the policy.
  public native @StdString BytePointer name_(); public native HostPolicy name_(BytePointer setter);
  // The kind of the host policy setting. Currently supported settings are
  // 'NUMA_NODE', 'CPU_CORES'. Note that 'NUMA_NODE' setting will affect pinned
  // memory pool behavior, see the comments of 'pinned_memory_pool_byte_size_'
  // in 'ServerOptions' for more detail.
  public native @Cast("triton::developer_tools::server::HostPolicy::Setting") int setting_(); public native HostPolicy setting_(int setter);
  // The setting value.
  public native @StdString BytePointer value_(); public native HostPolicy value_(BytePointer setter);
}
