// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.tritonserver.tritondevelopertoolsserver;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tritonserver.global.tritondevelopertoolsserver.*;


//==============================================================================
/** Structure to hold repository index for 'ModelIndex' function.
 *  */
@Namespace("triton::developer_tools::server") @NoOffset @Properties(inherit = org.bytedeco.tritonserver.presets.tritondevelopertoolsserver.class)
public class RepositoryIndex extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RepositoryIndex(Pointer p) { super(p); }

  public RepositoryIndex(
        @StdString BytePointer name, @StdString BytePointer version,
        @Cast("const triton::developer_tools::server::ModelReadyState") int state) { super((Pointer)null); allocate(name, version, state); }
  private native void allocate(
        @StdString BytePointer name, @StdString BytePointer version,
        @Cast("const triton::developer_tools::server::ModelReadyState") int state);
  public RepositoryIndex(
        @StdString String name, @StdString String version,
        @Cast("const triton::developer_tools::server::ModelReadyState") int state) { super((Pointer)null); allocate(name, version, state); }
  private native void allocate(
        @StdString String name, @StdString String version,
        @Cast("const triton::developer_tools::server::ModelReadyState") int state);

  // The name of the model.
  public native @StdString BytePointer name_(); public native RepositoryIndex name_(BytePointer setter);
  // The version of the model.
  public native @StdString BytePointer version_(); public native RepositoryIndex version_(BytePointer setter);
  // The state of the model. The states are
  // * UNKNOWN: The model is in an unknown state. The model is not available for
  // inferencing.
  // * READY: The model is ready and available for inferencing.
  // * UNAVAILABLE: The model is unavailable, indicating that the model failed
  // to load or has been implicitly or explicitly unloaded. The model is not
  // available for inferencing.
  // * LOADING: The model is being loaded by the inference server. The model is
  // not available for inferencing.
  // * UNLOADING: The model is being unloaded by the inference server. The model
  // is not available for inferencing.
  public native @Cast("triton::developer_tools::server::ModelReadyState") int state_(); public native RepositoryIndex state_(int setter);
}
