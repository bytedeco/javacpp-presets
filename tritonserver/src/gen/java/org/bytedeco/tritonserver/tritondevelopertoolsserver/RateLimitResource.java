// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.tritonserver.tritondevelopertoolsserver;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tritonserver.global.tritondevelopertoolsserver.*;


//==============================================================================
/** Structure to hold rate limit resource for setting 'ServerOptions'. See here
 *  for more information:
 *  https://github.com/triton-inference-server/server/blob/main/docs/user_guide/rate_limiter.md. */
@Namespace("triton::developer_tools::server") @NoOffset @Properties(inherit = org.bytedeco.tritonserver.presets.tritondevelopertoolsserver.class)
public class RateLimitResource extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RateLimitResource(Pointer p) { super(p); }

  public RateLimitResource(@StdString BytePointer name, int count) { super((Pointer)null); allocate(name, count); }
  private native void allocate(@StdString BytePointer name, int count);
  public RateLimitResource(@StdString String name, int count) { super((Pointer)null); allocate(name, count); }
  private native void allocate(@StdString String name, int count);

  public RateLimitResource(@StdString BytePointer name, int count, int device) { super((Pointer)null); allocate(name, count, device); }
  private native void allocate(@StdString BytePointer name, int count, int device);
  public RateLimitResource(@StdString String name, int count, int device) { super((Pointer)null); allocate(name, count, device); }
  private native void allocate(@StdString String name, int count, int device);

  // The name of the resource.
  public native @StdString BytePointer name_(); public native RateLimitResource name_(BytePointer setter);
  // The count of the resource.
  public native int count_(); public native RateLimitResource count_(int setter);
  // The device identifier for the resource. This field is optional and if not
  // specified will be applied to every device. The device value is ignored for
  // a global resource. The server will use the rate limiter configuration
  // specified for instance groups in model config to determine whether resource
  // is global. In case of conflicting resource type in different model
  // configurations, server will raise an appropriate error while loading model.
  public native int device_(); public native RateLimitResource device_(int setter);
}
