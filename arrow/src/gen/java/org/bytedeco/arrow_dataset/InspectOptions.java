// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_dataset;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;
import org.bytedeco.parquet.*;
import static org.bytedeco.arrow.global.parquet.*;

import static org.bytedeco.arrow.global.arrow_dataset.*;


@Namespace("arrow::dataset") @Properties(inherit = org.bytedeco.arrow.presets.arrow_dataset.class)
public class InspectOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public InspectOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InspectOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InspectOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public InspectOptions position(long position) {
        return (InspectOptions)super.position(position);
    }
    @Override public InspectOptions getPointer(long i) {
        return new InspectOptions((Pointer)this).position(position + i);
    }

  /** See {@code fragments} property. */
  
  ///
  @MemberGetter public static native int kInspectAllFragments();
  public static final int kInspectAllFragments = kInspectAllFragments();

  /** Indicate how many fragments should be inspected to infer the unified dataset
   *  schema. Limiting the number of fragments accessed improves the latency of
   *  the discovery process when dealing with a high number of fragments and/or
   *  high latency file systems.
   * 
   *  The default value of {@code 1} inspects the schema of the first (in no particular
   *  order) fragment only. If the dataset has a uniform schema for all fragments,
   *  this default is the optimal value. In order to inspect all fragments and
   *  robustly unify their potentially varying schemas, set this option to
   *  {@code kInspectAllFragments}. A value of {@code 0} disables inspection of fragments
   *  altogether so only the partitioning schema will be inspected. */
  public native int fragments(); public native InspectOptions fragments(int setter);
}
