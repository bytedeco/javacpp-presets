// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_dataset;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;
import org.bytedeco.parquet.*;
import static org.bytedeco.arrow.global.parquet.*;

import static org.bytedeco.arrow.global.arrow_dataset.*;


/** \brief Implementation provided by lambda or other callable */
@Namespace("arrow::dataset") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow_dataset.class)
public class FunctionPartitioning extends Partitioning {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FunctionPartitioning(Pointer p) { super(p); }


  public FunctionPartitioning(@SharedPtr @ByVal Schema schema, @ByVal @Cast("arrow::dataset::FunctionPartitioning::ParseImpl*") CustomOpenWithCompression parse_impl,
                         @ByVal(nullValue = "arrow::dataset::FunctionPartitioning::FormatImpl(nullptr)") @Cast("arrow::dataset::FunctionPartitioning::FormatImpl*") CustomOpenWithCompression format_impl, @StdString String name/*="function"*/) { super((Pointer)null); allocate(schema, parse_impl, format_impl, name); }
  private native void allocate(@SharedPtr @ByVal Schema schema, @ByVal @Cast("arrow::dataset::FunctionPartitioning::ParseImpl*") CustomOpenWithCompression parse_impl,
                         @ByVal(nullValue = "arrow::dataset::FunctionPartitioning::FormatImpl(nullptr)") @Cast("arrow::dataset::FunctionPartitioning::FormatImpl*") CustomOpenWithCompression format_impl, @StdString String name/*="function"*/);
  public FunctionPartitioning(@SharedPtr @ByVal Schema schema, @ByVal @Cast("arrow::dataset::FunctionPartitioning::ParseImpl*") CustomOpenWithCompression parse_impl) { super((Pointer)null); allocate(schema, parse_impl); }
  private native void allocate(@SharedPtr @ByVal Schema schema, @ByVal @Cast("arrow::dataset::FunctionPartitioning::ParseImpl*") CustomOpenWithCompression parse_impl);
  public FunctionPartitioning(@SharedPtr @ByVal Schema schema, @ByVal @Cast("arrow::dataset::FunctionPartitioning::ParseImpl*") CustomOpenWithCompression parse_impl,
                         @ByVal(nullValue = "arrow::dataset::FunctionPartitioning::FormatImpl(nullptr)") @Cast("arrow::dataset::FunctionPartitioning::FormatImpl*") CustomOpenWithCompression format_impl, @StdString BytePointer name/*="function"*/) { super((Pointer)null); allocate(schema, parse_impl, format_impl, name); }
  private native void allocate(@SharedPtr @ByVal Schema schema, @ByVal @Cast("arrow::dataset::FunctionPartitioning::ParseImpl*") CustomOpenWithCompression parse_impl,
                         @ByVal(nullValue = "arrow::dataset::FunctionPartitioning::FormatImpl(nullptr)") @Cast("arrow::dataset::FunctionPartitioning::FormatImpl*") CustomOpenWithCompression format_impl, @StdString BytePointer name/*="function"*/);

  public native @StdString String type_name();

  public native @ByVal ExpressionResult Parse(@StdString String path);
  public native @ByVal ExpressionResult Parse(@StdString BytePointer path);

  public native @ByVal StringResult Format(@Const @ByRef Expression expr);

  public native @ByVal PartitionedBatchesResult Partition(
        @SharedPtr @Cast({"", "std::shared_ptr<arrow::RecordBatch>"}) RecordBatch batch);
}
