// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_dataset;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;
import org.bytedeco.parquet.*;
import static org.bytedeco.arrow.global.parquet.*;

import static org.bytedeco.arrow.global.arrow_dataset.*;


@Namespace("arrow::dataset") @Properties(inherit = org.bytedeco.arrow.presets.arrow_dataset.class)
public class FinishOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public FinishOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FinishOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FinishOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public FinishOptions position(long position) {
        return (FinishOptions)super.position(position);
    }
    @Override public FinishOptions getPointer(long i) {
        return new FinishOptions((Pointer)this).position(position + i);
    }

  /** Finalize the dataset with this given schema. If the schema is not
   *  provided, infer the schema via the Inspect, see the {@code inspect_options}
   *  property. */
  public native @SharedPtr @ByRef Schema schema(); public native FinishOptions schema(Schema setter);

  /** If the schema is not provided, it will be discovered by passing the
   *  following options to {@code DatasetDiscovery::Inspect}. */
  public native @ByRef InspectOptions inspect_options(); public native FinishOptions inspect_options(InspectOptions setter);

  /** Indicate if the given Schema (when specified), should be validated against
   *  the fragments' schemas. {@code inspect_options} will control how many fragments
   *  are checked. */
  public native @Cast("bool") boolean validate_fragments(); public native FinishOptions validate_fragments(boolean setter);
}
