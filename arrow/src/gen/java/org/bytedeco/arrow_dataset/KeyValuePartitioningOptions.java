// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_dataset;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;
import org.bytedeco.parquet.*;
import static org.bytedeco.arrow.global.parquet.*;

import static org.bytedeco.arrow.global.arrow_dataset.*;


/** \brief Options for key-value based partitioning (hive/directory). */
@Namespace("arrow::dataset") @Properties(inherit = org.bytedeco.arrow.presets.arrow_dataset.class)
public class KeyValuePartitioningOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public KeyValuePartitioningOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public KeyValuePartitioningOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public KeyValuePartitioningOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public KeyValuePartitioningOptions position(long position) {
        return (KeyValuePartitioningOptions)super.position(position);
    }
    @Override public KeyValuePartitioningOptions getPointer(long i) {
        return new KeyValuePartitioningOptions((Pointer)this).offsetAddress(i);
    }

  /** After splitting a path into components, decode the path components
   *  before parsing according to this scheme. */
  public native SegmentEncoding segment_encoding(); public native KeyValuePartitioningOptions segment_encoding(SegmentEncoding setter);
}
