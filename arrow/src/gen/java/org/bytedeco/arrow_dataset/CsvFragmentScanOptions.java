// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_dataset;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;
import org.bytedeco.parquet.*;
import static org.bytedeco.arrow.global.parquet.*;

import static org.bytedeco.arrow.global.arrow_dataset.*;


/** \brief Per-scan options for CSV fragments */
@Namespace("arrow::dataset") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow_dataset.class)
public class CsvFragmentScanOptions extends FragmentScanOptions {
    static { Loader.load(); }
    /** Default native constructor. */
    public CsvFragmentScanOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CsvFragmentScanOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CsvFragmentScanOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CsvFragmentScanOptions position(long position) {
        return (CsvFragmentScanOptions)super.position(position);
    }
    @Override public CsvFragmentScanOptions getPointer(long i) {
        return new CsvFragmentScanOptions((Pointer)this).offsetAddress(i);
    }

  public native @StdString String type_name();

  /** CSV conversion options */
  
  ///
  public native @ByRef ConvertOptions convert_options(); public native CsvFragmentScanOptions convert_options(ConvertOptions setter);

  /** CSV reading options
   * 
   *  Note that use_threads is always ignored. */
  public native @ByRef ReadOptions read_options(); public native CsvFragmentScanOptions read_options(ReadOptions setter);
}
