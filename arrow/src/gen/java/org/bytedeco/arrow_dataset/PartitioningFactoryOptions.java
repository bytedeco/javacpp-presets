// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_dataset;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;
import org.bytedeco.parquet.*;
import static org.bytedeco.arrow.global.parquet.*;

import static org.bytedeco.arrow.global.arrow_dataset.*;


@Namespace("arrow::dataset") @Properties(inherit = org.bytedeco.arrow.presets.arrow_dataset.class)
public class PartitioningFactoryOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PartitioningFactoryOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PartitioningFactoryOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PartitioningFactoryOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PartitioningFactoryOptions position(long position) {
        return (PartitioningFactoryOptions)super.position(position);
    }
    @Override public PartitioningFactoryOptions getPointer(long i) {
        return new PartitioningFactoryOptions((Pointer)this).position(position + i);
    }

  /** When inferring a schema for partition fields, yield dictionary encoded types
   *  instead of plain. This can be more efficient when materializing virtual
   *  columns, and Expressions parsed by the finished Partitioning will include
   *  dictionaries of all unique inspected values for each field. */
  public native @Cast("bool") boolean infer_dictionary(); public native PartitioningFactoryOptions infer_dictionary(boolean setter);
}
