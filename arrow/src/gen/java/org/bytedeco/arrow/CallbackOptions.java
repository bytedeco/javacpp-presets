// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief Options that control how a continuation is run */
@Namespace("arrow") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class CallbackOptions extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CallbackOptions() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CallbackOptions(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CallbackOptions(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CallbackOptions position(long position) {
        return (CallbackOptions)super.position(position);
    }
    @Override public CallbackOptions getPointer(long i) {
        return new CallbackOptions((Pointer)this).offsetAddress(i);
    }

  /** Describe whether the callback should be run synchronously or scheduled */
  public native ShouldSchedule should_schedule(); public native CallbackOptions should_schedule(ShouldSchedule setter);
  /** If the callback is scheduled then this is the executor it should be scheduled
   *  on.  If this is NULL then should_schedule must be Never */
  public native Executor executor(); public native CallbackOptions executor(Executor setter);

  public static native @ByVal CallbackOptions Defaults();
}
