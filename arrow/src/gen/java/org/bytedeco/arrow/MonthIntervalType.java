// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief Represents a number of months.
 * 
 *  Type representing a number of months.  Corresponds to YearMonth type
 *  in Schema.fbs (years are defined as 12 months). */
@Namespace("arrow") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class MonthIntervalType extends IntervalType {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MonthIntervalType(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MonthIntervalType(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MonthIntervalType position(long position) {
        return (MonthIntervalType)super.position(position);
    }
    @Override public MonthIntervalType getPointer(long i) {
        return new MonthIntervalType((Pointer)this).position(position + i);
    }

  @MemberGetter public static native @Cast("const arrow::Type::type") int type_id();
  public static final int type_id = type_id();

  public static native String type_name();

  public native IntervalType.type interval_type();

  public native int bit_width();

  public MonthIntervalType() { super((Pointer)null); allocate(); }
  private native void allocate();

  public native @StdString String ToString();
  public native @StdString String name();
}
