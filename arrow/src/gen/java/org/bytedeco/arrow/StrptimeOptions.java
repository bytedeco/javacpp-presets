// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class StrptimeOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StrptimeOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public StrptimeOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public StrptimeOptions position(long position) {
        return (StrptimeOptions)super.position(position);
    }
    @Override public StrptimeOptions getPointer(long i) {
        return new StrptimeOptions((Pointer)this).offsetAddress(i);
    }

  public StrptimeOptions(@StdString String format, TimeUnit.type unit) { super((Pointer)null); allocate(format, unit); }
  private native void allocate(@StdString String format, TimeUnit.type unit);
  public StrptimeOptions(@StdString BytePointer format, @Cast("arrow::TimeUnit::type") int unit) { super((Pointer)null); allocate(format, unit); }
  private native void allocate(@StdString BytePointer format, @Cast("arrow::TimeUnit::type") int unit);
  public StrptimeOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();

  public native @StdString String format(); public native StrptimeOptions format(String setter);
  public native TimeUnit.type unit(); public native StrptimeOptions unit(TimeUnit.type setter);
}
