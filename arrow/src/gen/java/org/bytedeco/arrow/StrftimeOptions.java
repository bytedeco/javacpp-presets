// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class StrftimeOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StrftimeOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public StrftimeOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public StrftimeOptions position(long position) {
        return (StrftimeOptions)super.position(position);
    }
    @Override public StrftimeOptions getPointer(long i) {
        return new StrftimeOptions((Pointer)this).offsetAddress(i);
    }

  public StrftimeOptions(@StdString String format, @StdString String locale/*="C"*/) { super((Pointer)null); allocate(format, locale); }
  private native void allocate(@StdString String format, @StdString String locale/*="C"*/);
  public StrftimeOptions(@StdString String format) { super((Pointer)null); allocate(format); }
  private native void allocate(@StdString String format);
  public StrftimeOptions(@StdString BytePointer format, @StdString BytePointer locale/*="C"*/) { super((Pointer)null); allocate(format, locale); }
  private native void allocate(@StdString BytePointer format, @StdString BytePointer locale/*="C"*/);
  public StrftimeOptions(@StdString BytePointer format) { super((Pointer)null); allocate(format); }
  private native void allocate(@StdString BytePointer format);
  public StrftimeOptions() { super((Pointer)null); allocate(); }
  private native void allocate();

  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();

  @MemberGetter public static native String kDefaultFormat();

  /** The desired format string. */
  public native @StdString String format(); public native StrftimeOptions format(String setter);
  /** The desired output locale string. */
  public native @StdString String locale(); public native StrftimeOptions locale(String setter);
}
