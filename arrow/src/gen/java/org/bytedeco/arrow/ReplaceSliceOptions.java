// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class ReplaceSliceOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ReplaceSliceOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ReplaceSliceOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ReplaceSliceOptions position(long position) {
        return (ReplaceSliceOptions)super.position(position);
    }
    @Override public ReplaceSliceOptions getPointer(long i) {
        return new ReplaceSliceOptions((Pointer)this).offsetAddress(i);
    }

  public ReplaceSliceOptions(@Cast("int64_t") long start, @Cast("int64_t") long stop, @StdString String replacement) { super((Pointer)null); allocate(start, stop, replacement); }
  private native void allocate(@Cast("int64_t") long start, @Cast("int64_t") long stop, @StdString String replacement);
  public ReplaceSliceOptions(@Cast("int64_t") long start, @Cast("int64_t") long stop, @StdString BytePointer replacement) { super((Pointer)null); allocate(start, stop, replacement); }
  private native void allocate(@Cast("int64_t") long start, @Cast("int64_t") long stop, @StdString BytePointer replacement);
  public ReplaceSliceOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();

  /** Index to start slicing at */
  public native @Cast("int64_t") long start(); public native ReplaceSliceOptions start(long setter);
  /** Index to stop slicing at */
  public native @Cast("int64_t") long stop(); public native ReplaceSliceOptions stop(long setter);
  /** String to replace the slice with */
  public native @StdString String replacement(); public native ReplaceSliceOptions replacement(String setter);
}
