// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief Represents an elapsed time without any relation to a calendar artifact. */
@Namespace("arrow") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class DurationType extends TemporalType {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DurationType(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DurationType(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DurationType position(long position) {
        return (DurationType)super.position(position);
    }
    @Override public DurationType getPointer(long i) {
        return new DurationType((Pointer)this).position(position + i);
    }
    public ParametricType asParametricType() { return asParametricType(this); }
    @Namespace public static native @Name("static_cast<arrow::ParametricType*>") ParametricType asParametricType(DurationType pointer);


  @MemberGetter public static native @Cast("const arrow::Type::type") int type_id();
  public static final int type_id = type_id();

  public static native String type_name();

  public native int bit_width();

  public DurationType(TimeUnit.type unit/*=arrow::TimeUnit::MILLI*/) { super((Pointer)null); allocate(unit); }
  private native void allocate(TimeUnit.type unit/*=arrow::TimeUnit::MILLI*/);
  public DurationType() { super((Pointer)null); allocate(); }
  private native void allocate();
  public DurationType(@Cast("arrow::TimeUnit::type") int unit/*=arrow::TimeUnit::MILLI*/) { super((Pointer)null); allocate(unit); }
  private native void allocate(@Cast("arrow::TimeUnit::type") int unit/*=arrow::TimeUnit::MILLI*/);

  public native @StdString String ToString();
  public native @StdString String name();

  public native TimeUnit.type unit();
}
