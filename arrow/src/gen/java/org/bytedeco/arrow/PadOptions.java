// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class PadOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PadOptions(Pointer p) { super(p); }

  public PadOptions(@Cast("int64_t") long width, @StdString String padding/*=" "*/) { super((Pointer)null); allocate(width, padding); }
  private native void allocate(@Cast("int64_t") long width, @StdString String padding/*=" "*/);
  public PadOptions(@Cast("int64_t") long width) { super((Pointer)null); allocate(width); }
  private native void allocate(@Cast("int64_t") long width);
  public PadOptions(@Cast("int64_t") long width, @StdString BytePointer padding/*=" "*/) { super((Pointer)null); allocate(width, padding); }
  private native void allocate(@Cast("int64_t") long width, @StdString BytePointer padding/*=" "*/);
  public PadOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();

  /** The desired string length. */
  public native @Cast("int64_t") long width(); public native PadOptions width(long setter);
  /** What to pad the string with. Should be one codepoint (Unicode)/byte (ASCII). */
  public native @StdString String padding(); public native PadOptions padding(String setter);
}
