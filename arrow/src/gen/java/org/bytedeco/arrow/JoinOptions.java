// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** Options for var_args_join. */
@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class JoinOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public JoinOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public JoinOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public JoinOptions position(long position) {
        return (JoinOptions)super.position(position);
    }
    @Override public JoinOptions getPointer(long i) {
        return new JoinOptions((Pointer)this).offsetAddress(i);
    }

  /** How to handle null values. (A null separator always results in a null output.) */
  public enum NullHandlingBehavior {
    /** A null in any input results in a null in the output. */
    EMIT_NULL(0),
    /** Nulls in inputs are skipped. */
    SKIP(1),
    /** Nulls in inputs are replaced with the replacement string. */
    REPLACE(2);

      public final int value;
      private NullHandlingBehavior(int v) { this.value = v; }
      private NullHandlingBehavior(NullHandlingBehavior e) { this.value = e.value; }
      public NullHandlingBehavior intern() { for (NullHandlingBehavior e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }
  public JoinOptions(NullHandlingBehavior null_handling/*=arrow::compute::JoinOptions::EMIT_NULL*/,
                         @StdString String null_replacement/*=""*/) { super((Pointer)null); allocate(null_handling, null_replacement); }
  private native void allocate(NullHandlingBehavior null_handling/*=arrow::compute::JoinOptions::EMIT_NULL*/,
                         @StdString String null_replacement/*=""*/);
  public JoinOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  public JoinOptions(@Cast("arrow::compute::JoinOptions::NullHandlingBehavior") int null_handling/*=arrow::compute::JoinOptions::EMIT_NULL*/,
                         @StdString BytePointer null_replacement/*=""*/) { super((Pointer)null); allocate(null_handling, null_replacement); }
  private native void allocate(@Cast("arrow::compute::JoinOptions::NullHandlingBehavior") int null_handling/*=arrow::compute::JoinOptions::EMIT_NULL*/,
                         @StdString BytePointer null_replacement/*=""*/);
  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();
  public static native @ByVal JoinOptions Defaults();
  public native NullHandlingBehavior null_handling(); public native JoinOptions null_handling(NullHandlingBehavior setter);
  public native @StdString String null_replacement(); public native JoinOptions null_replacement(String setter);
}
