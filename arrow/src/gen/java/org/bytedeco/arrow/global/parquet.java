// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.arrow.global;

import org.bytedeco.parquet.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;

public class parquet extends org.bytedeco.arrow.presets.parquet {
    static { Loader.load(); }

// Targeting ../../parquet/IntList.java


// Targeting ../../parquet/EncodingIntMap.java


// Targeting ../../parquet/ColumnDecryptionPropertiesStringMap.java


// Targeting ../../parquet/NodeVector.java


// Parsed from parquet/api/io.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include "parquet/deprecated_io.h"
// #include "parquet/exception.h"


// Parsed from parquet/api/schema.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// Schemas
// #include "parquet/schema.h"


// Parsed from parquet/api/reader.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// Column reader API
// #include "parquet/column_reader.h"
// #include "parquet/column_scanner.h"
// #include "parquet/exception.h"
// #include "parquet/file_reader.h"
// #include "parquet/metadata.h"
// #include "parquet/platform.h"
// #include "parquet/printer.h"
// #include "parquet/properties.h"
// #include "parquet/statistics.h"

// Schemas
// #include "parquet/api/schema.h"

// IO
// #include "parquet/api/io.h"


// Parsed from parquet/api/writer.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include "parquet/api/io.h"
// #include "parquet/api/schema.h"
// #include "parquet/column_writer.h"
// #include "parquet/exception.h"
// #include "parquet/file_writer.h"
// #include "parquet/statistics.h"


// Parsed from parquet/platform.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>
// #include <memory>

// #include "arrow/buffer.h"              // IWYU pragma: export
// #include "arrow/io/interfaces.h"       // IWYU pragma: export
// #include "arrow/io/memory.h"           // IWYU pragma: export
// #include "arrow/memory_pool.h"         // IWYU pragma: export
// #include "arrow/status.h"              // IWYU pragma: export
// #include "arrow/util/bit_util.h"       // IWYU pragma: export
// #include "arrow/util/bitmap_writer.h"  // IWYU pragma: export
// #include "arrow/util/compression.h"    // IWYU pragma: export
// #include "arrow/util/macros.h"         // IWYU pragma: export
// #include "arrow/util/string_view.h"    // IWYU pragma: export

// #if defined(_WIN32) || defined(__CYGWIN__)

// #if defined(_MSC_VER)
// #pragma warning(push)
// Disable warning for STL types usage in DLL interface
// https://web.archive.org/web/20130317015847/http://connect.microsoft.com/VisualStudio/feedback/details/696593/vc-10-vs-2010-basic-string-exports
// #pragma warning(disable : 4275 4251)
// Disable diamond inheritance warnings
// #pragma warning(disable : 4250)
// Disable macro redefinition warnings
// #pragma warning(disable : 4005)
// Disable extern before exported template warnings
// #pragma warning(disable : 4910)
// #else
// #pragma GCC diagnostic ignored "-Wattributes"
// #endif

// #ifdef PARQUET_STATIC
// #define PARQUET_EXPORT
// #elif defined(PARQUET_EXPORTING)
// #define PARQUET_EXPORT __declspec(dllexport)
// #else
// #define PARQUET_EXPORT __declspec(dllimport)
// #endif

// #define PARQUET_NO_EXPORT

// #else  // Not Windows
// #ifndef PARQUET_EXPORT
// #define PARQUET_EXPORT __attribute__((visibility("default")))
// #endif
// #ifndef PARQUET_NO_EXPORT
// #define PARQUET_NO_EXPORT __attribute__((visibility("hidden")))
// #endif
// #endif  // Non-Windows

// This is a complicated topic, some reading on it:
// http://www.codesynthesis.com/~boris/blog/2010/01/18/dll-export-cxx-templates/
// #if defined(_MSC_VER) || defined(__clang__)
// #define PARQUET_TEMPLATE_CLASS_EXPORT
// #define PARQUET_TEMPLATE_EXPORT PARQUET_EXPORT
// #else
// #define PARQUET_TEMPLATE_CLASS_EXPORT PARQUET_EXPORT
// #define PARQUET_TEMPLATE_EXPORT
// #endif

// #define PARQUET_DISALLOW_COPY_AND_ASSIGN ARROW_DISALLOW_COPY_AND_ASSIGN

// #define PARQUET_NORETURN ARROW_NORETURN
// #define PARQUET_DEPRECATED ARROW_DEPRECATED

// If ARROW_VALGRIND set when compiling unit tests, also define
// PARQUET_VALGRIND
// #ifdef ARROW_VALGRIND
// #define PARQUET_VALGRIND
// #endif

@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kDefaultOutputStreamSize();

@Namespace("parquet") @MemberGetter public static native short kNonPageOrdinal();

@Namespace("parquet") public static native @SharedPtr BufferOutputStream CreateOutputStream(
    MemoryPool pool/*=arrow::default_memory_pool()*/);
@Namespace("parquet") public static native @SharedPtr BufferOutputStream CreateOutputStream();

@Namespace("parquet") public static native @SharedPtr ResizableBuffer AllocateBuffer(
    MemoryPool pool/*=arrow::default_memory_pool()*/, @Cast("int64_t") long size/*=0*/);
@Namespace("parquet") public static native @SharedPtr ResizableBuffer AllocateBuffer();

  // namespace parquet


// Parsed from parquet/type_fwd.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once
// Targeting ../../parquet/ParquetVersion.java


// Targeting ../../parquet/WriterPropertiesBuilder.java


// Targeting ../../parquet/ArrowWriterPropertiesBuilder.java



  // namespace arrow
  // namespace parquet


// Parsed from parquet/types.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <algorithm>
// #include <cstdint>
// #include <cstring>
// #include <memory>
// #include <sstream>
// #include <string>

// #include "arrow/util/string_view.h"

// #include "parquet/platform.h"
// #include "parquet/type_fwd.h"

  // namespace util
  // namespace arrow
// Targeting ../../parquet/Type.java


// Targeting ../../parquet/ConvertedType.java



// forward declaration


// Targeting ../../parquet/Repetition.java


// Targeting ../../parquet/SortOrder.java


// Targeting ../../parquet/DecimalMetadata.java




// Targeting ../../parquet/LogicalType.java


// Targeting ../../parquet/StringLogicalType.java


// Targeting ../../parquet/MapLogicalType.java


// Targeting ../../parquet/ListLogicalType.java


// Targeting ../../parquet/EnumLogicalType.java


// Targeting ../../parquet/DecimalLogicalType.java


// Targeting ../../parquet/DateLogicalType.java


// Targeting ../../parquet/TimeLogicalType.java


// Targeting ../../parquet/TimestampLogicalType.java


// Targeting ../../parquet/IntervalLogicalType.java


// Targeting ../../parquet/IntLogicalType.java


// Targeting ../../parquet/NullLogicalType.java


// Targeting ../../parquet/JSONLogicalType.java


// Targeting ../../parquet/BSONLogicalType.java


// Targeting ../../parquet/UUIDLogicalType.java


// Targeting ../../parquet/NoLogicalType.java


// Targeting ../../parquet/UnknownLogicalType.java


// Targeting ../../parquet/Encoding.java



/** \brief Return true if Parquet supports indicated compression type */
@Namespace("parquet") public static native @Cast("bool") boolean IsCodecSupported(Compression.type codec);
@Namespace("parquet") public static native @Cast("bool") boolean IsCodecSupported(@Cast("arrow::Compression::type") int codec);

@Namespace("parquet") public static native @UniquePtr Codec GetCodec(Compression.type codec);
@Namespace("parquet") public static native @UniquePtr Codec GetCodec(@Cast("arrow::Compression::type") int codec);

@Namespace("parquet") public static native @UniquePtr Codec GetCodec(Compression.type codec, int compression_level);
@Namespace("parquet") public static native @UniquePtr Codec GetCodec(@Cast("arrow::Compression::type") int codec, int compression_level);
// Targeting ../../parquet/ParquetCipher.java


// Targeting ../../parquet/AadMetadata.java


// Targeting ../../parquet/EncryptionAlgorithm.java


// Targeting ../../parquet/PageType.java


// Targeting ../../parquet/ColumnOrder.java


// Targeting ../../parquet/ByteArray.java



@Namespace("parquet") public static native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef ByteArray left, @Const @ByRef ByteArray right);

@Namespace("parquet") public static native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef ByteArray left, @Const @ByRef ByteArray right);
// Targeting ../../parquet/FixedLenByteArray.java



// Julian day at unix epoch.
//
// The Julian Day Number (JDN) is the integer assigned to a whole solar day in
// the Julian day count starting from noon Universal time, with Julian day
// number 0 assigned to the day starting at noon on Monday, January 1, 4713 BC,
// proleptic Julian calendar (November 24, 4714 BC, in the proleptic Gregorian
// calendar),
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kJulianToUnixEpochDays();
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kSecondsPerDay();
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kMillisecondsPerDay();
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kMicrosecondsPerDay();
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kNanosecondsPerDay();


// Targeting ../../parquet/Int96.java




@Namespace("parquet") public static native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef Int96 left, @Const @ByRef Int96 right);

@Namespace("parquet") public static native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef Int96 left, @Const @ByRef Int96 right);

@Namespace("parquet") public static native @StdString String ByteArrayToString(@Const @ByRef ByteArray a);

@Namespace("parquet") public static native void Int96SetNanoSeconds(@ByRef Int96 i96, @Cast("int64_t") long nanoseconds);

@Namespace("parquet") public static native @Cast("int64_t") long Int96GetNanoSeconds(@Const @ByRef Int96 i96);

@Namespace("parquet") public static native @StdString String Int96ToString(@Const @ByRef Int96 a);

@Namespace("parquet") public static native @StdString String FixedLenByteArrayToString(@Const @ByRef FixedLenByteArray a, int len);
// Targeting ../../parquet/type_traits.java



@Namespace("parquet") public static native @StdString String EncodingToString(Encoding.type t);
@Namespace("parquet") public static native @StdString BytePointer EncodingToString(@Cast("parquet::Encoding::type") int t);

@Namespace("parquet") public static native @StdString String ConvertedTypeToString(ConvertedType.type t);
@Namespace("parquet") public static native @StdString BytePointer ConvertedTypeToString(@Cast("parquet::ConvertedType::type") int t);

@Namespace("parquet") public static native @StdString String TypeToString(org.bytedeco.parquet.Type.type t);
@Namespace("parquet") public static native @StdString BytePointer TypeToString(@Cast("parquet::Type::type") int t);

@Namespace("parquet") public static native int GetTypeByteSize(org.bytedeco.parquet.Type.type t);
@Namespace("parquet") public static native int GetTypeByteSize(@Cast("parquet::Type::type") int t);

@Namespace("parquet") public static native org.bytedeco.parquet.SortOrder.type DefaultSortOrder(org.bytedeco.parquet.Type.type primitive);
@Namespace("parquet") public static native @Cast("parquet::SortOrder::type") int DefaultSortOrder(@Cast("parquet::Type::type") int primitive);

@Namespace("parquet") public static native org.bytedeco.parquet.SortOrder.type GetSortOrder(ConvertedType.type converted,
                                            org.bytedeco.parquet.Type.type primitive);
@Namespace("parquet") public static native @Cast("parquet::SortOrder::type") int GetSortOrder(@Cast("parquet::ConvertedType::type") int converted,
                                            @Cast("parquet::Type::type") int primitive);

@Namespace("parquet") public static native org.bytedeco.parquet.SortOrder.type GetSortOrder(
    @Const @Cast("const parquet::LogicalType*") @SharedPtr @ByRef LogicalType logical_type, org.bytedeco.parquet.Type.type primitive);
@Namespace("parquet") public static native @Cast("parquet::SortOrder::type") int GetSortOrder(
    @Const @Cast("const parquet::LogicalType*") @SharedPtr @ByRef LogicalType logical_type, @Cast("parquet::Type::type") int primitive);

  // namespace parquet


// Parsed from parquet/deprecated_io.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// DEPRECATED IO INTERFACES: We have transitioned to using the Apache
// Arrow file input and output abstract interfaces defined in
// arrow/io/interfaces.h. These legacy interfaces are being preserved
// through a wrapper layer for one to two releases

// #pragma once

// #include <cstdint>
// #include <memory>

// #include "parquet/platform.h"
// Targeting ../../parquet/FileInterface.java


// Targeting ../../parquet/RandomAccessSource.java


// Targeting ../../parquet/ParquetInputWrapper.java


// Targeting ../../parquet/ParquetOutputWrapper.java



  // namespace parquet


// Parsed from parquet/exception.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <exception>
// #include <sstream>
// #include <string>
// #include <utility>

// #include "arrow/type_fwd.h"
// #include "arrow/util/string_builder.h"
// #include "parquet/platform.h"

// PARQUET-1085
// #if !defined(ARROW_UNUSED)
// #define ARROW_UNUSED(x) UNUSED(x)
// #endif

// Parquet exception to Arrow Status

// #define PARQUET_CATCH_NOT_OK(s)
//   try {
//     (s);
//   } catch (const ::parquet::ParquetStatusException& e) {
//     return e.status();
//   } catch (const ::parquet::ParquetException& e) {
//     return ::arrow::Status::IOError(e.what());
//   }

// #define PARQUET_CATCH_AND_RETURN(s)
//   try {
//     return (s);
//   } catch (const ::parquet::ParquetStatusException& e) {
//     return e.status();
//   } catch (const ::parquet::ParquetException& e) {
//     return ::arrow::Status::IOError(e.what());
//   }

// Arrow Status to Parquet exception

// #define PARQUET_IGNORE_NOT_OK(s)
//   do {
//     ::arrow::Status _s = ::arrow::internal::GenericToStatus(s);
//     ARROW_UNUSED(_s);
//   } while (0)

// #define PARQUET_THROW_NOT_OK(s)
//   do {
//     ::arrow::Status _s = ::arrow::internal::GenericToStatus(s);
//     if (!_s.ok()) {
//       throw ::parquet::ParquetStatusException(std::move(_s));
//     }
//   } while (0)

// #define PARQUET_ASSIGN_OR_THROW_IMPL(status_name, lhs, rexpr)
//   auto status_name = (rexpr);
//   PARQUET_THROW_NOT_OK(status_name.status());
//   lhs = std::move(status_name).ValueOrDie();

// #define PARQUET_ASSIGN_OR_THROW(lhs, rexpr)
//   PARQUET_ASSIGN_OR_THROW_IMPL(ARROW_ASSIGN_OR_RAISE_NAME(_error_or_value, __COUNTER__),
//                                lhs, rexpr);
// Targeting ../../parquet/ParquetException.java



// Support printing a ParquetException.
// This is needed for clang-on-MSVC as there operator<< is not defined for
// std::exception.
@Namespace("parquet") public static native @Cast("std::ostream*") @ByRef @Name("operator <<") Pointer shiftLeft(@Cast("std::ostream*") @ByRef Pointer os, @Const @ByRef ParquetException exception);
// Targeting ../../parquet/ParquetStatusException.java


// Targeting ../../parquet/ParquetInvalidOrCorruptedFileException.java



// #define BEGIN_PARQUET_CATCH_EXCEPTIONS try {
// #define END_PARQUET_CATCH_EXCEPTIONS
//   }
//   catch (const ::parquet::ParquetException& e) {
//     return ::arrow::Status::IOError(e.what());
//   }

  // namespace parquet


// Parsed from parquet/level_comparison.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// #pragma once

// #include <algorithm>
// #include <cstdint>

// #include "parquet/platform.h"

/** Builds a  bitmap where each set bit indicates the corresponding level is greater
 *  than rhs. */
@Namespace("parquet::internal") public static native @Cast("uint64_t") long GreaterThanBitmap(@Const ShortPointer levels, @Cast("int64_t") long num_levels,
                                          short rhs);
@Namespace("parquet::internal") public static native @Cast("uint64_t") long GreaterThanBitmap(@Const ShortBuffer levels, @Cast("int64_t") long num_levels,
                                          short rhs);
@Namespace("parquet::internal") public static native @Cast("uint64_t") long GreaterThanBitmap(@Const short[] levels, @Cast("int64_t") long num_levels,
                                          short rhs);
// Targeting ../../parquet/MinMax.java





  // namespace internal
  // namespace parquet


// Parsed from parquet/level_conversion.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>

// #include "parquet/platform.h"
// #include "parquet/schema.h"
// Targeting ../../parquet/LevelInfo.java


// Targeting ../../parquet/ValidityBitmapInputOutput.java



//  Converts def_levels to validity bitmaps for non-list arrays and structs that have
//  at least one member that is not a list and has no list descendents.
//  For lists use DefRepLevelsToList and structs where all descendants contain
//  a list use DefRepLevelsToBitmap.
@Namespace("parquet::internal") public static native void DefLevelsToBitmap(@Const ShortPointer def_levels, @Cast("int64_t") long num_def_levels,
                                      @ByVal LevelInfo level_info,
                                      ValidityBitmapInputOutput output);
@Namespace("parquet::internal") public static native void DefLevelsToBitmap(@Const ShortBuffer def_levels, @Cast("int64_t") long num_def_levels,
                                      @ByVal LevelInfo level_info,
                                      ValidityBitmapInputOutput output);
@Namespace("parquet::internal") public static native void DefLevelsToBitmap(@Const short[] def_levels, @Cast("int64_t") long num_def_levels,
                                      @ByVal LevelInfo level_info,
                                      ValidityBitmapInputOutput output);

// Reconstructs a validity bitmap and list offsets for a list arrays based on
// def/rep levels. The first element of offsets will not be modified if rep_levels
// starts with a new list.  The first element of offsets will be used when calculating
// the next offset.  See documentation onf DefLevelsToBitmap for when to use this
// method vs the other ones in this file for reconstruction.
//
// Offsets must be sized to 1 + values_read_upper_bound.
@Namespace("parquet::internal") public static native void DefRepLevelsToList(@Const ShortPointer def_levels,
                                       @Const ShortPointer rep_levels, @Cast("int64_t") long num_def_levels,
                                       @ByVal LevelInfo level_info,
                                       ValidityBitmapInputOutput output,
                                       IntPointer offsets);
@Namespace("parquet::internal") public static native void DefRepLevelsToList(@Const ShortBuffer def_levels,
                                       @Const ShortBuffer rep_levels, @Cast("int64_t") long num_def_levels,
                                       @ByVal LevelInfo level_info,
                                       ValidityBitmapInputOutput output,
                                       IntBuffer offsets);
@Namespace("parquet::internal") public static native void DefRepLevelsToList(@Const short[] def_levels,
                                       @Const short[] rep_levels, @Cast("int64_t") long num_def_levels,
                                       @ByVal LevelInfo level_info,
                                       ValidityBitmapInputOutput output,
                                       int[] offsets);
@Namespace("parquet::internal") public static native void DefRepLevelsToList(@Const ShortPointer def_levels,
                                       @Const ShortPointer rep_levels, @Cast("int64_t") long num_def_levels,
                                       @ByVal LevelInfo level_info,
                                       ValidityBitmapInputOutput output,
                                       @Cast("int64_t*") LongPointer offsets);
@Namespace("parquet::internal") public static native void DefRepLevelsToList(@Const ShortBuffer def_levels,
                                       @Const ShortBuffer rep_levels, @Cast("int64_t") long num_def_levels,
                                       @ByVal LevelInfo level_info,
                                       ValidityBitmapInputOutput output,
                                       @Cast("int64_t*") LongBuffer offsets);
@Namespace("parquet::internal") public static native void DefRepLevelsToList(@Const short[] def_levels,
                                       @Const short[] rep_levels, @Cast("int64_t") long num_def_levels,
                                       @ByVal LevelInfo level_info,
                                       ValidityBitmapInputOutput output,
                                       @Cast("int64_t*") long[] offsets);

// Reconstructs a validity bitmap for a struct every member is a list or has
// a list descendant.  See documentation on DefLevelsToBitmap for when more
// details on this method compared to the other ones defined above.
@Namespace("parquet::internal") public static native void DefRepLevelsToBitmap(@Const ShortPointer def_levels,
                                         @Const ShortPointer rep_levels,
                                         @Cast("int64_t") long num_def_levels, @ByVal LevelInfo level_info,
                                         ValidityBitmapInputOutput output);
@Namespace("parquet::internal") public static native void DefRepLevelsToBitmap(@Const ShortBuffer def_levels,
                                         @Const ShortBuffer rep_levels,
                                         @Cast("int64_t") long num_def_levels, @ByVal LevelInfo level_info,
                                         ValidityBitmapInputOutput output);
@Namespace("parquet::internal") public static native void DefRepLevelsToBitmap(@Const short[] def_levels,
                                         @Const short[] rep_levels,
                                         @Cast("int64_t") long num_def_levels, @ByVal LevelInfo level_info,
                                         ValidityBitmapInputOutput output);

// This is exposed to ensure we can properly test a software simulated pext function
// (i.e. it isn't hidden by runtime dispatch).
@Namespace("parquet::internal") public static native @Cast("uint64_t") long TestOnlyExtractBitsSoftware(@Cast("uint64_t") long bitmap, @Cast("uint64_t") long selection);

  // namespace internal
  // namespace parquet


// Parsed from parquet/schema.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// This module contains the logical parquet-cpp types (independent of Thrift
// structures), schema nodes, and related type tools

// #pragma once

// #include <cstdint>
// #include <memory>
// #include <ostream>
// #include <string>
// #include <unordered_map>
// #include <utility>
// #include <vector>

// #include "parquet/platform.h"
// #include "parquet/types.h"
// Targeting ../../parquet/ListEncoding.java


// Targeting ../../parquet/ColumnPath.java


// Targeting ../../parquet/Node.java



// Save our breath all over the place with these typedefs
// Targeting ../../parquet/PrimitiveNode.java


// Targeting ../../parquet/GroupNode.java



// ----------------------------------------------------------------------
// Convenience primitive type factory functions

// #define PRIMITIVE_FACTORY(FuncName, TYPE)
//   static inline NodePtr FuncName(const std::string& name,
//                                  Repetition::type repetition = Repetition::OPTIONAL,
//                                  int field_id = -1) {
//     return PrimitiveNode::Make(name, repetition, Type::TYPE, ConvertedType::NONE,
//                                /*length=*/-1, /*precision=*/-1, /*scale=*/-1, field_id);
//   }

@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Boolean(@StdString String name,
                                 Repetition.type repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Boolean(@StdString String name);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Boolean(@StdString BytePointer name,
                                 @Cast("parquet::Repetition::type") int repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Boolean(@StdString BytePointer name);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Int32(@StdString String name,
                                 Repetition.type repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Int32(@StdString String name);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Int32(@StdString BytePointer name,
                                 @Cast("parquet::Repetition::type") int repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Int32(@StdString BytePointer name);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Int64(@StdString String name,
                                 Repetition.type repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Int64(@StdString String name);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Int64(@StdString BytePointer name,
                                 @Cast("parquet::Repetition::type") int repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Int64(@StdString BytePointer name);

@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Float(@StdString String name,
                                 Repetition.type repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Float(@StdString String name);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Float(@StdString BytePointer name,
                                 @Cast("parquet::Repetition::type") int repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Float(@StdString BytePointer name);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Double(@StdString String name,
                                 Repetition.type repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Double(@StdString String name);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Double(@StdString BytePointer name,
                                 @Cast("parquet::Repetition::type") int repetition/*=parquet::Repetition::OPTIONAL*/,
                                 int field_id/*=-1*/);
@Namespace("parquet::schema") public static native @SharedPtr @ByVal Node Double(@StdString BytePointer name);


@Namespace("parquet::schema") public static native void PrintSchema(@Const Node schema, @Cast("std::ostream*") @ByRef Pointer stream,
                                int indent_width/*=2*/);
@Namespace("parquet::schema") public static native void PrintSchema(@Const Node schema, @Cast("std::ostream*") @ByRef Pointer stream);


// Targeting ../../parquet/ColumnDescriptor.java


// Targeting ../../parquet/SchemaDescriptor.java



  // namespace parquet


// Parsed from parquet/column_reader.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>
// #include <memory>
// #include <utility>
// #include <vector>

// #include "parquet/exception.h"
// #include "parquet/level_conversion.h"
// #include "parquet/platform.h"
// #include "parquet/schema.h"
// #include "parquet/types.h"
// Targeting ../../parquet/BitReader.java



// Targeting ../../parquet/RleDecoder.java


  // namespace util


// Targeting ../../parquet/Decryptor.java


// Targeting ../../parquet/Page.java



// 16 MB is the default maximum page header size
@Namespace("parquet") @MemberGetter public static native @Cast("const uint32_t") int kDefaultMaxPageHeaderSize();
public static final int kDefaultMaxPageHeaderSize = kDefaultMaxPageHeaderSize();

// 16 KB is the default expected page header size
@Namespace("parquet") @MemberGetter public static native @Cast("const uint32_t") int kDefaultPageHeaderSize();
public static final int kDefaultPageHeaderSize = kDefaultPageHeaderSize();
// Targeting ../../parquet/LevelDecoder.java


// Targeting ../../parquet/CryptoContext.java


// Targeting ../../parquet/PageReader.java


// Targeting ../../parquet/ColumnReader.java



// API to read values from a single column. This is a main client facing API.
// Targeting ../../parquet/RecordReader.java


// Targeting ../../parquet/BinaryRecordReader.java


// Targeting ../../parquet/DictionaryRecordReader.java



  // namespace internal

  // namespace parquet


// Parsed from parquet/column_scanner.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <stdio.h>

// #include <cstdint>
// #include <memory>
// #include <ostream>
// #include <string>
// #include <utility>
// #include <vector>

// #include "parquet/column_reader.h"
// #include "parquet/exception.h"
// #include "parquet/platform.h"
// #include "parquet/schema.h"
// #include "parquet/types.h"

@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long DEFAULT_SCANNER_BATCH_SIZE();
public static final long DEFAULT_SCANNER_BATCH_SIZE = DEFAULT_SCANNER_BATCH_SIZE();
// Targeting ../../parquet/Scanner.java











@Namespace("parquet") public static native @Cast("int64_t") long ScanAllValues(int batch_size, ShortPointer def_levels,
                                     ShortPointer rep_levels, @Cast("uint8_t*") BytePointer values,
                                     @Cast("int64_t*") LongPointer values_buffered,
                                     ColumnReader reader);
@Namespace("parquet") public static native @Cast("int64_t") long ScanAllValues(int batch_size, ShortBuffer def_levels,
                                     ShortBuffer rep_levels, @Cast("uint8_t*") ByteBuffer values,
                                     @Cast("int64_t*") LongBuffer values_buffered,
                                     ColumnReader reader);
@Namespace("parquet") public static native @Cast("int64_t") long ScanAllValues(int batch_size, short[] def_levels,
                                     short[] rep_levels, @Cast("uint8_t*") byte[] values,
                                     @Cast("int64_t*") long[] values_buffered,
                                     ColumnReader reader);

  // namespace parquet


// Parsed from parquet/column_writer.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>
// #include <cstring>
// #include <memory>

// #include "parquet/exception.h"
// #include "parquet/platform.h"
// #include "parquet/types.h"
// Targeting ../../parquet/BitWriter.java



// Targeting ../../parquet/RleEncoder.java


  // namespace util


// Targeting ../../parquet/DataPage.java


// Targeting ../../parquet/DictionaryPage.java


// Targeting ../../parquet/LevelEncoder.java


// Targeting ../../parquet/PageWriter.java



@Namespace("parquet") @MemberGetter public static native int WRITE_BATCH_SIZE();
public static final int WRITE_BATCH_SIZE = WRITE_BATCH_SIZE();
// Targeting ../../parquet/ColumnWriter.java



// API to write values to a single column. This is the main client facing API.

/**
 * Timestamp conversion constants
 */
@Namespace("parquet::internal") @MemberGetter public static native @Cast("const int64_t") long kJulianEpochOffsetDays();

@Namespace("parquet::internal") @MemberGetter public static native @Cast("const int64_t") long kSecondsInNanos();

@Namespace("parquet::internal") public static native void SecondsToImpalaTimestamp(@Cast("const int64_t") long seconds, Int96 impala_timestamp);

@Namespace("parquet::internal") @MemberGetter public static native @Cast("const int64_t") long kMillisecondsInNanos();

@Namespace("parquet::internal") public static native void MillisecondsToImpalaTimestamp(@Cast("const int64_t") long milliseconds,
                                          Int96 impala_timestamp);

@Namespace("parquet::internal") @MemberGetter public static native @Cast("const int64_t") long kMicrosecondsInNanos();

@Namespace("parquet::internal") public static native void MicrosecondsToImpalaTimestamp(@Cast("const int64_t") long microseconds,
                                          Int96 impala_timestamp);

@Namespace("parquet::internal") @MemberGetter public static native @Cast("const int64_t") long kNanosecondsInNanos();

@Namespace("parquet::internal") public static native void NanosecondsToImpalaTimestamp(@Cast("const int64_t") long nanoseconds,
                                         Int96 impala_timestamp);

  // namespace internal
  // namespace parquet


// Parsed from parquet/encryption.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <map>
// #include <memory>
// #include <string>
// #include <utility>

// #include "parquet/exception.h"
// #include "parquet/schema.h"
// #include "parquet/types.h"

@Namespace("parquet") @MemberGetter public static native ParquetCipher.type kDefaultEncryptionAlgorithm();
@Namespace("parquet") @MemberGetter public static native int kMaximalAadMetadataLength();
public static final int kMaximalAadMetadataLength = kMaximalAadMetadataLength();
@Namespace("parquet") @MemberGetter public static native @Cast("const bool") boolean kDefaultEncryptedFooter();
public static final boolean kDefaultEncryptedFooter = kDefaultEncryptedFooter();
@Namespace("parquet") @MemberGetter public static native @Cast("const bool") boolean kDefaultCheckSignature();
public static final boolean kDefaultCheckSignature = kDefaultCheckSignature();
@Namespace("parquet") @MemberGetter public static native @Cast("const bool") boolean kDefaultAllowPlaintextFiles();
public static final boolean kDefaultAllowPlaintextFiles = kDefaultAllowPlaintextFiles();
@Namespace("parquet") @MemberGetter public static native int kAadFileUniqueLength();
public static final int kAadFileUniqueLength = kAadFileUniqueLength();
// Targeting ../../parquet/DecryptionKeyRetriever.java


// Targeting ../../parquet/IntegerKeyIdRetriever.java


// Targeting ../../parquet/StringKeyIdRetriever.java


// Targeting ../../parquet/HiddenColumnException.java


// Targeting ../../parquet/KeyAccessDeniedException.java



@Namespace("parquet") public static native @Cast("const uint8_t*") BytePointer str2bytes(@StdString String str);
@Namespace("parquet") public static native @Cast("const uint8_t*") ByteBuffer str2bytes(@StdString BytePointer str);
// Targeting ../../parquet/ColumnEncryptionProperties.java


// Targeting ../../parquet/ColumnDecryptionProperties.java


// Targeting ../../parquet/AADPrefixVerifier.java


// Targeting ../../parquet/FileDecryptionProperties.java


// Targeting ../../parquet/FileEncryptionProperties.java



  // namespace parquet


// Parsed from parquet/properties.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <memory>
// #include <string>
// #include <unordered_map>
// #include <unordered_set>
// #include <utility>

// #include "arrow/io/caching.h"
// #include "arrow/type.h"
// #include "arrow/util/compression.h"
// #include "parquet/encryption.h"
// #include "parquet/exception.h"
// #include "parquet/parquet_version.h"
// #include "parquet/platform.h"
// #include "parquet/schema.h"
// #include "parquet/type_fwd.h"
// #include "parquet/types.h"

/** Determines use of Parquet Format version >= 2.0.0 logical types. For
 *  example, when writing from Arrow data structures, PARQUET_2_0 will enable
 *  use of INT_* and UINT_* converted types as well as nanosecond timestamps
 *  stored physically as INT64. Since some Parquet implementations do not
 *  support the logical types added in the 2.0.0 format version, if you want to
 *  maximize compatibility of your files you may want to use PARQUET_1_0.
 * 
 *  Note that the 2.x format version series also introduced new serialized
 *  data page metadata and on disk data page layout. To enable this, use
 *  ParquetDataPageVersion. */

/** Controls serialization format of data pages.  parquet-format v2.0.0
 *  introduced a new data page metadata type DataPageV2 and serialized page
 *  structure (for example, encoded levels are no longer compressed). Prior to
 *  the completion of PARQUET-457 in 2020, this library did not implement
 *  DataPageV2 correctly, so if you use the V2 data page format, you may have
 *  forward compatibility issues (older versions of the library will be unable
 *  to read the files). Note that some Parquet implementations do not implement
 *  DataPageV2 at all. */
@Namespace("parquet") public enum ParquetDataPageVersion { V1(0), V2(1);

    public final int value;
    private ParquetDataPageVersion(int v) { this.value = v; }
    private ParquetDataPageVersion(ParquetDataPageVersion e) { this.value = e.value; }
    public ParquetDataPageVersion intern() { for (ParquetDataPageVersion e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

/** Align the default buffer size to a small multiple of a page size. */
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kDefaultBufferSize();
// Targeting ../../parquet/ReaderProperties.java



@Namespace("parquet") public static native @ByVal ReaderProperties default_reader_properties();

@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kDefaultDataPageSize();
public static final long kDefaultDataPageSize = kDefaultDataPageSize();
@Namespace("parquet") @MemberGetter public static native @Cast("const bool") boolean DEFAULT_IS_DICTIONARY_ENABLED();
public static final boolean DEFAULT_IS_DICTIONARY_ENABLED = DEFAULT_IS_DICTIONARY_ENABLED();
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long DEFAULT_DICTIONARY_PAGE_SIZE_LIMIT();
public static final long DEFAULT_DICTIONARY_PAGE_SIZE_LIMIT = DEFAULT_DICTIONARY_PAGE_SIZE_LIMIT();
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long DEFAULT_WRITE_BATCH_SIZE();
public static final long DEFAULT_WRITE_BATCH_SIZE = DEFAULT_WRITE_BATCH_SIZE();
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long DEFAULT_MAX_ROW_GROUP_LENGTH();
public static final long DEFAULT_MAX_ROW_GROUP_LENGTH = DEFAULT_MAX_ROW_GROUP_LENGTH();
@Namespace("parquet") @MemberGetter public static native @Cast("const bool") boolean DEFAULT_ARE_STATISTICS_ENABLED();
public static final boolean DEFAULT_ARE_STATISTICS_ENABLED = DEFAULT_ARE_STATISTICS_ENABLED();
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long DEFAULT_MAX_STATISTICS_SIZE();
public static final long DEFAULT_MAX_STATISTICS_SIZE = DEFAULT_MAX_STATISTICS_SIZE();
@Namespace("parquet") @MemberGetter public static native Encoding.type DEFAULT_ENCODING();
@Namespace("parquet") @MemberGetter public static native byte DEFAULT_CREATED_BY(int i);
@Namespace("parquet") @MemberGetter public static native String DEFAULT_CREATED_BY();
@Namespace("parquet") @MemberGetter public static native Compression.type DEFAULT_COMPRESSION_TYPE();
// Targeting ../../parquet/ColumnProperties.java


// Targeting ../../parquet/WriterProperties.java



@Namespace("parquet") public static native @SharedPtr WriterProperties default_writer_properties();

// ----------------------------------------------------------------------
// Properties specific to Apache Arrow columnar read and write

@Namespace("parquet") @MemberGetter public static native @Cast("const bool") boolean kArrowDefaultUseThreads();
public static final boolean kArrowDefaultUseThreads = kArrowDefaultUseThreads();

// Default number of rows to read when using ::arrow::RecordBatchReader
@Namespace("parquet") @MemberGetter public static native @Cast("const int64_t") long kArrowDefaultBatchSize();
public static final long kArrowDefaultBatchSize = kArrowDefaultBatchSize();
// Targeting ../../parquet/ArrowReaderProperties.java



/** EXPERIMENTAL: Constructs the default ArrowReaderProperties */
@Namespace("parquet") public static native @ByVal ArrowReaderProperties default_arrow_reader_properties();
// Targeting ../../parquet/ArrowWriterProperties.java


// Targeting ../../parquet/ArrowWriteContext.java



@Namespace("parquet") public static native @SharedPtr ArrowWriterProperties default_arrow_writer_properties();

  // namespace parquet


// Parsed from parquet/metadata.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>
// #include <map>
// #include <memory>
// #include <string>
// #include <utility>
// #include <vector>

// #include "arrow/util/key_value_metadata.h"
// #include "parquet/platform.h"
// #include "parquet/properties.h"
// #include "parquet/schema.h"
// #include "parquet/types.h"
// Targeting ../../parquet/InternalFileDecryptor.java



  // namespace schema
// Targeting ../../parquet/ApplicationVersion.java


// Targeting ../../parquet/ColumnCryptoMetaData.java


// Targeting ../../parquet/PageEncodingStats.java


// Targeting ../../parquet/ColumnChunkMetaData.java


// Targeting ../../parquet/RowGroupMetaData.java


// Targeting ../../parquet/FileMetaData.java


// Targeting ../../parquet/FileCryptoMetaData.java


// Targeting ../../parquet/ColumnChunkMetaDataBuilder.java


// Targeting ../../parquet/RowGroupMetaDataBuilder.java


// Targeting ../../parquet/FileMetaDataBuilder.java



@Namespace("parquet") public static native @StdString String ParquetVersionToString(ParquetVersion.type ver);
@Namespace("parquet") public static native @StdString BytePointer ParquetVersionToString(@Cast("parquet::ParquetVersion::type") int ver);

  // namespace parquet


// Parsed from parquet/file_reader.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>
// #include <memory>
// #include <string>
// #include <vector>

// #include "arrow/io/caching.h"
// #include "parquet/metadata.h"  // IWYU pragma: keep
// #include "parquet/platform.h"
// #include "parquet/properties.h"
// Targeting ../../parquet/RowGroupReader.java


// Targeting ../../parquet/ParquetFileReader.java



// Read only Parquet file metadata
@Namespace("parquet") public static native @SharedPtr FileMetaData ReadMetaData(@SharedPtr @Cast({"", "std::shared_ptr<arrow::io::RandomAccessFile>"}) RandomAccessFile source);

/** \brief Scan all values in file. Useful for performance testing
 *  @param columns [in] the column numbers to scan. If empty scans all
 *  @param column_batch_size [in] number of values to read at a time when scanning column
 *  @param reader [in] a ParquetFileReader instance
 *  @return number of semantic rows in file */
@Namespace("parquet") public static native @Cast("int64_t") long ScanFileContents(@StdVector IntPointer columns, int column_batch_size,
                         ParquetFileReader reader);
@Namespace("parquet") public static native @Cast("int64_t") long ScanFileContents(@StdVector IntBuffer columns, int column_batch_size,
                         ParquetFileReader reader);
@Namespace("parquet") public static native @Cast("int64_t") long ScanFileContents(@StdVector int[] columns, int column_batch_size,
                         ParquetFileReader reader);

  // namespace parquet


// Parsed from parquet/file_writer.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>
// #include <memory>
// #include <utility>

// #include "parquet/metadata.h"
// #include "parquet/platform.h"
// #include "parquet/properties.h"
// #include "parquet/schema.h"

// FIXME: copied from reader-internal.cc
@Namespace("parquet") @MemberGetter public static native @Cast("const uint8_t") byte kParquetMagic(int i);
@Namespace("parquet") @MemberGetter public static native @Cast("const uint8_t*") BytePointer kParquetMagic();
@Namespace("parquet") @MemberGetter public static native @Cast("const uint8_t") byte kParquetEMagic(int i);
@Namespace("parquet") @MemberGetter public static native @Cast("const uint8_t*") BytePointer kParquetEMagic();
// Targeting ../../parquet/RowGroupWriter.java



@Namespace("parquet") public static native void WriteFileMetaData(@Const @ByRef FileMetaData file_metadata,
                       OutputStream sink);

@Namespace("parquet") public static native void WriteMetaDataFile(@Const @ByRef FileMetaData file_metadata,
                       OutputStream sink);
@Namespace("parquet") public static native void WriteEncryptedFileMetadata(@Const @ByRef FileMetaData file_metadata,
                                OutputStream sink);
@Namespace("parquet") public static native void WriteFileCryptoMetaData(@Const @ByRef FileCryptoMetaData crypto_metadata,
                             OutputStream sink);
// Targeting ../../parquet/ParquetFileWriter.java



  // namespace parquet


// Parsed from parquet/printer.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <iosfwd>
// #include <list>

// #include "parquet/platform.h"
// Targeting ../../parquet/ParquetFilePrinter.java



  // namespace parquet


// Parsed from parquet/statistics.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <algorithm>
// #include <cstddef>
// #include <cstdint>
// #include <memory>
// #include <string>
// #include <utility>

// #include "parquet/platform.h"
// #include "parquet/types.h"
// Targeting ../../parquet/BinaryArray.java



  // namespace arrow
// Targeting ../../parquet/Comparator.java



/** \brief Interface for comparison of physical types according to the
 *  semantics of a particular logical type. */

/** \brief Typed version of Comparator::Make */

/** \brief Typed version of Comparator::Make */
// Targeting ../../parquet/EncodedStatistics.java


// Targeting ../../parquet/Statistics.java



/** \brief A typed implementation of Statistics */

/** \brief Typed version of Statistics::Make */

/** \brief Create Statistics initialized to a particular state
 *  @param min [in] the minimum value
 *  @param max [in] the minimum value
 *  @param num_values [in] number of values
 *  @param null_count [in] number of null values
 *  @param distinct_count [in] number of distinct values */

/** \brief Typed version of Statistics::Make */

  // namespace parquet


// Parsed from parquet/arrow/reader.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>
// #include <memory>
// #include <vector>

// #include "parquet/file_reader.h"
// #include "parquet/platform.h"
// #include "parquet/properties.h"


// Targeting ../../parquet/SchemaManifest.java


// Targeting ../../parquet/FileReader.java


// Targeting ../../parquet/ColumnChunkReader.java



// At this point, the column reader is a stream iterator. It only knows how to
// read the next batch of values for a particular column from the file until it
// runs out.
//
// We also do not expose any internal Parquet details, such as row groups. This
// might change in the future.
// Targeting ../../parquet/FileReaderBuilder.java



/** \defgroup parquet-arrow-reader-factories Factory functions for Parquet Arrow readers
 * 
 *  \{
 <p>
 *  \brief Build FileReader from Arrow file and MemoryPool
 * 
 *  Advanced settings are supported through the FileReaderBuilder class. */
@Namespace("parquet::arrow") public static native @ByVal Status OpenFile(@SharedPtr @Cast({"", "std::shared_ptr<arrow::io::RandomAccessFile>"}) RandomAccessFile arg0,
                         MemoryPool allocator,
                         @UniquePtr FileReader reader);

/** \} */

@Namespace("parquet::arrow") public static native @ByVal Status StatisticsAsScalars(@Const @ByRef Statistics Statistics,
                                    @SharedPtr Scalar min,
                                    @SharedPtr Scalar max);

@Namespace("parquet::arrow::internal") public static native @ByVal Status FuzzReader(@Cast("const uint8_t*") BytePointer data, @Cast("int64_t") long size);
@Namespace("parquet::arrow::internal") public static native @ByVal Status FuzzReader(@Cast("const uint8_t*") ByteBuffer data, @Cast("int64_t") long size);
@Namespace("parquet::arrow::internal") public static native @ByVal Status FuzzReader(@Cast("const uint8_t*") byte[] data, @Cast("int64_t") long size);

  // namespace internal
  // namespace arrow
  // namespace parquet


// Parsed from parquet/arrow/writer.h

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// #pragma once

// #include <cstdint>
// #include <memory>

// #include "parquet/platform.h"
// #include "parquet/properties.h"

  // namespace arrow
// Targeting ../../parquet/FileWriter.java



/** \brief Write Parquet file metadata only to indicated Arrow OutputStream */

/** \brief Write metadata-only Parquet file to indicated Arrow OutputStream */

/** \brief Write a Table to Parquet. */
@Namespace("parquet::arrow") public static native @ByVal Status WriteTable(@Const @ByRef Table table, MemoryPool pool,
           @SharedPtr OutputStream sink, @Cast("int64_t") long chunk_size,
           @SharedPtr WriterProperties properties/*=parquet::default_writer_properties()*/,
           @SharedPtr ArrowWriterProperties arrow_properties/*=parquet::default_arrow_writer_properties()*/);
@Namespace("parquet::arrow") public static native @ByVal Status WriteTable(@Const @ByRef Table table, MemoryPool pool,
           @SharedPtr OutputStream sink, @Cast("int64_t") long chunk_size);

  // namespace arrow
  // namespace parquet


}
