// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


// EXPERIMENTAL
@Namespace("arrow::io") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class AsyncContext extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AsyncContext(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public AsyncContext(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public AsyncContext position(long position) {
        return (AsyncContext)super.position(position);
    }
    @Override public AsyncContext getPointer(long i) {
        return new AsyncContext((Pointer)this).position(position + i);
    }

  public native Executor executor(); public native AsyncContext executor(Executor setter);
  // An application-specific ID, forwarded to executor task submissions
  public native @Cast("int64_t") long external_id(); public native AsyncContext external_id(long setter);

  // Set `executor` to a global IO-specific thread pool.
  public AsyncContext() { super((Pointer)null); allocate(); }
  private native void allocate();
  public AsyncContext(Executor executor) { super((Pointer)null); allocate(executor); }
  private native void allocate(Executor executor);
}
