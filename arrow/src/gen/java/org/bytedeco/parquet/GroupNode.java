// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.parquet;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;

import static org.bytedeco.arrow.global.parquet.*;


@Namespace("parquet::schema") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.parquet.class)
public class GroupNode extends Node {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupNode(Pointer p) { super(p); }

  // The field_id here is the default to use if it is not set in the SchemaElement
  public static native @UniquePtr Node FromParquet(@Const Pointer opaque_element,
                                             @ByVal(nullValue = "parquet::schema::NodeVector({})") NodeVector fields, int field_id/*=-1*/);
  public static native @UniquePtr Node FromParquet(@Const Pointer opaque_element);

  // A field_id -1 (or any negative value) will be serialized as null in Thrift
  public static native @SharedPtr @ByVal Node Make(@StdString String name, Repetition.type repetition,
                               @Const @ByRef NodeVector fields,
                               ConvertedType.type converted_type/*=parquet::ConvertedType::NONE*/,
                               int field_id/*=-1*/);
  public static native @SharedPtr @ByVal Node Make(@StdString String name, Repetition.type repetition,
                               @Const @ByRef NodeVector fields);
  public static native @SharedPtr @ByVal Node Make(@StdString BytePointer name, @Cast("parquet::Repetition::type") int repetition,
                               @Const @ByRef NodeVector fields,
                               @Cast("parquet::ConvertedType::type") int converted_type/*=parquet::ConvertedType::NONE*/,
                               int field_id/*=-1*/);
  public static native @SharedPtr @ByVal Node Make(@StdString BytePointer name, @Cast("parquet::Repetition::type") int repetition,
                               @Const @ByRef NodeVector fields);

  // If no logical type, pass nullptr
  // A field_id -1 (or any negative value) will be serialized as null in Thrift
  public static native @SharedPtr @ByVal Node Make(@StdString String name, Repetition.type repetition,
                               @Const @ByRef NodeVector fields,
                               @Cast("const parquet::LogicalType*") @SharedPtr @ByVal LogicalType logical_type,
                               int field_id/*=-1*/);
  public static native @SharedPtr @ByVal Node Make(@StdString String name, Repetition.type repetition,
                               @Const @ByRef NodeVector fields,
                               @Cast("const parquet::LogicalType*") @SharedPtr @ByVal LogicalType logical_type);
  public static native @SharedPtr @ByVal Node Make(@StdString BytePointer name, @Cast("parquet::Repetition::type") int repetition,
                               @Const @ByRef NodeVector fields,
                               @Cast("const parquet::LogicalType*") @SharedPtr @ByVal LogicalType logical_type,
                               int field_id/*=-1*/);
  public static native @SharedPtr @ByVal Node Make(@StdString BytePointer name, @Cast("parquet::Repetition::type") int repetition,
                               @Const @ByRef NodeVector fields,
                               @Cast("const parquet::LogicalType*") @SharedPtr @ByVal LogicalType logical_type);

  public native @Cast("bool") boolean Equals(@Const Node other);

  public native @SharedPtr @ByVal Node field(int i);
  // Get the index of a field by its name, or negative value if not found.
  // If several fields share the same name, it is unspecified which one
  // is returned.
  public native int FieldIndex(@StdString String name);
  public native int FieldIndex(@StdString BytePointer name);
  // Get the index of a field by its node, or negative value if not found.
  public native int FieldIndex(@Const @ByRef Node node);

  public native int field_count();

  public native void ToParquet(Pointer element);
  public native void Visit(Visitor visitor);
  public native void VisitConst(ConstVisitor visitor);

  /** \brief Return true if this node or any child node has REPEATED repetition
   *  type */
  public native @Cast("bool") boolean HasRepeatedFields();
}
