// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.leptonica;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.leptonica.global.lept.*;


/** Data structure to hold a number of Dewarp */
@Name("L_Dewarpa") @Properties(inherit = org.bytedeco.leptonica.presets.lept.class)
public class L_DEWARPA extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public L_DEWARPA() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public L_DEWARPA(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public L_DEWARPA(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public L_DEWARPA position(long position) {
        return (L_DEWARPA)super.position(position);
    }

    /** size of dewarp ptr array          */
    public native @Cast("l_int32") int nalloc(); public native L_DEWARPA nalloc(int nalloc);
    /** maximum page number in array      */
    public native @Cast("l_int32") int maxpage(); public native L_DEWARPA maxpage(int maxpage);
    /** array of ptrs to page dewarp      */
    public native L_DEWARP dewarp(int i); public native L_DEWARPA dewarp(int i, L_DEWARP dewarp);
    public native @Cast("L_Dewarp**") PointerPointer dewarp(); public native L_DEWARPA dewarp(PointerPointer dewarp);
    /** array of ptrs to cached dewarps   */
    public native L_DEWARP dewarpcache(int i); public native L_DEWARPA dewarpcache(int i, L_DEWARP dewarpcache);
    public native @Cast("L_Dewarp**") PointerPointer dewarpcache(); public native L_DEWARPA dewarpcache(PointerPointer dewarpcache);
    /** list of page numbers for pages    */
    /** with page models                  */
    public native NUMA namodels(); public native L_DEWARPA namodels(NUMA namodels);
    /** list of page numbers with either  */
    /** page models or ref page models    */
    public native NUMA napages(); public native L_DEWARPA napages(NUMA napages);
    /** reduction factor of input: 1 or 2 */
    public native @Cast("l_int32") int redfactor(); public native L_DEWARPA redfactor(int redfactor);
    /** disparity arrays sampling factor  */
    public native @Cast("l_int32") int sampling(); public native L_DEWARPA sampling(int sampling);
    /** min number of long lines required */
    public native @Cast("l_int32") int minlines(); public native L_DEWARPA minlines(int minlines);
    /** max distance for getting ref page */
    public native @Cast("l_int32") int maxdist(); public native L_DEWARPA maxdist(int maxdist);
    /** maximum abs line curvature,       */
    /** in micro-units                    */
    public native @Cast("l_int32") int max_linecurv(); public native L_DEWARPA max_linecurv(int max_linecurv);
    /** minimum abs diff line         */
    /** curvature in micro-units      */
    public native @Cast("l_int32") int min_diff_linecurv(); public native L_DEWARPA min_diff_linecurv(int min_diff_linecurv);
    /** maximum abs diff line         */
    /** curvature in micro-units      */
    public native @Cast("l_int32") int max_diff_linecurv(); public native L_DEWARPA max_diff_linecurv(int max_diff_linecurv);
    /** maximum abs left or right edge    */
    /** slope, in milli-units             */
    public native @Cast("l_int32") int max_edgeslope(); public native L_DEWARPA max_edgeslope(int max_edgeslope);
    /** maximum abs left or right edge    */
    /** curvature, in micro-units         */
    public native @Cast("l_int32") int max_edgecurv(); public native L_DEWARPA max_edgecurv(int max_edgecurv);
    /** maximum abs diff left-right   */
    /** edge curvature, in micro-units    */
    public native @Cast("l_int32") int max_diff_edgecurv(); public native L_DEWARPA max_diff_edgecurv(int max_diff_edgecurv);
    /** use both disparity arrays if      */
    /** available; only vertical otherwise */
    public native @Cast("l_int32") int useboth(); public native L_DEWARPA useboth(int useboth);
    /** if there are multiple columns,    */
    /** only use the vertical disparity   */
    /** array                             */
    public native @Cast("l_int32") int check_columns(); public native L_DEWARPA check_columns(int check_columns);
    /** invalid models have been removed  */
    /** and refs built against valid set  */
    public native @Cast("l_int32") int modelsready(); public native L_DEWARPA modelsready(int modelsready);
}
