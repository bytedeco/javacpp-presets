// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.leptonica;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.leptonica.global.lept.*;


    /**
     * Storage for keys and values for red-black trees, maps and sets.
     * <pre>
     * Note:
     *   (1) Keys and values of the valid key types are all 64-bit
     *   (2) (void *) can be used for values but not for keys.
     * </pre>
     */
@Name("Rb_Type") @Properties(inherit = org.bytedeco.leptonica.presets.lept.class)
public class RB_TYPE extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RB_TYPE() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RB_TYPE(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RB_TYPE(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RB_TYPE position(long position) {
        return (RB_TYPE)super.position(position);
    }

    public native @Cast("l_int64") long itype(); public native RB_TYPE itype(long itype);
    public native @Cast("l_uint64") int utype(); public native RB_TYPE utype(int utype);
    public native @Cast("l_float64") double ftype(); public native RB_TYPE ftype(double ftype);
    public native Pointer ptype(); public native RB_TYPE ptype(Pointer ptype);
}
