// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.leptonica;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.leptonica.global.lept.*;


    /** Double number array: an array of doubles */
@Name("L_Dna") @Properties(inherit = org.bytedeco.leptonica.presets.lept.class)
public class L_DNA extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public L_DNA() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public L_DNA(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public L_DNA(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public L_DNA position(long position) {
        return (L_DNA)super.position(position);
    }
    @Override public L_DNA getPointer(long i) {
        return new L_DNA((Pointer)this).position(position + i);
    }

    /** size of allocated number array      */
    public native @Cast("l_int32") int nalloc(); public native L_DNA nalloc(int setter);
    /** number of numbers saved             */
    public native @Cast("l_int32") int n(); public native L_DNA n(int setter);
    /** reference count (1 if no clones)    */
    public native @Cast("l_int32") int refcount(); public native L_DNA refcount(int setter);
    /** x value assigned to array[0]        */
    public native @Cast("l_float64") double startx(); public native L_DNA startx(double setter);
    /** change in x value as i --> i + 1    */
    public native @Cast("l_float64") double delx(); public native L_DNA delx(double setter);
    /** number array                        */
    public native @Cast("l_float64*") DoublePointer array(); public native L_DNA array(DoublePointer setter);
}
