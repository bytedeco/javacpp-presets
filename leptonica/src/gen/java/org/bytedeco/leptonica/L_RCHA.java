// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.leptonica;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.leptonica.global.lept.*;


/**
 *  Data returned from correlation matching on an array of characters
 */
@Name("L_Rcha") @Properties(inherit = org.bytedeco.leptonica.presets.lept.class)
public class L_RCHA extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public L_RCHA() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public L_RCHA(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public L_RCHA(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public L_RCHA position(long position) {
        return (L_RCHA)super.position(position);
    }
    @Override public L_RCHA getPointer(long i) {
        return new L_RCHA((Pointer)this).position(position + i);
    }

    /** indices of best templates                */
    public native NUMA naindex(); public native L_RCHA naindex(NUMA setter);
    /** correlation scores of best templates     */
    public native NUMA nascore(); public native L_RCHA nascore(NUMA setter);
    /** character strings of best templates      */
    public native SARRAY satext(); public native L_RCHA satext(SARRAY setter);
    /** indices of best samples                  */
    public native NUMA nasample(); public native L_RCHA nasample(NUMA setter);
    /** x-locations of templates (delx + shiftx) */
    public native NUMA naxloc(); public native L_RCHA naxloc(NUMA setter);
    /** y-locations of templates (dely + shifty) */
    public native NUMA nayloc(); public native L_RCHA nayloc(NUMA setter);
    /** widths of best templates                 */
    public native NUMA nawidth(); public native L_RCHA nawidth(NUMA setter);
}
