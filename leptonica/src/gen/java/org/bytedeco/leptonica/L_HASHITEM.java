// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.leptonica;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.leptonica.global.lept.*;


/** Hash item, containing storage for the key, value and count.  The key
    is a l_uint64, which is hashed by the mod function to find the index
    into the hashtab. */
@Name("L_Hashitem") @Properties(inherit = org.bytedeco.leptonica.presets.lept.class)
public class L_HASHITEM extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public L_HASHITEM() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public L_HASHITEM(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public L_HASHITEM(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public L_HASHITEM position(long position) {
        return (L_HASHITEM)super.position(position);
    }
    @Override public L_HASHITEM getPointer(long i) {
        return new L_HASHITEM((Pointer)this).offsetAddress(i);
    }

    /** key is hashed into index into hashtab   */
    public native @Cast("l_uint64") int key(); public native L_HASHITEM key(int setter);
    /** number stored associated with the key   */
    public native @Cast("l_uint64") int val(); public native L_HASHITEM val(int setter);
    /** number of elements seen with this key   */
    public native @Cast("l_int32") int count(); public native L_HASHITEM count(int setter);
    /** ptr to the next in the list             */
    public native L_HASHITEM next(); public native L_HASHITEM next(L_HASHITEM setter);
}
