// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.leptonica;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.leptonica.global.lept.*;


    /** Byte array (analogous to C++ "string") */
@Name("L_Bytea") @Properties(inherit = org.bytedeco.leptonica.presets.lept.class)
public class L_BYTEA extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public L_BYTEA() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public L_BYTEA(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public L_BYTEA(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public L_BYTEA position(long position) {
        return (L_BYTEA)super.position(position);
    }
    @Override public L_BYTEA getPointer(long i) {
        return new L_BYTEA((Pointer)this).position(position + i);
    }

    /** number of bytes allocated in data array  */
    public native @Cast("size_t") long nalloc(); public native L_BYTEA nalloc(long setter);
    /** number of bytes presently used           */
    public native @Cast("size_t") long size(); public native L_BYTEA size(long setter);
    /** reference count (1 if no clones)         */
    public native @Cast("l_int32") int refcount(); public native L_BYTEA refcount(int setter);
    /** data array                               */
    public native @Cast("l_uint8*") BytePointer data(); public native L_BYTEA data(BytePointer setter);
}
