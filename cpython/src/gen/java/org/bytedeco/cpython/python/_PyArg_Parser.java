// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython.python;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cpython.global.python.*;


// #ifndef Py_LIMITED_API
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class _PyArg_Parser extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _PyArg_Parser() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _PyArg_Parser(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _PyArg_Parser(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _PyArg_Parser position(long position) {
        return (_PyArg_Parser)super.position(position);
    }

    @MemberGetter public native @Cast("const char*") BytePointer format();
    @MemberGetter public native @Cast("const char*") BytePointer keywords(int i);
    @MemberGetter public native @Cast("const char*const*") PointerPointer keywords();
    @MemberGetter public native @Cast("const char*") BytePointer fname();
    @MemberGetter public native @Cast("const char*") BytePointer custom_msg();
    public native int pos(); public native _PyArg_Parser pos(int pos);            /* number of positional-only arguments */
    public native int min(); public native _PyArg_Parser min(int min);            /* minimal number of arguments */
    public native int max(); public native _PyArg_Parser max(int max);            /* maximal number of positional arguments */
    public native PyObject kwtuple(); public native _PyArg_Parser kwtuple(PyObject kwtuple);  /* tuple of keyword parameter names */
    public native _PyArg_Parser next(); public native _PyArg_Parser next(_PyArg_Parser next);
}
