// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython.python;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cpython.global.python.*;


/* GC information is stored BEFORE the object structure. */
// #ifndef Py_LIMITED_API
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyGC_Head extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyGC_Head() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyGC_Head(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyGC_Head(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyGC_Head position(long position) {
        return (PyGC_Head)super.position(position);
    }

        @Name("gc.gc_next") public native @Cast("_gc_head*") PyGC_Head gc_gc_next(); public native PyGC_Head gc_gc_next(PyGC_Head gc_gc_next);
        @Name("gc.gc_prev") public native @Cast("_gc_head*") PyGC_Head gc_gc_prev(); public native PyGC_Head gc_gc_prev(PyGC_Head gc_gc_prev);
        @Name("gc.gc_refs") public native @Cast("Py_ssize_t") long gc_gc_refs(); public native PyGC_Head gc_gc_refs(long gc_gc_refs);
    public native double dummy(); public native PyGC_Head dummy(double dummy);  /* force worst-case alignment */
}
