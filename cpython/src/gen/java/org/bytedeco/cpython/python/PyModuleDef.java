// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython.python;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cpython.global.python.*;

// #endif

// #endif /* New in 3.5 */

@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyModuleDef extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyModuleDef() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyModuleDef(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyModuleDef(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyModuleDef position(long position) {
        return (PyModuleDef)super.position(position);
    }

  public native @ByRef PyModuleDef_Base m_base(); public native PyModuleDef m_base(PyModuleDef_Base m_base);
  @MemberGetter public native @Cast("const char*") BytePointer m_name();
  @MemberGetter public native @Cast("const char*") BytePointer m_doc();
  public native @Cast("Py_ssize_t") long m_size(); public native PyModuleDef m_size(long m_size);
  public native PyMethodDef m_methods(); public native PyModuleDef m_methods(PyMethodDef m_methods);
  public native PyModuleDef_Slot m_slots(); public native PyModuleDef m_slots(PyModuleDef_Slot m_slots);
  public native traverseproc m_traverse(); public native PyModuleDef m_traverse(traverseproc m_traverse);
  public native inquiry m_clear(); public native PyModuleDef m_clear(inquiry m_clear);
  public native freefunc m_free(); public native PyModuleDef m_free(freefunc m_free);
}
