// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython.python;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cpython.global.python.*;
 /* opaque */
// #else
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyTypeObject extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyTypeObject() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyTypeObject(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyTypeObject(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyTypeObject position(long position) {
        return (PyTypeObject)super.position(position);
    }

    public native @ByRef PyVarObject ob_base(); public native PyTypeObject ob_base(PyVarObject ob_base);
    @MemberGetter public native @Cast("const char*") BytePointer tp_name(); /* For printing, in format "<module>.<name>" */
    public native @Cast("Py_ssize_t") long tp_basicsize(); public native PyTypeObject tp_basicsize(long tp_basicsize);
    public native @Cast("Py_ssize_t") long tp_itemsize(); public native PyTypeObject tp_itemsize(long tp_itemsize); /* For allocation */

    /* Methods to implement standard operations */

    public native destructor tp_dealloc(); public native PyTypeObject tp_dealloc(destructor tp_dealloc);
    public native printfunc tp_print(); public native PyTypeObject tp_print(printfunc tp_print);
    public native getattrfunc tp_getattr(); public native PyTypeObject tp_getattr(getattrfunc tp_getattr);
    public native setattrfunc tp_setattr(); public native PyTypeObject tp_setattr(setattrfunc tp_setattr);
    public native PyAsyncMethods tp_as_async(); public native PyTypeObject tp_as_async(PyAsyncMethods tp_as_async); /* formerly known as tp_compare (Python 2)
                                    or tp_reserved (Python 3) */
    public native reprfunc tp_repr(); public native PyTypeObject tp_repr(reprfunc tp_repr);

    /* Method suites for standard classes */

    public native PyNumberMethods tp_as_number(); public native PyTypeObject tp_as_number(PyNumberMethods tp_as_number);
    public native PySequenceMethods tp_as_sequence(); public native PyTypeObject tp_as_sequence(PySequenceMethods tp_as_sequence);
    public native PyMappingMethods tp_as_mapping(); public native PyTypeObject tp_as_mapping(PyMappingMethods tp_as_mapping);

    /* More standard operations (here for binary compatibility) */

    public native hashfunc tp_hash(); public native PyTypeObject tp_hash(hashfunc tp_hash);
    public native ternaryfunc tp_call(); public native PyTypeObject tp_call(ternaryfunc tp_call);
    public native reprfunc tp_str(); public native PyTypeObject tp_str(reprfunc tp_str);
    public native getattrofunc tp_getattro(); public native PyTypeObject tp_getattro(getattrofunc tp_getattro);
    public native setattrofunc tp_setattro(); public native PyTypeObject tp_setattro(setattrofunc tp_setattro);

    /* Functions to access object as input/output buffer */
    public native PyBufferProcs tp_as_buffer(); public native PyTypeObject tp_as_buffer(PyBufferProcs tp_as_buffer);

    /* Flags to define presence of optional/expanded features */
    public native @Cast("unsigned long") long tp_flags(); public native PyTypeObject tp_flags(long tp_flags);

    @MemberGetter public native @Cast("const char*") BytePointer tp_doc(); /* Documentation string */

    /* Assigned meaning in release 2.0 */
    /* call function for all accessible objects */
    public native traverseproc tp_traverse(); public native PyTypeObject tp_traverse(traverseproc tp_traverse);

    /* delete references to contained objects */
    public native inquiry tp_clear(); public native PyTypeObject tp_clear(inquiry tp_clear);

    /* Assigned meaning in release 2.1 */
    /* rich comparisons */
    public native richcmpfunc tp_richcompare(); public native PyTypeObject tp_richcompare(richcmpfunc tp_richcompare);

    /* weak reference enabler */
    public native @Cast("Py_ssize_t") long tp_weaklistoffset(); public native PyTypeObject tp_weaklistoffset(long tp_weaklistoffset);

    /* Iterators */
    public native getiterfunc tp_iter(); public native PyTypeObject tp_iter(getiterfunc tp_iter);
    public native iternextfunc tp_iternext(); public native PyTypeObject tp_iternext(iternextfunc tp_iternext);

    /* Attribute descriptor and subclassing stuff */
    public native PyMethodDef tp_methods(); public native PyTypeObject tp_methods(PyMethodDef tp_methods);
    public native PyMemberDef tp_members(); public native PyTypeObject tp_members(PyMemberDef tp_members);
    public native PyGetSetDef tp_getset(); public native PyTypeObject tp_getset(PyGetSetDef tp_getset);
    public native @Cast("_typeobject*") PyTypeObject tp_base(); public native PyTypeObject tp_base(PyTypeObject tp_base);
    public native PyObject tp_dict(); public native PyTypeObject tp_dict(PyObject tp_dict);
    public native descrgetfunc tp_descr_get(); public native PyTypeObject tp_descr_get(descrgetfunc tp_descr_get);
    public native descrsetfunc tp_descr_set(); public native PyTypeObject tp_descr_set(descrsetfunc tp_descr_set);
    public native @Cast("Py_ssize_t") long tp_dictoffset(); public native PyTypeObject tp_dictoffset(long tp_dictoffset);
    public native initproc tp_init(); public native PyTypeObject tp_init(initproc tp_init);
    public native allocfunc tp_alloc(); public native PyTypeObject tp_alloc(allocfunc tp_alloc);
    public native newfunc tp_new(); public native PyTypeObject tp_new(newfunc tp_new);
    public native freefunc tp_free(); public native PyTypeObject tp_free(freefunc tp_free); /* Low-level free-memory routine */
    public native inquiry tp_is_gc(); public native PyTypeObject tp_is_gc(inquiry tp_is_gc); /* For PyObject_IS_GC */
    public native PyObject tp_bases(); public native PyTypeObject tp_bases(PyObject tp_bases);
    public native PyObject tp_mro(); public native PyTypeObject tp_mro(PyObject tp_mro); /* method resolution order */
    public native PyObject tp_cache(); public native PyTypeObject tp_cache(PyObject tp_cache);
    public native PyObject tp_subclasses(); public native PyTypeObject tp_subclasses(PyObject tp_subclasses);
    public native PyObject tp_weaklist(); public native PyTypeObject tp_weaklist(PyObject tp_weaklist);
    public native destructor tp_del(); public native PyTypeObject tp_del(destructor tp_del);

    /* Type attribute cache version tag. Added in version 2.6 */
    public native @Cast("unsigned int") int tp_version_tag(); public native PyTypeObject tp_version_tag(int tp_version_tag);

    public native destructor tp_finalize(); public native PyTypeObject tp_finalize(destructor tp_finalize);

// #ifdef COUNT_ALLOCS
// #endif
}
