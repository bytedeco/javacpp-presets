// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython.python;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cpython.global.python.*;


// #ifndef Py_LIMITED_API
/* buffer interface */
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class Py_buffer extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public Py_buffer() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Py_buffer(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Py_buffer(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public Py_buffer position(long position) {
        return (Py_buffer)super.position(position);
    }

    public native Pointer buf(); public native Py_buffer buf(Pointer buf);
    public native PyObject obj(); public native Py_buffer obj(PyObject obj);        /* owned reference */
    public native @Cast("Py_ssize_t") long len(); public native Py_buffer len(long len);
    public native @Cast("Py_ssize_t") long itemsize(); public native Py_buffer itemsize(long itemsize);  /* This is Py_ssize_t so it can be
                             pointed to by strides in simple case.*/
    public native int readonly(); public native Py_buffer readonly(int readonly);
    public native int ndim(); public native Py_buffer ndim(int ndim);
    public native @Cast("char*") BytePointer format(); public native Py_buffer format(BytePointer format);
    public native @Cast("Py_ssize_t*") SizeTPointer shape(); public native Py_buffer shape(SizeTPointer shape);
    public native @Cast("Py_ssize_t*") SizeTPointer strides(); public native Py_buffer strides(SizeTPointer strides);
    public native @Cast("Py_ssize_t*") SizeTPointer suboffsets(); public native Py_buffer suboffsets(SizeTPointer suboffsets);
    public native Pointer internal(); public native Py_buffer internal(Pointer internal);
}
