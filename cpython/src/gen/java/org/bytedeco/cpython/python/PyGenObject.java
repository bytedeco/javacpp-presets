// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython.python;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.cpython.global.python.*;


@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyGenObject extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyGenObject() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyGenObject(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyGenObject(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyGenObject position(long position) {
        return (PyGenObject)super.position(position);
    }

    /* The gi_ prefix is intended to remind of generator-iterator. */
    public native @ByRef PyObject ob_base(); public native PyGenObject ob_base(PyObject ob_base);
    /* Note: gi_frame can be NULL if the generator is "finished" */
    public native _frame gi_frame(); public native PyGenObject gi_frame(_frame gi_frame);
    /* True if generator is being executed. */
    public native @Cast("char") byte gi_running(); public native PyGenObject gi_running(byte gi_running);
    /* The code object backing the generator */
    public native PyObject gi_code(); public native PyGenObject gi_code(PyObject gi_code);
    /* List of weak reference. */
    public native PyObject gi_weakreflist(); public native PyGenObject gi_weakreflist(PyObject gi_weakreflist);
    /* Name of the generator. */
    public native PyObject gi_name(); public native PyGenObject gi_name(PyObject gi_name);
    /* Qualified name of the generator. */
    public native PyObject gi_qualname(); public native PyGenObject gi_qualname(PyObject gi_qualname);
}
