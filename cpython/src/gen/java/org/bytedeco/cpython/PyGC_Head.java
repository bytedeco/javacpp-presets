// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


/* GC information is stored BEFORE the object structure. */
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyGC_Head extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyGC_Head() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyGC_Head(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyGC_Head(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyGC_Head position(long position) {
        return (PyGC_Head)super.position(position);
    }
    @Override public PyGC_Head getPointer(long i) {
        return new PyGC_Head((Pointer)this).position(position + i);
    }

    // Pointer to next object in the list.
    // 0 means the object is not tracked
    public native @Cast("uintptr_t") long _gc_next(); public native PyGC_Head _gc_next(long setter);

    // Pointer to previous object in the list.
    // Lowest two bits are used for flags documented later.
    public native @Cast("uintptr_t") long _gc_prev(); public native PyGC_Head _gc_prev(long setter);
}
