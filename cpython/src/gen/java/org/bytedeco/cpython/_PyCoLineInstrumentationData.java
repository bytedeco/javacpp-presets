// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


/* Ancilliary data structure used for instrumentation.
   Line instrumentation creates an array of
   these. One entry per code unit.*/
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class _PyCoLineInstrumentationData extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _PyCoLineInstrumentationData() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _PyCoLineInstrumentationData(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _PyCoLineInstrumentationData(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _PyCoLineInstrumentationData position(long position) {
        return (_PyCoLineInstrumentationData)super.position(position);
    }
    @Override public _PyCoLineInstrumentationData getPointer(long i) {
        return new _PyCoLineInstrumentationData((Pointer)this).offsetAddress(i);
    }

    public native @Cast("uint8_t") byte original_opcode(); public native _PyCoLineInstrumentationData original_opcode(byte setter);
    public native byte line_delta(); public native _PyCoLineInstrumentationData line_delta(byte setter);
}
