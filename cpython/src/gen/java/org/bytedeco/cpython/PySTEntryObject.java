// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PySTEntryObject extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PySTEntryObject() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PySTEntryObject(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PySTEntryObject(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PySTEntryObject position(long position) {
        return (PySTEntryObject)super.position(position);
    }
    @Override public PySTEntryObject getPointer(long i) {
        return new PySTEntryObject((Pointer)this).position(position + i);
    }

    public native @ByRef PyObject ob_base(); public native PySTEntryObject ob_base(PyObject setter);
    public native PyObject ste_id(); public native PySTEntryObject ste_id(PyObject setter);        /* int: key in ste_table->st_blocks */
    public native PyObject ste_symbols(); public native PySTEntryObject ste_symbols(PyObject setter);   /* dict: variable names to flags */
    public native PyObject ste_name(); public native PySTEntryObject ste_name(PyObject setter);      /* string: name of current block */
    public native PyObject ste_varnames(); public native PySTEntryObject ste_varnames(PyObject setter);  /* list of function parameters */
    public native PyObject ste_children(); public native PySTEntryObject ste_children(PyObject setter);  /* list of child blocks */
    public native PyObject ste_directives(); public native PySTEntryObject ste_directives(PyObject setter);/* locations of global and nonlocal statements */
    public native @Cast("_Py_block_ty") int ste_type(); public native PySTEntryObject ste_type(int setter);   /* module, class, or function */
    public native int ste_nested(); public native PySTEntryObject ste_nested(int setter);      /* true if block is nested */
    public native @Cast("unsigned") @NoOffset int ste_free(); public native PySTEntryObject ste_free(int setter);        /* true if block has free variables */
    public native @Cast("unsigned") @NoOffset int ste_child_free(); public native PySTEntryObject ste_child_free(int setter);  /* true if a child block has free vars,
                                     including free refs to globals */
    public native @Cast("unsigned") @NoOffset int ste_generator(); public native PySTEntryObject ste_generator(int setter);   /* true if namespace is a generator */
    public native @Cast("unsigned") @NoOffset int ste_coroutine(); public native PySTEntryObject ste_coroutine(int setter);   /* true if namespace is a coroutine */
    public native @Cast("unsigned") @NoOffset int ste_comprehension(); public native PySTEntryObject ste_comprehension(int setter); /* true if namespace is a list comprehension */
    public native @Cast("unsigned") @NoOffset int ste_varargs(); public native PySTEntryObject ste_varargs(int setter);     /* true if block has varargs */
    public native @Cast("unsigned") @NoOffset int ste_varkeywords(); public native PySTEntryObject ste_varkeywords(int setter); /* true if block has varkeywords */
    public native @Cast("unsigned") @NoOffset int ste_returns_value(); public native PySTEntryObject ste_returns_value(int setter);  /* true if namespace uses return with
                                        an argument */
    public native @Cast("unsigned") @NoOffset int ste_needs_class_closure(); public native PySTEntryObject ste_needs_class_closure(int setter); /* for class scopes, true if a
                                             closure over __class__
                                             should be created */
    public native @Cast("unsigned") @NoOffset int ste_comp_iter_target(); public native PySTEntryObject ste_comp_iter_target(int setter); /* true if visiting comprehension target */
    public native int ste_comp_iter_expr(); public native PySTEntryObject ste_comp_iter_expr(int setter); /* non-zero if visiting a comprehension range expression */
    public native int ste_lineno(); public native PySTEntryObject ste_lineno(int setter);          /* first line of block */
    public native int ste_col_offset(); public native PySTEntryObject ste_col_offset(int setter);      /* offset of first line of block */
    public native int ste_opt_lineno(); public native PySTEntryObject ste_opt_lineno(int setter);      /* lineno of last exec or import * */
    public native int ste_opt_col_offset(); public native PySTEntryObject ste_opt_col_offset(int setter);  /* offset of last exec or import * */
    public native symtable ste_table(); public native PySTEntryObject ste_table(symtable setter);
}
