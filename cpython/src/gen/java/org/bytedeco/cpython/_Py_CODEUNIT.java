// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


/* Each instruction in a code object is a fixed-width value,
 * currently 2 bytes: 1-byte opcode + 1-byte oparg.  The EXTENDED_ARG
 * opcode allows for larger values but the current limit is 3 uses
 * of EXTENDED_ARG (see Python/compile.c), for a maximum
 * 32-bit value.  This aligns with the note in Python/compile.c
 * (compiler_addop_i_line) indicating that the max oparg value is
 * 2**32 - 1, rather than INT_MAX.
 */

@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class _Py_CODEUNIT extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _Py_CODEUNIT() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _Py_CODEUNIT(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _Py_CODEUNIT(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _Py_CODEUNIT position(long position) {
        return (_Py_CODEUNIT)super.position(position);
    }
    @Override public _Py_CODEUNIT getPointer(long i) {
        return new _Py_CODEUNIT((Pointer)this).offsetAddress(i);
    }

    public native @Cast("uint16_t") short cache(); public native _Py_CODEUNIT cache(short setter);
        @Name("op.code") public native @Cast("uint8_t") byte op_code(); public native _Py_CODEUNIT op_code(byte setter);
        @Name("op.arg") public native @Cast("uint8_t") byte op_arg(); public native _Py_CODEUNIT op_arg(byte setter);
}
