// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


/* This struct is used by the specializer
 * It should should be treated as an opaque blob
 * by code other than the specializer and interpreter. */
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class _specialization_cache extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _specialization_cache() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _specialization_cache(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _specialization_cache(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _specialization_cache position(long position) {
        return (_specialization_cache)super.position(position);
    }
    @Override public _specialization_cache getPointer(long i) {
        return new _specialization_cache((Pointer)this).offsetAddress(i);
    }

    // In order to avoid bloating the bytecode with lots of inline caches, the
    // members of this structure have a somewhat unique contract. They are set
    // by the specialization machinery, and are invalidated by PyType_Modified.
    // The rules for using them are as follows:
    // - If getitem is non-NULL, then it is the same Python function that
    //   PyType_Lookup(cls, "__getitem__") would return.
    // - If getitem is NULL, then getitem_version is meaningless.
    // - If getitem->func_version == getitem_version, then getitem can be called
    //   with two positional arguments and no keyword arguments, and has neither
    //   *args nor **kwargs (as required by BINARY_SUBSCR_GETITEM):
    public native PyObject getitem(); public native _specialization_cache getitem(PyObject setter);
    public native @Cast("uint32_t") int getitem_version(); public native _specialization_cache getitem_version(int setter);
}
