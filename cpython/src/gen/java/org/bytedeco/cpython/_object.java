// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


/* Nothing is actually declared to be a PyObject, but every pointer to
 * a Python object can be cast to a PyObject*.  This is inheritance built
 * by hand.  Similarly every pointer to a variable-size Python object can,
 * in addition, be cast to PyVarObject*.
 */
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class _object extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _object() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _object(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _object(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _object position(long position) {
        return (_object)super.position(position);
    }
    @Override public _object getPointer(long i) {
        return new _object((Pointer)this).offsetAddress(i);
    }

    public native @Cast("Py_ssize_t") long ob_refcnt(); public native _object ob_refcnt(long setter);
    public native PyTypeObject ob_type(); public native _object ob_type(PyTypeObject setter);
}
