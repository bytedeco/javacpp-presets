// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;
     /* NULL or a tuple of cell objects */

@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyFrameConstructor extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyFrameConstructor() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyFrameConstructor(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyFrameConstructor(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyFrameConstructor position(long position) {
        return (PyFrameConstructor)super.position(position);
    }
    @Override public PyFrameConstructor getPointer(long i) {
        return new PyFrameConstructor((Pointer)this).offsetAddress(i);
    }

    public native PyObject fc_globals(); public native PyFrameConstructor fc_globals(PyObject setter);
    public native PyObject fc_builtins(); public native PyFrameConstructor fc_builtins(PyObject setter);
    public native PyObject fc_name(); public native PyFrameConstructor fc_name(PyObject setter);
    public native PyObject fc_qualname(); public native PyFrameConstructor fc_qualname(PyObject setter);
    public native PyObject fc_code(); public native PyFrameConstructor fc_code(PyObject setter);        /* A code object, the __code__ attribute */
    public native PyObject fc_defaults(); public native PyFrameConstructor fc_defaults(PyObject setter);    /* NULL or a tuple */
    public native PyObject fc_kwdefaults(); public native PyFrameConstructor fc_kwdefaults(PyObject setter);  /* NULL or a dict */
    public native PyObject fc_closure(); public native PyFrameConstructor fc_closure(PyObject setter);     /* NULL or a tuple of cell objects */
}
