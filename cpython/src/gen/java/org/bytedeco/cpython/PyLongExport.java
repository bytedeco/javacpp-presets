// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyLongExport extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyLongExport() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyLongExport(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyLongExport(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyLongExport position(long position) {
        return (PyLongExport)super.position(position);
    }
    @Override public PyLongExport getPointer(long i) {
        return new PyLongExport((Pointer)this).offsetAddress(i);
    }

    public native @Cast("int64_t") long value(); public native PyLongExport value(long setter);
    public native @Cast("uint8_t") byte negative(); public native PyLongExport negative(byte setter);
    public native @Cast("Py_ssize_t") long ndigits(); public native PyLongExport ndigits(long setter);
    public native @Const Pointer digits(); public native PyLongExport digits(Pointer setter);
    // Member used internally, must not be used for other purpose.
    public native @Cast("Py_uintptr_t") long _reserved(); public native PyLongExport _reserved(long setter);
}
