// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyInterpreterConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyInterpreterConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyInterpreterConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyInterpreterConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyInterpreterConfig position(long position) {
        return (PyInterpreterConfig)super.position(position);
    }
    @Override public PyInterpreterConfig getPointer(long i) {
        return new PyInterpreterConfig((Pointer)this).offsetAddress(i);
    }

    // XXX "allow_object_sharing"?  "own_objects"?
    public native int use_main_obmalloc(); public native PyInterpreterConfig use_main_obmalloc(int setter);
    public native int allow_fork(); public native PyInterpreterConfig allow_fork(int setter);
    public native int allow_exec(); public native PyInterpreterConfig allow_exec(int setter);
    public native int allow_threads(); public native PyInterpreterConfig allow_threads(int setter);
    public native int allow_daemon_threads(); public native PyInterpreterConfig allow_daemon_threads(int setter);
    public native int check_multi_interp_extensions(); public native PyInterpreterConfig check_multi_interp_extensions(int setter);
    public native int gil(); public native PyInterpreterConfig gil(int setter);
}
