// Targeted by JavaCPP version 1.5.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


/* bpo-35053: expose _Py_tracemalloc_config for performance:
   _Py_NewReference() needs an efficient check to test if tracemalloc is
   tracing.

   It has to be defined in pymem.h, before object.h is included. */
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class _PyTraceMalloc_Config extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public _PyTraceMalloc_Config() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public _PyTraceMalloc_Config(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public _PyTraceMalloc_Config(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public _PyTraceMalloc_Config position(long position) {
        return (_PyTraceMalloc_Config)super.position(position);
    }
    @Override public _PyTraceMalloc_Config getPointer(long i) {
        return new _PyTraceMalloc_Config((Pointer)this).position(position + i);
    }

    /* Module initialized?
       Variable protected by the GIL */
    /** enum _PyTraceMalloc_Config::initialized */
    public static final int
        TRACEMALLOC_NOT_INITIALIZED = 0,
        TRACEMALLOC_INITIALIZED = 1,
        TRACEMALLOC_FINALIZED = 2;

    /* Is tracemalloc tracing memory allocations?
       Variable protected by the GIL */
    public native int tracing(); public native _PyTraceMalloc_Config tracing(int setter);

    /* limit of the number of frames in a traceback, 1 by default.
       Variable protected by the GIL. */
    public native int max_nframe(); public native _PyTraceMalloc_Config max_nframe(int setter);

    /* use domain in trace key?
       Variable protected by the GIL. */
    public native int use_domain(); public native _PyTraceMalloc_Config use_domain(int setter);
}
