// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;



/* --- PyConfig ---------------------------------------------- */

/* This structure is best documented in the Doc/c-api/init_config.rst file. */
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyConfig position(long position) {
        return (PyConfig)super.position(position);
    }
    @Override public PyConfig getPointer(long i) {
        return new PyConfig((Pointer)this).offsetAddress(i);
    }

    public native int _config_init(); public native PyConfig _config_init(int setter);     /* _PyConfigInitEnum value */

    public native int isolated(); public native PyConfig isolated(int setter);
    public native int use_environment(); public native PyConfig use_environment(int setter);
    public native int dev_mode(); public native PyConfig dev_mode(int setter);
    public native int install_signal_handlers(); public native PyConfig install_signal_handlers(int setter);
    public native int use_hash_seed(); public native PyConfig use_hash_seed(int setter);
    public native @Cast("unsigned long") long hash_seed(); public native PyConfig hash_seed(long setter);
    public native int faulthandler(); public native PyConfig faulthandler(int setter);
    public native int tracemalloc(); public native PyConfig tracemalloc(int setter);
    public native int import_time(); public native PyConfig import_time(int setter);
    public native int show_ref_count(); public native PyConfig show_ref_count(int setter);
    public native int dump_refs(); public native PyConfig dump_refs(int setter);
    public native int malloc_stats(); public native PyConfig malloc_stats(int setter);
    public native @Cast("wchar_t*") Pointer filesystem_encoding(); public native PyConfig filesystem_encoding(Pointer setter);
    public native @Cast("wchar_t*") Pointer filesystem_errors(); public native PyConfig filesystem_errors(Pointer setter);
    public native @Cast("wchar_t*") Pointer pycache_prefix(); public native PyConfig pycache_prefix(Pointer setter);
    public native int parse_argv(); public native PyConfig parse_argv(int setter);
    public native @ByRef PyWideStringList orig_argv(); public native PyConfig orig_argv(PyWideStringList setter);
    public native @ByRef PyWideStringList argv(); public native PyConfig argv(PyWideStringList setter);
    public native @ByRef PyWideStringList xoptions(); public native PyConfig xoptions(PyWideStringList setter);
    public native @ByRef PyWideStringList warnoptions(); public native PyConfig warnoptions(PyWideStringList setter);
    public native int site_import(); public native PyConfig site_import(int setter);
    public native int bytes_warning(); public native PyConfig bytes_warning(int setter);
    public native int warn_default_encoding(); public native PyConfig warn_default_encoding(int setter);
    public native int inspect(); public native PyConfig inspect(int setter);
    public native int interactive(); public native PyConfig interactive(int setter);
    public native int optimization_level(); public native PyConfig optimization_level(int setter);
    public native int parser_debug(); public native PyConfig parser_debug(int setter);
    public native int write_bytecode(); public native PyConfig write_bytecode(int setter);
    public native int verbose(); public native PyConfig verbose(int setter);
    public native int quiet(); public native PyConfig quiet(int setter);
    public native int user_site_directory(); public native PyConfig user_site_directory(int setter);
    public native int configure_c_stdio(); public native PyConfig configure_c_stdio(int setter);
    public native int buffered_stdio(); public native PyConfig buffered_stdio(int setter);
    public native @Cast("wchar_t*") Pointer stdio_encoding(); public native PyConfig stdio_encoding(Pointer setter);
    public native @Cast("wchar_t*") Pointer stdio_errors(); public native PyConfig stdio_errors(Pointer setter);
// #ifdef MS_WINDOWS
// #endif
    public native @Cast("wchar_t*") Pointer check_hash_pycs_mode(); public native PyConfig check_hash_pycs_mode(Pointer setter);

    /* --- Path configuration inputs ------------ */
    public native int pathconfig_warnings(); public native PyConfig pathconfig_warnings(int setter);
    public native @Cast("wchar_t*") Pointer program_name(); public native PyConfig program_name(Pointer setter);
    public native @Cast("wchar_t*") Pointer pythonpath_env(); public native PyConfig pythonpath_env(Pointer setter);
    public native @Cast("wchar_t*") Pointer home(); public native PyConfig home(Pointer setter);
    public native @Cast("wchar_t*") Pointer platlibdir(); public native PyConfig platlibdir(Pointer setter);

    /* --- Path configuration outputs ----------- */
    public native int module_search_paths_set(); public native PyConfig module_search_paths_set(int setter);
    public native @ByRef PyWideStringList module_search_paths(); public native PyConfig module_search_paths(PyWideStringList setter);
    public native @Cast("wchar_t*") Pointer executable(); public native PyConfig executable(Pointer setter);
    public native @Cast("wchar_t*") Pointer base_executable(); public native PyConfig base_executable(Pointer setter);
    public native @Cast("wchar_t*") Pointer prefix(); public native PyConfig prefix(Pointer setter);
    public native @Cast("wchar_t*") Pointer base_prefix(); public native PyConfig base_prefix(Pointer setter);
    public native @Cast("wchar_t*") Pointer exec_prefix(); public native PyConfig exec_prefix(Pointer setter);
    public native @Cast("wchar_t*") Pointer base_exec_prefix(); public native PyConfig base_exec_prefix(Pointer setter);

    /* --- Parameter only used by Py_Main() ---------- */
    public native int skip_source_first_line(); public native PyConfig skip_source_first_line(int setter);
    public native @Cast("wchar_t*") Pointer run_command(); public native PyConfig run_command(Pointer setter);
    public native @Cast("wchar_t*") Pointer run_module(); public native PyConfig run_module(Pointer setter);
    public native @Cast("wchar_t*") Pointer run_filename(); public native PyConfig run_filename(Pointer setter);

    /* --- Private fields ---------------------------- */

    // Install importlib? If equals to 0, importlib is not initialized at all.
    // Needed by freeze_importlib.
    public native int _install_importlib(); public native PyConfig _install_importlib(int setter);

    // If equal to 0, stop Python initialization before the "main" phase.
    public native int _init_main(); public native PyConfig _init_main(int setter);

    // If non-zero, disallow threads, subprocesses, and fork.
    // Default: 0.
    public native int _isolated_interpreter(); public native PyConfig _isolated_interpreter(int setter);
}
