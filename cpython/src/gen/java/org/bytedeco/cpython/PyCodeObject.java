// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.cpython;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.cpython.global.python.*;


/* Bytecode object */
@Properties(inherit = org.bytedeco.cpython.presets.python.class)
public class PyCodeObject extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PyCodeObject() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PyCodeObject(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PyCodeObject(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PyCodeObject position(long position) {
        return (PyCodeObject)super.position(position);
    }
    @Override public PyCodeObject getPointer(long i) {
        return new PyCodeObject((Pointer)this).offsetAddress(i);
    }

    public native @ByRef PyVarObject ob_base(); public native PyCodeObject ob_base(PyVarObject setter);

    /* Note only the following fields are used in hash and/or comparisons      \
     *                                                                         \
     * - co_name                                                               \
     * - co_argcount                                                           \
     * - co_posonlyargcount                                                    \
     * - co_kwonlyargcount                                                     \
     * - co_nlocals                                                            \
     * - co_stacksize                                                          \
     * - co_flags                                                              \
     * - co_firstlineno                                                        \
     * - co_consts                                                             \
     * - co_names                                                              \
     * - co_localsplusnames                                                    \
     * This is done to preserve the name and line number for tracebacks        \
     * and debuggers; otherwise, constant de-duplication would collapse        \
     * identical functions/lambdas defined on different lines.                 \
     */

    /* These fields are set with provided values on new code objects. */

    /* The hottest fields (in the eval loop) are grouped here at the top. */
    public native PyObject co_consts(); public native PyCodeObject co_consts(PyObject setter);           /* list (constants used) */
    public native PyObject co_names(); public native PyCodeObject co_names(PyObject setter);            /* list of strings (names used) */
    public native PyObject co_exceptiontable(); public native PyCodeObject co_exceptiontable(PyObject setter);   /* Byte string encoding exception handling  \
                                      table */
    public native int co_flags(); public native PyCodeObject co_flags(int setter);                  /* CO_..., see below */

    /* The rest are not so impactful on performance. */
    public native int co_argcount(); public native PyCodeObject co_argcount(int setter);              /* #arguments, except *args */
    public native int co_posonlyargcount(); public native PyCodeObject co_posonlyargcount(int setter);       /* #positional only arguments */
    public native int co_kwonlyargcount(); public native PyCodeObject co_kwonlyargcount(int setter);        /* #keyword only arguments */
    public native int co_stacksize(); public native PyCodeObject co_stacksize(int setter);             /* #entries needed for evaluation stack */
    public native int co_firstlineno(); public native PyCodeObject co_firstlineno(int setter);           /* first source line number */

    /* redundant values (derived from co_localsplusnames and                   \
       co_localspluskinds) */
    public native int co_nlocalsplus(); public native PyCodeObject co_nlocalsplus(int setter);           /* number of local + cell + free variables */
    public native int co_framesize(); public native PyCodeObject co_framesize(int setter);             /* Size of frame in words */
    public native int co_nlocals(); public native PyCodeObject co_nlocals(int setter);               /* number of local variables */
    public native int co_ncellvars(); public native PyCodeObject co_ncellvars(int setter);             /* total number of cell variables */
    public native int co_nfreevars(); public native PyCodeObject co_nfreevars(int setter);             /* number of free variables */
    public native @Cast("uint32_t") int co_version(); public native PyCodeObject co_version(int setter);          /* version number */

    public native PyObject co_localsplusnames(); public native PyCodeObject co_localsplusnames(PyObject setter); /* tuple mapping offsets to names */
    public native PyObject co_localspluskinds(); public native PyCodeObject co_localspluskinds(PyObject setter); /* Bytes mapping to local kinds (one byte    \
                                     per variable) */
    public native PyObject co_filename(); public native PyCodeObject co_filename(PyObject setter);        /* unicode (where it was loaded from) */
    public native PyObject co_name(); public native PyCodeObject co_name(PyObject setter);            /* unicode (name, for reference) */
    public native PyObject co_qualname(); public native PyCodeObject co_qualname(PyObject setter);        /* unicode (qualname, for reference) */
    public native PyObject co_linetable(); public native PyCodeObject co_linetable(PyObject setter);       /* bytes object that holds location info */
    public native PyObject co_weakreflist(); public native PyCodeObject co_weakreflist(PyObject setter);     /* to support weakrefs to code objects */
    public native _PyCoCached _co_cached(); public native PyCodeObject _co_cached(_PyCoCached setter);      /* cached co_* attributes */
    public native @Cast("uint64_t") long _co_instrumentation_version(); public native PyCodeObject _co_instrumentation_version(long setter); /* current instrumentation version */
    public native _PyCoMonitoringData _co_monitoring(); public native PyCodeObject _co_monitoring(_PyCoMonitoringData setter); /* Monitoring data */
    public native int _co_firsttraceable(); public native PyCodeObject _co_firsttraceable(int setter);       /* index of first traceable instruction */
    /* Scratch space for extra data relating to the code object.               \
       Type is a void* to keep the format private in codeobject.c to force     \
       people to go through the proper APIs. */
    public native Pointer co_extra(); public native PyCodeObject co_extra(Pointer setter);
    public native @Cast("char") byte co_code_adaptive(int i); public native PyCodeObject co_code_adaptive(int i, byte setter);
    @MemberGetter public native @Cast("char*") BytePointer co_code_adaptive();
}
