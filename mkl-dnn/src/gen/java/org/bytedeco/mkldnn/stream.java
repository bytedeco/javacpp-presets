// Targeted by JavaCPP version 1.5.1-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.mkldnn;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.mkldnn.global.mkldnn.*;


/** \}
 <p>
 *  \addtogroup cpp_api_stream Stream
 *  Execution stream operations
 * 
 *  @see \ref c_api_stream in \ref c_api
 *  \{ */

// #ifndef DOXYGEN_SHOULD_SKIP_THIS
// #endif

/** An execution stream. */
@Namespace("mkldnn") @Properties(inherit = org.bytedeco.mkldnn.presets.mkldnn.class)
public class stream extends mkldnn_stream_handle {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public stream(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public stream(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public stream position(long position) {
        return (stream)super.position(position);
    }


    /** \brief Stream flags. */
    /** enum class mkldnn::stream::flags */
    public static final int
        /** Default order execution. Either in-order or out-of-order depending
         *  on the engine runtime */
        default_order = mkldnn_stream_default_order,
        /** In-order execution. */
        in_order = mkldnn_stream_default_order,
        /** Out-of-order execution. */
        out_of_order = mkldnn_stream_out_of_order,
        /** Default stream configuration. */
        default_flags = mkldnn_stream_default_flags;

    public stream() { super((Pointer)null); allocate(); }
    private native void allocate();

    /** Constructs a stream. */
    public stream(@Const @ByRef engine aengine,
                @Cast("mkldnn::stream::flags") int aflags/*=mkldnn::stream::flags::default_flags*/) { super((Pointer)null); allocate(aengine, aflags); }
    private native void allocate(@Const @ByRef engine aengine,
                @Cast("mkldnn::stream::flags") int aflags/*=mkldnn::stream::flags::default_flags*/);
    public stream(@Const @ByRef engine aengine) { super((Pointer)null); allocate(aengine); }
    private native void allocate(@Const @ByRef engine aengine);

// #if MKLDNN_GPU_RUNTIME == MKLDNN_RUNTIME_OCL
    /** Constructs a stream associated with the engine \p eng and with the
     *  OpenCL command queue \p queue. */

    /** Returns the OpenCL command queue associated with the stream. */
// #endif


    /** Waits for all primitives in the stream to finish. */
    public native @ByRef @Name("wait") stream _wait();
}
