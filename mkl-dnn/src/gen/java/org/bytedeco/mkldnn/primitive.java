// Targeted by JavaCPP version 1.5.1: DO NOT EDIT THIS FILE

package org.bytedeco.mkldnn;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.mkldnn.global.mkldnn.*;


/** Base class for all computational primitives. */
@Namespace("mkldnn") @Properties(inherit = org.bytedeco.mkldnn.presets.mkldnn.class)
public class primitive extends mkldnn_primitive_handle {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public primitive(Pointer p) { super(p); }

    /** Kinds of primitives. Used to implement a way to extend the library with
     *  new primitives without changing the ABI. */
    /** enum class mkldnn::primitive::kind */
    public static final int
        /** Undefined primitive */
        undef = mkldnn_undefined_primitive,
        /** A reorder primitive. */
        reorder = mkldnn_reorder,
        /** A shuffle primitive. */
        shuffle = mkldnn_shuffle,
        /** A (out-of-place) concat primitive. */
        concat = mkldnn_concat,
        /** A sum primitive. */
        sum = mkldnn_sum,
        /** A convolution primitive. */
        convolution = mkldnn_convolution,
        /** A deconvolution primitive. */
        deconvolution = mkldnn_deconvolution,
        /** An element-wise primitive. */
        eltwise = mkldnn_eltwise,
        /** A softmax primitive. */
        softmax = mkldnn_softmax,
        /** A pooling primitive. */
        pooling = mkldnn_pooling,
        /** An LRN primitive. */
        lrn = mkldnn_lrn,
        /** An batch normalization primitive. */
        batch_normalization = mkldnn_batch_normalization,
        /** An inner product primitive. */
        inner_product = mkldnn_inner_product,
        /** A rnn primitive. */
        rnn = mkldnn_rnn;

    public primitive(@Const mkldnn_primitive_desc c_pd) { super((Pointer)null); allocate(c_pd); }
    private native void allocate(@Const mkldnn_primitive_desc c_pd);
    public primitive(@Const @ByRef org.bytedeco.mkldnn.primitive_desc pd) { super((Pointer)null); allocate(pd); }
    private native void allocate(@Const @ByRef org.bytedeco.mkldnn.primitive_desc pd);

    /** Returns the descriptor of the underlying C API primitive. */
    public native @Name("get_primitive_desc") @Const mkldnn_primitive_desc get_mkldnn_primitive_desc();
    // TODO: use the C++ API wrapper structure.

    public native void execute(@ByRef stream astream,
                @Const @ByRef IntMemoryMap args);
}
