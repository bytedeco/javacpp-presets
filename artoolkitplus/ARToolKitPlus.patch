diff -ruN ARToolKitPlus-2.3.1/android-arm64.cmake ARToolKitPlus-2.3.1-patch/android-arm64.cmake
--- ARToolKitPlus-2.3.1/android-arm64.cmake	1970-01-01 09:00:00.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/android-arm64.cmake	2018-12-12 15:27:19.607493892 +0900
@@ -0,0 +1,24 @@
+# CMake toolchain to build for Android 5.0 or newer. Sample usage:
+#
+# ANDROID_BIN="/path/to/android-ndk/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/" \
+# ANDROID_CPP="/path/to/android-ndk/sources/cxx-stl/llvm-libc++/" \
+# ANDROID_CC="/path/to/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" \
+# ANDROID_ROOT="/path/to/android-ndk/platforms/android-21/arch-arm64/" \
+# cmake -DCMAKE_TOOLCHAIN_FILE=android-arm64.cmake -DCMAKE_INSTALL_PREFIX=..
+
+set(CMAKE_SYSTEM_NAME UnixPaths)
+set(CMAKE_SYSTEM_PROCESSOR arm64)
+set(ANDROID TRUE)
+
+set(CMAKE_C_COMPILER   "$ENV{ANDROID_CC}")
+set(CMAKE_CXX_COMPILER "$ENV{ANDROID_CC}++")
+
+set(CMAKE_C_LINK_EXECUTABLE    "<CMAKE_C_COMPILER>   <FLAGS> <CMAKE_C_LINK_FLAGS>   <LINK_FLAGS> <OBJECTS> -target aarch64-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -lm -lc")
+set(CMAKE_CXX_LINK_EXECUTABLE  "<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -target aarch64-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -L$ENV{ANDROID_CPP}/libs/arm64-v8a/ -static-libstdc++ -lc++_static -lc++abi -lm -lc")
+
+set(CMAKE_C_CREATE_SHARED_LIBRARY    "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -target aarch64-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <OBJECTS> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -lm -lc")
+set(CMAKE_CXX_CREATE_SHARED_LIBRARY  "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -target aarch64-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <OBJECTS> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -L$ENV{ANDROID_CPP}/libs/arm64-v8a/ -static-libstdc++ -lc++_static -lc++abi -lm -lc")
+
+add_definitions(-D__ANDROID_API__=21 -DANDROID -fPIC -ffunction-sections -funwind-tables -fstack-protector-strong -target aarch64-none-linux-android -march=armv8-a)
+
+include_directories("$ENV{ANDROID_CPP}/include/" "$ENV{ANDROID_CPP}/../llvm-libc++abi/include/" "$ENV{ANDROID_NDK}/sources/android/support/include/" "$ENV{ANDROID_CPP}/libs/arm64-v8a/include/" "$ENV{ANDROID_NDK}/sysroot/usr/include/" "$ENV{ANDROID_NDK}/sysroot/usr/include/aarch64-linux-android/" "$ENV{ANDROID_ROOT}/usr/include/")
diff -ruN ARToolKitPlus-2.3.1/android-arm.cmake ARToolKitPlus-2.3.1-patch/android-arm.cmake
--- ARToolKitPlus-2.3.1/android-arm.cmake	1970-01-01 09:00:00.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/android-arm.cmake	2018-12-12 15:26:44.226548573 +0900
@@ -0,0 +1,28 @@
+# CMake toolchain to build for Android 5.0 or newer. Sample usage:
+#
+# ANDROID_BIN="/path/to/android-ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/" \
+# ANDROID_CPP="/path/to/android-ndk/sources/cxx-stl/llvm-libc++/" \
+# ANDROID_CC="/path/to/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" \
+# ANDROID_ROOT="/path/to/android-ndk/platforms/android-21/arch-arm/" \
+# cmake -DCMAKE_TOOLCHAIN_FILE=android-arm.cmake -DCMAKE_INSTALL_PREFIX=..
+#
+# If you really need to use libnd4j on a CPU with no FPU, replace "libs/armeabi-v7a" by "libs/armeabi" and
+# "-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16" with "-march=armv5te -mtune=xscale -msoft-float"
+
+set(CMAKE_SYSTEM_NAME UnixPaths)
+set(CMAKE_SYSTEM_PROCESSOR arm)
+set(ANDROID TRUE)
+
+set(CMAKE_C_COMPILER   "$ENV{ANDROID_CC}")
+set(CMAKE_CXX_COMPILER "$ENV{ANDROID_CC}++")
+
+set(CMAKE_C_LINK_EXECUTABLE    "<CMAKE_C_COMPILER>   <FLAGS> <CMAKE_C_LINK_FLAGS>   <LINK_FLAGS> <OBJECTS> -target armv7-none-linux-androideabi -Wl,--fix-cortex-a8 -Wl,--no-undefined -z text -o <TARGET> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -lm -lc")
+set(CMAKE_CXX_LINK_EXECUTABLE  "<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -target armv7-none-linux-androideabi -Wl,--fix-cortex-a8 -Wl,--no-undefined -z text -o <TARGET> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -L$ENV{ANDROID_CPP}/libs/armeabi-v7a/ -static-libstdc++ -lc++_static -lc++abi -landroid_support -lm -lc")
+
+set(CMAKE_C_CREATE_SHARED_LIBRARY    "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -target armv7-none-linux-androideabi -Wl,--fix-cortex-a8 -Wl,--no-undefined -z text -o <TARGET> <OBJECTS> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -lm -lc")
+set(CMAKE_CXX_CREATE_SHARED_LIBRARY  "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -target armv7-none-linux-androideabi -Wl,--fix-cortex-a8 -Wl,--no-undefined -z text -o <TARGET> <OBJECTS> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -L$ENV{ANDROID_CPP}/libs/armeabi-v7a/ -static-libstdc++ -lc++_static -lc++abi -landroid_support -lm -lc")
+
+add_definitions(-D__ANDROID_API__=21 -DANDROID -fPIC -ffunction-sections -funwind-tables -fstack-protector-strong -target armv7-none-linux-androideabi -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16)
+
+include_directories("$ENV{ANDROID_CPP}/include/" "$ENV{ANDROID_CPP}/../llvm-libc++abi/include/" "$ENV{ANDROID_NDK}/sources/android/support/include/" "$ENV{ANDROID_CPP}/libs/armeabi-v7a/include/" "$ENV{ANDROID_NDK}/sysroot/usr/include/" "$ENV{ANDROID_NDK}/sysroot/usr/include/arm-linux-androideabi/" "$ENV{ANDROID_ROOT}/usr/include/")
+
diff -ruN ARToolKitPlus-2.3.1/android-x86_64.cmake ARToolKitPlus-2.3.1-patch/android-x86_64.cmake
--- ARToolKitPlus-2.3.1/android-x86_64.cmake	1970-01-01 09:00:00.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/android-x86_64.cmake	2018-12-12 15:27:23.783487656 +0900
@@ -0,0 +1,24 @@
+# CMake toolchain to build for Android 5.0 or newer. Sample usage:
+#
+# ANDROID_BIN="/path/to/android-ndk/toolchains/x86_64-4.9/prebuilt/linux-x86_64/" \
+# ANDROID_CPP="/path/to/android-ndk/sources/cxx-stl/llvm-libc++/" \
+# ANDROID_CC="/path/to/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" \
+# ANDROID_ROOT="/path/to/android-ndk/platforms/android-21/arch-x86_64/" \
+# cmake -DCMAKE_TOOLCHAIN_FILE=android-x86_64.cmake -DCMAKE_INSTALL_PREFIX=..
+
+set(CMAKE_SYSTEM_NAME UnixPaths)
+set(CMAKE_SYSTEM_PROCESSOR atom64)
+set(ANDROID TRUE)
+
+set(CMAKE_C_COMPILER   "$ENV{ANDROID_CC}")
+set(CMAKE_CXX_COMPILER "$ENV{ANDROID_CC}++")
+
+set(CMAKE_C_LINK_EXECUTABLE    "<CMAKE_C_COMPILER>   <FLAGS> <CMAKE_C_LINK_FLAGS>   <LINK_FLAGS> <OBJECTS> -target x86_64-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -lm -lc")
+set(CMAKE_CXX_LINK_EXECUTABLE  "<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -target x86_64-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -L$ENV{ANDROID_CPP}/libs/x86_64/ -static-libstdc++ -lc++_static -lc++abi -lm -lc")
+
+set(CMAKE_C_CREATE_SHARED_LIBRARY    "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -target x86_64-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <OBJECTS> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -lm -lc")
+set(CMAKE_CXX_CREATE_SHARED_LIBRARY  "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -target x86_64-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <OBJECTS> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -L$ENV{ANDROID_CPP}/libs/x86_64/ -static-libstdc++ -lc++_static -lc++abi -lm -lc")
+
+add_definitions(-D__ANDROID_API__=21 -DANDROID -fPIC -ffunction-sections -funwind-tables -fstack-protector-strong -target x86_64-none-linux-android -march=x86-64 -mtune=atom)
+
+include_directories("$ENV{ANDROID_CPP}/include/" "$ENV{ANDROID_CPP}/../llvm-libc++abi/include/" "$ENV{ANDROID_NDK}/sources/android/support/include/" "$ENV{ANDROID_CPP}/libs/x86_64/include/" "$ENV{ANDROID_NDK}/sysroot/usr/include/" "$ENV{ANDROID_NDK}/sysroot/usr/include/x86_64-linux-android/" "$ENV{ANDROID_ROOT}/usr/include/")
diff -ruN ARToolKitPlus-2.3.1/android-x86.cmake ARToolKitPlus-2.3.1-patch/android-x86.cmake
--- ARToolKitPlus-2.3.1/android-x86.cmake	1970-01-01 09:00:00.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/android-x86.cmake	2018-12-12 15:27:27.614481936 +0900
@@ -0,0 +1,24 @@
+# CMake toolchain to build for Android 5.0 or newer. Sample usage:
+#
+# ANDROID_BIN="/path/to/android-ndk/toolchains/x86-4.9/prebuilt/linux-x86_64/" \
+# ANDROID_CPP="/path/to/android-ndk/sources/cxx-stl/llvm-libc++/" \
+# ANDROID_CC="/path/to/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/clang" \
+# ANDROID_ROOT="/path/to/android-ndk/platforms/android-21/arch-x86/" \
+# cmake -DCMAKE_TOOLCHAIN_FILE=android-x86.cmake -DCMAKE_INSTALL_PREFIX=..
+
+set(CMAKE_SYSTEM_NAME UnixPaths)
+set(CMAKE_SYSTEM_PROCESSOR atom)
+set(ANDROID TRUE)
+
+set(CMAKE_C_COMPILER   "$ENV{ANDROID_CC}")
+set(CMAKE_CXX_COMPILER "$ENV{ANDROID_CC}++")
+
+set(CMAKE_C_LINK_EXECUTABLE    "<CMAKE_C_COMPILER>   <FLAGS> <CMAKE_C_LINK_FLAGS>   <LINK_FLAGS> <OBJECTS> -target i686-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -lm -lc")
+set(CMAKE_CXX_LINK_EXECUTABLE  "<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -target i686-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -L$ENV{ANDROID_CPP}/libs/x86/ -static-libstdc++ -lc++_static -lc++abi -landroid_support -lm -lc")
+
+set(CMAKE_C_CREATE_SHARED_LIBRARY    "<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -target i686-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <OBJECTS> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -lm -lc")
+set(CMAKE_CXX_CREATE_SHARED_LIBRARY  "<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -target i686-none-linux-android -Wl,--no-undefined -z text -o <TARGET> <OBJECTS> <LINK_LIBRARIES> -gcc-toolchain $ENV{ANDROID_BIN} --sysroot=$ENV{ANDROID_ROOT} -L$ENV{ANDROID_CPP}/libs/x86/ -static-libstdc++ -lc++_static -lc++abi -landroid_support -lm -lc")
+
+add_definitions(-D__ANDROID_API__=21 -DANDROID -fPIC -ffunction-sections -funwind-tables -fstack-protector-strong -target i686-none-linux-android -march=i686 -mtune=atom -mssse3 -mfpmath=sse)
+
+include_directories("$ENV{ANDROID_CPP}/include/" "$ENV{ANDROID_CPP}/../llvm-libc++abi/include/" "$ENV{ANDROID_NDK}/sources/android/support/include/" "$ENV{ANDROID_CPP}/libs/x86/include/" "$ENV{ANDROID_NDK}/sysroot/usr/include/" "$ENV{ANDROID_NDK}/sysroot/usr/include/i686-linux-android/" "$ENV{ANDROID_ROOT}/usr/include/")
diff -ruN ARToolKitPlus-2.3.1/CMakeLists.txt ARToolKitPlus-2.3.1-patch/CMakeLists.txt
--- ARToolKitPlus-2.3.1/CMakeLists.txt	2014-10-06 04:46:01.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/CMakeLists.txt	2018-12-12 15:19:48.980322200 +0900
@@ -8,8 +8,10 @@
 option(ARTK_USE_BOOST "Compile with boost (OpenCV calibration file support)" FALSE)
 
 if(WIN32)
-	add_definitions(-D_CRT_SECURE_NO_WARNINGS -DAR_LIBRARY)
-endif()
+	add_definitions(-D_CRT_SECURE_NO_WARNINGS -DAR_STATIC)
+else(WIN32)
+	add_definitions(-Wall -O3 -fPIC)
+endif(WIN32)
 
 if (CMAKE_BUILD_TYPE STREQUAL "")
   set(CMAKE_BUILD_TYPE "release" CACHE STRING "" FORCE)
@@ -31,7 +33,7 @@
 	${AR_SOURCE_DIR}/src/librpp/*.cpp
 	)
 
-add_library(ARToolKitPlus SHARED ${HEADERS_AR} ${SOURCES_AR})
+add_library(ARToolKitPlus STATIC ${HEADERS_AR} ${SOURCES_AR})
 
 if(ARTK_BUILD_EXAMPLES)
     add_subdirectory(bin/)
@@ -39,8 +41,8 @@
 
 # make install
 install(TARGETS ARToolKitPlus 
-LIBRARY DESTINATION lib  
-ARCHIVE DESTINATION lib
+LIBRARY DESTINATION lib${LIB_SUFFIX}
+ARCHIVE DESTINATION lib${LIB_SUFFIX}
 RUNTIME DESTINATION bin)
 
 install(DIRECTORY include/ DESTINATION include)
diff -ruN ARToolKitPlus-2.3.1/include/ARToolKitPlus/Tracker.h ARToolKitPlus-2.3.1-patch/include/ARToolKitPlus/Tracker.h
--- ARToolKitPlus-2.3.1/include/ARToolKitPlus/Tracker.h	2014-10-06 04:46:01.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/include/ARToolKitPlus/Tracker.h	2018-12-12 15:19:48.980322200 +0900
@@ -30,6 +30,7 @@
 #include <ARToolKitPlus/extra/BCH.h>
 #include <ARToolKitPlus/extra/Hull.h>
 
+#include <algorithm>
 #include <vector>
 
 
@@ -585,8 +586,8 @@
 
     HULL_TRACKING_MODE hullTrackingMode;
 
-    static int screenWidth;
-	static int screenHeight;
+    int screenWidth;
+    int screenHeight;
     int thresh;
 
     ARFloat gl_para[16];
diff -ruN ARToolKitPlus-2.3.1/src/Camera.cpp ARToolKitPlus-2.3.1-patch/src/Camera.cpp
--- ARToolKitPlus-2.3.1/src/Camera.cpp	2014-10-06 04:46:01.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/src/Camera.cpp	2018-12-12 15:19:48.980322200 +0900
@@ -19,6 +19,7 @@
  *  Pavel Rojtberg
  */
 
+#include <algorithm>
 #include <cstdlib>
 #include <cstring>
 #include <fstream>
diff -ruN ARToolKitPlus-2.3.1/src/core/rppMultiGetTransMat.cpp ARToolKitPlus-2.3.1-patch/src/core/rppMultiGetTransMat.cpp
--- ARToolKitPlus-2.3.1/src/core/rppMultiGetTransMat.cpp	2014-10-06 04:46:01.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/src/core/rppMultiGetTransMat.cpp	2018-12-12 15:19:48.981322198 +0900
@@ -43,7 +43,7 @@
             std::map<int, int>::iterator iter = marker_id_freq.find(m_patt_id);
 
             if (iter == marker_id_freq.end()) {
-                marker_id_freq.insert(std::make_pair<int, int>(int(m_patt_id), 1));
+                marker_id_freq.insert(std::make_pair(int(m_patt_id), 1));
             } else {
                 ((*iter).second)++;
             }
@@ -52,7 +52,7 @@
 
     std::deque<std::pair<int, int> > config_patt_id;
     for (int j = 0; j < config->marker_num; j++)
-        config_patt_id.push_back(std::make_pair<int, int>(int(j), int(config->marker[j].patt_id)));
+        config_patt_id.push_back(std::make_pair(int(j), int(config->marker[j].patt_id)));
 
     std::map<int, int> m2c_idx;
     for (int m = 0; m < marker_num; m++) {
@@ -67,7 +67,7 @@
                 do {
                     const int patt_id = (*c_iter).second;
                     if (marker_info[m].id == patt_id) {
-                        m2c_idx.insert(std::make_pair<int, int>(int(m), int((*c_iter).first)));
+                        m2c_idx.insert(std::make_pair(int(m), int((*c_iter).first)));
                         config_patt_id.erase(c_iter);
                         c_iter = config_patt_id.end();
                         continue;
diff -ruN ARToolKitPlus-2.3.1/src/Tracker.cpp ARToolKitPlus-2.3.1-patch/src/Tracker.cpp
--- ARToolKitPlus-2.3.1/src/Tracker.cpp	2014-10-06 04:46:01.000000000 +0900
+++ ARToolKitPlus-2.3.1-patch/src/Tracker.cpp	2018-12-12 15:19:48.981322198 +0900
@@ -29,8 +29,8 @@
 
 namespace ARToolKitPlus {
 
-int Tracker::screenWidth;
-int Tracker::screenHeight;
+// int Tracker::screenWidth;
+// int Tracker::screenHeight;
 
 Tracker::Tracker(int imWidth, int imHeight, int maxImagePatterns, int pattWidth, int pattHeight, int pattSamples,
         int maxLoadPatterns) :
@@ -186,6 +186,7 @@
     // (usually this image buffer should only be built once - unless we change camera resolution)
     //
 
+
     int newSize = screenWidth * screenHeight;
 
     if (newSize == l_imageL_size)
@@ -345,7 +346,8 @@
         return false;
     }
 
-    pCam->changeFrameSize(Tracker::screenWidth, Tracker::screenHeight);
+    // TODO: Why this ?
+    // pCam->changeFrameSize(screenWidth, screenHeight);
 
     int i;
     for (i = 0; i < 4; i++)
