// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflowlite;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflowlite.global.tensorflowlite.*;

// #endif  // __cplusplus

// TFLite model, interpreter or delegate settings that will be reported by
// telemetry.
// Note: This struct does not comply with ABI stability.
@Properties(inherit = org.bytedeco.tensorflowlite.presets.tensorflowlite.class)
public class TfLiteTelemetrySettings extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TfLiteTelemetrySettings() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TfLiteTelemetrySettings(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TfLiteTelemetrySettings(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TfLiteTelemetrySettings position(long position) {
        return (TfLiteTelemetrySettings)super.position(position);
    }
    @Override public TfLiteTelemetrySettings getPointer(long i) {
        return new TfLiteTelemetrySettings((Pointer)this).offsetAddress(i);
    }

  // Source of the settings. Determines how `data` is interpreted.
  // See tflite::telemetry::TelemetrySource for definition.
  public native @Cast("uint32_t") int source(); public native TfLiteTelemetrySettings source(int setter);

  // Settings data. Interpretation based on `source`.
  // If `source` is TFLITE_INTERPRETER, the type of `data` will
  // be `TelemetryInterpreterSettings`.
  // Otherwise, the data is provided by the individual delegate.
  // Owned by the caller that exports TelemetrySettings (e.g. Interpreter).
  public native @Const Pointer data(); public native TfLiteTelemetrySettings data(Pointer setter);
}
