// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflowlite;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflowlite.global.tensorflowlite.*;


// An external context is a collection of information unrelated to the TF Lite
// framework, but useful to a subset of the ops. TF Lite knows very little
// about the actual contexts, but it keeps a list of them, and is able to
// refresh them if configurations like the number of recommended threads
// change.
@Properties(inherit = org.bytedeco.tensorflowlite.presets.tensorflowlite.class)
public class TfLiteExternalContext extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TfLiteExternalContext() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TfLiteExternalContext(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TfLiteExternalContext(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TfLiteExternalContext position(long position) {
        return (TfLiteExternalContext)super.position(position);
    }
    @Override public TfLiteExternalContext getPointer(long i) {
        return new TfLiteExternalContext((Pointer)this).offsetAddress(i);
    }

  public native @Cast("TfLiteExternalContextType") int type(); public native TfLiteExternalContext type(int setter);
  public static class Refresh_TfLiteContext extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Refresh_TfLiteContext(Pointer p) { super(p); }
      protected Refresh_TfLiteContext() { allocate(); }
      private native void allocate();
      public native @Cast("TfLiteStatus") int call(TfLiteContext context);
  }
  public native Refresh_TfLiteContext Refresh(); public native TfLiteExternalContext Refresh(Refresh_TfLiteContext setter);
}
