// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflowlite;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflowlite.global.tensorflowlite.*;


/** TfLiteSignatureRunner is used to run inference on a signature.
 * 
 *  Note: A signature is used to define a computation in a TF model. A model can
 *  have multiple signatures. Each signature contains three components:
 *    * Signature Key: A unique string to identify a signature
 *    * Inputs: A list of names, each mapped to an input tensor of a signature
 *    * Outputs: A list of names, each mapped to an output tensor of a signature
 * 
 *  To learn more about signatures in TFLite, refer to:
 *  https://www.tensorflow.org/lite/guide/signatures
 * 
 *  Using the TfLiteSignatureRunner, for a particular signature, you can set its
 *  inputs, invoke (i.e. execute) the computation, and retrieve its outputs. */

///
@Opaque @Properties(inherit = org.bytedeco.tensorflowlite.presets.tensorflowlite.class)
public class TfLiteSignatureRunner extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public TfLiteSignatureRunner() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TfLiteSignatureRunner(Pointer p) { super(p); }
}
