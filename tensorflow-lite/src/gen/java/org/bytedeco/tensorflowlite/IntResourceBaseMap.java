// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflowlite;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflowlite.global.tensorflowlite.*;

@Name("std::unordered_map<std::int32_t,std::unique_ptr<tflite::resource::ResourceBase> >") @Properties(inherit = org.bytedeco.tensorflowlite.presets.tensorflowlite.class)
public class IntResourceBaseMap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IntResourceBaseMap(Pointer p) { super(p); }
    public IntResourceBaseMap()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef IntResourceBaseMap put(@ByRef @StdMove IntResourceBaseMap x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index public native @UniquePtr @Cast({"", "std::unique_ptr<tflite::resource::ResourceBase>&&"}) ResourceBase get(@Cast("std::int32_t") int i);
    public native IntResourceBaseMap put(@Cast("std::int32_t") int i, ResourceBase value);

    public native void erase(@ByVal Iterator pos);
    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator ++") @ByRef Iterator increment();
        public native @Name("operator ==") boolean equals(@ByRef Iterator it);
        public native @Name("operator *().first") @MemberGetter @Cast("std::int32_t") int first();
        public native @Name("operator *().second") @MemberGetter @UniquePtr @Cast({"", "std::unique_ptr<tflite::resource::ResourceBase>&&"}) ResourceBase second();
    }
}

