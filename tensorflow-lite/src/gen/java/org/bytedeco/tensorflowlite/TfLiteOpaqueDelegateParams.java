// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflowlite;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflowlite.global.tensorflowlite.*;


// WARNING: This is an experimental interface that is subject to change.
//
// Currently, TfLiteOpaqueDelegateParams has to be allocated in a way that it's
// trivially destructable. It will be stored as `builtin_data` field in
// `TfLiteNode` of the delegate node.
//
// See also the `CreateOpaqueDelegateParams` function in `subgraph.cc`
// details.
@Properties(inherit = org.bytedeco.tensorflowlite.presets.tensorflowlite.class)
public class TfLiteOpaqueDelegateParams extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TfLiteOpaqueDelegateParams() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TfLiteOpaqueDelegateParams(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TfLiteOpaqueDelegateParams(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TfLiteOpaqueDelegateParams position(long position) {
        return (TfLiteOpaqueDelegateParams)super.position(position);
    }
    @Override public TfLiteOpaqueDelegateParams getPointer(long i) {
        return new TfLiteOpaqueDelegateParams((Pointer)this).offsetAddress(i);
    }

  public native @Cast("TfLiteOpaqueDelegate*") TfLiteOpaqueDelegateStruct delegate(); public native TfLiteOpaqueDelegateParams delegate(TfLiteOpaqueDelegateStruct setter);
  public native Pointer delegate_data(); public native TfLiteOpaqueDelegateParams delegate_data(Pointer setter);
  public native TfLiteIntArray nodes_to_replace(); public native TfLiteOpaqueDelegateParams nodes_to_replace(TfLiteIntArray setter);
  public native TfLiteIntArray input_tensors(); public native TfLiteOpaqueDelegateParams input_tensors(TfLiteIntArray setter);
  public native TfLiteIntArray output_tensors(); public native TfLiteOpaqueDelegateParams output_tensors(TfLiteIntArray setter);
}
