// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.ngraph;

import org.bytedeco.ngraph.Allocator;
import org.bytedeco.ngraph.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ngraph.global.ngraph.*;

        @Namespace("ngraph::runtime") @NoOffset @Properties(inherit = org.bytedeco.ngraph.presets.ngraph.class)
public class PerformanceCounter extends Pointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public PerformanceCounter(Pointer p) { super(p); }
        
            public PerformanceCounter(@Const @Cast("const ngraph::Node*") @SharedPtr @ByRef Node n, @Cast("size_t") long us, @Cast("size_t") long calls) { super((Pointer)null); allocate(n, us, calls); }
            private native void allocate(@Const @Cast("const ngraph::Node*") @SharedPtr @ByRef Node n, @Cast("size_t") long us, @Cast("size_t") long calls);
            public native @Cast("const ngraph::Node*") @SharedPtr @ByVal Node get_node();
            public native @Cast("size_t") long total_microseconds();
            public native @Cast("size_t") long microseconds();
            public native @Cast("size_t") long call_count();
            public native @Cast("const ngraph::Node*") @SharedPtr @ByRef Node m_node(); public native PerformanceCounter m_node(Node setter);
            public native @Cast("size_t") long m_total_microseconds(); public native PerformanceCounter m_total_microseconds(long setter);
            public native @Cast("size_t") long m_call_count(); public native PerformanceCounter m_call_count(long setter);
        }
