// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngraph;

import org.bytedeco.ngraph.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ngraph.global.ngraph.*;

    /** \brief Coordinates for a tensor element */
    @Namespace("ngraph") @Properties(inherit = org.bytedeco.ngraph.presets.ngraph.class)
public class Coordinate extends SizeTVector {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Coordinate(Pointer p) { super(p); }
    
        public Coordinate() { super((Pointer)null); allocate(); }
        private native void allocate();

        public Coordinate(@Const @ByRef Shape shape) { super((Pointer)null); allocate(shape); }
        private native void allocate(@Const @ByRef Shape shape);

        public Coordinate(@Const @ByRef SizeTVector axes) { super((Pointer)null); allocate(axes); }
        private native void allocate(@Const @ByRef SizeTVector axes);

        public Coordinate(@Const @ByRef Coordinate axes) { super((Pointer)null); allocate(axes); }
        private native void allocate(@Const @ByRef Coordinate axes);

        public Coordinate(@Cast("size_t") long n, @Cast("size_t") long initial_value/*=0*/) { super((Pointer)null); allocate(n, initial_value); }
        private native void allocate(@Cast("size_t") long n, @Cast("size_t") long initial_value/*=0*/);
        public Coordinate(@Cast("size_t") long n) { super((Pointer)null); allocate(n); }
        private native void allocate(@Cast("size_t") long n);

        public native @ByRef @Name("operator =") Coordinate put(@Const @ByRef Coordinate v);
    }
