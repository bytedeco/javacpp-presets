// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.ngraph;

import org.bytedeco.ngraph.Allocator;
import org.bytedeco.ngraph.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ngraph.global.ngraph.*;

        @Namespace("ngraph::op") @NoOffset @Properties(inherit = org.bytedeco.ngraph.presets.ngraph.class)
public class Result extends Op {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public Result(Pointer p) { super(p); }
            /** Native array allocator. Access with {@link Pointer#position(long)}. */
            public Result(long size) { super((Pointer)null); allocateArray(size); }
            private native void allocateArray(long size);
            @Override public Result position(long position) {
                return (Result)super.position(position);
            }
            @Override public Result getPointer(long i) {
                return new Result((Pointer)this).position(position + i);
            }
        
            @MemberGetter public static native @StdString BytePointer type_name();
            public native @StdString BytePointer description();
            /** \brief Allows a value to be used as a function result. */
            
            ///
            public Result() { super((Pointer)null); allocate(); }
            private native void allocate();
            /** \brief Allows a value to be used as a function result.
             * 
             *  @param arg Node that produces the input tensor. */
            public Result(@Const @ByRef NodeOutput arg, @Cast("bool") boolean needs_default_layout/*=false*/) { super((Pointer)null); allocate(arg, needs_default_layout); }
            private native void allocate(@Const @ByRef NodeOutput arg, @Cast("bool") boolean needs_default_layout/*=false*/);
            public Result(@Const @ByRef NodeOutput arg) { super((Pointer)null); allocate(arg); }
            private native void allocate(@Const @ByRef NodeOutput arg);

            public native void validate_and_infer_types();

            public native @SharedPtr @ByVal Node copy_with_new_args(@Const @ByRef NodeVector new_args);

            public native @Cast("bool") boolean is_output();
            public native void set_needs_default_layout(@Cast("bool") boolean val);
            public native @Cast("bool") boolean needs_default_layout();
        }
