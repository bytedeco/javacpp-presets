// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngraph;

import org.bytedeco.ngraph.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ngraph.global.ngraph.*;

        /** \brief Weight for an input */
        @Namespace("ngraph::onnx_import") @NoOffset @Properties(inherit = org.bytedeco.ngraph.presets.ngraph.class)
public class Weight extends Pointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public Weight(Pointer p) { super(p); }
        
            public Weight(@Const @ByRef Weight arg0) { super((Pointer)null); allocate(arg0); }
            private native void allocate(@Const @ByRef Weight arg0);
            

            
            

            public Weight(@Const @ByRef Type type, @Const @ByRef Shape shape, @Cast("char*") @StdVector BytePointer data) { super((Pointer)null); allocate(type, shape, data); }
            private native void allocate(@Const @ByRef Type type, @Const @ByRef Shape shape, @Cast("char*") @StdVector BytePointer data);
            public Weight(@Const @ByRef Type type, @Const @ByRef Shape shape, @Cast("char*") @StdVector ByteBuffer data) { super((Pointer)null); allocate(type, shape, data); }
            private native void allocate(@Const @ByRef Type type, @Const @ByRef Shape shape, @Cast("char*") @StdVector ByteBuffer data);
            public Weight(@Const @ByRef Type type, @Const @ByRef Shape shape, @Cast("char*") @StdVector byte[] data) { super((Pointer)null); allocate(type, shape, data); }
            private native void allocate(@Const @ByRef Type type, @Const @ByRef Shape shape, @Cast("char*") @StdVector byte[] data);

            public native @Const @ByRef Shape shape();
            public native @Cast("std::size_t") long size();
            public native @Const @ByRef Type type();
            public native @SharedPtr @ByVal Tensor to_tensor(@ByRef Backend backend);

            public native @Const Pointer data();
        }
