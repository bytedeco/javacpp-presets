// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngraph;

import org.bytedeco.ngraph.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ngraph.global.ngraph.*;


/** \brief Interface to a generic backend.
 * 
 *  Backends are responsible for function execution and value allocation. */
@Name("ngraph::runtime::Backend") @Properties(inherit = org.bytedeco.ngraph.presets.ngraph.class)
public class Backend extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Backend(Pointer p) { super(p); }

    /** \brief Create a new Backend object
     *  @param type The name of a registered backend, such as "CPU" or "GPU".
     *    To select a subdevice use "GPU:N" where s{@code N} is the subdevice number.
     *  @return unique_ptr to a new Backend or nullptr if the named backend
     *    does not exist. */
    public static native @UniquePtr Backend create(@StdString BytePointer type);
    public static native @UniquePtr Backend create(@StdString String type);

    /** \brief Query the list of registered devices
     *  @return A vector of all registered devices. */
    public static native @ByVal StringVector get_registered_devices();

    /** \brief Create a tensor specific to this backend
     *  @param element_type The type of the tensor element
     *  @param shape The shape of the tensor
     *  @return shared_ptr to a new backend-specific tensor */
    public native @SharedPtr @ByVal Tensor create_tensor(@Const @ByRef Type element_type, @Const @ByRef Shape shape);

    /** \brief Create a tensor specific to this backend
     *  @param element_type The type of the tensor element
     *  @param shape The shape of the tensor
     *  @param memory_pointer A pointer to a buffer used for this tensor. The size of the buffer
     *      must be sufficient to contain the tensor. The lifetime of the buffer is the
     *      responsibility of the caller.
     *  @return shared_ptr to a new backend-specific tensor */
    public native @SharedPtr @ByVal Tensor create_tensor(
            @Const @ByRef Type element_type, @Const @ByRef Shape shape, Pointer memory_pointer);

    /** \brief Create a tensor of C type T specific to this backend
     *  @param shape The shape of the tensor
     *  @return shared_ptr to a new backend specific tensor */

    /** \brief Compiles a Function.
     *  @param func The function to compile
     *  @return compiled function or nullptr on failure */
    public native @SharedPtr @ByVal Function compile(@SharedPtr @ByVal Function func);

    /** \brief Executes a single iteration of a Function. If func is not compiled the call will
     *      compile it.
     *  @param func The function to execute
     *  @return true if iteration is successful, false otherwise */
    public native @Cast("bool") boolean call(@SharedPtr @ByVal Function func,
                          @Const @ByRef NgraphTensorVector outputs,
                          @Const @ByRef NgraphTensorVector inputs);

    /** \brief Executes a single iteration of a Function. If func is not compiled the call will
     *      compile it. Optionally validates the inputs and outputs against the function graph.
     *  @param func The function to execute
     *  @return true if iteration is successful, false otherwise */
    public native @Cast("bool") boolean call_with_validate(@SharedPtr @ByVal Function func,
                                @Const @ByRef NgraphTensorVector outputs,
                                @Const @ByRef NgraphTensorVector inputs);

    /** \brief Compiled functions may be cached. This function removes a compiled function
     *      from the cache.
     *  @param func The function to execute */
    public native void remove_compiled_function(@SharedPtr @ByVal Function func);

    /** \brief Enable the collection of per-op performance information on a specified Function.
     *      Data collection is via the {@code get_performance_data} method.
     *  @param func The function to collect perfomance data on.
     *  @param enable Set to true to enable or false to disable data collection */
    public native void enable_performance_data(@SharedPtr @ByVal Function func, @Cast("bool") boolean enable);
    /** \brief Collect performance information gathered on a Function.
     *  @param func The function to get collected data.
     *  @return Vector of PerformanceCounter information. */
    public native @StdVector PerformanceCounter get_performance_data(@SharedPtr @ByVal Function func);

    /** \brief Test if a backend is capable of supporting an op
     *  @param node is the op to test.
     *  @return true if the op is supported, false otherwise. */
    public native @Cast("bool") boolean is_supported(@Const @ByRef Node node);

    /** \brief A set of properties supported by a backend */
    /** enum class ngraph::runtime::Backend::Property */
    public static final int
        memory_attach = 0; /** New tensor can use attached memory */

    /** \brief Test if a backend particular property is supported
     *  @param prop is the feature to test.
     *  @return true if the property is supported, false otherwise. */
    public native @Cast("bool") boolean is_supported_property(@Cast("const ngraph::runtime::Backend::Property") int prop);
    public native void validate(@Cast("const ngraph::Function*") @SharedPtr @ByVal Function func,
                      @Const @ByRef NgraphTensorVector outputs,
                      @Const @ByRef NgraphTensorVector inputs);
}
