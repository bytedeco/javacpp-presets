// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngraph;

import org.bytedeco.ngraph.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ngraph.global.ngraph.*;

        @Namespace("ngraph::runtime") @NoOffset @Properties(inherit = org.bytedeco.ngraph.presets.ngraph.class)
public class Tensor extends Pointer {
            static { Loader.load(); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public Tensor(Pointer p) { super(p); }
        
            public native @ByRef @Name("operator =") Tensor put(@Const @ByRef Tensor arg0);

            /** \brief Get tensor shape
             *  @return const reference to a Shape */
            public native @Const @ByRef Shape get_shape();

            /** \brief Get tensor strides
             *  @return Strides */
            public native @ByVal Strides get_strides();

            /** \brief Get tensor element type
             *  @return element::Type */
            public native @Const @ByRef Type get_element_type();

            /** \brief Get number of elements in the tensor
             *  @return number of elements in the tensor */
            public native @Cast("size_t") long get_element_count();

            /** \brief Get the size in bytes of the tensor
             *  @return number of bytes in tensor's allocation */
            public native @Cast("size_t") long get_size_in_bytes();

            /** \brief Get tensor's unique name
             *  @return tensor's name */
            public native @StdString BytePointer get_name();

            /** \brief Get tensor layout
             *  @return tensor layout */
            public native @SharedPtr TensorLayout get_tensor_layout();

            /** \brief Set tensor layout
             *  @param layout Layout to set */
            public native void set_tensor_layout(@SharedPtr TensorLayout layout);

            /** \brief Get the stale value of the tensor. A tensor is stale if its data is
             *  changed.
             *  @return true if there is new data in this tensor */
            public native @Cast("bool") boolean get_stale();

            /** \brief Set the stale value of the tensor. A tensor is stale if its data is
             *  changed. */
            public native void set_stale(@Cast("bool") boolean val);

            /** \brief Write bytes directly into the tensor
             *  @param p Pointer to source of data
             *  @param offset Offset into tensor storage to begin writing. Must be element-aligned.
             *  @param n Number of bytes to write, must be integral number of elements. */
            public native void write(@Const Pointer p, @Cast("size_t") long offset, @Cast("size_t") long n);

            /** \brief Read bytes directly from the tensor
             *  @param p Pointer to destination for data
             *  @param offset Offset into tensor storage to begin writing. Must be element-aligned.
             *  @param n Number of bytes to read, must be integral number of elements. */
            public native void read(Pointer p, @Cast("size_t") long offset, @Cast("size_t") long n);

            /** \brief copy bytes directly from source to this tensor
             *  @param source The source tensor */
            public native void copy_from(@Const @ByRef Tensor source);

            public native @Const Backend get_parent();
        }
