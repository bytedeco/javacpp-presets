// Targeted by JavaCPP version 1.5.5: DO NOT EDIT THIS FILE

package org.bytedeco.ngraph;

import org.bytedeco.ngraph.Allocator;
import org.bytedeco.ngraph.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ngraph.global.ngraph.*;

    /** A user-defined function. */
    @Namespace("ngraph") @NoOffset @Properties(inherit = org.bytedeco.ngraph.presets.ngraph.class)
public class Function extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Function(Pointer p) { super(p); }
    
        public Function(@Const @ByRef NodeVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString BytePointer name/*=""*/) { super((Pointer)null); allocate(results, parameters, name); }
        private native void allocate(@Const @ByRef NodeVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString BytePointer name/*=""*/);
        public Function(@Const @ByRef NodeVector results,
                         @Const @ByRef ParameterVector parameters) { super((Pointer)null); allocate(results, parameters); }
        private native void allocate(@Const @ByRef NodeVector results,
                         @Const @ByRef ParameterVector parameters);
        public Function(@Const @ByRef NodeVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString String name/*=""*/) { super((Pointer)null); allocate(results, parameters, name); }
        private native void allocate(@Const @ByRef NodeVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString String name/*=""*/);

        public Function(@Cast("const ngraph::OutputVector*") @ByRef NodeOutputVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString BytePointer name/*=""*/) { super((Pointer)null); allocate(results, parameters, name); }
        private native void allocate(@Cast("const ngraph::OutputVector*") @ByRef NodeOutputVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString BytePointer name/*=""*/);
        public Function(@Cast("const ngraph::OutputVector*") @ByRef NodeOutputVector results,
                         @Const @ByRef ParameterVector parameters) { super((Pointer)null); allocate(results, parameters); }
        private native void allocate(@Cast("const ngraph::OutputVector*") @ByRef NodeOutputVector results,
                         @Const @ByRef ParameterVector parameters);
        public Function(@Cast("const ngraph::OutputVector*") @ByRef NodeOutputVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString String name/*=""*/) { super((Pointer)null); allocate(results, parameters, name); }
        private native void allocate(@Cast("const ngraph::OutputVector*") @ByRef NodeOutputVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString String name/*=""*/);

        public Function(@Const @SharedPtr @ByRef Node result,
                         @Const @ByRef ParameterVector parameters,
                         @StdString BytePointer name/*=""*/) { super((Pointer)null); allocate(result, parameters, name); }
        private native void allocate(@Const @SharedPtr @ByRef Node result,
                         @Const @ByRef ParameterVector parameters,
                         @StdString BytePointer name/*=""*/);
        public Function(@Const @SharedPtr @ByRef Node result,
                         @Const @ByRef ParameterVector parameters) { super((Pointer)null); allocate(result, parameters); }
        private native void allocate(@Const @SharedPtr @ByRef Node result,
                         @Const @ByRef ParameterVector parameters);
        public Function(@Const @SharedPtr @ByRef Node result,
                         @Const @ByRef ParameterVector parameters,
                         @StdString String name/*=""*/) { super((Pointer)null); allocate(result, parameters, name); }
        private native void allocate(@Const @SharedPtr @ByRef Node result,
                         @Const @ByRef ParameterVector parameters,
                         @StdString String name/*=""*/);

        public Function(@Const @ByRef ResultVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString BytePointer name/*=""*/) { super((Pointer)null); allocate(results, parameters, name); }
        private native void allocate(@Const @ByRef ResultVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString BytePointer name/*=""*/);
        public Function(@Const @ByRef ResultVector results,
                         @Const @ByRef ParameterVector parameters) { super((Pointer)null); allocate(results, parameters); }
        private native void allocate(@Const @ByRef ResultVector results,
                         @Const @ByRef ParameterVector parameters);
        public Function(@Const @ByRef ResultVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString String name/*=""*/) { super((Pointer)null); allocate(results, parameters, name); }
        private native void allocate(@Const @ByRef ResultVector results,
                         @Const @ByRef ParameterVector parameters,
                         @StdString String name/*=""*/);

        public native void init();
        /** Return the number of outputs for this function. */
        public native @Cast("size_t") long get_output_size();

        /** Return the op that generates output i */
        public native @SharedPtr @ByVal Node get_output_op(@Cast("size_t") long i);

        public native @ByVal NodeOutput output(@Cast("size_t") long i);

        /** Return the element type of output i */
        public native @Const @ByRef Type get_output_element_type(@Cast("size_t") long i);

        /** Return the shape of element i */
        public native @Const @ByRef Shape get_output_shape(@Cast("size_t") long i);

        /** Return the partial shape of element i */
        public native @Const @ByRef PartialShape get_output_partial_shape(@Cast("size_t") long i);

        /** Return the function parameters */
        public native @Const @ByRef ParameterVector get_parameters();
        /** Return a list of function's outputs */
        public native @Const @ByRef ResultVector get_results();
        /** Check that there is a single result and return it. */
        public native @SharedPtr @ByVal Node get_result();

        /** \brief Get the unique name of the function.
         *  @return A const reference to the function's unique name. */
        public native @StdString BytePointer get_name();

        /** \brief Sets a friendly name for a function. This does not overwrite the unique name
         *         of the function and is retrieved via get_friendly_name(). Used mainly for
         *         debugging.
         *         The friendly name may be set exactly once.
         *  @param name is the friendly name to set */
        public native void set_friendly_name(@StdString BytePointer name);
        public native void set_friendly_name(@StdString String name);

        /** \brief Gets the friendly name for a function. If no friendly name has been set via
         *         set_friendly_name then the function's unique name is returned.
         *  @return A const reference to the function's friendly name. */
        public native @StdString BytePointer get_friendly_name();
        public native void map_unordered_ops(@ByVal NodeFunction f);

        
        public native @Cast("size_t") long get_instance_id();
        public native @Cast("size_t") long get_temporary_pool_size();
        public native void set_temporary_pool_size(@Cast("size_t") long arg0);
        // updates graph and m_results list
        public native void replace_node(@SharedPtr @ByVal Node old, @SharedPtr @ByVal Node repl);

        public native void validate_nodes_and_infer_types();

        /** \brief Returns the sum of the size of all nodes in the graph plus the size of
         *  all constant data. This has little value beyond comparing the relative size of
         *  graphs and should not be considered the actual memory consumption of a graph. */
        public native @Cast("size_t") long get_graph_size();

        public native @Cast("size_t") long get_placement();
        public native void set_placement(@Cast("size_t") long placement);

        /** \brief Returns true if any of the op's defined in the function contains partial shape */
        
        ///
        ///
        public native @Cast("bool") boolean is_dynamic();

        /** \brief Replace the {@code parameter_index}th parameter of the function with {@code parameter}.
         * 
         *  All users of the {@code parameter_index}th parameter are redirected to {@code parameter}, and the
         *  {@code parameter_index}th entry in the function parameter list is replaced with {@code parameter}.
         * 
         *  @param parameter_index The index of the parameter to replace.
         *  @param parameter The parameter to substitute for the {@code parameter_index}th parameter. */
        public native void replace_parameter(@Cast("size_t") long parameter_index,
                                       @Const @SharedPtr @ByRef Parameter parameter);
    }
