// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.kvazaar;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.kvazaar.global.kvazaar.*;


/**
 * \brief Struct which contains all picture data
 *
 * Function picture_alloc in kvz_api must be used for allocation.
 */
@Properties(inherit = org.bytedeco.kvazaar.presets.kvazaar.class)
public class kvz_picture extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public kvz_picture() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public kvz_picture(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public kvz_picture(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public kvz_picture position(long position) {
        return (kvz_picture)super.position(position);
    }
    @Override public kvz_picture getPointer(long i) {
        return new kvz_picture((Pointer)this).offsetAddress(i);
    }

  /** \brief Allocated buffer with padding (only used in the base_image) */
  public native @Cast("kvz_pixel*") BytePointer fulldata_buf(); public native kvz_picture fulldata_buf(BytePointer setter);
  /** \brief Allocated buffer portion that's actually used */
  public native @Cast("kvz_pixel*") BytePointer fulldata(); public native kvz_picture fulldata(BytePointer setter);

  /** \brief Pointer to luma pixel array. */
  public native @Cast("kvz_pixel*") BytePointer y(); public native kvz_picture y(BytePointer setter);
  /** \brief Pointer to chroma U pixel array. */
  public native @Cast("kvz_pixel*") BytePointer u(); public native kvz_picture u(BytePointer setter);
  /** \brief Pointer to chroma V pixel array. */
  public native @Cast("kvz_pixel*") BytePointer v(); public native kvz_picture v(BytePointer setter);
  /** \brief Alternate access method to same data. */
  public native @Cast("kvz_pixel*") BytePointer data(int i); public native kvz_picture data(int i, BytePointer setter);
  @MemberGetter public native @Cast("kvz_pixel**") PointerPointer data();

  /** \brief Luma pixel array width. */
  public native int width(); public native kvz_picture width(int setter);
  /** \brief Luma pixel array height. */
  public native int height(); public native kvz_picture height(int setter);

  /** \brief Luma pixel array width for the full picture (should be used as stride) */
  public native int stride(); public native kvz_picture stride(int setter);

  /** \brief Pointer to the picture which owns the pixels */
  public native kvz_picture base_image(); public native kvz_picture base_image(kvz_picture setter);
  /** \brief Number of references to the picture */
  public native int refcount(); public native kvz_picture refcount(int setter);

  /** \brief Presentation timestamp. Should be set for input frames. */
  public native @Cast("int64_t") long pts(); public native kvz_picture pts(long setter);
  /** \brief Decompression timestamp. */
  public native @Cast("int64_t") long dts(); public native kvz_picture dts(long setter);

  /** @since 3.2.0 \brief Field order for interlaced pictures. */
  public native @Cast("kvz_interlacing") int interlacing(); public native kvz_picture interlacing(int setter);
  public native @Cast("kvz_chroma_format") int chroma_format(); public native kvz_picture chroma_format(int setter);

  public native int ref_pocs(int i); public native kvz_picture ref_pocs(int i, int setter);
  @MemberGetter public native IntPointer ref_pocs();
}
