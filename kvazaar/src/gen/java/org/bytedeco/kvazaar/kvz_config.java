// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.kvazaar;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.kvazaar.global.kvazaar.*;


/**
 * \brief Struct which contains all configuration data
 *
 * Functions config_alloc, config_init and config_destroy must be used to
 * maintain ABI compatibility. Do not copy this struct, as the size might
 * change.
 */
@Properties(inherit = org.bytedeco.kvazaar.presets.kvazaar.class)
public class kvz_config extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public kvz_config() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public kvz_config(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public kvz_config(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public kvz_config position(long position) {
        return (kvz_config)super.position(position);
    }
    @Override public kvz_config getPointer(long i) {
        return new kvz_config((Pointer)this).offsetAddress(i);
    }

  /** \brief Quantization parameter */
  public native int qp(); public native kvz_config qp(int setter);
  /** \brief the period of intra frames in stream */
  public native int intra_period(); public native kvz_config intra_period(int setter);

  /** \brief How often the VPS, SPS and PPS are re-sent
   *
   * -1: never
   *  0: first frame only
   *  1: every intra frame
   *  2: every other intra frame
   *  3: every third intra frame
   *  and so on
   */
  public native int vps_period(); public native kvz_config vps_period(int setter);

  /** \brief frame width, must be a multiple of 8 */
  public native int width(); public native kvz_config width(int setter);
  /** \brief frame height, must be a multiple of 8 */
  public native int height(); public native kvz_config height(int setter);
  /** \brief Deprecated, will be removed. */
  public native double framerate(); public native kvz_config framerate(double setter);
  /** \brief Framerate numerator */
  public native int framerate_num(); public native kvz_config framerate_num(int setter);
  /** \brief Framerate denominator */
  public native int framerate_denom(); public native kvz_config framerate_denom(int setter);
  /** \brief Flag to enable deblocking filter */
  public native int deblock_enable(); public native kvz_config deblock_enable(int setter);
  /** \brief Flag to enable sample adaptive offset filter */
  public native @Cast("kvz_sao") int sao_type(); public native kvz_config sao_type(int setter);
  /** \brief Flag to enable RD optimized quantization. */
  public native int rdoq_enable(); public native kvz_config rdoq_enable(int setter);
  /** \brief Flag to enable sign hiding. */
  public native int signhide_enable(); public native kvz_config signhide_enable(int setter);
  /** \brief Flag to enable SMP blocks. */
  public native int smp_enable(); public native kvz_config smp_enable(int setter);
  /** \brief Flag to enable AMP blocks. */
  public native int amp_enable(); public native kvz_config amp_enable(int setter);
  /** \brief RD-calculation level (0..2) */
  public native int rdo(); public native kvz_config rdo(int setter);
  /** \brief If true, don't skip modes in intra search. */
  public native int full_intra_search(); public native kvz_config full_intra_search(int setter);
  /** \brief Flag to enable transform skip (for 4x4 blocks). */
  public native int trskip_enable(); public native kvz_config trskip_enable(int setter);
  /** \brief Maximum transform depth for intra. */
  public native int tr_depth_intra(); public native kvz_config tr_depth_intra(int setter);
  /** \brief Integer motion estimation algorithm. */
  public native @Cast("kvz_ime_algorithm") int ime_algorithm(); public native kvz_config ime_algorithm(int setter);
  /** \brief Fractional pixel motion estimation level (0: disabled, 1: enabled). */
  public native int fme_level(); public native kvz_config fme_level(int setter);
  /** \brief Source scan type (0: progressive, 1: top field first, 2: bottom field first).*/
  public native byte source_scan_type(); public native kvz_config source_scan_type(byte setter);
  /** \brief Bi-prediction (0: disabled, 1: enabled). */
  public native int bipred(); public native kvz_config bipred(int setter);
  /** \brief (deblocking) beta offset (div 2), range -6...6 */
  public native int deblock_beta(); public native kvz_config deblock_beta(int setter);
  /** \brief (deblocking) tc offset (div 2), range -6...6 */
  public native int deblock_tc(); public native kvz_config deblock_tc(int setter);
    /** \brief the horizontal size of the sample aspect ratio (in arbitrary units) */
    @Name("vui.sar_width") public native int vui_sar_width(); public native kvz_config vui_sar_width(int setter);
    /** \brief the vertical size of the sample aspect ratio (in the same arbitrary units as sar_width). */
    @Name("vui.sar_height") public native int vui_sar_height(); public native kvz_config vui_sar_height(int setter);
    /** \brief Crop overscan setting */
    @Name("vui.overscan") public native byte vui_overscan(); public native kvz_config vui_overscan(byte setter);
    /** \brief Video format */
    @Name("vui.videoformat") public native byte vui_videoformat(); public native kvz_config vui_videoformat(byte setter);
    /** \brief Flag to indicate full-range */
    @Name("vui.fullrange") public native byte vui_fullrange(); public native kvz_config vui_fullrange(byte setter);
    /** \brief Color primaries */
    @Name("vui.colorprim") public native byte vui_colorprim(); public native kvz_config vui_colorprim(byte setter);
    /** \brief Transfer characteristics */
    @Name("vui.transfer") public native byte vui_transfer(); public native kvz_config vui_transfer(byte setter);
    /** \brief Color matrix coefficients */
    @Name("vui.colormatrix") public native byte vui_colormatrix(); public native kvz_config vui_colormatrix(byte setter);
    /** \brief Chroma sample location */
    @Name("vui.chroma_loc") public native int vui_chroma_loc(); public native kvz_config vui_chroma_loc(int setter);
  /** \brief Flag to use access unit delimiters */
  public native int aud_enable(); public native kvz_config aud_enable(int setter);
  /** \brief number of reference frames to use */
  public native int ref_frames(); public native kvz_config ref_frames(int setter);
  /** \brief Pointer to custom quantization matrices filename */
  public native @Cast("char*") BytePointer cqmfile(); public native kvz_config cqmfile(BytePointer setter);

  /** \brief number of tiles separation in x direction */
  public native int tiles_width_count(); public native kvz_config tiles_width_count(int setter);
  /** \brief number of tiles separation in y direction */
  public native int tiles_height_count(); public native kvz_config tiles_height_count(int setter);
  /** \brief tiles split x coordinates (dimension: tiles_width_count) */
  public native IntPointer tiles_width_split(); public native kvz_config tiles_width_split(IntPointer setter);
  /** \brief tiles split y coordinates (dimension: tiles_height_count) */
  public native IntPointer tiles_height_split(); public native kvz_config tiles_height_split(IntPointer setter);

  public native int wpp(); public native kvz_config wpp(int setter);
  public native int owf(); public native kvz_config owf(int setter);

  public native int slice_count(); public native kvz_config slice_count(int setter);
  public native IntPointer slice_addresses_in_ts(); public native kvz_config slice_addresses_in_ts(IntPointer setter);

  public native int threads(); public native kvz_config threads(int setter);
  public native int cpuid(); public native kvz_config cpuid(int setter);

    @Name("pu_depth_inter.min") public native int pu_depth_inter_min(int i); public native kvz_config pu_depth_inter_min(int i, int setter);
    @Name("pu_depth_inter.min") @MemberGetter public native IntPointer pu_depth_inter_min();
    @Name("pu_depth_inter.max") public native int pu_depth_inter_max(int i); public native kvz_config pu_depth_inter_max(int i, int setter);
    @Name("pu_depth_inter.max") @MemberGetter public native IntPointer pu_depth_inter_max();

  public native int add_encoder_info(); public native kvz_config add_encoder_info(int setter);
  /** \brief length of GOP for the video sequence */
  public native byte gop_len(); public native kvz_config gop_len(byte setter);
  /** \brief specifies that the GOP does not use future pictures */
  public native byte gop_lowdelay(); public native kvz_config gop_lowdelay(byte setter);
  /** \brief Array of GOP settings */
  public native @ByRef kvz_gop_config gop(int i); public native kvz_config gop(int i, kvz_gop_config setter);
  @MemberGetter public native kvz_gop_config gop();

  public native int target_bitrate(); public native kvz_config target_bitrate(int setter);

  /** \brief MV RDO calculation in search (0: estimation, 1: RDO). */
  public native byte mv_rdo(); public native kvz_config mv_rdo(byte setter);
  /** @since 3.1.0 \brief Print PSNR in CLI. */
  public native byte calc_psnr(); public native kvz_config calc_psnr(byte setter);

  /** @since 3.3.0 \brief Constrain movement vectors. */
  public native @Cast("kvz_mv_constraint") int mv_constraint(); public native kvz_config mv_constraint(int setter);
  /** @since 3.5.0 \brief What hash algorithm to use. */
  public native @Cast("kvz_hash") int hash(); public native kvz_config hash(int setter);

  /** @since 3.8.0 \brief Mode of cu split termination. */
  public native @Cast("kvz_cu_split_termination") int cu_split_termination(); public native kvz_config cu_split_termination(int setter);

  /** @since 3.7.0 */
  public native @Cast("kvz_crypto_features") int crypto_features(); public native kvz_config crypto_features(int setter);
  public native @Cast("uint8_t*") BytePointer optional_key(); public native kvz_config optional_key(BytePointer setter);

  /** @since 3.8.0 \brief Mode of me early termination. */
  public native @Cast("kvz_me_early_termination") int me_early_termination(); public native kvz_config me_early_termination(int setter);
  /** @since 4.1.0 \brief Use early termination in intra rdo. */
  public native int intra_rdo_et(); public native kvz_config intra_rdo_et(int setter);

  /** \brief Use lossless coding. */
  public native int lossless(); public native kvz_config lossless(int setter);

  public native int tmvp_enable(); public native kvz_config tmvp_enable(int setter); /**> \brief Use Temporal Motion Vector Predictors. */

  /** \brief Mode of rdoq skip */
  public native int rdoq_skip(); public native kvz_config rdoq_skip(int setter);

  /** \brief Use Temporal Motion Vector Predictors. */
  public native @Cast("kvz_input_format") int input_format(); public native kvz_config input_format(int setter);
  /** \brief Use Temporal Motion Vector Predictors. */
  public native int input_bitdepth(); public native kvz_config input_bitdepth(int setter);

    @Name("gop_lp_definition.d") public native @Cast("unsigned") int gop_lp_definition_d(); public native kvz_config gop_lp_definition_d(int setter);  // depth
    @Name("gop_lp_definition.t") public native @Cast("unsigned") int gop_lp_definition_t(); public native kvz_config gop_lp_definition_t(int setter);  // temporal

  /** \brief Enable implicit residual DPCM. */
  public native int implicit_rdpcm(); public native kvz_config implicit_rdpcm(int setter);

    @Name("roi.width") public native int roi_width(); public native kvz_config roi_width(int setter);
    @Name("roi.height") public native int roi_height(); public native kvz_config roi_height(int setter);
    @Name("roi.dqps") public native BytePointer roi_dqps(); public native kvz_config roi_dqps(BytePointer setter);

  /** @since 3.15.0 \brief How to map slices to frame. */
  public native @Cast("unsigned") int slices(); public native kvz_config slices(int setter);

  /**
   * \brief Use adaptive QP for 360 video with equirectangular projection.
   */
  public native int erp_aqp(); public native kvz_config erp_aqp(int setter);

  /** \brief The HEVC level */
  public native @Cast("uint8_t") byte level(); public native kvz_config level(byte setter);
  /** \brief Whether we ignore and just warn from all of the errors about the output not conforming to the level's requirements. */
  public native @Cast("uint8_t") byte force_level(); public native kvz_config force_level(byte setter);
  /** \brief Whether we use the high tier bitrates. Requires the level to be 4 or higher. */
  public native @Cast("uint8_t") byte high_tier(); public native kvz_config high_tier(byte setter);
  /** \brief The maximum allowed bitrate for this level and tier. */
  public native @Cast("uint32_t") int max_bitrate(); public native kvz_config max_bitrate(int setter);

  /** \brief Maximum steps that hexagonal and diagonal motion estimation can use. -1 to disable */
  public native @Cast("uint32_t") int me_max_steps(); public native kvz_config me_max_steps(int setter);

  /** \brief Offset to add to QP for intra frames */
  public native byte intra_qp_offset(); public native kvz_config intra_qp_offset(byte setter);
  /** \brief Select intra QP Offset based on GOP length */
  public native @Cast("uint8_t") byte intra_qp_offset_auto(); public native kvz_config intra_qp_offset_auto(byte setter);

  /** \brief Minimum QP that uses CABAC for residual cost instead of a fast estimate. */
  public native byte fast_residual_cost_limit(); public native kvz_config fast_residual_cost_limit(byte setter);

  /** \brief Set QP at CU level keeping pic_init_qp_minus26 in PPS zero */
  public native byte set_qp_in_cu(); public native kvz_config set_qp_in_cu(byte setter);

  /** \brief Flag to enable/disable open GOP configuration */
  public native byte open_gop(); public native kvz_config open_gop(byte setter);

	public native int vaq(); public native kvz_config vaq(int setter); /** \brief Enable variance adaptive quantization*/

  /** \brief Type of scaling lists to use */
  public native byte scaling_list(); public native kvz_config scaling_list(byte setter);

  /** \brief Maximum number of merge cadidates */
  public native @Cast("uint8_t") byte max_merge(); public native kvz_config max_merge(byte setter);

  /** \brief Enable Early Skip Mode Decision */
  public native @Cast("uint8_t") byte early_skip(); public native kvz_config early_skip(byte setter);

  /** \brief Enable Machine learning CU depth prediction for Intra encoding. */
  public native @Cast("uint8_t") byte ml_pu_depth_intra(); public native kvz_config ml_pu_depth_intra(byte setter);  
  
  /** \brief Used for partial frame encoding*/
    @Name("partial_coding.startCTU_x") public native @Cast("uint8_t") byte partial_coding_startCTU_x(); public native kvz_config partial_coding_startCTU_x(byte setter);
    @Name("partial_coding.startCTU_y") public native @Cast("uint8_t") byte partial_coding_startCTU_y(); public native kvz_config partial_coding_startCTU_y(byte setter);
    @Name("partial_coding.fullWidth") public native @Cast("uint16_t") short partial_coding_fullWidth(); public native kvz_config partial_coding_fullWidth(short setter);
    @Name("partial_coding.fullHeight") public native @Cast("uint16_t") short partial_coding_fullHeight(); public native kvz_config partial_coding_fullHeight(short setter);

  /** \brief Always consider CU without any quantized residual */
  public native @Cast("uint8_t") byte zero_coeff_rdo(); public native kvz_config zero_coeff_rdo(byte setter);

  /** \brief Currently unused parameter for OBA rc */
  public native byte frame_allocation(); public native kvz_config frame_allocation(byte setter);

  /** \brief used rc scheme, 0 for QP */
  public native byte rc_algorithm(); public native kvz_config rc_algorithm(byte setter);

  /** \brief whether to use hadamard based bit allocation for intra frames or not */
  public native @Cast("uint8_t") byte intra_bit_allocation(); public native kvz_config intra_bit_allocation(byte setter);

  public native @Cast("uint8_t") byte clip_neighbour(); public native kvz_config clip_neighbour(byte setter);

  public native @Cast("kvz_file_format") int file_format(); public native kvz_config file_format(int setter);

  public native @Cast("char*") BytePointer stats_file_prefix(); public native kvz_config stats_file_prefix(BytePointer setter);
  /** \brief Pointer to fast coeff table filename */
  public native @Cast("char*") BytePointer fast_coeff_table_fn(); public native kvz_config fast_coeff_table_fn(BytePointer setter);

  /** \brief whether we're sampling TBs and their costs for fast cost
   *         estimation training */
  public native @Cast("uint8_t") byte rdo_cost_sampling_mode_on(); public native kvz_config rdo_cost_sampling_mode_on(byte setter);

  /** \brief whether we're running in normal mode, sampling TBs and their cost
   *         for fast estimation training, or comparing estimator accuracy to
   *         CABAC */
  public native @Cast("uint8_t") byte fastrd_sampling_on(); public native kvz_config fastrd_sampling_on(byte setter);
  public native @Cast("uint8_t") byte fastrd_accuracy_check_on(); public native kvz_config fastrd_accuracy_check_on(byte setter);

  public native @Cast("char*") BytePointer fastrd_learning_outdir_fn(); public native kvz_config fastrd_learning_outdir_fn(BytePointer setter);

}
