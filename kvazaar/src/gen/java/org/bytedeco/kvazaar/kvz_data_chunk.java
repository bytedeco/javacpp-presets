// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.kvazaar;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.kvazaar.global.kvazaar.*;


/**
 * \brief A linked list of chunks of data.
 *
 * Used for returning the encoded data.
 */
@Properties(inherit = org.bytedeco.kvazaar.presets.kvazaar.class)
public class kvz_data_chunk extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public kvz_data_chunk() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public kvz_data_chunk(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public kvz_data_chunk(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public kvz_data_chunk position(long position) {
        return (kvz_data_chunk)super.position(position);
    }
    @Override public kvz_data_chunk getPointer(long i) {
        return new kvz_data_chunk((Pointer)this).offsetAddress(i);
    }

  /** \brief Buffer for the data. */
  public native @Cast("uint8_t") byte data(int i); public native kvz_data_chunk data(int i, byte setter);
  @MemberGetter public native @Cast("uint8_t*") BytePointer data();

  /** \brief Number of bytes filled in this chunk. */
  public native @Cast("uint32_t") int len(); public native kvz_data_chunk len(int setter);

  /** \brief Next chunk in the list. */
  public native kvz_data_chunk next(); public native kvz_data_chunk next(kvz_data_chunk setter);
}
