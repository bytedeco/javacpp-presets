// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.kvazaar;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.kvazaar.global.kvazaar.*;


@Properties(inherit = org.bytedeco.kvazaar.presets.kvazaar.class)
public class kvz_api extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public kvz_api() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public kvz_api(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public kvz_api(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public kvz_api position(long position) {
        return (kvz_api)super.position(position);
    }
    @Override public kvz_api getPointer(long i) {
        return new kvz_api((Pointer)this).offsetAddress(i);
    }


  /**
   * \brief Allocate a kvz_config structure.
   *
   * The returned structure should be deallocated by calling config_destroy.
   *
   * @return allocated config, or NULL if allocation failed.
   */
  public static class Kvz_config_Config_alloc extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Kvz_config_Config_alloc(Pointer p) { super(p); }
      protected Kvz_config_Config_alloc() { allocate(); }
      private native void allocate();
      public native kvz_config call();
  }
  public native Kvz_config_Config_alloc config_alloc(); public native kvz_api config_alloc(Kvz_config_Config_alloc setter);

  /**
   * \brief Deallocate a kvz_config structure.
   *
   * If cfg is NULL, do nothing. Otherwise, the given structure must have been
   * returned from config_alloc.
   *
   * @param cfg   configuration
   * @return      1 on success, 0 on failure
   */
  public static class Config_destroy_kvz_config extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Config_destroy_kvz_config(Pointer p) { super(p); }
      protected Config_destroy_kvz_config() { allocate(); }
      private native void allocate();
      public native int call(kvz_config cfg);
  }
  public native Config_destroy_kvz_config config_destroy(); public native kvz_api config_destroy(Config_destroy_kvz_config setter);

  /**
   * \brief Initialize a config structure
   *
   * Set all fields in the given config to default values.
   *
   * @param cfg   configuration
   * @return      1 on success, 0 on failure
   */
  public static class Config_init_kvz_config extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Config_init_kvz_config(Pointer p) { super(p); }
      protected Config_init_kvz_config() { allocate(); }
      private native void allocate();
      public native int call(kvz_config cfg);
  }
  public native Config_init_kvz_config config_init(); public native kvz_api config_init(Config_init_kvz_config setter);

  /**
   * \brief Set an option.
   *
   * @param cfg   configuration
   * @param name  name of the option to set
   * @param value value to set
   * @return      1 on success, 0 on failure
   */
  public static class Config_parse_kvz_config_BytePointer_BytePointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Config_parse_kvz_config_BytePointer_BytePointer(Pointer p) { super(p); }
      protected Config_parse_kvz_config_BytePointer_BytePointer() { allocate(); }
      private native void allocate();
      public native int call(kvz_config cfg, @Cast("const char*") BytePointer name, @Cast("const char*") BytePointer value);
  }
  public native Config_parse_kvz_config_BytePointer_BytePointer config_parse(); public native kvz_api config_parse(Config_parse_kvz_config_BytePointer_BytePointer setter);

  /**
   * \brief Allocate a kvz_picture.
   *
   * The returned kvz_picture should be deallocated by calling picture_free.
   *
   * @param width   width of luma pixel array to allocate
   * @param height  height of luma pixel array to allocate
   * @return        allocated picture, or NULL if allocation failed.
   */
  public static class Picture_alloc_int_int extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Picture_alloc_int_int(Pointer p) { super(p); }
      protected Picture_alloc_int_int() { allocate(); }
      private native void allocate();
      public native kvz_picture call(int width, int height);
  }
  public native Picture_alloc_int_int picture_alloc(); public native kvz_api picture_alloc(Picture_alloc_int_int setter);

  /**
   * \brief Deallocate a kvz_picture.
   *
   * If pic is NULL, do nothing. Otherwise, the picture must have been returned
   * from picture_alloc.
   */
  public static class Picture_free_kvz_picture extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Picture_free_kvz_picture(Pointer p) { super(p); }
      protected Picture_free_kvz_picture() { allocate(); }
      private native void allocate();
      public native void call(kvz_picture pic);
  }
  public native Picture_free_kvz_picture picture_free(); public native kvz_api picture_free(Picture_free_kvz_picture setter);

  /**
   * \brief Deallocate a list of data chunks.
   *
   * Deallocates the given chunk and all chunks that follow it in the linked
   * list.
   */
  public static class Chunk_free_kvz_data_chunk extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Chunk_free_kvz_data_chunk(Pointer p) { super(p); }
      protected Chunk_free_kvz_data_chunk() { allocate(); }
      private native void allocate();
      public native void call(kvz_data_chunk chunk);
  }
  public native Chunk_free_kvz_data_chunk chunk_free(); public native kvz_api chunk_free(Chunk_free_kvz_data_chunk setter);

  /**
   * \brief Create an encoder.
   *
   * The returned encoder should be closed by calling encoder_close.
   *
   * Only one encoder may be open at a time.
   *
   * @param cfg   encoder configuration
   * @return      created encoder, or NULL if creation failed.
   */
  public static class Encoder_open_kvz_config extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Encoder_open_kvz_config(Pointer p) { super(p); }
      protected Encoder_open_kvz_config() { allocate(); }
      private native void allocate();
      public native kvz_encoder call(@Const kvz_config cfg);
  }
  public native Encoder_open_kvz_config encoder_open(); public native kvz_api encoder_open(Encoder_open_kvz_config setter);

  /**
   * \brief Deallocate an encoder.
   *
   * If encoder is NULL, do nothing. Otherwise, the encoder must have been
   * returned from encoder_open.
   */
  public static class Encoder_close_kvz_encoder extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Encoder_close_kvz_encoder(Pointer p) { super(p); }
      protected Encoder_close_kvz_encoder() { allocate(); }
      private native void allocate();
      public native void call(kvz_encoder encoder);
  }
  public native Encoder_close_kvz_encoder encoder_close(); public native kvz_api encoder_close(Encoder_close_kvz_encoder setter);

  /**
   * \brief Get parameter sets.
   *
   * Encode the VPS, SPS and PPS.
   *
   * If data_out is set to non-NULL values, the caller is responsible for
   * calling chunk_free on it.
   *
   * A null pointer may be passed in place of the parameter data_out or len_out
   * to skip returning the corresponding value.
   *
   * @param encoder   encoder
   * @param data_out  Returns the encoded parameter sets.
   * @param len_out   Returns number of bytes in the encoded data.
   * @return          1 on success, 0 on error.
   */
  public static class Encoder_headers_kvz_encoder_PointerPointer_IntPointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Encoder_headers_kvz_encoder_PointerPointer_IntPointer(Pointer p) { super(p); }
      protected Encoder_headers_kvz_encoder_PointerPointer_IntPointer() { allocate(); }
      private native void allocate();
      public native int call(kvz_encoder encoder,
                                     @Cast("kvz_data_chunk**") PointerPointer data_out,
                                     @Cast("uint32_t*") IntPointer len_out);
  }
  public native Encoder_headers_kvz_encoder_PointerPointer_IntPointer encoder_headers(); public native kvz_api encoder_headers(Encoder_headers_kvz_encoder_PointerPointer_IntPointer setter);

  /**
   * \brief Encode one frame.
   *
   * Add pic_in to the encoding pipeline. If an encoded frame is ready, return
   * the bitstream, length of the bitstream, the reconstructed frame, the
   * original frame and frame info in data_out, len_out, pic_out, src_out and
   * info_out, respectively. Otherwise, set the output parameters to NULL.
   *
   * After passing all of the input frames, the caller should keep calling this
   * function with pic_in set to NULL, until no more data is returned in the
   * output parameters.
   *
   * The caller must not modify pic_in after passing it to this function.
   *
   * If data_out, pic_out and src_out are set to non-NULL values, the caller is
   * responsible for calling chunk_free and picture_free on them.
   *
   * A null pointer may be passed in place of any of the parameters data_out,
   * len_out, pic_out, src_out or info_out to skip returning the corresponding
   * value.
   *
   * @param encoder   encoder
   * @param pic_in    input frame or NULL
   * @param data_out  Returns the encoded data.
   * @param len_out   Returns number of bytes in the encoded data.
   * @param pic_out   Returns the reconstructed picture.
   * @param src_out   Returns the original picture.
   * @param info_out  Returns information about the encoded picture.
   * @return          1 on success, 0 on error.
   */
  public static class Encoder_encode_kvz_encoder_kvz_picture_PointerPointer_IntPointer_PointerPointer_PointerPointer_kvz_frame_info extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Encoder_encode_kvz_encoder_kvz_picture_PointerPointer_IntPointer_PointerPointer_PointerPointer_kvz_frame_info(Pointer p) { super(p); }
      protected Encoder_encode_kvz_encoder_kvz_picture_PointerPointer_IntPointer_PointerPointer_PointerPointer_kvz_frame_info() { allocate(); }
      private native void allocate();
      public native int call(kvz_encoder encoder,
                                    kvz_picture pic_in,
                                    @Cast("kvz_data_chunk**") PointerPointer data_out,
                                    @Cast("uint32_t*") IntPointer len_out,
                                    @Cast("kvz_picture**") PointerPointer pic_out,
                                    @Cast("kvz_picture**") PointerPointer src_out,
                                    kvz_frame_info info_out);
  }
  public native Encoder_encode_kvz_encoder_kvz_picture_PointerPointer_IntPointer_PointerPointer_PointerPointer_kvz_frame_info encoder_encode(); public native kvz_api encoder_encode(Encoder_encode_kvz_encoder_kvz_picture_PointerPointer_IntPointer_PointerPointer_PointerPointer_kvz_frame_info setter);

  /**
   * \brief Allocate a kvz_picture.
   *
   * The returned kvz_picture should be deallocated by calling picture_free.
   *
   * @since 3.12.0
   * @param chroma_fomat  Chroma subsampling to use.
   * @param width   width of luma pixel array to allocate
   * @param height  height of luma pixel array to allocate
   * @return        allocated picture, or NULL if allocation failed.
   */
  public static class Picture_alloc_csp_int_int_int extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Picture_alloc_csp_int_int_int(Pointer p) { super(p); }
      protected Picture_alloc_csp_int_int_int() { allocate(); }
      private native void allocate();
      public native kvz_picture call(@Cast("kvz_chroma_format") int chroma_fomat, int width, int height);
  }
  public native Picture_alloc_csp_int_int_int picture_alloc_csp(); public native kvz_api picture_alloc_csp(Picture_alloc_csp_int_int_int setter);
}
