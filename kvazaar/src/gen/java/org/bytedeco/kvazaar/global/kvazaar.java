// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.kvazaar.global;

import org.bytedeco.kvazaar.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

public class kvazaar extends org.bytedeco.kvazaar.presets.kvazaar {
    static { Loader.load(); }

// Parsed from <kvazaar.h>

// #ifndef KVAZAAR_H_
// #define KVAZAAR_H_
/*****************************************************************************
 * This file is part of Kvazaar HEVC encoder.
 *
 * Copyright c 2021, Tampere University, ITU/ISO/IEC, project contributors
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 * 
 * * Neither the name of the Tampere University or ITU/ISO/IEC nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * INCLUDING NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE OF THIS
 ****************************************************************************/

/** 
 * \ingroup Control
 * \file
 * This file defines the public API of Kvazaar when used as a library.
 */

// #include <stdint.h>
// #include <stdio.h>


// #ifdef __cplusplus
// #endif

// #if defined(KVZ_DLL_EXPORTS)
//   #if !defined(PIC)
    // Building static kvazaar library.
//     #define KVZ_PUBLIC
//   #elif defined(_WIN32) || defined(__CYGWIN__)
    // Building kvazaar DLL on Windows.
//     #define KVZ_PUBLIC __declspec(dllexport)
//   #elif defined(__GNUC__)
    // Building kvazaar shared library with GCC.
//     #define KVZ_PUBLIC __attribute__ ((visibility ("default")))
//   #else
//     #define KVZ_PUBLIC
//   #endif
// #else
//   #if defined(KVZ_STATIC_LIB)
    // Using static kvazaar library.
//     #define KVZ_PUBLIC
//   #elif defined(_WIN32) || defined(__CYGWIN__)
    // Using kvazaar DLL on Windows.
//     #define KVZ_PUBLIC __declspec(dllimport)
//   #else
    // Using kvazaar shared library and not on Windows.
//     #define KVZ_PUBLIC
//   #endif
// #endif

/**
 * Maximum length of a GoP structure.
 */
public static final int KVZ_MAX_GOP_LENGTH = 32;

 /**
 * Maximum amount of GoP layers.
 */
public static final int KVZ_MAX_GOP_LAYERS = 6;

/**
 * Size of data chunks.
 */
public static final int KVZ_DATA_CHUNK_SIZE = 4096;

// #ifndef KVZ_BIT_DEPTH
public static final int KVZ_BIT_DEPTH = 8;
// #endif

// #if KVZ_BIT_DEPTH == 8
// #else
// Targeting ../kvz_encoder.java



/**
 * \brief Integer motion estimation algorithms.
 */
/** enum kvz_ime_algorithm */
public static final int
  KVZ_IME_HEXBS = 0,
  KVZ_IME_TZ = 1,
  KVZ_IME_FULL = 2,
  KVZ_IME_FULL8 = 3, /** @since 3.6.0 */
  KVZ_IME_FULL16 = 4, /** @since 3.6.0 */
  KVZ_IME_FULL32 = 5, /** @since 3.6.0 */
  KVZ_IME_FULL64 = 6, /** @since 3.6.0 */
  KVZ_IME_DIA = 7; // Experimental. TODO: change into a proper doc comment

/**
 * \brief Interlacing methods.
 * @since 3.2.0
 */
/** enum kvz_interlacing */
public static final int
  KVZ_INTERLACING_NONE = 0,
  KVZ_INTERLACING_TFF = 1, // top field first
  KVZ_INTERLACING_BFF = 2; // bottom field first

/**
* \brief Constrain movement vectors.
* @since 3.3.0
*/
/** enum kvz_mv_constraint */
public static final int
  KVZ_MV_CONSTRAIN_NONE = 0,
  KVZ_MV_CONSTRAIN_FRAME = 1,  // Don't refer outside the frame.
  KVZ_MV_CONSTRAIN_TILE = 2,  // Don't refer to other tiles.
  KVZ_MV_CONSTRAIN_FRAME_AND_TILE = 3,  // Don't refer outside the tile.
  KVZ_MV_CONSTRAIN_FRAME_AND_TILE_MARGIN = 4;  // Keep enough margin for fractional pixel margins not to refer outside the tile.

/**
* \brief Constrain movement vectors.
* @since 3.5.0
*/
/** enum kvz_hash */
public static final int
  KVZ_HASH_NONE = 0,
  KVZ_HASH_CHECKSUM = 1,
  KVZ_HASH_MD5 = 2;

/**
* \brief cu split termination mode
* @since since 3.8.0
*/
/** enum kvz_cu_split_termination */
public static final int
  KVZ_CU_SPLIT_TERMINATION_ZERO = 0,
  KVZ_CU_SPLIT_TERMINATION_OFF = 1;

/**
* \brief Enable and disable crypto features.
* @since 3.7.0
*/
/** enum kvz_crypto_features */
public static final int
  KVZ_CRYPTO_OFF = 0,
  KVZ_CRYPTO_MVs = (1 << 0),
  KVZ_CRYPTO_MV_SIGNS = (1 << 1),
  KVZ_CRYPTO_TRANSF_COEFFS = (1 << 2),
  KVZ_CRYPTO_TRANSF_COEFF_SIGNS = (1 << 3),
  KVZ_CRYPTO_INTRA_MODE = (1 << 4),
  KVZ_CRYPTO_ON = (1 << 5) - 1;

/**
* \brief me early termination mode
* @since since 3.8.0
*/
/** enum kvz_me_early_termination */
public static final int
  KVZ_ME_EARLY_TERMINATION_OFF = 0,
  KVZ_ME_EARLY_TERMINATION_ON = 1,
  KVZ_ME_EARLY_TERMINATION_SENSITIVE = 2;


/**
 * \brief Format the pixels are read in.
 * This is separate from chroma subsampling, because we might want to read
 * interleaved formats in the future.
 * @since 3.12.0
 */
/** enum kvz_input_format */
public static final int
  KVZ_FORMAT_P400 = 0,
  KVZ_FORMAT_P420 = 1,
  KVZ_FORMAT_P422 = 2,
  KVZ_FORMAT_P444 = 3;

/**
* \brief Chroma subsampling format used for encoding.
* @since 3.12.0
*/
/** enum kvz_chroma_format */
public static final int
  KVZ_CSP_400 = 0,
  KVZ_CSP_420 = 1,
  KVZ_CSP_422 = 2,
  KVZ_CSP_444 = 3;

/**
 * \brief Chroma subsampling format used for encoding.
 * @since 3.15.0
 */
/** enum kvz_slices */
public static final int
  KVZ_SLICES_NONE = 0,
  /** \brief Put each tile in a slice. */
  KVZ_SLICES_TILES = (1 << 0),
  /** \brief Put each row in a slice. */
  KVZ_SLICES_WPP   = (1 << 1);

/** enum kvz_sao */
public static final int
  KVZ_SAO_OFF = 0,
  KVZ_SAO_EDGE = 1,
  KVZ_SAO_BAND = 2,
  KVZ_SAO_FULL = 3;

/** enum kvz_scalinglist */
public static final int
  KVZ_SCALING_LIST_OFF = 0,
  KVZ_SCALING_LIST_CUSTOM = 1,
  KVZ_SCALING_LIST_DEFAULT = 2;

/** enum kvz_rc_algorithm */
public static final int
  KVZ_NO_RC = 0,
  KVZ_LAMBDA = 1,
  KVZ_OBA = 2;

/** enum kvz_file_format */
public static final int
  KVZ_FORMAT_AUTO = 0,
  KVZ_FORMAT_Y4M = 1,
  KVZ_FORMAT_YUV = 2;


// Map from input format to chroma format.
// #define KVZ_FORMAT2CSP(format) ((enum kvz_chroma_format)"\0\1\2\3"[format])
// Targeting ../kvz_gop_config.java


// Targeting ../kvz_config.java


// Targeting ../kvz_picture.java



/**
 * \brief NAL unit type codes.
 *
 * These are the nal_unit_type codes from Table 7-1 ITU-T H.265 v1.0.
 */
/** enum kvz_nal_unit_type */
public static final int

  // Trailing pictures

  KVZ_NAL_TRAIL_N = 0,
  KVZ_NAL_TRAIL_R = 1,

  KVZ_NAL_TSA_N = 2,
  KVZ_NAL_TSA_R = 3,

  KVZ_NAL_STSA_N = 4,
  KVZ_NAL_STSA_R = 5,

  // Leading pictures

  KVZ_NAL_RADL_N = 6,
  KVZ_NAL_RADL_R = 7,

  KVZ_NAL_RASL_N = 8,
  KVZ_NAL_RASL_R = 9,

  // Reserved non-IRAP RSV_VCL_N/R 10-15

  // Intra random access point pictures

  KVZ_NAL_BLA_W_LP   = 16,
  KVZ_NAL_BLA_W_RADL = 17,
  KVZ_NAL_BLA_N_LP   = 18,

  KVZ_NAL_IDR_W_RADL = 19,
  KVZ_NAL_IDR_N_LP   = 20,

  KVZ_NAL_CRA_NUT    = 21,

  // Reserved IRAP

  KVZ_NAL_RSV_IRAP_VCL22 = 22,
  KVZ_NAL_RSV_IRAP_VCL23 = 23,

  // Reserved non-IRAP RSV_VCL 24-32

  // non-VCL

  KVZ_NAL_VPS_NUT = 32,
  KVZ_NAL_SPS_NUT = 33,
  KVZ_NAL_PPS_NUT = 34,

  KVZ_NAL_AUD_NUT = 35,
  KVZ_NAL_EOS_NUT = 36,
  KVZ_NAL_EOB_NUT = 37,
  KVZ_NAL_FD_NUT  = 38,

  KVZ_NAL_PREFIX_SEI_NUT = 39,
  KVZ_NAL_SUFFIX_SEI_NUT = 40;

  // Reserved RSV_NVCL 41-47
  // Unspecified UNSPEC 48-63

/** enum kvz_slice_type */
public static final int
  KVZ_SLICE_B = 0,
  KVZ_SLICE_P = 1,
  KVZ_SLICE_I = 2;
// Targeting ../kvz_frame_info.java


// Targeting ../kvz_data_chunk.java


// Targeting ../kvz_api.java




public static native @Const kvz_api kvz_api_get(int bit_depth);

// #ifdef __cplusplus
// #endif

// #endif // KVAZAAR_H_


}
