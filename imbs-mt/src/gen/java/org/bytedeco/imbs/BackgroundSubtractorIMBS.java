// Targeted by JavaCPP version 1.5.1: DO NOT EDIT THIS FILE

package org.bytedeco.imbs;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import org.bytedeco.opencv.opencv_videoio.*;
import static org.bytedeco.opencv.global.opencv_videoio.*;
import org.bytedeco.opencv.opencv_highgui.*;
import static org.bytedeco.opencv.global.opencv_highgui.*;
import org.bytedeco.opencv.opencv_flann.*;
import static org.bytedeco.opencv.global.opencv_flann.*;
import org.bytedeco.opencv.opencv_features2d.*;
import static org.bytedeco.opencv.global.opencv_features2d.*;
import org.bytedeco.opencv.opencv_calib3d.*;
import static org.bytedeco.opencv.global.opencv_calib3d.*;
import org.bytedeco.opencv.opencv_objdetect.*;
import static org.bytedeco.opencv.global.opencv_objdetect.*;
import org.bytedeco.opencv.opencv_video.*;
import static org.bytedeco.opencv.global.opencv_video.*;
import org.bytedeco.opencv.opencv_ml.*;
import static org.bytedeco.opencv.global.opencv_ml.*;
import org.bytedeco.opencv.opencv_shape.*;
import static org.bytedeco.opencv.global.opencv_shape.*;
import org.bytedeco.opencv.opencv_xfeatures2d.*;
import static org.bytedeco.opencv.global.opencv_xfeatures2d.*;
import org.bytedeco.opencv.opencv_stitching.*;
import static org.bytedeco.opencv.global.opencv_stitching.*;
import org.bytedeco.opencv.opencv_aruco.*;
import static org.bytedeco.opencv.global.opencv_aruco.*;
import org.bytedeco.opencv.opencv_bgsegm.*;
import static org.bytedeco.opencv.global.opencv_bgsegm.*;
import org.bytedeco.opencv.opencv_bioinspired.*;
import static org.bytedeco.opencv.global.opencv_bioinspired.*;
import org.bytedeco.opencv.opencv_photo.*;
import static org.bytedeco.opencv.global.opencv_photo.*;
import org.bytedeco.opencv.opencv_face.*;
import static org.bytedeco.opencv.global.opencv_face.*;
import org.bytedeco.opencv.opencv_img_hash.*;
import static org.bytedeco.opencv.global.opencv_img_hash.*;
import org.bytedeco.opencv.opencv_quality.*;
import static org.bytedeco.opencv.global.opencv_quality.*;
import org.bytedeco.opencv.opencv_saliency.*;
import static org.bytedeco.opencv.global.opencv_saliency.*;
import org.bytedeco.opencv.opencv_phase_unwrapping.*;
import static org.bytedeco.opencv.global.opencv_phase_unwrapping.*;
import org.bytedeco.opencv.opencv_structured_light.*;
import static org.bytedeco.opencv.global.opencv_structured_light.*;
import org.bytedeco.opencv.opencv_ximgproc.*;
import static org.bytedeco.opencv.global.opencv_ximgproc.*;
import org.bytedeco.opencv.opencv_optflow.*;
import static org.bytedeco.opencv.global.opencv_optflow.*;
import org.bytedeco.opencv.opencv_superres.*;
import static org.bytedeco.opencv.global.opencv_superres.*;
import org.bytedeco.opencv.opencv_dnn.*;
import static org.bytedeco.opencv.global.opencv_dnn.*;
import org.bytedeco.opencv.opencv_text.*;
import static org.bytedeco.opencv.global.opencv_text.*;
import org.bytedeco.opencv.opencv_plot.*;
import static org.bytedeco.opencv.global.opencv_plot.*;
import org.bytedeco.opencv.opencv_tracking.*;
import static org.bytedeco.opencv.global.opencv_tracking.*;
import org.bytedeco.opencv.opencv_videostab.*;
import static org.bytedeco.opencv.global.opencv_videostab.*;
import org.bytedeco.opencv.opencv_xphoto.*;
import static org.bytedeco.opencv.global.opencv_xphoto.*;

import static org.bytedeco.imbs.global.imbs.*;


@NoOffset @Properties(inherit = org.bytedeco.imbs.presets.imbs.class)
public class BackgroundSubtractorIMBS extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BackgroundSubtractorIMBS(Pointer p) { super(p); }

    /** the default constructor */
    public BackgroundSubtractorIMBS() { super((Pointer)null); allocate(); }
    private native void allocate();
    /** the full constructor */
    public BackgroundSubtractorIMBS(double fps,
    			@Cast("unsigned int") int fgThreshold/*=20*/,
    			@Cast("unsigned int") int associationThreshold/*=5*/,
    			double samplingPeriod/*=500.*/,
    			@Cast("unsigned int") int minBinHeight/*=2*/,
    			@Cast("unsigned int") int numSamples/*=20*/,
    			double alpha/*=0.65*/,
    			double beta/*=1.15*/,
    			double tau_s/*=60.*/,
    			double tau_h/*=40.*/,
    			double minArea/*=50.*/,
    			double persistencePeriod/*=10000.*/,
    			@Cast("bool") boolean morphologicalFiltering/*=false*/
        		) { super((Pointer)null); allocate(fps, fgThreshold, associationThreshold, samplingPeriod, minBinHeight, numSamples, alpha, beta, tau_s, tau_h, minArea, persistencePeriod, morphologicalFiltering); }
    private native void allocate(double fps,
    			@Cast("unsigned int") int fgThreshold/*=20*/,
    			@Cast("unsigned int") int associationThreshold/*=5*/,
    			double samplingPeriod/*=500.*/,
    			@Cast("unsigned int") int minBinHeight/*=2*/,
    			@Cast("unsigned int") int numSamples/*=20*/,
    			double alpha/*=0.65*/,
    			double beta/*=1.15*/,
    			double tau_s/*=60.*/,
    			double tau_h/*=40.*/,
    			double minArea/*=50.*/,
    			double persistencePeriod/*=10000.*/,
    			@Cast("bool") boolean morphologicalFiltering/*=false*/
        		);
    public BackgroundSubtractorIMBS(double fps
        		) { super((Pointer)null); allocate(fps); }
    private native void allocate(double fps
        		);
    /** the destructor */
    /** the update operator */
    public native void apply(@ByVal Mat image, @ByVal Mat fgmask, double learningRate/*=-1.*/);
    public native void apply(@ByVal Mat image, @ByVal Mat fgmask);
    public native void apply(@ByVal UMat image, @ByVal UMat fgmask, double learningRate/*=-1.*/);
    public native void apply(@ByVal UMat image, @ByVal UMat fgmask);
    public native void apply(@ByVal GpuMat image, @ByVal GpuMat fgmask, double learningRate/*=-1.*/);
    public native void apply(@ByVal GpuMat image, @ByVal GpuMat fgmask);

    /** computes a background image which shows only the highest bin for each pixel */
    public native void getBackgroundImage(@ByVal Mat backgroundImage);
    public native void getBackgroundImage(@ByVal UMat backgroundImage);
    public native void getBackgroundImage(@ByVal GpuMat backgroundImage);

    /** re-initiaization method */
    public native void initialize(@ByVal Size frameSize, int frameType);
	
	public native @Cast("bool") boolean loadBg(@Cast("const char*") BytePointer filename);
	public native @Cast("bool") boolean loadBg(String filename);
	public native void saveBg(@StdString @Cast({"char*", "std::string*"}) BytePointer filename);
    //struct for modeling the background values for the entire frame
	public static class BgModel extends Pointer {
	    static { Loader.load(); }
	    /** Default native constructor. */
	    public BgModel() { super((Pointer)null); allocate(); }
	    /** Native array allocator. Access with {@link Pointer#position(long)}. */
	    public BgModel(long size) { super((Pointer)null); allocateArray(size); }
	    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
	    public BgModel(Pointer p) { super(p); }
	    private native void allocate();
	    private native void allocateArray(long size);
	    @Override public BgModel position(long position) {
	        return (BgModel)super.position(position);
	    }
	
          public native @Cast("cv::Vec3b*") @StdVector Point3i values(); public native BgModel values(Point3i setter);
          public native @Cast("bool*") @StdVector BoolPointer isValid(); public native BgModel isValid(BoolPointer setter);
          public native @Cast("bool*") @StdVector BoolPointer isFg(); public native BgModel isFg(BoolPointer setter);
          public native @Cast("uchar*") @StdVector BytePointer counter(); public native BgModel counter(BytePointer setter);
	}
    public native @Cast("unsigned int") int getMaxBgBins();
    public native @Cast("unsigned int") int getFgThreshold();
    public native void getBgModel(@StdVector BgModel bgModel_copy);
}
