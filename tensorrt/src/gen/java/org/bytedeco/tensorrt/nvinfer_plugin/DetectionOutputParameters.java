// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer_plugin;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;
import org.bytedeco.tensorrt.nvinfer.*;
import static org.bytedeco.tensorrt.global.nvinfer.*;

import static org.bytedeco.tensorrt.global.nvinfer_plugin.*;


/**
 *  \struct DetectionOutputParameters
 * 
 *  \brief The DetectionOutput plugin layer generates the detection output
 *  based on location and confidence predictions by doing non maximum suppression.
 * 
 *  This plugin first decodes the bounding boxes based on the anchors generated.
 *  It then performs non_max_suppression on the decoded bounding boxes.
 *  DetectionOutputParameters defines a set of parameters for creating the DetectionOutput plugin layer.
 * 
 *  @deprecated Deprecated in TensorRT 10.0. DetectionOutput plugin is deprecated.
 *  */
@Namespace("nvinfer1::plugin") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer_plugin.class)
public class DetectionOutputParameters extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public DetectionOutputParameters() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DetectionOutputParameters(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DetectionOutputParameters(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public DetectionOutputParameters position(long position) {
        return (DetectionOutputParameters)super.position(position);
    }
    @Override public DetectionOutputParameters getPointer(long i) {
        return new DetectionOutputParameters((Pointer)this).offsetAddress(i);
    }

    /** If true, bounding box are shared among different classes. */
    public native @Cast("bool") boolean shareLocation(); public native DetectionOutputParameters shareLocation(boolean setter);
    /** If true, variance is encoded in target.
     *  Otherwise we need to adjust the predicted offset accordingly. */
    public native @Cast("bool") boolean varianceEncodedInTarget(); public native DetectionOutputParameters varianceEncodedInTarget(boolean setter);
    /** Background label ID. If there is no background class, set it as -1. */
    public native int backgroundLabelId(); public native DetectionOutputParameters backgroundLabelId(int setter);
    /** Number of classes to be predicted. */
    public native int numClasses(); public native DetectionOutputParameters numClasses(int setter);
    /** Number of boxes per image with top confidence scores that are fed
     *  into the NMS algorithm. */
    public native int topK(); public native DetectionOutputParameters topK(int setter);
    /** Number of total bounding boxes to be kept per image after NMS step. */
    public native int keepTopK(); public native DetectionOutputParameters keepTopK(int setter);
    /** Only consider detections whose confidences are larger than a threshold. */
    public native float confidenceThreshold(); public native DetectionOutputParameters confidenceThreshold(float setter);
    /** Threshold to be used in NMS. */
    public native float nmsThreshold(); public native DetectionOutputParameters nmsThreshold(float setter);
    /** Type of coding method for bbox. */
    public native CodeTypeSSD codeType(); public native DetectionOutputParameters codeType(CodeTypeSSD setter);
    /** Specifies the order of inputs {loc_data, conf_data, priorbox_data}. */
    public native int inputOrder(int i); public native DetectionOutputParameters inputOrder(int i, int setter);
    @MemberGetter public native IntPointer inputOrder();
    /** Set to true to calculate sigmoid of confidence scores. */
    public native @Cast("bool") boolean confSigmoid(); public native DetectionOutputParameters confSigmoid(boolean setter);
    /** Set to true if bounding box data is normalized by the network. */
    public native @Cast("bool") boolean isNormalized(); public native DetectionOutputParameters isNormalized(boolean setter);
    /** Defaults to true. Set to false if prior boxes are unique per batch. */
    public native @Cast("bool") boolean isBatchAgnostic(); public native DetectionOutputParameters isBatchAgnostic(boolean setter);
}
