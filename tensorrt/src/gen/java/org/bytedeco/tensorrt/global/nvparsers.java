// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.global;

import org.bytedeco.tensorrt.nvparsers.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;
import org.bytedeco.tensorrt.nvinfer.*;
import static org.bytedeco.tensorrt.global.nvinfer.*;
import org.bytedeco.tensorrt.nvinfer_plugin.*;
import static org.bytedeco.tensorrt.global.nvinfer_plugin.*;

public class nvparsers extends org.bytedeco.tensorrt.presets.nvparsers {
    static { Loader.load(); }

// Parsed from NvCaffeParser.h

/*
 * SPDX-FileCopyrightText: Copyright (c) 1993-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: LicenseRef-NvidiaProprietary
 *
 * NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
 * property and proprietary rights in and to this material, related
 * documentation and any modifications thereto. Any use, reproduction,
 * disclosure or distribution of this material and related documentation
 * without an express license agreement from NVIDIA CORPORATION or
 * its affiliates is strictly prohibited.
 */

// #ifndef NV_CAFFE_PARSER_H
// #define NV_CAFFE_PARSER_H



//!
//!
//!

//!
//!
//!
// #include "NvInfer.h"

/**
 *  \file NvCaffeParser.h
 * 
 *  This is the API for the Caffe Parser
 * 
 <p>
 * 
 *  \namespace nvcaffeparser1
 * 
 *  \brief The TensorRT Caffe parser API namespace.
 *  */
// Targeting ../nvparsers/IBlobNameToTensor.java


// Targeting ../nvparsers/IBinaryProtoBlob.java


// Targeting ../nvparsers/IPluginFactoryV2.java


// Targeting ../nvparsers/ICaffeParser.java



/**
 *  \brief Creates a ICaffeParser object.
 * 
 *  @return A pointer to the ICaffeParser object is returned.
 * 
 *  @see nvcaffeparser1::ICaffeParser
 * 
 *  @deprecated ICaffeParser will be removed in TensorRT 9.0. Plan to migrate your workflow to
 *  use nvonnxparser::IParser for deployment.
 *  */


//!
//!
//!
@Namespace("nvcaffeparser1") public static native @NoException(true) ICaffeParser createCaffeParser();

/**
 *  \brief Shuts down protocol buffers library.
 * 
 *  \note No part of the protocol buffers library can be used after this function is called.
 *  */
@Namespace("nvcaffeparser1") public static native @NoException(true) void shutdownProtobufLibrary();
 // namespace nvcaffeparser1

/**
 *  Internal C entry point for creating ICaffeParser.
 *  \private
 *  */
public static native @NoException(true) Pointer createNvCaffeParser_INTERNAL();
// #endif


// Parsed from NvUffParser.h

/*
 * SPDX-FileCopyrightText: Copyright (c) 1993-2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: LicenseRef-NvidiaProprietary
 *
 * NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
 * property and proprietary rights in and to this material, related
 * documentation and any modifications thereto. Any use, reproduction,
 * disclosure or distribution of this material and related documentation
 * without an express license agreement from NVIDIA CORPORATION or
 * its affiliates is strictly prohibited.
 */

// #ifndef NV_UFF_PARSER_H
// #define NV_UFF_PARSER_H



//!
//!
//!
// #include "NvInfer.h"

/**
 *  \file NvUffParser.h
 * 
 *  This is the API for the UFF Parser
 *  */

// Current supported Universal Framework Format (UFF) version for the parser.
public static final int UFF_REQUIRED_VERSION_MAJOR = 0;
public static final int UFF_REQUIRED_VERSION_MINOR = 6;


//!
//!
//!
public static final int UFF_REQUIRED_VERSION_PATCH = 9;

/**
 *  \namespace nvuffparser
 * 
 *  \brief The TensorRT UFF parser API namespace.
 *  */

/**
 *  \enum UffInputOrder
 *  \brief The different possible supported input order.
 *  */
@Namespace("nvuffparser") public enum UffInputOrder {
    /** NCHW order. */
    kNCHW(0),
    /** NHWC order. */
    kNHWC(1),
    /** NC order. */
    kNC(2);

    public final int value;
    private UffInputOrder(int v) { this.value = v; }
    private UffInputOrder(UffInputOrder e) { this.value = e.value; }
    public UffInputOrder intern() { for (UffInputOrder e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

/**
 *  \enum FieldType
 *  \brief The possible field types for custom layer.
 *  */

@Namespace("nvuffparser") public enum FieldType {
    /** FP32 field type. */
    kFLOAT(0),
    /** INT32 field type. */
    kINT32(1),
    /** char field type. String for length>1. */
    kCHAR(2),
    /** nvinfer1::Dims field type. */
    kDIMS(4),
    /** nvinfer1::DataType field type. */
    kDATATYPE(5),
    kUNKNOWN(6);

    public final int value;
    private FieldType(int v) { this.value = v; }
    private FieldType(FieldType e) { this.value = e.value; }
    public FieldType intern() { for (FieldType e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting ../nvparsers/FieldMap.java


// Targeting ../nvparsers/FieldCollection.java


// Targeting ../nvparsers/IUffParser.java



/**
 *  \brief Creates a IUffParser object.
 * 
 *  @return A pointer to the IUffParser object is returned.
 * 
 *  @see nvuffparser::IUffParser
 * 
 *  @deprecated IUffParser will be removed in TensorRT 9.0. Plan to migrate your workflow to
 *  use nvonnxparser::IParser for deployment.
 *  */


//!
//!
//!
@Namespace("nvuffparser") public static native @NoException(true) IUffParser createUffParser();

/**
 *  \brief Shuts down protocol buffers library.
 * 
 *  \note No part of the protocol buffers library can be used after this function is called.
 *  */

 // namespace nvuffparser

/**
 *  Internal C entry point for creating IUffParser
 *  \private
 *  */
public static native @NoException(true) Pointer createNvUffParser_INTERNAL();

// #endif /* !NV_UFF_PARSER_H */


}
