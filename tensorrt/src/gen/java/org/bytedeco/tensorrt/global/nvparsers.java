// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.global;

import org.bytedeco.tensorrt.nvparsers.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.tensorrt.nvinfer.*;
import static org.bytedeco.tensorrt.global.nvinfer.*;

public class nvparsers extends org.bytedeco.tensorrt.presets.nvparsers {
    static { Loader.load(); }

// Parsed from NvCaffeParser.h

/*
 * Copyright 1993-2018 NVIDIA Corporation.  All rights reserved.
 *
 * NOTICE TO LICENSEE:
 *
 * This source code and/or documentation ("Licensed Deliverables") are
 * subject to NVIDIA intellectual property rights under U.S. and
 * international Copyright laws.
 *
 * These Licensed Deliverables contained herein is PROPRIETARY and
 * CONFIDENTIAL to NVIDIA and is being provided under the terms and
 * conditions of a form of NVIDIA software license agreement by and
 * between NVIDIA and Licensee ("License Agreement") or electronically
 * accepted by Licensee.  Notwithstanding any terms or conditions to
 * the contrary in the License Agreement, reproduction or disclosure
 * of the Licensed Deliverables to any third party without the express
 * written consent of NVIDIA is prohibited.
 *
 * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE
 * LICENSE AGREEMENT, NVIDIA MAKES NO REPRESENTATION ABOUT THE
 * SUITABILITY OF THESE LICENSED DELIVERABLES FOR ANY PURPOSE.  IT IS
 * PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.
 * NVIDIA DISCLAIMS ALL WARRANTIES WITH REGARD TO THESE LICENSED
 * DELIVERABLES, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY,
 * NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.
 * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE
 * LICENSE AGREEMENT, IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY
 * SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
 * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THESE LICENSED DELIVERABLES.
 *
 * U.S. Government End Users.  These Licensed Deliverables are a
 * "commercial item" as that term is defined at 48 C.F.R. 2.101 (OCT
 * 1995), consisting of "commercial computer software" and "commercial
 * computer software documentation" as such terms are used in 48
 * C.F.R. 12.212 (SEPT 1995) and is provided to the U.S. Government
 * only as a commercial end item.  Consistent with 48 C.F.R.12.212 and
 * 48 C.F.R. 227.7202-1 through 227.7202-4 (JUNE 1995), all
 * U.S. Government End Users acquire the Licensed Deliverables with
 * only those rights set forth herein.
 *
 * Any use of the Licensed Deliverables in individual and commercial
 * software must include, in the user documentation and internal
 * comments to the code, the above Disclaimer and U.S. Government End
 * Users Notice.
 */

// #ifndef NV_CAFFE_PARSER_H
// #define NV_CAFFE_PARSER_H

// #include "NvInfer.h"
// Targeting ../nvparsers/NetParameter.java



// Targeting ../nvparsers/IBlobNameToTensor.java


// Targeting ../nvparsers/IBinaryProtoBlob.java


// Targeting ../nvparsers/IPluginFactory.java


// Targeting ../nvparsers/IPluginFactoryExt.java


// Targeting ../nvparsers/ICaffeParser.java



/**
 *  \brief Creates a ICaffeParser object.
 * 
 *  @return A pointer to the ICaffeParser object is returned.
 * 
 *  @see nvcaffeparser1::ICaffeParser
 *  */


//!
//!
//!
@Namespace("nvcaffeparser1") public static native ICaffeParser createCaffeParser();

/**
 *  \brief Shuts down protocol buffers library.
 * 
 *  \note No part of the protocol buffers library can be used after this function is called.
 *  */
@Namespace("nvcaffeparser1") public static native void shutdownProtobufLibrary();


// #endif


// Parsed from NvUffParser.h

/*
 * Copyright 1993-2018 NVIDIA Corporation.  All rights reserved.
 *
 * NOTICE TO LICENSEE:
 *
 * This source code and/or documentation ("Licensed Deliverables") are
 * subject to NVIDIA intellectual property rights under U.S. and
 * international Copyright laws.
 *
 * These Licensed Deliverables contained herein is PROPRIETARY and
 * CONFIDENTIAL to NVIDIA and is being provided under the terms and
 * conditions of a form of NVIDIA software license agreement by and
 * between NVIDIA and Licensee ("License Agreement") or electronically
 * accepted by Licensee.  Notwithstanding any terms or conditions to
 * the contrary in the License Agreement, reproduction or disclosure
 * of the Licensed Deliverables to any third party without the express
 * written consent of NVIDIA is prohibited.
 *
 * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE
 * LICENSE AGREEMENT, NVIDIA MAKES NO REPRESENTATION ABOUT THE
 * SUITABILITY OF THESE LICENSED DELIVERABLES FOR ANY PURPOSE.  IT IS
 * PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.
 * NVIDIA DISCLAIMS ALL WARRANTIES WITH REGARD TO THESE LICENSED
 * DELIVERABLES, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY,
 * NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.
 * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE
 * LICENSE AGREEMENT, IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY
 * SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
 * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THESE LICENSED DELIVERABLES.
 *
 * U.S. Government End Users.  These Licensed Deliverables are a
 * "commercial item" as that term is defined at 48 C.F.R. 2.101 (OCT
 * 1995), consisting of "commercial computer software" and "commercial
 * computer software documentation" as such terms are used in 48
 * C.F.R. 12.212 (SEPT 1995) and is provided to the U.S. Government
 * only as a commercial end item.  Consistent with 48 C.F.R.12.212 and
 * 48 C.F.R. 227.7202-1 through 227.7202-4 (JUNE 1995), all
 * U.S. Government End Users acquire the Licensed Deliverables with
 * only those rights set forth herein.
 *
 * Any use of the Licensed Deliverables in individual and commercial
 * software must include, in the user documentation and internal
 * comments to the code, the above Disclaimer and U.S. Government End
 * Users Notice.
 */

// #ifndef NV_UFF_PARSER_H
// #define NV_UFF_PARSER_H

// #include "NvInfer.h"

//Current supported Universal Framework Format (UFF) version for the parser.
public static final int UFF_REQUIRED_VERSION_MAJOR = 0;
public static final int UFF_REQUIRED_VERSION_MINOR = 4;
public static final int UFF_REQUIRED_VERSION_PATCH = 0;

/**
 *  \enum UffInputOrder
 *  \brief The different possible supported input order.
 *  */
@Namespace("nvuffparser") public enum UffInputOrder {
    /** NCHW order. */
    kNCHW(0),
    /** NHWC order. */
    kNHWC(1),
    /** NC order. */
    kNC(2);

    public final int value;
    private UffInputOrder(int v) { this.value = v; }
    private UffInputOrder(UffInputOrder e) { this.value = e.value; }
    public UffInputOrder intern() { for (UffInputOrder e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}

/**
 *  \enum FieldType
 *  \brief The possible field types for custom layer.
 *  */

@Namespace("nvuffparser") public enum FieldType {
    /** FP32 field type. */
    kFLOAT(0),
    /** INT32 field type. */
    kINT32(1),
    /** char field type. String for length>1. */
    kCHAR(2),
    /** nvinfer1::Dims field type. */
    kDIMS(4),
    /** nvinfer1::DataType field type. */
    kDATATYPE(5),
    kUNKNOWN(6);

    public final int value;
    private FieldType(int v) { this.value = v; }
    private FieldType(FieldType e) { this.value = e.value; }
    public FieldType intern() { for (FieldType e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting ../nvparsers/FieldMap.java


// Targeting ../nvparsers/FieldCollection.java


// Targeting ../nvparsers/IUffPluginFactory.java


// Targeting ../nvparsers/IUffPluginFactoryExt.java


// Targeting ../nvparsers/IUffParser.java



/**
 *  \brief Creates a IUffParser object.
 * 
 *  @return A pointer to the IUffParser object is returned.
 * 
 *  @see nvuffparser::IUffParser
 *  */


//!
//!
//!
@Namespace("nvuffparser") public static native IUffParser createUffParser();

/**
 *  \brief Shuts down protocol buffers library.
 * 
 *  \note No part of the protocol buffers library can be used after this function is called.
 *  */



// #endif /* !NV_UFF_PARSER_H */


}
