// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.global;

import org.bytedeco.tensorrt.nvonnxparser.*;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;
import org.bytedeco.tensorrt.nvinfer.*;
import static org.bytedeco.tensorrt.global.nvinfer.*;
import org.bytedeco.tensorrt.nvinfer_plugin.*;
import static org.bytedeco.tensorrt.global.nvinfer_plugin.*;

public class nvonnxparser extends org.bytedeco.tensorrt.presets.nvonnxparser {
    static { Loader.load(); }

// Targeting ../nvonnxparser/SubGraphCollection_t.java


// Targeting ../nvonnxparser/SubGraph_t.java


// Parsed from NvOnnxParser.h

/*
 * Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// #ifndef NV_ONNX_PARSER_H
// #define NV_ONNX_PARSER_H

// #include "NvInfer.h"
// #include <stddef.h>


//!
//!
//!
// #include <vector>

/**
 *  \file NvOnnxParser.h
 * 
 *  This is the API for the ONNX Parser
 *  */

public static final int NV_ONNX_PARSER_MAJOR = 0;
public static final int NV_ONNX_PARSER_MINOR = 1;
public static final int NV_ONNX_PARSER_PATCH = 0;


//!
//!
@MemberGetter public static native int NV_ONNX_PARSER_VERSION();
public static final int NV_ONNX_PARSER_VERSION = NV_ONNX_PARSER_VERSION();

/** \typedef SubGraph_t
 * 
 *  \brief The data structure containing the parsing capability of
 *  a set of nodes in an ONNX graph.
 *  */

//!
//!

/** \typedef SubGraphCollection_t
 * 
 *  \brief The data structure containing all SubGraph_t partitioned
 *  out of an ONNX graph.
 *  */
// Targeting ../nvonnxparser/onnxTensorDescriptorV1.java


/**
 *  \namespace nvonnxparser
 * 
 *  \brief The TensorRT ONNX parser API namespace
 *  */

@Namespace("nvonnxparser") public static native @Name("EnumMax<nvonnxparser::ErrorCode>") int ErrorCodeEnumMax();

/** \enum ErrorCode
 *
 * \brief the type of parser error
 */
@Namespace("nvonnxparser") public enum ErrorCode {
    kSUCCESS(0),
    kINTERNAL_ERROR(1),
    kMEM_ALLOC_FAILED(2),
    kMODEL_DESERIALIZE_FAILED(3),
    kINVALID_VALUE(4),
    kINVALID_GRAPH(5),
    kINVALID_NODE(6),
    kUNSUPPORTED_GRAPH(7),
    kUNSUPPORTED_NODE(8);

    public final int value;
    private ErrorCode(int v) { this.value = v; }
    private ErrorCode(ErrorCode e) { this.value = e.value; }
    public ErrorCode intern() { for (ErrorCode e : values()) if (e.value == value) return e; return this; }
    @Override public String toString() { return intern().name(); }
}
// Targeting ../nvonnxparser/IParserError.java


// Targeting ../nvonnxparser/IParser.java



 // namespace nvonnxparser

public static native Pointer createNvOnnxParser_INTERNAL(Pointer network, Pointer logger, int version);
public static native int getNvOnnxParserVersion();

// #ifdef SWIG
// #endif // SWIG

/** \brief Create a new parser object
 *
 * @param network The network definition that the parser will write to
 * @param logger The logger to use
 * @return a new parser object or NULL if an error occurred
 * @see IParser
 */
// #ifdef _MSC_VER
@Namespace("nvonnxparser") public static native IParser createParser(@ByRef INetworkDefinition network,
                                  @ByRef ILogger logger); 

 // namespace

 // namespace nvonnxparser

// #endif // NV_ONNX_PARSER_H


}
