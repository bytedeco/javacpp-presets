// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class IConcatenationLayer
 * 
 *  \brief A concatenation layer in a network definition.
 * 
 *  The output dimension along the concatenation axis is the sum of the corresponding input dimensions.
 *  Every other output dimension is the same as the corresponding dimension of the inputs.
 * 
 *  \warning All tensors must have the same dimensions except along the concatenation axis.
 * 
 *  \warning Do not inherit from this class, as doing so will break forward-compatibility of the API and ABI.
 *  */
@Namespace("nvinfer1") @NoOffset @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IConcatenationLayer extends ILayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IConcatenationLayer(Pointer p) { super(p); }

    /**
     *  \brief Set the axis along which concatenation occurs.
     * 
     *  0 is the major axis (excluding the batch dimension). The default is the number of non-batch axes in the tensor
     *  minus three (e.g. for an NCHW input it would be 0), or 0 if there are fewer than 3 non-batch axes.
     * 
     *  When running this layer on the DLA, only concat across the Channel axis is valid.
     * 
     *  @param axis The axis along which concatenation occurs.
     *  */
    
    
    //!
    //!
    //!
    public native @NoException(true) void setAxis(int axis);

    /**
     *  \brief Get the axis along which concatenation occurs.
     * 
     *  @see setAxis()
     *  */
    public native @NoException(true) int getAxis();
}
