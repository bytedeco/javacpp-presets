// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class ILoopBoundaryLayer
 * 
 *  \brief This is a base class for Loop boundary layers.
 * 
 *  The loop boundary layers are used to define loops within a network, enabling the implementation
 *  of recurrences. The boundary layers for a loop are created by class ILoop.
 * 
 *  There are four kinds of boundary layers.
 *  * ITripLimitLayer: controls the number of loop iterations.
 *  * IIterationLayer: iterates over an input tensor.
 *  * IRecurrenceLayer: returns an initial value or value from the previous loop iteration.
 *  * ILoopOutputLayer: generates an output tensor from the loop iterations. */
@Namespace("nvinfer1") @NoOffset @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class ILoopBoundaryLayer extends ILayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ILoopBoundaryLayer(Pointer p) { super(p); }

    /**
     *  \brief Get a pointer to ILoop associated with this boundary layer.
     *  */
    public native @NoException(true) ILoop getLoop();
}
