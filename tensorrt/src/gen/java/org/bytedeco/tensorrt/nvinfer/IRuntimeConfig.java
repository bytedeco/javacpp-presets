// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;



/** \class IRuntimeConfig
 * 
 *  \brief A class for runtime configuration. This class is used during execution context creation.
 * 
 *  @see IRuntime, IBuilderConfig
 *  */
@Namespace("nvinfer1") @NoOffset @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IRuntimeConfig extends INoCopy {
    static { Loader.load(); }
    /** Default native constructor. */
    public IRuntimeConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public IRuntimeConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IRuntimeConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public IRuntimeConfig position(long position) {
        return (IRuntimeConfig)super.position(position);
    }
    @Override public IRuntimeConfig getPointer(long i) {
        return new IRuntimeConfig((Pointer)this).offsetAddress(i);
    }


    /**
     *  \brief Set the execution context allocation strategy. Default value is kSTATIC.
     * 
     *  @param strategy The execution context allocation strategy.
     *  */
    
    
    //!
    //!
    //!
    public native @NoException(true) void setExecutionContextAllocationStrategy(ExecutionContextAllocationStrategy strategy);
    public native @NoException(true) void setExecutionContextAllocationStrategy(@Cast("nvinfer1::ExecutionContextAllocationStrategy") int strategy);

    /**
     *  \brief Get the execution context allocation strategy.
     * 
     *  @return The execution context allocation strategy.
     *  */
    public native @NoException(true) ExecutionContextAllocationStrategy getExecutionContextAllocationStrategy();
}
