// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class ISerializationConfig
 * 
 *  \brief Holds properties for configuring an engine to serialize the binary.
 * 
 *  @see SerializationFlag
 *  */
@Namespace("nvinfer1") @NoOffset @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class ISerializationConfig extends INoCopy {
    static { Loader.load(); }
    /** Default native constructor. */
    public ISerializationConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ISerializationConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ISerializationConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ISerializationConfig position(long position) {
        return (ISerializationConfig)super.position(position);
    }
    @Override public ISerializationConfig getPointer(long i) {
        return new ISerializationConfig((Pointer)this).offsetAddress(i);
    }


    /**
     *  \brief Set the serialization flags to turn on for this config.
     * 
     *  The flags are listed in the SerializationFlag enum.
     * 
     *  @param serializationFlags The serialization flags for an engine.
     * 
     *  \note This function will override the previous set flags, rather than bitwise ORing the new flag.
     * 
     *  @see getFlags()
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Cast("bool") @NoException(true) boolean setFlags(@Cast("nvinfer1::SerializationFlags") int serializationFlags);

    /**
     *  \brief Get the serialization flags for this config.
     * 
     *  @return The serialization flags as a bitmask.
     * 
     *  @see setFlags()
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Cast("nvinfer1::SerializationFlags") @NoException(true) int getFlags();

    /**
     *  \brief clear a serialization flag.
     * 
     *  clears the serialization flag from the config.
     * 
     *  @see setFlags()
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Cast("bool") @NoException(true) boolean clearFlag(SerializationFlag serializationFlag);
    public native @Cast("bool") @NoException(true) boolean clearFlag(@Cast("nvinfer1::SerializationFlag") int serializationFlag);

    /**
     *  \brief Set a serialization flag.
     * 
     *  Add the input serialization flag to the already enabled flags.
     * 
     *  @see setFlags()
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Cast("bool") @NoException(true) boolean setFlag(SerializationFlag serializationFlag);
    public native @Cast("bool") @NoException(true) boolean setFlag(@Cast("nvinfer1::SerializationFlag") int serializationFlag);

    /**
     *  \brief Returns true if the serialization flag is set
     * 
     *  @see getFlags()
     * 
     *  @return True if flag is set, false if unset.
     *  */
    public native @Cast("bool") @NoException(true) boolean getFlag(SerializationFlag serializationFlag);
    public native @Cast("bool") @NoException(true) boolean getFlag(@Cast("nvinfer1::SerializationFlag") int serializationFlag);
}
