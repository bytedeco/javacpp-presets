// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;



/**
 *  \class IBuilder
 * 
 *  \brief Builds an engine from a network definition.
 * 
 *  \warning Do not inherit from this class, as doing so will break forward-compatibility of the API and ABI.
 *  */
@Namespace("nvinfer1") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IBuilder extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IBuilder(Pointer p) { super(p); }

    /**
     *  \brief Create a network definition object where all tensors have an implicit batch dimension.
     * 
     *  This method is equivalent to createNetworkV2(0U), and retained for
     *  compatibility
     *  with earlier version of TensorRT.  The network does not support dynamic shapes or explicit batch sizes.
     * 
     *  @see INetworkDefinition, createNetworkV2
     * 
     *  @deprecated API will be removed in a future release, use IBuilder::createNetworkV2() instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated INetworkDefinition createNetwork();

    /**
     *  \brief Set the maximum batch size.
     * 
     *  @param batchSize The maximum batch size which can be used at execution time, and also the batch size for which
     *  the engine will be optimized.
     * 
     *  @see getMaxBatchSize()
     *  */
    
    
    //!
    //!
    //!
    //!
    public native void setMaxBatchSize(int batchSize);

    /**
     *  \brief Get the maximum batch size.
     * 
     *  @return The maximum batch size.
     * 
     *  @see setMaxBatchSize()
     *  @see getMaxDLABatchSize()
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native int getMaxBatchSize();

    /**
     *  \brief Set the maximum workspace size.
     * 
     *  @param workspaceSize The maximum GPU temporary memory which the engine can use at execution time.
     * 
     *  @see getMaxWorkspaceSize()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setMaxWorkspaceSize instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @Deprecated void setMaxWorkspaceSize(@Cast("std::size_t") long workspaceSize);

    /**
     *  \brief Get the maximum workspace size.
     * 
     *  @return The maximum workspace size.
     * 
     *  @see setMaxWorkspaceSize()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getMaxWorkspaceSize instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    public native @Cast("std::size_t") @Deprecated long getMaxWorkspaceSize();

    /**
     *  \brief Set whether half2 mode is used.
     * 
     *  half2 mode is a paired-image mode that is significantly faster for batch sizes greater than one on platforms
     *  with fp16 support.
     * 
     *  @param mode Whether half2 mode is used.
     * 
     *  @see getHalf2Mode()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setHalf2Mode(@Cast("bool") boolean mode);

    /**
     *  \brief Query whether half2 mode is used.
     * 
     *  @see setHalf2Mode()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Cast("bool") @Deprecated boolean getHalf2Mode();

    /**
     *  \brief Set whether the builder should use debug synchronization.
     * 
     *  If this flag is true, the builder will synchronize after timing each layer, and report the layer name. It can
     *  be useful when diagnosing issues at build time.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setDebugSync(@Cast("bool") boolean sync);

    /**
     *  \brief Query whether the builder will use debug synchronization.
     * 
     *  @see setDebugSync()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @Cast("bool") @Deprecated boolean getDebugSync();

    /**
     *  \brief Set the number of minimization iterations used when timing layers.
     * 
     *  When timing layers, the builder minimizes over a set of average times for layer execution. This parameter
     *  controls the number of iterations used in minimization.
     * 
     *  @see getMinFindIterations()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setMinTimingIterations instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setMinFindIterations(int minFind);

    /**
     *  \brief Query the number of minimization iterations.
     * 
     *  @see setMinFindIterations()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getMinTimingIterations instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @Deprecated int getMinFindIterations();

    /**
     *  \brief Set the number of averaging iterations used when timing layers.
     * 
     *  When timing layers, the builder minimizes over a set of average times for layer execution. This parameter
     *  controls the number of iterations used in averaging.
     * 
     *  @see getAverageFindIterations()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setAvgTimingIterations instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setAverageFindIterations(int avgFind);

    /**
     *  \brief Query the number of averaging iterations.
     * 
     *  @see setAverageFindIterations()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getAvgTimingIterations instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated int getAverageFindIterations();

    /**
     *  \brief Build a CUDA engine from a network definition.
     * 
     *  @see INetworkDefinition ICudaEngine
     * 
     *  @deprecated API will be removed in a future release, use IBuilder::buildEngineWithConfig instead.
     *  */
    
    
    //!
    //!
    public native @Deprecated ICudaEngine buildCudaEngine(
            @ByRef INetworkDefinition network);

    /**
     *  \brief Determine whether the platform has fast native fp16.
     *  */
    
    
    //!
    //!
    public native @Cast("bool") boolean platformHasFastFp16();

    /**
     *  \brief Determine whether the platform has fast native int8.
     *  */
    
    
    //!
    //!
    public native @Cast("bool") boolean platformHasFastInt8();

    /**
     *  \brief Destroy this object.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    public native void destroy();

    /**
     *  \brief Set whether or not quantized 8-bit kernels are permitted.
     * 
     *  During engine build int8 kernels will also be tried when this mode is enabled.
     * 
     *  @param mode Whether quantized 8-bit kernels are permitted.
     * 
     *  @see getInt8Mode()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setInt8Mode(@Cast("bool") boolean mode);

    /**
     *  \brief Query whether Int8 mode is used.
     * 
     *  @see setInt8Mode()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getFlag instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Cast("bool") @Deprecated boolean getInt8Mode();

    /**
     *  \brief Set Int8 Calibration interface.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setInt8Calibrator instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @Deprecated void setInt8Calibrator(IInt8Calibrator calibrator);

    /**
     *  \brief Set the device that this layer must execute on.
     *  @param DeviceType that this layer must execute on.
     *  If DeviceType is not set or is reset, TensorRT will use the default DeviceType set in the builder.
     * 
     *  \note The device type for a layer must be compatible with the safety flow (if specified).
     *  For example a layer cannot be marked for DLA execution while the builder is configured for kSAFE_GPU.
     * 
     *  @see getDeviceType()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setDeviceType instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Deprecated void setDeviceType(ILayer layer, DeviceType deviceType);
    public native @Deprecated void setDeviceType(ILayer layer, @Cast("nvinfer1::DeviceType") int deviceType);

    /**
     *  \brief Get the device that this layer executes on.
     *  @return Returns DeviceType of the layer.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getDeviceType instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Deprecated DeviceType getDeviceType(@Const ILayer layer);

    /**
     *  \brief whether the DeviceType has been explicitly set for this layer
     *  @return whether the DeviceType has been explicitly set
     *  @see setDeviceType() getDeviceType() resetDeviceType()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::isDeviceTypeSet instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Cast("bool") @Deprecated boolean isDeviceTypeSet(@Const ILayer layer);

    /**
     *  \brief reset the DeviceType for this layer
     * 
     *  @see setDeviceType() getDeviceType() isDeviceTypeSet()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::resetDeviceType instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Deprecated void resetDeviceType(ILayer layer);

    /**
     *  \brief Checks if a layer can run on DLA.
     *  @return status true if the layer can on DLA else returns false.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::canRunOnDLA instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Cast("bool") @Deprecated boolean canRunOnDLA(@Const ILayer layer);

    /**
     *  \brief Sets the default DeviceType to be used by the builder. It ensures that all the layers that can run on
     *  this device will run on it, unless setDeviceType is used to override the default DeviceType for a layer.
     *  @see getDefaultDeviceType()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setDefaultDeviceType instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Deprecated void setDefaultDeviceType(DeviceType deviceType);
    public native @Deprecated void setDefaultDeviceType(@Cast("nvinfer1::DeviceType") int deviceType);

    /**
     *  \brief Get the default DeviceType which was set by setDefaultDeviceType.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getDefaultDeviceType instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Deprecated DeviceType getDefaultDeviceType();

    /**
     *  \brief Get the maximum batch size DLA can support.
     *  For any tensor the total volume of index dimensions combined(dimensions other than CHW) with the requested
     *  batch size should not exceed the value returned by this function.
     * 
     *  \warning getMaxDLABatchSize does not work with dynamic shapes.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native int getMaxDLABatchSize();

    /**
     *  \brief Sets the builder to use GPU if a layer that was supposed to run on DLA can not run on DLA.
     *  @param Allows fallback if setFallBackMode is true else disables fallback option.
     * 
     *  \note GPU fallback may only be specified for non-safety modes. @see EngineCapability
     *  Simultaneously enabling GPU fallback and safety-restricted modes is disallowed.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setFlag instead.
     *  */
    
    
    //!
    //!
    public native @Deprecated void allowGPUFallback(@Cast("bool") boolean setFallBackMode);

    /**
     *  \brief Return the number of DLA engines available to this builder.
     *  */
    
    
    //!
    //!
    //!
    public native int getNbDLACores();

    /**
     *  \brief Set the DLA core that the engine must execute on.
     *  @param dlaCore The DLA core to execute the engine on (0 to N-1, where N is the maximum number of DLA cores
     *  present on the device). Default value is 0.
     *  DLA Core is not a property of the engine that is preserved by serialization: when the engine is deserialized
     *  it will be associated with the DLA core which is configured for the runtime.
     *  @see IRuntime::setDLACore() getDLACore()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setDLACore instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Deprecated void setDLACore(int dlaCore);

    /**
     *  \brief Get the DLA core that the engine executes on.
     *  @return If setDLACore is called, returns DLA core from 0 to N-1, else returns 0.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getDLACore instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Deprecated int getDLACore();

    /**
     *  \brief Resets the builder state
     * 
     *  @deprecated API will be removed in a future release, use IBuilder::reset() instead.
     *  */
    public native @Deprecated void reset(@ByRef INetworkDefinition network);
    /**
     *  \brief Set the GPU allocator.
     *  @param allocator Set the GPU allocator to be used by the builder. All GPU memory acquired will use this
     *  allocator. If NULL is passed, the default allocator will be used.
     * 
     *  Default: uses cudaMalloc/cudaFree.
     * 
     *  \note This allocator will be passed to any engines created via the builder; thus the lifetime of the allocator
     *  must span the lifetime of those engines as
     *  well as that of the builder. If nullptr is passed, the default allocator will be used.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    public native void setGpuAllocator(IGpuAllocator allocator);

    /**
     *  \brief Set whether or not 16-bit kernels are permitted.
     * 
     *  During engine build fp16 kernels will also be tried when this mode is enabled.
     * 
     *  @param mode Whether 16-bit kernels are permitted.
     * 
     *  @see getFp16Mode()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setFp16Mode(@Cast("bool") boolean mode);

    /**
     *  \brief Query whether 16-bit kernels are permitted.
     * 
     *  @see setFp16Mode()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    public native @Cast("bool") @Deprecated boolean getFp16Mode();

    /**
     *  \brief Set whether or not type constraints are strict.
     * 
     *  When strict type constraints are in use, TensorRT will always choose a layer implementation that conforms to the
     *  type constraints specified, if one exists. If this flag is not set, a higher-precision implementation may be
     *  chosen if it results in higher performance.
     * 
     *  If no conformant layer exists, TensorRT will choose a non-conformant layer if available regardless of the
     *  setting of this flag.
     * 
     *  See the developer guide for the definition of strictness.
     * 
     *  @param mode Whether type constraints are strict
     * 
     *  @see getStrictTypeConstraints()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setStrictTypeConstraints(@Cast("bool") boolean mode);

    /**
     *  \brief Query whether or not type constraints are strict.
     * 
     *  @see setStrictTypeConstraints()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getFlag instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Cast("bool") @Deprecated boolean getStrictTypeConstraints();

    /**
     *  Set whether engines will be refittable.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setFlag instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setRefittable(@Cast("bool") boolean canRefit);

    /**
     *  \brief Query whether or not engines will be refittable.
     * 
     *  @see getRefittable()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getFlag instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Cast("bool") @Deprecated boolean getRefittable();

    /**
     *  \brief Configure the builder to target specified EngineCapability flow.
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::setEngineCapability instead.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Deprecated void setEngineCapability(EngineCapability capability);
    public native @Deprecated void setEngineCapability(@Cast("nvinfer1::EngineCapability") int capability);

    /**
     *  \brief Query EngineCapability flow configured for the builder.
     * 
     *  @see setEngineCapability()
     * 
     *  @deprecated API will be removed in a future release, use IBuilderConfig::getEngineCapability instead.
     *  */
    
    
    //!
    //!
    //!
    public native @Deprecated EngineCapability getEngineCapability();

    /**
     *  \brief Create a builder configuration object.
     * 
     *  @see IBuilderConfig
     *  */
    
    
    //!
    //!
    //!
    public native IBuilderConfig createBuilderConfig();

    /**
     *  \brief Builds an engine for the given INetworkDefinition and given IBuilderConfig.
     * 
     *  It enables the builder to build multiple engines based on the same network definition, but with different
     *  builder configurations.
     *  */
    
    //!
    //!
    //!
    //!
    public native ICudaEngine buildEngineWithConfig(
            @ByRef INetworkDefinition network, @ByRef IBuilderConfig config);


    /** \brief Create a network definition object
     * 
     *  Creates a network definition object with immutable properties specified using the flags parameter. Providing
     *  the kDEFAULT flag as parameter mimics the behaviour of createNetwork(). CreateNetworkV2 supports dynamic shapes
     *  and explicit batch dimensions when used with NetworkDefinitionCreationFlag::kEXPLICIT_BATCH flag.
     * 
     *  @param flags Bitset of NetworkDefinitionCreationFlags specifying network properties combined with bitwise OR.
     *              e.g., 1U << NetworkDefinitionCreationFlag::kEXPLICIT_BATCH
     * 
     *  @see INetworkDefinition, NetworkDefinitionCreationFlags
     *  */
    
    //!
    //!
    //!
    public native INetworkDefinition createNetworkV2(@Cast("nvinfer1::NetworkDefinitionCreationFlags") int flags);


    /** \brief Create a new optimization profile.
     * 
     *  If the network has any dynamic input tensors, the appropriate calls to setDimensions() must be made.
     *  Likewise, if there are any shape input tensors, the appropriate calls to setShapeValues() are required.
     *  The builder retains ownership of the created optimization profile and returns a raw pointer, i.e. the users
     *  must not attempt to delete the returned pointer.
     * 
     *  @see IOptimizationProfile
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @NoException IOptimizationProfile createOptimizationProfile();

    /**
     *  \brief Set the ErrorRecorder for this interface
     * 
     *  Assigns the ErrorRecorder to this interface. The ErrorRecorder will track all errors during execution.
     *  This function will call incRefCount of the registered ErrorRecorder at least once. Setting
     *  recorder to nullptr unregisters the recorder with the interface, resulting in a call to decRefCount if
     *  a recorder has been registered.
     * 
     *  @param recorder The error recorder to register with this interface. */
    //
    /** @see getErrorRecorder
    /** */
    
    
    //!
    //!
    //!
    //!
    //!
    public native void setErrorRecorder(IErrorRecorder recorder);

    /**
     *  \brief get the ErrorRecorder assigned to this interface.
     * 
     *  Retrieves the assigned error recorder object for the given class. A default error recorder does not exist,
     *  so a nullptr will be returned if setErrorRecorder has not been called.
     * 
     *  @return A pointer to the IErrorRecorder object that has been registered.
     * 
     *  @see setErrorRecorder
     *  */
    
    
    //!
    //!
    public native IErrorRecorder getErrorRecorder();

    /**
     *  \brief Resets the builder state to default values.
     *  */
    
    
    //!
    //!
    public native void reset();

    /**
     *  \brief Determine whether the platform has TF32 support.
     *  */
    public native @Cast("bool") boolean platformHasTf32();
}
