// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;

/**
 *  \struct TimingCacheKey
 * 
 *  \brief The key to retrieve timing cache entries.
 * 
 *  TimingCacheKey has two types of representation: binary and string. The conversion rule from binary to string is:
 *  1) Convert each uint8_t element in binary key into two hexadecimal ascii chars, e.g. 0xab -> "ab"
 *  2) Concat the ascii chars of all elements in sequence. The result should have exact 32 chars
 *  3) Add prefix "0x" to the string produced in step 2.
 * 
 *  @see ITimingCache::query(), ITimingCache::update()
 *  */
@Namespace("nvinfer1::v_1_0") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class TimingCacheKey extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TimingCacheKey() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TimingCacheKey(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TimingCacheKey(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TimingCacheKey position(long position) {
        return (TimingCacheKey)super.position(position);
    }
    @Override public TimingCacheKey getPointer(long i) {
        return new TimingCacheKey((Pointer)this).offsetAddress(i);
    }

    public native @Cast("uint8_t") byte data(int i); public native TimingCacheKey data(int i, byte setter);
    @MemberGetter public native @Cast("uint8_t*") BytePointer data();
}
