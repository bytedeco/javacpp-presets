// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \file NvInferImpl.h
 * 
 *  This file contains definitions for API methods that cross the shared library boundary. These
 *  methods must not be called directly by applications; they should only be called through the
 *  API classes.
 *  */

@Namespace("nvinfer1::apiv") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class VRoot extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public VRoot() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public VRoot(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public VRoot(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public VRoot position(long position) {
        return (VRoot)super.position(position);
    }
    @Override public VRoot getPointer(long i) {
        return new VRoot((Pointer)this).offsetAddress(i);
    }

}
