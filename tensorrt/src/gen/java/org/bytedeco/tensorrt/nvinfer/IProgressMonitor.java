// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;
 // namespace impl
@Namespace("nvinfer1::v_1_0") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IProgressMonitor extends IVersionedInterface {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IProgressMonitor(Pointer p) { super(p); }


    /**
     *  \brief Return version information associated with this interface. Applications must not override this method.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    public native @ByVal @NoException(true) InterfaceInfo getInterfaceInfo();

    /**
     *  \brief Signal that a phase of the optimizer has started.
     * 
     *  @param phaseName The name of this phase for tracking purposes.
     *  @param parentPhase The parent phase that this phase belongs to, or nullptr if there is no parent.
     *  @param nbSteps The number of steps that are involved in this phase.
     * 
     *  The phaseStart function signals to the application that the current phase is beginning, and that it has a
     *  certain number of steps to perform. If \p phaseParent is nullptr, then the phaseStart is beginning an
     *  independent phase, and if \p phaseParent is specified, then the current phase, specified by \p phaseName, is
     *  within the scope of the parent phase. \p nbSteps will always be a positive number. The phaseStart function
     *  implies that the first step is being executed. TensorRT will signal when each step is complete.
     * 
     *  Phase names are human readable English strings which are unique within a single phase hierarchy but which can be
     *  reused once the previous instance has completed. Phase names and their hierarchies may change between versions
     *  of TensorRT.
     * 
     *  @see phaseFinish
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) void phaseStart(String phaseName, String parentPhase, int nbSteps);
    public native @NoException(true) void phaseStart(@Cast("const char*") BytePointer phaseName, @Cast("const char*") BytePointer parentPhase, int nbSteps);

    /**
     *  \brief Signal that a step of an optimizer phase has finished.
     * 
     *  @param phaseName The name of the innermost phase being executed.
     *  @param step The step number that was completed.
     * 
     *  The stepComplete function signals to the application that TensorRT has finished the current \p step for the
     *  phase \p phaseName, and will move onto the next step if there is one. The application can return false for
     *  TensorRT to exit the build early. The step value will increase on subsequent calls in the range [0, nbSteps).
     * 
     *  @return true to continue to the next step or false to stop the build.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @Cast("bool") @NoException(true) boolean stepComplete(String phaseName, int step);
    public native @Cast("bool") @NoException(true) boolean stepComplete(@Cast("const char*") BytePointer phaseName, int step);

    /**
     *  \brief Signal that a phase of the optimizer has finished.
     * 
     *  @param phaseName The name of the phase that has finished.
     * 
     *  The phaseFinish function signals to the application that the phase is complete. This function may be called
     *  before all steps in the range [0, nbSteps) have been reported to stepComplete. This scenario can be triggered by
     *  error handling, internal optimizations, or when stepComplete returns false to request cancellation of the build.
     * 
     *  @see phaseStart
     *  */
    public native @NoException(true) void phaseFinish(String phaseName);
    public native @NoException(true) void phaseFinish(@Cast("const char*") BytePointer phaseName);

}
