// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \struct Value
 * 
 *  \brief The values in the cache entry.
 * 
 *  @see ITimingCache::query(), ITimingCache::update()
 *  */
@Namespace("nvinfer1::v_1_0") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class TimingCacheValue extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TimingCacheValue() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TimingCacheValue(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TimingCacheValue(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TimingCacheValue position(long position) {
        return (TimingCacheValue)super.position(position);
    }
    @Override public TimingCacheValue getPointer(long i) {
        return new TimingCacheValue((Pointer)this).offsetAddress(i);
    }

    /** Hash of the selected tactic. */
    public native @Cast("uint64_t") long tacticHash(); public native TimingCacheValue tacticHash(long setter);
    /** Timing of this tactic in milliseconds. Negative numbers and NaN are invalid values. */
    public native float timingMSec(); public native TimingCacheValue timingMSec(float setter);
    /** UINT64_MAX represents the invalid tactic hash. */
    @MemberGetter public static native @Cast("const uint64_t") long kINVALID_TACTIC_HASH();
    public static final long kINVALID_TACTIC_HASH = kINVALID_TACTIC_HASH();
}
