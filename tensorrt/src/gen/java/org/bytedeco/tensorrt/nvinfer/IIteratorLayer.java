// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class IIteratorLayer
 * 
 *  \brief A layer to do iterations.
 * 
 *  The iterator layer iterates over a tensor along the given axis and in the given direction.
 *  It enables each loop iteration to inspect a different slice of the tensor.
 * 
 *  @see ILoop::addIterator()
 *  */
@Namespace("nvinfer1") @NoOffset @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IIteratorLayer extends ILoopBoundaryLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IIteratorLayer(Pointer p) { super(p); }

    /**
     *  \brief Set axis to iterate over.
     *  */
    
    
    //!
    //!
    public native @NoException(true) void setAxis(int axis);

    /**
     *  \brief Get axis being iterated over.
     *  */
    
    
    //!
    //!
    //!
    public native @NoException(true) int getAxis();

    /**
     *  \brief Set iteration order to be reverse.
     * 
     *  For reverse=false, the layer is equivalent to addGather(tensor, I, 0) where I is a
     *  scalar tensor containing the loop iteration number.
     *  For reverse=true, the layer is equivalent to addGather(tensor, M-1-I, 0) where M is the trip count
     *  computed from TripLimits of kind kCOUNT.
     *  The default is reverse=false.
     *  */
    
    
    //!
    //!
    //!
    public native @NoException(true) void setReverse(@Cast("bool") boolean reverse);

    /**
     *  \brief Check if the iteration order is reverse.
     * 
     *  @return True if and only if reversing input.
     *  */
    public native @Cast("bool") @NoException(true) boolean getReverse();
}
