// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class IFillLayer
 * 
 *  \brief Generate a tensor according to a specified mode.
 * 
 *  The fill layer generates a tensor with values that are drawn from a random distribution
 *  or an affine function of their indices, as specified by the FillMode.
 * 
 *  When an IFillLayer is initially added to a network, all of its parameters are static.
 *  Each parameter may be changed to dynamic by setting a corresponding input.
 *  A parameter is considered dynamic even if that input is the output of an IConstantLayer.
 *  The inputs for each parameter are:
 * 
 *  - 0: Dimensions
 *  - 1: Alpha
 *  - 2: Beta
 * 
 *  The parameter Dimensions describes the shape of the output. If the Dimensions input is provided,
 *  it must be a 1D tensor of type Int32 or Int64 whose length is computable by constant folding.
 * 
 *  The meanings of Alpha and Beta depend on the mode, as described in IFillLayer::setAlpha(),
 *  IFillLayer::setBeta(), and IFillLayer::setInput(). Parameters Alpha and Beta must both be static
 *  or both be dynamic.
 * 
 *  An IFillLayer can produce a shape tensor if the following restrictions are met:
 * 
 *  * The FillOperation is kLINSPACE.
 *  * The output has type Int32, Int64, or Float.
 *  * The volume of the output is within the volume limit imposed on shape tensors.
 *  * If input 0 exists, the values of input 0 must be computable by constant folding.
 * 
 *  @see FillOperation
 * 
 *  \warning Do not inherit from this class, as doing so will break forward-compatibility of the API and ABI.
 *  */
@Namespace("nvinfer1") @NoOffset @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IFillLayer extends ILayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IFillLayer(Pointer p) { super(p); }

    /**
     *  \brief Set the output tensor's dimensions.
     * 
     *  @param dimensions The output tensor's dimensions.
     * 
     *  If the first input had been used to create this layer, that input is reset to null by this method.
     * 
     *  @see getDimensions */
    //
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) void setDimensions(@Cast("const nvinfer1::Dims*") @ByRef Dims64 dimensions);

    /**
     *  \brief Get the output tensor's dimensions.
     * 
     *  @return The output tensor's dimensions, or an invalid Dims structure.
     * 
     *  If the first input is present and non-null,
     *  this function returns a Dims with nbDims = -1.
     * 
     *  @see setDimensions
     *  */
    
    
    //!
    //!
    //!
    public native @ByVal @Cast("nvinfer1::Dims*") @NoException(true) Dims64 getDimensions();

    /**
     *  \brief Set the fill operation for the layer.
     * 
     *  @see getOperation(), FillOperation
     *  */
    
    
    //!
    //!
    //!
    public native @NoException(true) void setOperation(FillOperation op);
    public native @NoException(true) void setOperation(@Cast("nvinfer1::FillOperation") int op);

    /**
     *  \brief Get the fill operation for the layer.
     * 
     *  @see setOperation(), FillOperation
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) FillOperation getOperation();

    /**
     *  \brief Set the alpha parameter.
     * 
     *  @param alpha has different meanings for each operator:
     * 
     *  Operation          | Usage
     *  kLINSPACE          | the start value, defaults to 0.0;
     *  kRANDOM_UNIFORM    | the minimum value, defaults to 0.0;
     *  kRANDOM_NORMAL     | the mean of the normal distribution, default is 0.0;
     * 
     *  If input 1 exists, it is reset to null by this method.
     * 
     *  @see getAlpha, setAlphaInt64 */
    //
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) void setAlpha(double alpha);

    /**
     *  \brief Get the value of alpha parameter.
     * 
     *  @return A double value of alpha.
     * 
     *  If the second input is present and non-null,
     *  this function returns -1.0.
     * 
     *  @see setAlpha
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) double getAlpha();

    /**
     *  \brief Set the beta parameter.
     * 
     *  @param beta has different meanings for each operator:
     * 
     *  Operation          | Usage
     *  kLINSPACE          | the delta value, defaults to 1.0;
     *  kRANDOM_UNIFORM    | the maximal value, defaults to 1.0;
     *  kRANDOM_NORMAL     | the standard deviation of the normal distribution, default is 1.0;
     * 
     *  If input 2 exists, it is reset to null by this method.
     * 
     *  @see getBeta
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) void setBeta(double beta);

    /**
     *  \brief Get the value of beta parameter.
     * 
     *  @return A double value of beta.
     * 
     *  If the third input is present and non-null,
     *  this function returns -1.0.
     * 
     *  @see setBeta, setBetaInt64
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) double getBeta();

    /**
     *  \brief Replace an input of this layer with a specific tensor.
     * 
     *  @param index the index of the input to set.
     *  @param tensor the new input tensor
     * 
     *  The three inputs correspond to these setters of IFillLayer:
     * 
     *  - 0: setDimensions
     *  - 1: setAlpha
     *  - 2: setBeta
     * 
     *  The following descriptions give more intuitive names for the inputs.
     * 
     *  Indices for kLINSPACE are:
     * 
     *  - 0: Shape, a 1D shape tensor, specifies the output tensor's dimensions.
     *  - 1: Start, a scalar, specifies the start value.
     *  - 2: Delta, a 1D tensor, specifies the delta value for each dimension.
     * 
     *  Indices for kRANDOM_UNIFORM are:
     * 
     *  - 0: Shape, a 1D shape tensor, specifies the output tensor's dimensions.
     *  - 1: Minimum, a scalar, specifies the minimum random value.
     *  - 2: Maximum, a scalar, specifies the maximal random value.
     * 
     *  Indices for kRANDOM_NORMAL are:
     * 
     *  - 0: Shape, a 1D shape tensor, specifies the output tensor's dimensions.
     *  - 1: Mean, a scalar, specifies the mean of the normal distribution,.
     *  - 2: Scale, a scalar, specifies the standard deviation of the normal distribution.
     * 
     *  Using the corresponding setter resets the input to null.
     * 
     *  If either inputs 1 or 2 is non-null, then both must be non-null and have the same data type.
     * 
     *  If this function is called for an index greater or equal to getNbInputs(),
     *  then afterwards getNbInputs() returns index + 1, and any missing intervening
     *  inputs are set to null.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!

    /**
     *  \brief Set the alpha parameter with int64 datatype.
     * 
     *  @param alpha has different meanings for each operator:
     * 
     *  Operation          | Usage
     *  kLINSPACE          | the start value, defaults to 0;
     *  kRANDOM_UNIFORM    | the minimum value, defaults to 0;
     *  kRANDOM_NORMAL     | the mean of the normal distribution, default is 0;
     * 
     *  If a third input had been used to create this layer, that input is reset to null by this method.
     * 
     *  @see getAlphaInt64 */
    //
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) void setAlphaInt64(@Cast("int64_t") long alpha);

    /**
     *  \brief Get the value of alpha parameter with int64 datatype.
     * 
     *  @return A int64 value of alpha.
     * 
     *  If the second input is present and non-null,
     *  this function returns -1.
     * 
     *  @see setAlphaInt64
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    public native @Cast("int64_t") @NoException(true) long getAlphaInt64();

    /**
     *  \brief Set the beta parameter with int64 datatype.
     * 
     *  @param beta has different meanings for each operator:
     * 
     *  Operation          | Usage
     *  kLINSPACE          | the delta value, defaults to 1;
     *  kRANDOM_UNIFORM    | the maximal value, defaults to 1;
     *  kRANDOM_NORMAL     | the standard deviation of the normal distribution, default is 1;
     * 
     *  If a third input had been used to create this layer, that input is reset to null by this method.
     * 
     *  @see getBetaInt64
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) void setBetaInt64(@Cast("int64_t") long beta);

    /**
     *  \brief Get the value of beta parameter with int64 datatype.
     * 
     *  @return A int64 value of beta.
     * 
     *  If the third input is present and non-null,
     *  this function returns -1.0.
     * 
     *  @see setBetaInt64
     *  */
    
    
    //!
    //!
    public native @Cast("int64_t") @NoException(true) long getBetaInt64();

    /**
     *  \brief Return true if alpha/beta have type int64, false if they have type double.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @Cast("bool") @NoException(true) boolean isAlphaBetaInt64();

    /**
     *  \brief Set the fill layer output type.
     * 
     *  @param toType The DataType of the output tensor.
     * 
     *  Set the output type of the fill layer. Valid values are DataType::kFLOAT, DataType::kINT32,
     *  and DataType::kINT64.
     *  If the network is strongly typed, setToType must be used to set the output type, and use of setOutputType
     *  is an error. Otherwise, types passed to setOutputType and setToType must be the same.
     * 
     *  @see NetworkDefinitionCreationFlag::kSTRONGLY_TYPED
     *  */
    
    
    //!
    //!
    //!
    public native @NoException(true) void setToType(DataType toType);
    public native @NoException(true) void setToType(@Cast("nvinfer1::DataType") int toType);

    /**
     *  \brief Get the fill layer output type.
     * 
     *  @return toType parameter set during layer creation or by setToType().
     *  The return value is the output type of the fill layer.
     *  The default value is DataType::kFLOAT.
     *  */
    public native @NoException(true) DataType getToType();
}
