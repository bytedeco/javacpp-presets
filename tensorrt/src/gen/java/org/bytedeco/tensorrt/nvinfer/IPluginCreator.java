// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


@Namespace("nvinfer1::v_1_0") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IPluginCreator extends IPluginCreatorInterface {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IPluginCreator(Pointer p) { super(p); }

    /**
     *  \brief Return the plugin name.
     * 
     *  \warning The string returned must be NULL-terminated and have a length of 1024 bytes or less including
     *  the NULL terminator.
     * 
     *  \u005Cusage
     *  - Allowed context for the API call
     *    - Thread-safe: Yes, this method is required to be thread-safe and may be called from multiple threads
     *                   when building networks on multiple devices sharing the same plugin or when deserializing
     *                   multiple engines concurrently sharing plugins.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @NoException(true) String getPluginName();

    /**
     *  \brief Return the plugin version.
     * 
     *  \warning The string returned must be NULL-terminated and have a length of 1024 bytes or less including
     *  the NULL terminator.
     * 
     *  \u005Cusage
     *  - Allowed context for the API call
     *    - Thread-safe: Yes, this method is required to be thread-safe and may be called from multiple threads
     *                   when building networks on multiple devices sharing the same plugin or when deserializing
     *                   multiple engines concurrently sharing plugins.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @NoException(true) String getPluginVersion();

    /**
     *  \brief Return a list of fields that need to be passed to createPlugin.
     * 
     *  @see PluginFieldCollection
     * 
     *  \u005Cusage
     *  - Allowed context for the API call
     *    - Thread-safe: Yes, this method is required to be thread-safe and may be called from multiple threads
     *                   when building networks on multiple devices sharing the same plugin or when deserializing
     *                   multiple engines concurrently sharing plugins.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Const @NoException(true) PluginFieldCollection getFieldNames();

    /**
     *  \brief Return a plugin object. Return nullptr in case of error.
     * 
     *  @param name A NULL-terminated name string of length 1024 or less, including the NULL terminator.
     *  @param fc A pointer to a collection of fields needed for constructing the plugin.
     * 
     *  \u005Cusage
     *  - Allowed context for the API call
     *    - Thread-safe: Yes, this method is required to be thread-safe and may be called from multiple threads
     *                   when building networks on multiple devices sharing the same plugin or when deserializing
     *                   multiple engines concurrently sharing plugins.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) IPluginV2 createPlugin(String name, @Const PluginFieldCollection fc);
    public native @NoException(true) IPluginV2 createPlugin(@Cast("const char*") BytePointer name, @Const PluginFieldCollection fc);

    /**
     *  \brief Called during deserialization of plugin layer. Return a plugin object.
     * 
     *  @param name A NULL-terminated name string of length 1024 or less, including the NULL terminator.
     *  @param serialData The start address of a byte array with the serialized plugin representation.
     *  @param serialLength The length in bytes of the byte array with the serialized plugin representation.
     * 
     *  @return A deserialized plugin object
     * 
     *  \u005Cusage
     *  - Allowed context for the API call
     *    - Thread-safe: Yes, this method is required to be thread-safe and may be called from multiple threads
     *                   when building networks on multiple devices sharing the same plugin or when deserializing
     *                   multiple engines concurrently sharing plugins.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @NoException(true) IPluginV2 deserializePlugin(String name, @Const Pointer serialData, @Cast("size_t") long serialLength);
    public native @NoException(true) IPluginV2 deserializePlugin(@Cast("const char*") BytePointer name, @Const Pointer serialData, @Cast("size_t") long serialLength);

    /**
     *  \brief Set the namespace of the plugin creator based on the plugin
     *  library it belongs to. This can be set while registering the plugin creator.
     * 
     *  @param pluginNamespace A NULL-terminated namespace string of length 1024 or less, including the NULL terminator
     * 
     *  @see IPluginRegistry::registerCreator()
     * 
     *  \u005Cusage
     *  - Allowed context for the API call
     *    - Thread-safe: Yes, this method is required to be thread-safe and may be called from multiple threads
     *                   when building networks on multiple devices sharing the same plugin or when deserializing
     *                   multiple engines concurrently sharing plugins.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @NoException(true) void setPluginNamespace(String pluginNamespace);
    public native @NoException(true) void setPluginNamespace(@Cast("const char*") BytePointer pluginNamespace);

    /**
     *  \brief Return the namespace of the plugin creator object.
     * 
     *  \warning The string returned must be NULL-terminated and have a length of 1024 bytes or less including the
     *  NULL terminator.
     * 
     *  \u005Cusage
     *  - Allowed context for the API call
     *    - Thread-safe: Yes, this method is required to be thread-safe and may be called from multiple threads
     *                   when building networks on multiple devices sharing the same plugin or when deserializing
     *                   multiple engines concurrently sharing plugins.
     *  */
    public native @NoException(true) String getPluginNamespace();
    /**
     *  \brief Return version information associated with this interface. Applications must not override this method.
     *  */
    public native @ByVal @NoException(true) InterfaceInfo getInterfaceInfo();
}
