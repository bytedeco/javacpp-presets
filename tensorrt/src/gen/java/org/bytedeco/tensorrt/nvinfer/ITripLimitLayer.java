// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class ITripLimitLayer
 * 
 *  \brief A layer that represents a trip-count limiter.
 * 
 *  The trip limit layer sets the execution condition for loops, using kCOUNT to define the number of iterations or
 *  kWHILE for a conditional loop. A loop can have one of each kind of limit, in which case the loop exits when
 *  the trip count is reached or the condition becomes false.
 * 
 *  See INetworkDefinition::addTripLimit().
 *  */
@Namespace("nvinfer1") @NoOffset @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class ITripLimitLayer extends ILoopBoundaryLayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ITripLimitLayer(Pointer p) { super(p); }

    /**
     *  \brief Get a trip limiter type.
     *  */
    public native @NoException(true) TripLimit getTripLimit();
}
