// Targeted by JavaCPP version 1.5.4-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class IAlgorithm
 *  \brief Describes a variation of execution of a layer.
 *         An algorithm is represented by IAlgorithmVariant and the IAlgorithmIOInfo for each of its inputs and outputs.
 *         An algorithm can be selected or reproduced using AlgorithmSelector::selectAlgorithms()."
 *  @see IAlgorithmIOInfo, IAlgorithmVariant, IAlgorithmSelector::selectAlgorithms()
 * 
 *  \warning Do not inherit from this class, as doing so will break forward-compatibility of the API and ABI.
 *  */
@Namespace("nvinfer1") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IAlgorithm extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IAlgorithm(Pointer p) { super(p); }

    /**
     *  \brief Returns the format of an Algorithm input or output. Algorithm inputs are incrementally numbered first,
     *         followed by algorithm outputs.
     *  @param index Index of the input or output of the algorithm. Incremental numbers assigned to indices of inputs
     *               and the outputs.
     *  */
    
    
    //!
    //!
    public native @Const @ByRef IAlgorithmIOInfo getAlgorithmIOInfo(int index);

    /**
     *  \brief Returns the algorithm variant.
     *  */
    
    
    //!
    //!
    public native @Const @ByRef IAlgorithmVariant getAlgorithmVariant();

    /**
     *  \brief The time in milliseconds to execute the algorithm.
     *  */
    
    
    //!
    //!
    public native float getTimingMSec();

    /**
     *  \brief The size of the GPU temporary memory in bytes which the algorithm uses at execution time.
     *  */
    public native @Cast("std::size_t") long getWorkspaceSize();
}
