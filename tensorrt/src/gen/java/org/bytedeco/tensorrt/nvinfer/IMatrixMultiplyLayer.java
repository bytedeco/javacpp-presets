// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class IMatrixMultiplyLayer
 * 
 *  \brief Layer that represents a Matrix Multiplication.
 * 
 *  Let A be getInput(0) and B be getInput(1).
 * 
 *  Tensors A and B must have equal rank, which must be at least 2.
 * 
 *  When A and B are matrices, computes op(A) * op(B), where:
 *      op(x)=x            if transpose == false
 *      op(x)=transpose(x) if transpose == true
 *  Transposition is of the last two dimensions.
 *  Inputs of higher rank are treated as collections of matrices.
 * 
 *  For a dimension that is not one of the last two dimensions:
 *  If the dimension is 1 for one of the tensors but not the other tensor,
 *  the former tensor is broadcast along that dimension to match the dimension of the latter tensor.
 *  */
@Namespace("nvinfer1") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IMatrixMultiplyLayer extends ILayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IMatrixMultiplyLayer(Pointer p) { super(p); }

    /**
     *  \brief Set the transpose flag for an input tensor.
     *  @param index Input tensor number (0 or 1).
     *  @param val New transpose flag.
     *  @see getTranspose()
     *  */
    
    
    //!
    //!
    public native void setTranspose(int index, @Cast("bool") boolean val);

    /**
     *  \brief Get the transpose flag for an input tensor.
     *  @param index Input tensor number (0 or 1).
     *  @see setTranspose()
     *  */
    public native @Cast("bool") boolean getTranspose(int index);
}
