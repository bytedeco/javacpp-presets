// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


@Namespace("nvinfer1") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IShuffleLayer extends ILayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IShuffleLayer(Pointer p) { super(p); }

    /**
     *  \brief Set the permutation applied by the first transpose operation.
     * 
     *  @param permutation The dimension permutation applied before the reshape.
     * 
     *  The default is the identity permutation.
     * 
     *  @see getFirstTranspose
     *  */
    
    
    //!
    //!
    //!
    //!
    public native void setFirstTranspose(@ByVal Permutation permutation);

    /**
     *  \brief Get the permutation applied by the first transpose operation.
     * 
     *  @return The dimension permutation applied before the reshape.
     * 
     *  @see setFirstTranspose
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    //!
    public native @ByVal Permutation getFirstTranspose();

    /**
     *  \brief Set the reshaped dimensions.
     * 
     *  @param dimensions The reshaped dimensions.
     * 
     *  Two special values can be used as dimensions.
     * 
     *  Value 0 copies the corresponding dimension from input. This special value
     *  can be used more than once in the dimensions. If number of reshape
     *  dimensions is less than input, 0s are resolved by aligning the most
     *  significant dimensions of input.
     * 
     *  Value -1 infers that particular dimension by looking at input and rest
     *  of the reshape dimensions. Note that only a maximum of one dimension is
     *  permitted to be specified as -1.
     * 
     *  The product of the new dimensions must be equal to the product of the old.
     *  */
    
    
    //!
    //!
    //!
    public native void setReshapeDimensions(@ByVal Dims dimensions);

    /**
     *  \brief Get the reshaped dimensions.
     * 
     *  @return The reshaped dimensions.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    public native @ByVal Dims getReshapeDimensions();

    /**
     *  \brief Set the permutation applied by the second transpose operation.
     * 
     *  @param permutation The dimension permutation applied after the reshape.
     * 
     *  The default is the identity permutation.
     * 
     *  The permutation is applied as outputDimensionIndex = permutation.order[inputDimensionIndex], so to
     *  permute from CHW order to HWC order, the required permutation is [1, 2, 0].
     * 
     *  @see getSecondTranspose
     *  */
    
    
    //!
    //!
    //!
    //!
    public native void setSecondTranspose(@ByVal Permutation permutation);

    /**
     *  \brief Get the permutation applied by the second transpose operation.
     * 
     *  @return The dimension permutation applied after the reshape.
     * 
     *  @see setSecondTranspose
     *  */
    public native @ByVal Permutation getSecondTranspose();
}
