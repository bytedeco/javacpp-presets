// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;

@Namespace("nvinfer1::v_1_0") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IStreamReaderV2 extends IVersionedInterface {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IStreamReaderV2(Pointer p) { super(p); }

    /**
     *  TensorRT never calls the destructor for an IStreamReaderV2 defined by the
     *  application.
     *  */

    /**
     *  \brief Return version information associated with this interface. Applications must not override this method.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @ByVal @NoException(true) InterfaceInfo getInterfaceInfo();

    /**
     *  \brief Read the next number of bytes in the stream asynchronously.
     * 
     *  @param destination The memory to write to, call cudaPointerGetAttributes to get the memory location
     *  @param nbBytes The number of bytes to read
     *  @param stream The CUDA stream used to do the copy
     * 
     *  @return The number of bytes read. Negative values indicate an unrecoverable error.
     *  A zero indicates that the end of the stream has been reached.
     *  */
    
    
    //!
    //!
    //!
    //!
    public native @Cast("int64_t") @NoException(true) long read(Pointer destination, @Cast("int64_t") long nbBytes, CUstream_st stream);

    /**
     *  \brief Sets the position of the stream to the given offset.
     * 
     *  @param offset The number of bytes to offset from where.
     *  @param where The position from where the offset is added. @see SeekPosition
     * 
     *  @return True if the position is updated successfully.
     *  */
    public native @Cast("bool") @NoException(true) boolean seek(@Cast("int64_t") long offset, SeekPosition where);
    public native @Cast("bool") @NoException(true) boolean seek(@Cast("int64_t") long offset, @Cast("nvinfer1::SeekPosition") int where);
}
