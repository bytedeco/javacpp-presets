// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.nvrtc.*;
import static org.bytedeco.cuda.global.nvrtc.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class IExprBuilder
 * 
 *  \brief Object for constructing IDimensionExpr.
 * 
 *  There is no public way to construct an IExprBuilder.  It appears as an argument to
 *  method IPluginV2DynamicExt::getOutputDimensions() and IPluginV3OneBuild::getOutputShapes().  Overrides of that
 *  method can use that IExprBuilder argument to construct expressions that define output dimensions in terms of input
 *  dimensions.
 * 
 *  Clients should assume that any values constructed by the IExprBuilder are destroyed
 *  after IPluginV2DynamicExt::getOutputDimensions() or IPluginV3OneBuild::getOutputShapes() returns.
 * 
 *  \warning Do not inherit from this class, as doing so will break forward-compatibility of the API and ABI.
 * 
 *  @see IDimensionExpr
 *  */
@Namespace("nvinfer1") @NoOffset @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IExprBuilder extends INoCopy {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IExprBuilder(Pointer p) { super(p); }

    /**
     *  \brief Return pointer to IDimensionExp for given value.
     *  */
    
    
    //!
    //!
    //!
    public native @Const @NoException(true) IDimensionExpr constant(@Cast("int64_t") long value);

    /**
     *  \brief Get the operation.
     * 
     *  Return pointer to IDimensionExp that represents the given operation applied to first and second.
     *  Returns nullptr if op is not a valid DimensionOperation.
     *  */
    public native @Const @NoException(true) IDimensionExpr operation(
            DimensionOperation op, @Const @ByRef IDimensionExpr first, @Const @ByRef IDimensionExpr second);
    public native @Const @NoException(true) IDimensionExpr operation(
            @Cast("nvinfer1::DimensionOperation") int op, @Const @ByRef IDimensionExpr first, @Const @ByRef IDimensionExpr second);
    /**
     *  \brief Declare a size tensor at the given output index, with the specified auto-tuning formula and upper bound.
     * 
     *  A size tensor allows a plugin to have output dimensions that cannot be computed solely from input dimensions.
     *  For example, suppose a plugin implements the equivalent of INonZeroLayer for 2D input. The plugin can
     *  have one output for the indices of non-zero elements, and a second output containing the number of non-zero
     *  elements. Suppose the input has size [M,N] and has K non-zero elements. The plugin can write K to the second
     *  output. When telling TensorRT that the first output has shape [2,K], plugin uses IExprBuilder::constant() and
     *  IExprBuilder::declareSizeTensor(1,...) to create the IDimensionExpr that respectively denote 2 and K.
     * 
     *  TensorRT also needs to know the value of K to use for auto-tuning and an upper bound on K so that it can
     *  allocate memory for the output tensor. In the example, supposed typically half of the plugin's input elements
     *  are non-zero, and all the elements might be nonzero. then using M*N/2 might be a good expression for the opt
     *  parameter, and M*N for the upper bound. IDimensionsExpr for these expressions can be constructed from
     *  IDimensionsExpr for the input dimensions.
     * 
     *  @param outputIndex index of a plugin output that is a size tensor.
     *  @param opt formula for computing auto-tuning value. Must not depend on a size tensor.
     *  @param upper Upper bound on the size tensor.
     * 
     *  @return IDimensionExpr denoting the value of the size tensor.
     * 
     *  @see IPluginV3OneBuild::getOutputShapes()
     *  */
    public native @Const IDimensionExpr declareSizeTensor(int outputIndex, @Const @ByRef IDimensionExpr opt, @Const @ByRef IDimensionExpr upper);
}
