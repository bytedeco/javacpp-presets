// Targeted by JavaCPP version 1.5.1: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/**
 *  \class IRefitter
 * 
 *  \brief Updates weights in an engine.
 * 
 *  \warning Do not inherit from this class, as doing so will break forward-compatibility of the API and ABI.
 *  */
@Namespace("nvinfer1") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IRefitter extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IRefitter(Pointer p) { super(p); }

    /**
     *  \brief Specify new weights for a layer of given name.
     *  Returns true on success, or false if new weights are rejected.
     *  Possible reasons for rejection are:
     * 
     *  * There is no such layer by that name.
     *  * The layer does not have weights with the specified role.
     *  * The number of weights is inconsistent with the layerâ€™s original specification.
     * 
     *  Modifying the weights before method refit() completes will result in undefined behavior. */
    
    
    //!
    //!
    //!
    public native @Cast("bool") boolean setWeights(String layerName,
                                WeightsRole role, @ByVal Weights weights);
    public native @Cast("bool") boolean setWeights(@Cast("const char*") BytePointer layerName,
                                @Cast("nvinfer1::WeightsRole") int role, @ByVal Weights weights);

    /**
     *  \brief Updates associated engine.  Return true if successful.
     * 
     *  Failure occurs if getMissing() != 0 before the call.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    //!
    public native @Cast("bool") boolean refitCudaEngine();

    /**
     *  \brief Get description of missing weights.
     * 
     *  For example, if some Weights have been set, but the engine was optimized
     *  in a way that combines weights, any unsupplied Weights in the combination
     *  are considered missing.
     * 
     *  @param size The number of items that can be safely written to a non-null layerNames or roles.
     *  @param layerNames Where to write the layer names.
     *  @param roles Where to write the weights roles.
     * 
     *  @return The number of missing Weights.
     * 
     *  If layerNames!=nullptr, each written pointer points to a string owned by
     *  the engine being refitted, and becomes invalid when the engine is destroyed.
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native int getMissing(int size, @Cast("const char**") PointerPointer layerNames, @Cast("nvinfer1::WeightsRole*") IntPointer roles);
    public native int getMissing(int size, @Cast("const char**") @ByPtrPtr BytePointer layerNames, @Cast("nvinfer1::WeightsRole*") IntPointer roles);
    public native int getMissing(int size, @Cast("const char**") @ByPtrPtr ByteBuffer layerNames, @Cast("nvinfer1::WeightsRole*") IntBuffer roles);
    public native int getMissing(int size, @Cast("const char**") @ByPtrPtr byte[] layerNames, @Cast("nvinfer1::WeightsRole*") int[] roles);

    /**
     *  \brief Get description of all weights that could be refit.
     * 
     *  @param size The number of items that can be safely written to a non-null layerNames or roles.
     *  @param layerNames Where to write the layer names.
     *  @param roles Where to write the weights roles.
     * 
     *  @return The number of Weights that could be refit.
     * 
     *  If layerNames!=nullptr, each written pointer points to a string owned by
     *  the engine being refitted, and becomes invalid when the engine is destroyed.
     *  */
    public native int getAll(int size, @Cast("const char**") PointerPointer layerNames, @Cast("nvinfer1::WeightsRole*") IntPointer roles);
    public native int getAll(int size, @Cast("const char**") @ByPtrPtr BytePointer layerNames, @Cast("nvinfer1::WeightsRole*") IntPointer roles);
    public native int getAll(int size, @Cast("const char**") @ByPtrPtr ByteBuffer layerNames, @Cast("nvinfer1::WeightsRole*") IntBuffer roles);
    public native int getAll(int size, @Cast("const char**") @ByPtrPtr byte[] layerNames, @Cast("nvinfer1::WeightsRole*") int[] roles);

    public native void destroy();
}
