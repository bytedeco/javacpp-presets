// Targeted by JavaCPP version 1.5-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorrt.nvinfer;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;

import static org.bytedeco.tensorrt.global.nvinfer.*;


/** \class IPoolingLayer
 * 
 *  \brief A Pooling layer in a network definition.
 * 
 *  The layer applies a reduction operation within a window over the input.
 * 
 *  The output size is determined from the input size using the formula set by INetworkDefinition::setCustomPoolingDimensions().
 *  */
@Namespace("nvinfer1") @Properties(inherit = org.bytedeco.tensorrt.presets.nvinfer.class)
public class IPoolingLayer extends ILayer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IPoolingLayer(Pointer p) { super(p); }

    /**
     *  \brief Set the type of activation to be performed.
     * 
     *  DLA only supports kMAX and kAVERAGE.
     * 
     *  @see getPoolingType(), PoolingType
     *  */
    
    
    //!
    //!
    //!
    public native void setPoolingType(PoolingType type);
    public native void setPoolingType(@Cast("nvinfer1::PoolingType") int type);

    /**
     *  \brief Get the type of activation to be performed.
     * 
     *  @see setPoolingType(), PoolingType
     *  */
    
    
    //!
    //!
    //!
    //!
    public native PoolingType getPoolingType();

    /**
     *  \brief Set the window size for pooling.
     * 
     *  If executing this layer on DLA, both height and width of window size must be in the range [1,8].
     * 
     *  @see getWindowSize()
     *  */
    
    
    //!
    //!
    //!
    public native void setWindowSize(@ByVal DimsHW windowSize);

    /**
     *  \brief Get the window size for pooling.
     * 
     *  @see setWindowSize()
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @ByVal DimsHW getWindowSize();

    /**
     *  \brief Set the stride for pooling.
     * 
     *  Default: 1
     * 
     *  If executing this layer on DLA, both height and width of stride must be in the range [1,16].
     * 
     *  @see getStride()
     *  */
    
    
    //!
    //!
    //!
    public native void setStride(@ByVal DimsHW stride);

    /**
     *  \brief Get the stride for pooling.
     * 
     *  @see setStride()
     *  */
    
    
    //!
    //!
    //!
    //!
    //!
    public native @ByVal DimsHW getStride();

    /**
     *  \brief Set the padding for pooling.
     * 
     *  Default: 0
     * 
     *  If executing this layer on DLA, both height and width of padding must be in the range [0,7].
     * 
     *  @see getStride()
     *  */
    
    
    //!
    //!
    //!
    //!
    public native void setPadding(@ByVal DimsHW padding);

    /**
     *  \brief Get the padding for pooling.
     * 
     *  Default: 0
     * 
     *  @see getStride()
     *  */
    
    
    //!
    //!
    //!
    public native @ByVal DimsHW getPadding();

    /**
     *  \brief Set the blending factor for the max_average_blend mode: max_average_blendPool = (1-blendFactor)*maxPool + blendFactor*avgPool
     *  blendFactor is a user value in [0,1] with the default value of 0.0
     *  This value only applies for the kMAX_AVERAGE_BLEND mode.
     * 
     *  @see getBlendFactor()
     *  */
    
    
    //!
    //!
    //!
    public native void setBlendFactor(float blendFactor);

    /**
     *  \brief Get the blending factor for the max_average_blend mode: max_average_blendPool = (1-blendFactor)*maxPool + blendFactor*avgPool
     *  blendFactor is a user value in [0,1] with the default value of 0.0
     *  In modes other than kMAX_AVERAGE_BLEND, blendFactor is ignored.
     * 
     *  @see setBlendFactor()
     *  */
    
    
    //!
    //!
    //!
    //!
    public native float getBlendFactor();

    /**
     *  \brief Set whether average pooling uses as a denominator the overlap area between the window and the unpadded input.
     *  If this is not set, the denominator is the overlap between the pooling window and the padded input.
     * 
     *  Default: true
     * 
     *  @see getAverageCountExcludesPadding()
     *  */
    
    
    //!
    //!
    //!
    public native void setAverageCountExcludesPadding(@Cast("bool") boolean exclusive);

    /**
     *  \brief Get whether exclusive pooling uses as a denominator the overlap area betwen the window and the unpadded input.
     * 
     *  @see setAverageCountExcludesPadding()
     *  */
    public native @Cast("bool") boolean getAverageCountExcludesPadding();
}
