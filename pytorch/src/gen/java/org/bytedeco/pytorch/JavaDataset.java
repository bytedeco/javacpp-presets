// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/**
 * Abstract class for stateless datasets to be subclassed by Java user code.
 */
 @Name("javacpp::Dataset<torch::Tensor,torch::Tensor>") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class JavaDataset extends JavaDatasetBase {
     static { Loader.load(); }
     /** Default native constructor. */
     public JavaDataset() { super((Pointer)null); allocate(); }
     /** Native array allocator. Access with {@link Pointer#position(long)}. */
     public JavaDataset(long size) { super((Pointer)null); allocateArray(size); }
     /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
     public JavaDataset(Pointer p) { super(p); }
     private native void allocate();
     private native void allocateArray(long size);
     @Override public JavaDataset position(long position) {
         return (JavaDataset)super.position(position);
     }
     @Override public JavaDataset getPointer(long i) {
         return new JavaDataset((Pointer)this).offsetAddress(i);
     }
 
   @Virtual(true) public native @ByVal Example get(@Cast("size_t") long index);
   @Virtual(true) public native @ByVal @Const({false, false, true}) SizeTOptional size();
   @Virtual public native @ByVal ExampleVector get_batch(@ByVal SizeTArrayRef indices);
}
