// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/** A RAII guard that enables Anomaly Detection Mode.
 * 
 *  Anomaly detection mode is useful for debugging problems happening
 *  in the backward, such as unexpectedly modified tensors or NaNs
 *  occuring in the backward.
 * 
 *  The enabling of anomaly mode is global - as soon as there is one
 *  such guard, it is enabled for all computation and threads. It also
 *  comes with a significant performance penalty.
 * 
 *  Example:
 *  <pre>{@code
 *  auto x = torch::tensor({1.}, torch::requires_grad());
 *  {
 *    torch::autograd::DetectAnomalyGuard detect_anomaly;
 *    auto x = torch::tensor({5.0}, torch::requires_grad());
 *    auto y = x * x;
 *    auto z = y * y;
 *    y += 1;
 *    z.backward();
 *  }
 *  }</pre> */
@Namespace("torch::autograd") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class DetectAnomalyGuard extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DetectAnomalyGuard(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public DetectAnomalyGuard(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public DetectAnomalyGuard position(long position) {
        return (DetectAnomalyGuard)super.position(position);
    }
    @Override public DetectAnomalyGuard getPointer(long i) {
        return new DetectAnomalyGuard((Pointer)this).offsetAddress(i);
    }

  public DetectAnomalyGuard() { super((Pointer)null); allocate(); }
  private native void allocate();
}
