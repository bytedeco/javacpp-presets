// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


// Convert `getCount` results to Nanoseconds since unix epoch.
@Namespace("c10") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class ApproximateClockToUnixTimeConverter extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ApproximateClockToUnixTimeConverter(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ApproximateClockToUnixTimeConverter(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ApproximateClockToUnixTimeConverter position(long position) {
        return (ApproximateClockToUnixTimeConverter)super.position(position);
    }
    @Override public ApproximateClockToUnixTimeConverter getPointer(long i) {
        return new ApproximateClockToUnixTimeConverter((Pointer)this).offsetAddress(i);
    }

  public ApproximateClockToUnixTimeConverter() { super((Pointer)null); allocate(); }
  private native void allocate();
  

  public static class UnixAndApproximateTimePair extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public UnixAndApproximateTimePair() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public UnixAndApproximateTimePair(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public UnixAndApproximateTimePair(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public UnixAndApproximateTimePair position(long position) {
          return (UnixAndApproximateTimePair)super.position(position);
      }
      @Override public UnixAndApproximateTimePair getPointer(long i) {
          return new UnixAndApproximateTimePair((Pointer)this).offsetAddress(i);
      }
  
    public native @Cast("c10::time_t") long t_(); public native UnixAndApproximateTimePair t_(long setter);
    public native @Cast("c10::approx_time_t") long approx_t_(); public native UnixAndApproximateTimePair approx_t_(long setter);
  }
  public static native @ByVal UnixAndApproximateTimePair measurePair();
}
