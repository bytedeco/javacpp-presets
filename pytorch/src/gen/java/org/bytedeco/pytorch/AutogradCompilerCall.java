// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::dynamo::autograd") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class AutogradCompilerCall extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AutogradCompilerCall(Pointer p) { super(p); }

  public AutogradCompilerCall(SizeInput.DynType default_dyn_type) { super((Pointer)null); allocate(default_dyn_type); }
  private native void allocate(SizeInput.DynType default_dyn_type);
  public AutogradCompilerCall(@Cast("torch::dynamo::autograd::SizeInput::DynType") byte default_dyn_type) { super((Pointer)null); allocate(default_dyn_type); }
  private native void allocate(@Cast("torch::dynamo::autograd::SizeInput::DynType") byte default_dyn_type);
  public native void add_size_input(@Const @ByRef SymInt s);

  public native @Cast("size_t") long emplace_hook(@ByRef(true) SafePyObject fn);

  public native void set_active_node_call_idx(@Cast("size_t") long node_call_idx);

  @MemberGetter public native @ByRef SizeTOptional active_node_call_idx();
  @MemberGetter public native @ByRef @NoOffset TensorArgs tensor_args();
  public native @StdVector @NoOffset SizeInput all_size_inputs(); public native AutogradCompilerCall all_size_inputs(SizeInput setter);
  @MemberGetter public native @ByRef LiftedIValueArgs lifted_ivalue_args();
  public native @ByRef @Cast("std::vector<int64_t>*") @NoOffset LongVector dyn_size_inputs(); public native AutogradCompilerCall dyn_size_inputs(LongVector setter);
  
  public native @ByRef @NoOffset NodeCalls node_calls(); public native AutogradCompilerCall node_calls(NodeCalls setter);
  public native @NoOffset SizeInput.DynType default_dyn_type(); public native AutogradCompilerCall default_dyn_type(SizeInput.DynType setter);
  // NodeCall id of each size, only when verbose logging is enabled
  public native @Cast("uint32_t*") @StdVector IntPointer size_input_origins(); public native AutogradCompilerCall size_input_origins(IntPointer setter);
}
