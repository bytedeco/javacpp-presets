// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// ============================================================================

/** Base class for all (dimension-specialized) lppool modules. */
@Name("torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class LPPool1dImplBase extends LPPool1dImplCloneable {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public LPPool1dImplBase(Pointer p) { super(p); }
    /** Downcast constructor. */
    public LPPool1dImplBase(Module pointer) { super((Pointer)null); allocate(pointer); }
    @Namespace private native @SharedPtr @Name("SHARED_PTR_NAMESPACE::dynamic_pointer_cast<torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>, torch::nn::Module>") void allocate(@SharedPtr Module pointer);

  public LPPool1dImplBase(double norm_type, @ByVal @Cast("torch::ExpandingArray<1>*") LongPointer kernel_size) { super((Pointer)null); allocate(norm_type, kernel_size); }
  private native void allocate(double norm_type, @ByVal @Cast("torch::ExpandingArray<1>*") LongPointer kernel_size);
  public LPPool1dImplBase(@Const @ByRef LPPool1dOptions options_) { super((Pointer)null); allocate(options_); }
  private native void allocate(@Const @ByRef LPPool1dOptions options_);

  public native void reset();

  /** Pretty prints the {@code LPPool{1,2}d} module into the given {@code stream}. */
  public native void pretty_print(@Cast("std::ostream*") @ByRef Pointer stream);

  public native @ByRef LPPool1dOptions options(); public native LPPool1dImplBase options(LPPool1dOptions setter);
}
