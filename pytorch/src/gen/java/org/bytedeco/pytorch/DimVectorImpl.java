// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/** This class consists of common code factored out of the SmallVector class to
 *  reduce code duplication based on the SmallVector 'N' template parameter.
 *  Warning: C10_IS_TRIVIALLY_COPYABLE may not always detect non-POD
 *  type correctly. For example, std::unique_ptr may be treated as POD and cause
 *  memory leaks. */
@Name("c10::SmallVectorImpl<int64_t>") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class DimVectorImpl extends SmallVectorBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DimVectorImpl(Pointer p) { super(p); }

  

  public native void clear();

  public native void resize(long N);

  public native void resize(long N, @Cast("const int64_t") long NV);

  public native void reserve(long N);

  public native @Cast("int64_t") long pop_back_val();

  public native void swap(@ByRef DimVectorImpl RHS);

  /** Add the specified range to the end of the SmallVector. */

  /** Add the specified range to the end of the SmallVector. */
  public native void append(long NumInputs, @Cast("const int64_t") long Elt);

  // FIXME: Consider assigning over existing elements, rather than clearing &
  // re-initializing them - for all assign(...) variants.

  public native void assign(long NumElts, @Cast("const int64_t") long Elt);

  public native @ByVal @Cast("c10::SmallVectorImpl<int64_t>::iterator*") LongPointer erase(@ByVal @Cast("c10::SmallVectorImpl<int64_t>::const_iterator*") LongPointer CIit);

  public native @ByVal @Cast("c10::SmallVectorImpl<int64_t>::iterator*") LongPointer erase(@ByVal @Cast("c10::SmallVectorImpl<int64_t>::const_iterator*") LongPointer CSit, @ByVal @Cast("c10::SmallVectorImpl<int64_t>::const_iterator*") LongPointer CEit);

  public native @ByVal @Cast("c10::SmallVectorImpl<int64_t>::iterator*") LongPointer insert(@ByVal @Cast("c10::SmallVectorImpl<int64_t>::iterator*") LongPointer Iit, @Cast("int64_t&&") long Elt);

  public native @ByVal @Cast("c10::SmallVectorImpl<int64_t>::iterator*") LongPointer insert(@ByVal @Cast("c10::SmallVectorImpl<int64_t>::iterator*") LongPointer Iit, long NumToInsert, @Cast("const int64_t") long Elt);

  public native @ByRef @Name("operator =") DimVectorImpl put(@Const @ByRef DimVectorImpl RHS);

  
  

  
  ///
  ///
  public native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef DimVectorImpl RHS);

  /** Set the array size to \p N, which the current array must have enough
   *  capacity for.
   * 
   *  This does not construct or destroy any elements in the vector.
   * 
   *  Clients can use this in conjunction with capacity() to write past the end
   *  of the buffer when they know that more elements are available, and only
   *  update the size later. This avoids the cost of value initializing elements
   *  which will only be overwritten. */
  public native void set_size(long N);
}
