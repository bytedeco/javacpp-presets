// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("c10") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class FunctionalityOffsetAndMask extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FunctionalityOffsetAndMask(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public FunctionalityOffsetAndMask(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public FunctionalityOffsetAndMask position(long position) {
        return (FunctionalityOffsetAndMask)super.position(position);
    }
    @Override public FunctionalityOffsetAndMask getPointer(long i) {
        return new FunctionalityOffsetAndMask((Pointer)this).offsetAddress(i);
    }

  // empty constructor shouldn't be used; only needed to initialize
  // the array before populating it.
  public FunctionalityOffsetAndMask() { super((Pointer)null); allocate(); }
  private native void allocate();
  public FunctionalityOffsetAndMask(@Cast("uint16_t") short offset, @Cast("uint16_t") short mask) { super((Pointer)null); allocate(offset, mask); }
  private native void allocate(@Cast("uint16_t") short offset, @Cast("uint16_t") short mask);
  // This needs to big enough to cover the size of the operator table.
  public native @Cast("uint16_t") short offset(); public native FunctionalityOffsetAndMask offset(short setter);
  // See Note [No More Than 16 Backends]
  // This mask needs to be big enough to mask all of the backend bits.
  // We probably don't ever want to have more than 16 backend bits, so uint16_t
  // should be enough.
  public native @Cast("uint16_t") short mask(); public native FunctionalityOffsetAndMask mask(short setter);
}
