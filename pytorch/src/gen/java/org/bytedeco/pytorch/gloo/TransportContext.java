// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.gloo;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.gloo.*;


// The context represents a set of pairs that belong to the same
// group. It is roughly equivalent to the top level context class
// with the exception that it captures transport specifics.
//
// While implementing the recv-from-any functionality we realized we
// realized we needed some transport-specific state shared between all
// pairs in a group, to arbitrate between multiple pairs attempting to
// send to the same buffer.
//
@Name("gloo::transport::Context") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.gloo.class)
public class TransportContext extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TransportContext(Pointer p) { super(p); }


  @MemberGetter public native int rank();
  @MemberGetter public native int size();

  public native @UniquePtr Pair getPair(int rank);

  public native @UniquePtr Pair createPair(int rank);

  public native void createAndConnectAllPairs(@ByRef IStore store);

  // Creates unbound buffer to be used with the ranks in this context.
  // It is not bound to a specific rank, but still bound to this
  // context. This is needed to support recv-from-any semantics, where
  // the context is used as shared arbiter between pairs that are
  // ready to send and buffers that are ready to receive.
  public native @UniquePtr UnboundBuffer createUnboundBuffer(
        Pointer ptr,
        @Cast("size_t") long size);

  public native void setTimeout(@ByVal Milliseconds timeout);

  public native @ByVal Milliseconds getTimeout();
}
