// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.gloo;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.gloo.*;


@Namespace("gloo") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.gloo.class)
public class float16 extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public float16(Pointer p) { super(p); }

  public native @Cast("uint16_t") short x(); public native float16 x(short setter);

  public float16() { super((Pointer)null); allocate(); }
  private native void allocate();

  public float16(@Const @ByRef float16 arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@Const @ByRef float16 arg0);

  public float16(int val) { super((Pointer)null); allocate(val); }
  private native void allocate(int val);

  public float16(@Cast("unsigned long") long val) { super((Pointer)null); allocate(val); }
  private native void allocate(@Cast("unsigned long") long val);

  public float16(double val) { super((Pointer)null); allocate(val); }
  private native void allocate(double val);

  public native @ByRef @Name("operator =") float16 put(int rhs);

  public native @ByRef @Name("operator =") float16 put(@Const @ByRef float16 rhs);

  public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef float16 rhs);

  public native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef float16 rhs);

  public native @Cast("bool") @Name("operator ==") boolean equals(int rhs);

  public native @Cast("bool") @Name("operator ==") boolean equals(@Cast("const unsigned long") long rhs);

  public native @Cast("bool") @Name("operator ==") boolean equals(double rhs);
// #ifdef __CUDA_ARCH__
// #endif // __CUDA_ARCH

  public native @ByRef @Name("operator +=") float16 addPut(@Const @ByRef float16 rhs);

  public native @ByRef @Name("operator -=") float16 subtractPut(@Const @ByRef float16 rhs);

  public native @ByRef @Name("operator *=") float16 multiplyPut(@Const @ByRef float16 rhs);

  public native @ByRef @Name("operator /=") float16 dividePut(@Const @ByRef float16 rhs);
}
