// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


/** Defines the Float4_e2m1fn_x2 type (4-bit floating-point, two elements packed
 *  into one byte). This is the FP4 dtype from the OCP MX format spec
 *  (https://www.opencompute.org/documents/ocp-microscaling-formats-mx-v1-0-spec-final-pdf,
 *  Section 5.3.3)
 * 
 *  Given two high precision values val0 and val1, here is the
 *  binary configuration of their packed representation, from MSB to LSB:
 * 
 *    original value             | val1 : val0
 *    ========================================
 *    bit index (MSB==7, LSB==0) | 7654 : 3210
 *    sign/exponent/mantissa     | seem : seem
 *  */

@Namespace("c10") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class Float4_e2m1fn_x2 extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Float4_e2m1fn_x2(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Float4_e2m1fn_x2(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Float4_e2m1fn_x2 position(long position) {
        return (Float4_e2m1fn_x2)super.position(position);
    }
    @Override public Float4_e2m1fn_x2 getPointer(long i) {
        return new Float4_e2m1fn_x2((Pointer)this).offsetAddress(i);
    }

  public native @Cast("uint8_t") byte val_(); public native Float4_e2m1fn_x2 val_(byte setter);
  public Float4_e2m1fn_x2() { super((Pointer)null); allocate(); }
  private native void allocate();
  public Float4_e2m1fn_x2(@Cast("uint8_t") byte val) { super((Pointer)null); allocate(val); }
  private native void allocate(@Cast("uint8_t") byte val);
}
