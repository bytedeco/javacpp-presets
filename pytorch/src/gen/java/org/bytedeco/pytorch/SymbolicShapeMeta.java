// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("c10") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SymbolicShapeMeta extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SymbolicShapeMeta(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SymbolicShapeMeta(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SymbolicShapeMeta position(long position) {
        return (SymbolicShapeMeta)super.position(position);
    }
    @Override public SymbolicShapeMeta getPointer(long i) {
        return new SymbolicShapeMeta((Pointer)this).offsetAddress(i);
    }

  // Basic metadata from which other quantities are derived
  public native @ByRef @NoOffset SymDimVector sizes_(); public native SymbolicShapeMeta sizes_(SymDimVector setter);
  public native @ByRef @NoOffset SymDimVector strides_(); public native SymbolicShapeMeta strides_(SymDimVector setter);
  public native @ByRef @NoOffset SymInt storage_offset_(); public native SymbolicShapeMeta storage_offset_(SymInt setter);

  public native @Cast("bool") boolean strides_valid_(); public native SymbolicShapeMeta strides_valid_(boolean setter); // e.g. for sparse where there are no strides

  public SymbolicShapeMeta() { super((Pointer)null); allocate(); }
  private native void allocate();
  public SymbolicShapeMeta(@Const @ByRef SymbolicShapeMeta other) { super((Pointer)null); allocate(other); }
  private native void allocate(@Const @ByRef SymbolicShapeMeta other);

  public native void refresh_numel();

  public native void refresh_contiguous();

  public native @Cast("int64_t") long dim();

  // Accessors for derived quantities, computed lazily on first access

  public native @Cast("bool") boolean has_numel();
  public native @Cast("bool") boolean has_is_contiguous();
  public native @Cast("bool") boolean has_is_channels_last_contiguous();
  public native @Cast("bool") boolean has_is_channels_last_3d_contiguous();
  public native @Cast("bool") boolean has_is_channels_last();
  public native @Cast("bool") boolean has_is_channels_last_3d();
  public native @Cast("bool") boolean has_is_non_overlapping_and_dense();

  // Accessors to cached derived properties
  // DO NOT call with mutables_ lock held
  public native @Const @ByRef SymInt numel();

  public native @Const @ByRef SymBool is_contiguous();

  public native @Const @ByRef SymBool is_channels_last_contiguous();

  public native @Const @ByRef SymBool is_channels_last_3d_contiguous();

  public native @Const @ByRef SymBool is_channels_last();

  public native @Const @ByRef SymBool is_channels_last_3d();

  public native @Const @ByRef SymBool is_non_overlapping_and_dense();

  // Assumptions so we can short-circuit computation
  // NOTE: Don't need to lock mutables_ since these aren't const
  public native void assume_contiguous(@ByVal(nullValue = "c10::SymBool(true)") SymBool val);
  public native void assume_contiguous();
  public native void assume_channels_last_contiguous(@ByVal(nullValue = "c10::SymBool(true)") SymBool val);
  public native void assume_channels_last_contiguous();
  public native void assume_channels_last_3d_contiguous(@ByVal(nullValue = "c10::SymBool(true)") SymBool val);
  public native void assume_channels_last_3d_contiguous();
  public native void assume_channels_last(@ByVal(nullValue = "c10::SymBool(true)") SymBool val);
  public native void assume_channels_last();
  public native void assume_channels_last_3d(@ByVal(nullValue = "c10::SymBool(true)") SymBool val);
  public native void assume_channels_last_3d();
  public native void assume_non_overlapping_and_dense(@ByVal(nullValue = "c10::SymBool(true)") SymBool val);
  public native void assume_non_overlapping_and_dense();
}
