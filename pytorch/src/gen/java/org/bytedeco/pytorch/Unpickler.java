// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// [unpickler refactor] there is some cruft around PickleOpCode::BUILD,
// PickleOpCode::NEWOBJ, and the last_opcode_ member below that should be
// deleted at some point, the Pickler doesn't produce it and it's only around to
// support models saved before 1.1
@Namespace("torch::jit") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class Unpickler extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Unpickler(Pointer p) { super(p); }

  // tensors inside the pickle are references to the tensor_table.
  // class_resolver is to resolve strong class type, type_resolver_ is
  // to resolve any JIT type. class_resolver and type_resolver are not merged
  // here because some use cases need to get strong class type that
  // type_resolver_ can not return.
  // NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)
  public Unpickler(
        @ByVal Reader reader,
        @ByVal @Cast("torch::jit::TypeResolver*") Pointer type_resolver,
        @ByVal TensorArrayRef tensor_table) { super((Pointer)null); allocate(reader, type_resolver, tensor_table); }
  private native void allocate(
        @ByVal Reader reader,
        @ByVal @Cast("torch::jit::TypeResolver*") Pointer type_resolver,
        @ByVal TensorArrayRef tensor_table);

  // tensors inside the pickle contain meta-data, the raw tensor
  // dead is retrieved by calling `read_record`.
  // NOLINTNEXTLINE(cppcoreguidelines-pro-type-member-init)
  public Unpickler(
        @ByVal Reader reader,
        @ByVal @Cast("torch::jit::TypeResolver*") Pointer type_resolver,
        @ByVal @Cast("torch::jit::ObjLoader*") Pointer obj_loader,
        @ByVal RecordReader read_record,
        @ByVal DeviceOptional device,
        @Cast("bool") boolean use_storage_device/*=false*/,
        @SharedPtr DeserializationStorageContext storage_context/*=nullptr*/) { super((Pointer)null); allocate(reader, type_resolver, obj_loader, read_record, device, use_storage_device, storage_context); }
  private native void allocate(
        @ByVal Reader reader,
        @ByVal @Cast("torch::jit::TypeResolver*") Pointer type_resolver,
        @ByVal @Cast("torch::jit::ObjLoader*") Pointer obj_loader,
        @ByVal RecordReader read_record,
        @ByVal DeviceOptional device,
        @Cast("bool") boolean use_storage_device/*=false*/,
        @SharedPtr DeserializationStorageContext storage_context/*=nullptr*/);
  public Unpickler(
        @ByVal Reader reader,
        @ByVal @Cast("torch::jit::TypeResolver*") Pointer type_resolver,
        @ByVal @Cast("torch::jit::ObjLoader*") Pointer obj_loader,
        @ByVal RecordReader read_record,
        @ByVal DeviceOptional device) { super((Pointer)null); allocate(reader, type_resolver, obj_loader, read_record, device); }
  private native void allocate(
        @ByVal Reader reader,
        @ByVal @Cast("torch::jit::TypeResolver*") Pointer type_resolver,
        @ByVal @Cast("torch::jit::ObjLoader*") Pointer obj_loader,
        @ByVal RecordReader read_record,
        @ByVal DeviceOptional device);

  // consume the pickle stream, producing an IValue from the contents.
  // Type Tags: the pickler will restore the type tags on
  // List and Dict objects when possible IValue is an Object.
  // Otherwise, Dict and List objects will end up with Any as their tag.
  // If you know the type of the ivalue, tags can be restored with
  // restoreAccurateTypeTags
  public native @ByVal IValue parse_ivalue();

  // [type tag serialization]
  // This is used to determine whether to restore type tags be recursively
  // descending into the returned stack object (if version_number <= 2), or
  // if version_number >= 3, to use the type strings included in the pickle
  // archive for container types. By default this is set to
  // `kProducedFileFormatVersion` so unless you're loading a pickle file
  // from alongside a corresponding `version` file, you don't need to set
  // the version manually.
  public native void set_version(@Cast("uint64_t") long version_number);
}
