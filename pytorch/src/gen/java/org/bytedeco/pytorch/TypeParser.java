// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/** {@code reader} is a function that takes in a size to read from some pickled
 *  binary. {@code reader} should remember where it last read, and return
 *  the number of bytes read.
 *  See {@code torch::pickle} for details.
 *  type_resolver is used to resolve any JIT type based on type str */
@Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class TypeParser extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    TypeParser(Pointer p) { super(p); }
    protected TypeParser() { allocate(); }
    private native void allocate();
    public native @ByVal Type.TypePtr call(@StdString BytePointer arg0);
}
