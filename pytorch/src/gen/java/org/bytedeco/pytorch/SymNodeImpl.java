// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// When you add a method, you also need to edit
// torch/csrc/jit/python/init.cpp
// torch/csrc/utils/python_symnode.h
// c10/core/ConstantSymNodeImpl.h
@Namespace("c10") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SymNodeImpl extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SymNodeImpl() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SymNodeImpl(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SymNodeImpl(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SymNodeImpl position(long position) {
        return (SymNodeImpl)super.position(position);
    }
    @Override public SymNodeImpl getPointer(long i) {
        return new SymNodeImpl((Pointer)this).offsetAddress(i);
    }


  // these could be pure virtual when we implement LTC versions
  public native @Cast("bool") boolean is_int();
  public native @Cast("bool") boolean is_bool();
  public native @Cast("bool") boolean is_float();
  public native @ByVal SymNode add(@Const @ByRef SymNode other);
  public native @ByVal SymNode sub(@Const @ByRef SymNode other);
  public native @ByVal SymNode mul(@Const @ByRef SymNode other);
  public native @ByVal SymNode truediv(@Const @ByRef SymNode other);
  public native @ByVal SymNode pow(@Const @ByRef SymNode other);
  public native @ByVal SymNode floordiv(@Const @ByRef SymNode other);
  public native @ByVal SymNode mod(@Const @ByRef SymNode other);
  public native @ByVal SymNode eq(@Const @ByRef SymNode other);
  public native @ByVal SymNode ne(@Const @ByRef SymNode other);
  public native @ByVal SymNode gt(@Const @ByRef SymNode other);
  public native @ByVal SymNode lt(@Const @ByRef SymNode other);
  public native @ByVal SymNode le(@Const @ByRef SymNode other);
  public native @ByVal SymNode ge(@Const @ByRef SymNode other);
  public native @ByVal SymNode ceil();
  public native @ByVal SymNode floor();
  public native @ByVal SymNode neg();
  public native @ByVal SymNode sym_min(@Const @ByRef SymNode other);
  public native @ByVal SymNode sym_max(@Const @ByRef SymNode other);
  public native @ByVal SymNode sym_or(@Const @ByRef SymNode other);
  public native @ByVal SymNode sym_and(@Const @ByRef SymNode other);
  public native @ByVal SymNode sym_not();
  // NB: self is ignored here, only the arguments are used
  public native @ByVal SymNode is_contiguous(
        @ByVal SymNodeArrayRef sizes,
        @ByVal SymNodeArrayRef strides);
  public native @ByVal SymNode is_channels_last_contiguous_2d(
        @ByVal SymNodeArrayRef sizes,
        @ByVal SymNodeArrayRef strides);
  public native @ByVal SymNode is_channels_last_contiguous_3d(
        @ByVal SymNodeArrayRef sizes,
        @ByVal SymNodeArrayRef strides);
  public native @ByVal SymNode is_channels_last_strides_2d(
        @ByVal SymNodeArrayRef sizes,
        @ByVal SymNodeArrayRef strides);
  public native @ByVal SymNode is_channels_last_strides_3d(
        @ByVal SymNodeArrayRef sizes,
        @ByVal SymNodeArrayRef strides);
  public native @ByVal SymNode is_non_overlapping_and_dense(
        @ByVal SymNodeArrayRef sizes,
        @ByVal SymNodeArrayRef strides);
  public native @ByVal SymNode clone();
  public native @ByVal SymNode sym_float();
  public native @ByVal SymNode wrap_int(@Cast("int64_t") long num);
  public native @ByVal SymNode wrap_float(double num);
  public native @ByVal SymNode wrap_bool(@Cast("bool") boolean num);
  public native @Cast("int64_t") long guard_int(@Cast("const char*") BytePointer file, @Cast("int64_t") long line);
  public native @Cast("int64_t") long guard_int(String file, @Cast("int64_t") long line);
  public native @Cast("bool") boolean guard_bool(@Cast("const char*") BytePointer file, @Cast("int64_t") long line);
  public native @Cast("bool") boolean guard_bool(String file, @Cast("int64_t") long line);
  public native double guard_float(@Cast("const char*") BytePointer file, @Cast("int64_t") long line);
  public native double guard_float(String file, @Cast("int64_t") long line);
  public native @Cast("bool") boolean expect_true(@Cast("const char*") BytePointer file, @Cast("int64_t") long line);
  public native @Cast("bool") boolean expect_true(String file, @Cast("int64_t") long line);
  public native @Cast("int64_t") long int_();
  public native @Cast("bool") boolean bool_();
  public native @Cast("bool") boolean has_hint();
  public native @StdString BytePointer str();
  public native @ByVal LongOptional singleton_int();
  public native @ByVal LongOptional constant_int();
  public native @ByVal BoolOptional constant_bool();
  public native @ByVal LongOptional maybe_as_int();
  public native @Cast("std::ostream*") @ByRef @Name("operator <<") Pointer shiftLeft(@Cast("std::ostream*") @ByRef Pointer os);
}
