// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/** A dataloader for stateful datasets.
 * 
 *  A dataloader for stateful datatasets differs from one for stateless
 *  datasets one in that the dataset is shared among worker threads, and that
 *  this dataset is itself responsible for producing batches rather than
 *  depending on a sampler. The statefulness here actually refers to the
 *  dataset. The StatefulDataLoader simply alters the data loading algorithm to
 *  accommodate the stateful, shared nature of the dataset. Note that the
 *  dataset must be thread safe if more than one worker thread is used.
 * 
 *  A stateful dataloader is created by calling {@code make_data_loader} with a
 *  stateful dataset. */
@Name("torch::data::StatefulDataLoader<torch::data::datasets::MapDataset<torch::data::datasets::SharedBatchDataset<torch::data::datasets::ChunkDataset<JavaCPP_torch_0003a_0003adata_0003a_0003adatasets_0003a_0003aChunkDataReader_0003ctorch_0003a_0003adata_0003a_0003aExample_0003ctorch_0003a_0003aTensor_0002ctorch_0003a_0003aTensor_0003e_0002cstd_0003a_0003avector_0003ctorch_0003a_0003adata_0003a_0003aExample_0003ctorch_0003a_0003aTensor_0002ctorch_0003a_0003aTensor_0003e_00020_0003e_00020_0003e,torch::data::samplers::RandomSampler,torch::data::samplers::RandomSampler> >,torch::data::transforms::Stack<torch::data::Example<torch::Tensor,torch::Tensor> > > >") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class ChunkRandomDataLoader extends ChunkRandomDataLoaderBase {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ChunkRandomDataLoader(Pointer p) { super(p); }


  /** Constructs the {@code StatefulDataLoader} from a {@code dataset} and some {@code options}. */
  public ChunkRandomDataLoader(@ByVal ChunkMapDataset dataset, @ByVal DataLoaderOptions options) { super((Pointer)null); allocate(dataset, options); }
  private native void allocate(@ByVal ChunkMapDataset dataset, @ByVal DataLoaderOptions options);
}
