// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.cuda;

import org.bytedeco.pytorch.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.cusparse.*;
import static org.bytedeco.cuda.global.cusparse.*;
import org.bytedeco.cuda.cusolver.*;
import static org.bytedeco.cuda.global.cusolver.*;
import org.bytedeco.cuda.cupti.*;
import static org.bytedeco.cuda.global.cupti.*;

import static org.bytedeco.pytorch.global.torch_cuda.*;


@Namespace("c10") @Properties(inherit = org.bytedeco.pytorch.presets.torch_cuda.class)
public class DeviceAllocator extends Allocator {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DeviceAllocator(Pointer p) { super(p); }


  // Returns true if the allocator has been properly initialized and is ready
  // for use
  public native @Cast("bool") boolean initialized();

  // Releases all cached device memory from the specified memory pool back to
  // the system
  public native void emptyCache(@ByVal(nullValue = "c10::MempoolId_t({0, 0})") @Cast("c10::MempoolId_t*") DeviceAssertionsDataVectorCUDAKernelLaunchInfoVectorPair mempool_id);
  public native void emptyCache();

  // Associates a memory allocation with a stream to establish dependency
  // tracking. Prevents memory reuse until all operations on the specified
  // stream complete
  public native void recordStream(@StdMove DataPtr ptr, @ByVal Stream stream);

  // Retrieves comprehensive memory statistics for the specified device,
  // including allocation patterns, usage metrics
  public native @ByVal org.bytedeco.pytorch.cuda.DeviceStats getDeviceStats(
        byte device);

  // Resets cumulative allocation statistics for the specified device to zero
  public native void resetAccumulatedStats(byte device);

  // Resets peak memory usage statistics for the specified device
  public native void resetPeakStats(byte device);
}
