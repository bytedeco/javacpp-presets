// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.cuda;

import org.bytedeco.pytorch.*;
import org.bytedeco.pytorch.Error;
import org.bytedeco.pytorch.global.torch.DeviceType;
import org.bytedeco.pytorch.global.torch.ScalarType;
import org.bytedeco.pytorch.global.torch.MemoryFormat;
import org.bytedeco.pytorch.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.torch_cuda.*;


/** A variant of OptionalStreamGuard that is specialized for CUDA.  See
 *  CUDAGuard for when you can use this. */
@Namespace("c10::cuda") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch_cuda.class)
public class OptionalCUDAStreamGuard extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OptionalCUDAStreamGuard(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OptionalCUDAStreamGuard(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OptionalCUDAStreamGuard position(long position) {
        return (OptionalCUDAStreamGuard)super.position(position);
    }
    @Override public OptionalCUDAStreamGuard getPointer(long i) {
        return new OptionalCUDAStreamGuard((Pointer)this).offsetAddress(i);
    }

  /** Create an uninitialized guard. */
  public OptionalCUDAStreamGuard() { super((Pointer)null); allocate(); }
  private native void allocate();

  /** Set the current CUDA device to the device associated with the passed
   *  stream, and set the current CUDA stream on that device to the passed
   *  stream. Errors if the Stream is not a CUDA stream. */
  public OptionalCUDAStreamGuard(@ByVal Stream stream) { super((Pointer)null); allocate(stream); }
  private native void allocate(@ByVal Stream stream);

  /** Set the current device to the device associated with the passed stream,
   *  and set the current stream on that device to the passed stream,
   *  if the passed stream is not nullopt. */
  public OptionalCUDAStreamGuard(@ByVal StreamOptional stream_opt) { super((Pointer)null); allocate(stream_opt); }
  private native void allocate(@ByVal StreamOptional stream_opt);

  /** Copy is disallowed */
  
  

  // See Note [Move construction for RAII guards is tricky]
  

  // See Note [Move assignment for RAII guards is tricky]
  

  /** Resets the currently set CUDA stream to the original stream and
   *  the currently set device to the original device.  Then,
   *  set the current device to the device associated with the passed stream,
   *  and set the current stream on that device to the passed stream.
   *  Initializes the guard if it was not previously initialized. */
  public native void reset_stream(@ByVal Stream stream);

  /** Returns the CUDA stream that was set at the time the guard was most
   *  recently initialized, or nullopt if the guard is uninitialized. */
  public native @ByVal CUDAStreamOptional original_stream();

  /** Returns the most recent CUDA stream that was set using this stream guard,
   *  either from construction, or via reset_stream, if the guard is
   *  initialized, or nullopt if the guard is uninitialized. */
  public native @ByVal CUDAStreamOptional current_stream();

  /** Restore the original CUDA device and stream, resetting this guard to
   *  uninitialized state. */
  public native void reset();
}
