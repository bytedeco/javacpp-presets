// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.cuda;

import org.bytedeco.pytorch.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;
import org.bytedeco.cuda.cudart.*;
import static org.bytedeco.cuda.global.cudart.*;
import org.bytedeco.cuda.cublas.*;
import static org.bytedeco.cuda.global.cublas.*;
import org.bytedeco.cuda.cudnn.*;
import static org.bytedeco.cuda.global.cudnn.*;
import org.bytedeco.cuda.cusparse.*;
import static org.bytedeco.cuda.global.cusparse.*;
import org.bytedeco.cuda.cusolver.*;
import static org.bytedeco.cuda.global.cusolver.*;
import org.bytedeco.cuda.cupti.*;
import static org.bytedeco.cuda.global.cupti.*;

import static org.bytedeco.pytorch.global.torch_cuda.*;


@Namespace("c10::CachingDeviceAllocator") @Properties(inherit = org.bytedeco.pytorch.presets.torch_cuda.class)
public class Stat extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public Stat() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Stat(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Stat(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public Stat position(long position) {
        return (Stat)super.position(position);
    }
    @Override public Stat getPointer(long i) {
        return new Stat((Pointer)this).offsetAddress(i);
    }

  public native void increase(@Cast("size_t") long amount);

  public native void decrease(@Cast("size_t") long amount);

  public native void reset_accumulated();

  public native void reset_peak();

  public native @Cast("int64_t") long current(); public native Stat current(long setter);
  public native @Cast("int64_t") long peak(); public native Stat peak(long setter);
  public native @Cast("int64_t") long allocated(); public native Stat allocated(long setter);
  public native @Cast("int64_t") long freed(); public native Stat freed(long setter);
}
