// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.cuda;

import org.bytedeco.pytorch.*;
import org.bytedeco.pytorch.Error;
import org.bytedeco.pytorch.global.torch.DeviceType;
import org.bytedeco.pytorch.global.torch.ScalarType;
import org.bytedeco.pytorch.global.torch.MemoryFormat;
import org.bytedeco.pytorch.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.torch_cuda.*;

@NoOffset @Name("c10::optional<c10::cuda::CUDAStream>") @Properties(inherit = org.bytedeco.pytorch.presets.torch_cuda.class)
public class CUDAStreamOptional extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUDAStreamOptional(Pointer p) { super(p); }
    public CUDAStreamOptional(CUDAStream value) { this(); put(value); }
    public CUDAStreamOptional()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef CUDAStreamOptional put(@ByRef CUDAStreamOptional x);

    public native boolean has_value();
    public native void reset();
    public native @Name("value") @ByRef CUDAStream get();
    @ValueSetter public native CUDAStreamOptional put(@ByRef CUDAStream value);
}

