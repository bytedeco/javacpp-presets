// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.cuda;

import org.bytedeco.pytorch.*;
import org.bytedeco.pytorch.cuda.functions.*;
import org.bytedeco.pytorch.Error;
import org.bytedeco.pytorch.global.torch.DeviceType;
import org.bytedeco.pytorch.global.torch.ScalarType;
import org.bytedeco.pytorch.global.torch.MemoryFormat;
import org.bytedeco.pytorch.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.torch_cuda.*;


// A generic class for wrapping cuDNN descriptor types.  All you need
// is to give the underlying type the Descriptor_t points to (usually,
// if it's cudnnTensorDescriptor_t it points to cudnnTensorStruct),
// the constructor and the destructor.  Subclasses are responsible
// for defining a set() function to actually set the descriptor.
//
// Descriptors default construct to a nullptr, and have a descriptor
// initialized the first time you call set() or any other initializing
// function.

@Namespace("at::native") @Properties(inherit = org.bytedeco.pytorch.presets.torch_cuda.class)
public class RNNDataDescriptor extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RNNDataDescriptor() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RNNDataDescriptor(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RNNDataDescriptor(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RNNDataDescriptor position(long position) {
        return (RNNDataDescriptor)super.position(position);
    }
    @Override public RNNDataDescriptor getPointer(long i) {
        return new RNNDataDescriptor((Pointer)this).offsetAddress(i);
    }

  public native void set(@Const @ByRef Tensor t, @Cast("cudnnRNNDataLayout_t") int layout, int maxSeqLength, int batchSize, int vectorSize, @Const IntPointer seqLengthArray);
  public native void set(@Const @ByRef Tensor t, @Cast("cudnnRNNDataLayout_t") int layout, int maxSeqLength, int batchSize, int vectorSize, @Const IntBuffer seqLengthArray);
  public native void set(@Const @ByRef Tensor t, @Cast("cudnnRNNDataLayout_t") int layout, int maxSeqLength, int batchSize, int vectorSize, @Const int[] seqLengthArray);
}
