// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/**
 * Records type, shape, and device of tensor and, where applicable,
 * the stream the correspondingoperation took place on.
 *
 * If is_valid() is false, then the corresponding input is not used and may be
 * an undefined tensor.
 */
@Namespace("torch::autograd") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class InputMetadata extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InputMetadata(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public InputMetadata(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public InputMetadata position(long position) {
        return (InputMetadata)super.position(position);
    }
    @Override public InputMetadata getPointer(long i) {
        return new InputMetadata((Pointer)this).offsetAddress(i);
    }

  public InputMetadata() { super((Pointer)null); allocate(); }
  private native void allocate();

  public InputMetadata(@Const @ByVal TensorOptions options, @ByVal @Cast("c10::ArrayRef<int64_t>*") LongArrayRef shape, @ByVal Device device) { super((Pointer)null); allocate(options, shape, device); }
  private native void allocate(@Const @ByVal TensorOptions options, @ByVal @Cast("c10::ArrayRef<int64_t>*") LongArrayRef shape, @ByVal Device device);
  public InputMetadata(@Const @ByVal TensorOptions options, @ByVal @Cast({"int64_t*", "c10::ArrayRef<int64_t>", "std::vector<int64_t>&"}) @StdVector long[] shape, @ByVal Device device) { super((Pointer)null); allocate(options, shape, device); }
  private native void allocate(@Const @ByVal TensorOptions options, @ByVal @Cast({"int64_t*", "c10::ArrayRef<int64_t>", "std::vector<int64_t>&"}) @StdVector long[] shape, @ByVal Device device);

  public InputMetadata(@Const @ByRef Tensor t) { super((Pointer)null); allocate(t); }
  private native void allocate(@Const @ByRef Tensor t);

  public native @Const @ByVal TensorOptions options();

  public native @ByVal @Cast("c10::ArrayRef<int64_t>*") LongArrayRef shape();

  public native @ByVal Device device();

  public native @ByVal Stream stream();

  public native @ByVal Tensor zeros_like();
}
