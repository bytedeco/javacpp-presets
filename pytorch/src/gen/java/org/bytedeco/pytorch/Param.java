// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::jit") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class Param extends TreeView {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Param(Pointer p) { super(p); }

  public Param(@Const @ByRef TreeRef tree) { super((Pointer)null); allocate(tree); }
  private native void allocate(@Const @ByRef TreeRef tree);
  public static native @ByVal Param create(
        @Const @ByRef SourceRange range,
        @Const @ByRef Ident ident,
        @Const @ByRef ExprMaybe type,
        @Const @ByRef ExprMaybe def,
        @Cast("bool") boolean kwarg_only);
  public native @ByVal Ident ident();
  public native @ByVal ExprMaybe type();
  public native @ByVal ExprMaybe defaultValue();
  public native @Cast("bool") boolean kwarg_only();
  public native @ByVal Param withType(@Const @ByRef ExprMaybe typ);
}
