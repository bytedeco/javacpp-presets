// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;

@NoOffset @Name("std::pair<at::RecordFunctionHandle,int>") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class RecordFunctionHandleIntPair extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RecordFunctionHandleIntPair(Pointer p) { super(p); }
    public RecordFunctionHandleIntPair(long firstValue, int secondValue) { this(); put(firstValue, secondValue); }
    public RecordFunctionHandleIntPair()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef RecordFunctionHandleIntPair put(@ByRef RecordFunctionHandleIntPair x);


    @MemberGetter public native long first(); public native RecordFunctionHandleIntPair first(long first);
    @MemberGetter public native int second();  public native RecordFunctionHandleIntPair second(int second);

    public RecordFunctionHandleIntPair put(long firstValue, int secondValue) {
        first(firstValue);
        second(secondValue);
        return this;
    }
}

