// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::dynamo::autograd") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SizeInput extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SizeInput(Pointer p) { super(p); }

  // Note: int value is still needed when dynamic to pass as an arg
  public enum DynType { STATIC((byte)(0)), DYNAMIC((byte)(1));

      public final byte value;
      private DynType(byte v) { this.value = v; }
      private DynType(DynType e) { this.value = e.value; }
      public DynType intern() { for (DynType e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }
  public SizeInput(DynType dt, @Cast("int64_t") long v) { super((Pointer)null); allocate(dt, v); }
  private native void allocate(DynType dt, @Cast("int64_t") long v);
  public SizeInput(@Cast("torch::dynamo::autograd::SizeInput::DynType") byte dt, @Cast("int64_t") long v) { super((Pointer)null); allocate(dt, v); }
  private native void allocate(@Cast("torch::dynamo::autograd::SizeInput::DynType") byte dt, @Cast("int64_t") long v);
  public native DynType dyn_type(); public native SizeInput dyn_type(DynType setter);
  public native @Cast("int64_t") long value(); public native SizeInput value(long setter);
}
