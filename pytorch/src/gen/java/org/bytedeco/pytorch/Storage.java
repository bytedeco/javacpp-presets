// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("c10") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class Storage extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Storage(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public Storage(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public Storage position(long position) {
        return (Storage)super.position(position);
    }
    @Override public Storage getPointer(long i) {
        return new Storage((Pointer)this).position(position + i);
    }

  @Opaque public static class use_byte_size_t extends Pointer {
      /** Empty constructor. Calls {@code super((Pointer)null)}. */
      public use_byte_size_t() { super((Pointer)null); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public use_byte_size_t(Pointer p) { super(p); }
  }

  public Storage() { super((Pointer)null); allocate(); }
  private native void allocate();

  // Allocates memory buffer using given allocator and creates a storage with it
  public Storage(
        @ByVal use_byte_size_t use_byte_size,
        @Cast("size_t") long size_bytes,
        Allocator allocator,
        @Cast("bool") boolean resizable) { super((Pointer)null); allocate(use_byte_size, size_bytes, allocator, resizable); }
  private native void allocate(
        @ByVal use_byte_size_t use_byte_size,
        @Cast("size_t") long size_bytes,
        Allocator allocator,
        @Cast("bool") boolean resizable);

  // Creates storage with pre-allocated memory buffer. Allocator is given for
  // potential future reallocations, however it can be nullptr if the storage
  // is non-resizable
  public Storage(
        @ByVal use_byte_size_t use_byte_size,
        @Cast("size_t") long size_bytes,
        @Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr data_ptr,
        Allocator allocator,
        @Cast("bool") boolean resizable) { super((Pointer)null); allocate(use_byte_size, size_bytes, data_ptr, allocator, resizable); }
  private native void allocate(
        @ByVal use_byte_size_t use_byte_size,
        @Cast("size_t") long size_bytes,
        @Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr data_ptr,
        Allocator allocator,
        @Cast("bool") boolean resizable);

  // Legacy constructor for partially initialized (dtype or memory) storages
  // that can be temporarily created with Caffe2 APIs. See the note on top of
  // TensorImpl.h for details.
  public static native @Cast({"", "c10::Storage&&"}) @StdMove Storage create_legacy(@ByVal Device device);

  // TODO: remove later
  public native void set_nbytes(@Cast("size_t") long size_bytes);

  public native @Cast("bool") boolean resizable();

  public native @Cast("size_t") long nbytes();
  // get() use here is to get const-correctness

  public native Pointer data();

  public native @ByRef DataPtr data_ptr();

  // Returns the previous data_ptr
  public native @Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr set_data_ptr(@Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr data_ptr);

  public native DeviceType device_type();

  public native Allocator allocator();

  public native @ByVal Device device();

  public native StorageImpl unsafeReleaseStorageImpl();

  public native @NoException StorageImpl unsafeGetStorageImpl();

  public native @Cast("bool") @Name("operator bool") boolean asBoolean();

  public native @Cast("size_t") long use_count();

  public native @Cast("bool") boolean unique();

  public native @Cast("bool") boolean is_alias_of(@Cast({"", "c10::Storage&&"}) @StdMove Storage other);

  public native void UniqueStorageShareExternalPointer(
        Pointer src,
        @Cast("size_t") long _capacity,
        Deleter d/*=nullptr*/);
  public native void UniqueStorageShareExternalPointer(
        Pointer src,
        @Cast("size_t") long _capacity);

  public native void UniqueStorageShareExternalPointer(
        @Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr data_ptr,
        @Cast("size_t") long _capacity);
}
