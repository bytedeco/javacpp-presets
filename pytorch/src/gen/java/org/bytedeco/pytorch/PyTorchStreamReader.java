// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("caffe2::serialize") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class PyTorchStreamReader extends Pointer {
    static { Loader.load(); }

  public PyTorchStreamReader(@StdString BytePointer file_name) { super((Pointer)null); allocate(file_name); }
  private native void allocate(@StdString BytePointer file_name);
  public PyTorchStreamReader(@StdString String file_name) { super((Pointer)null); allocate(file_name); }
  private native void allocate(@StdString String file_name);
  public PyTorchStreamReader(@Cast("std::istream*") Pointer in) { super((Pointer)null); allocate(in); }
  private native void allocate(@Cast("std::istream*") Pointer in);
  public PyTorchStreamReader(@SharedPtr ReadAdapterInterface in) { super((Pointer)null); allocate(in); }
  private native void allocate(@SharedPtr ReadAdapterInterface in);

  // return dataptr, size
  public native @ByVal T_DataPtrSizeT_T getRecord(@StdString BytePointer name);
  public native @ByVal T_DataPtrSizeT_T getRecord(@StdString String name);
  // inplace memory writing
  public native @Cast("size_t") long getRecord(@StdString BytePointer name, Pointer dst, @Cast("size_t") long n);
  public native @Cast("size_t") long getRecord(@StdString String name, Pointer dst, @Cast("size_t") long n);
  public native @Cast("size_t") long getRecord(
        @StdString BytePointer name,
        Pointer dst,
        @Cast("size_t") long n,
        @Cast("size_t") long chunk_size,
        Pointer buf,
        @Const @ByRef MemCopyFunction memcpy_func);
  public native @Cast("size_t") long getRecord(
        @StdString String name,
        Pointer dst,
        @Cast("size_t") long n,
        @Cast("size_t") long chunk_size,
        Pointer buf,
        @Const @ByRef MemCopyFunction memcpy_func);
  public native @Cast("size_t") long getRecordOffset(@StdString BytePointer name);
  public native @Cast("size_t") long getRecordOffset(@StdString String name);
  public native @Cast("bool") boolean hasRecord(@StdString BytePointer name);
  public native @Cast("bool") boolean hasRecord(@StdString String name);
  public native @ByVal StringVector getAllRecords();
  public native @Cast("uint64_t") long version();
  public native @StdString BytePointer serializationId();

  public native void setShouldLoadDebugSymbol(@Cast("bool") boolean should_load_debug_symbol);
}
