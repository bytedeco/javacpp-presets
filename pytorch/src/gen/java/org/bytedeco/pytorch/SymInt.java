// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// `SymInt` is a C++ wrapper class around int64_t data_ which  and is used to
// represent concrete dimension values.
//
// `SymInt` is also a data type in Pytorch that can be used in function schemas
// to enable tracing.
//
// `SymInt` is introduced to enable tracing arithmetic
// operations on symbolic integers (e.g. sizes). Tracing symbolic sizes will
// allow LTC and AOTAutograd representing dynamic shapes in expression graphs
// faithfully without baking in concrete dimension values.
//
// To trace the operations, SymInt will overload arithmetic operators (e.g. +,
// -, *) and will provide overloads taking SymInt for commonly used math
// functions.
//
// SymInt will be extenteded to represent a union structure Union[int64_t,
// SymbolicIntNode*] which will be implemented as a single packed int64_t field
// named data_.
@Namespace("c10") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SymInt extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SymInt(Pointer p) { super(p); }

  public SymInt(@Cast("int64_t") long d) { super((Pointer)null); allocate(d); }
  private native void allocate(@Cast("int64_t") long d);

  public native @Cast("int64_t") long expect_int();

  public native @Cast("bool") boolean is_symbolic();

  

  public native @ByVal @Name("operator +") SymInt add(@ByVal SymInt sci);

  public native @SharedPtr SymbolicIntNode toSymbolicIntNode();
  public static native @ByVal SymInt toSymInt(@SharedPtr SymbolicIntNode sin);

  // This is needed for interoperability with IValue
  public native @Cast("int64_t") long data();

  // Return whether the integer is representable as a SymInt.
  public static native @Cast("bool") boolean check_range(@Cast("int64_t") long i);
}
