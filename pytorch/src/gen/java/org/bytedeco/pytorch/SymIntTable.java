// Targeted by JavaCPP version 1.5.8: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("c10") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SymIntTable extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public SymIntTable() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SymIntTable(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SymIntTable(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SymIntTable position(long position) {
        return (SymIntTable)super.position(position);
    }
    @Override public SymIntTable getPointer(long i) {
        return new SymIntTable((Pointer)this).offsetAddress(i);
    }

  public native @Cast("uint64_t") long addNode(@SharedPtr SymbolicIntNode sin);
  public native @SharedPtr SymbolicIntNode getNode(@Cast("size_t") long index);
}
