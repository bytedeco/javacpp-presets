// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// Used in torch.package and TorchScript serialization to coordinate
// sharing of storages between models. Also used to create deterministic
// naming for storages.
@Namespace("torch::jit") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SerializationStorageContext extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SerializationStorageContext(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SerializationStorageContext(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public SerializationStorageContext position(long position) {
        return (SerializationStorageContext)super.position(position);
    }
    @Override public SerializationStorageContext getPointer(long i) {
        return new SerializationStorageContext((Pointer)this).offsetAddress(i);
    }

  public SerializationStorageContext() { super((Pointer)null); allocate(); }
  private native void allocate();
  
  

  public native @Cast("uint64_t") long getOrAddStorage(@Cast({"", "c10::Storage&&"}) @StdMove Storage storage);

  public native @Cast("bool") boolean hasStorage(@Cast({"", "c10::Storage&&"}) @StdMove Storage storage);
}
