// Targeted by JavaCPP version 1.5.13-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("c10") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SafeKernelFunction extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SafeKernelFunction(Pointer p) { super(p); }

  public SafeKernelFunction(
        @Const KernelFunction kernel,
        @StdString BytePointer debug,
        @SharedPtr OperatorHandle opHandle) { super((Pointer)null); allocate(kernel, debug, opHandle); }
  private native void allocate(
        @Const KernelFunction kernel,
        @StdString BytePointer debug,
        @SharedPtr OperatorHandle opHandle);
  public SafeKernelFunction(
        @Const KernelFunction kernel,
        @StdString String debug,
        @SharedPtr OperatorHandle opHandle) { super((Pointer)null); allocate(kernel, debug, opHandle); }
  private native void allocate(
        @Const KernelFunction kernel,
        @StdString String debug,
        @SharedPtr OperatorHandle opHandle);

  // Safe callBoxed - checks token validity first
  public native void callBoxed(
        @Const @ByRef OperatorHandle opHandle,
        @ByVal DispatchKeySet dispatchKeySet,
        @Cast("c10::Stack*") IValueVector stack);

  // Get debug information
  public native @StdString BytePointer debug();

  // Get the OpHandle that lives on this SafeKernelFunction
  public native @Const @ByRef OperatorHandle opHandle();
}
