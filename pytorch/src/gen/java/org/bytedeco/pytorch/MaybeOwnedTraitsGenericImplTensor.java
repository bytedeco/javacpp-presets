// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/** MaybeOwnedTraits<T> describes how to borrow from T.  Here is how we
 *  can implement borrowing from an arbitrary type T using a raw
 *  pointer to const: */
@Name("c10::MaybeOwnedTraitsGenericImpl<std::shared_ptr<at::Tensor> >") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class MaybeOwnedTraitsGenericImplTensor extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public MaybeOwnedTraitsGenericImplTensor() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MaybeOwnedTraitsGenericImplTensor(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MaybeOwnedTraitsGenericImplTensor(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public MaybeOwnedTraitsGenericImplTensor position(long position) {
        return (MaybeOwnedTraitsGenericImplTensor)super.position(position);
    }
    @Override public MaybeOwnedTraitsGenericImplTensor getPointer(long i) {
        return new MaybeOwnedTraitsGenericImplTensor((Pointer)this).offsetAddress(i);
    }


  public static native @Const @SharedPtr("at::Tensor") Tensor createBorrow(@Const @SharedPtr("at::Tensor") @ByRef Tensor from);

  

  

  public static native @Const @SharedPtr("at::Tensor") @ByRef Tensor referenceFromBorrow(@SharedPtr("at::Tensor") @ByPtrRef Tensor borrow);

  public static native @Const @SharedPtr("at::Tensor") Tensor pointerFromBorrow(@SharedPtr("at::Tensor") @ByPtrRef Tensor borrow);

  public static native @Cast("bool") boolean debugBorrowIsValid(@SharedPtr("at::Tensor") @ByPtrRef Tensor borrow);
}
