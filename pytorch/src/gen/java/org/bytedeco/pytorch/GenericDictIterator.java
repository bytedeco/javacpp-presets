// Targeted by JavaCPP version 1.5.9: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// this wraps map_type::iterator to make sure user code can't rely
// on it being the type of the underlying map.
@Name("c10::impl::DictIterator<c10::IValue,c10::IValue,c10::detail::DictImpl::dict_map_type::iterator>") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class GenericDictIterator extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GenericDictIterator(Pointer p) { super(p); }

   // C++17 friendly std::iterator implementation
  public native @ByRef @Name("operator =") GenericDictIterator put(@Const @ByRef GenericDictIterator rhs);

  public native @ByRef @Name("operator ++") GenericDictIterator increment();

  public native @ByVal @Name("operator ++") GenericDictIterator increment(int arg0);

  public native @Const @ByRef @Name("operator *") GenericDictEntryRef multiply();

  public native @Const @Name("operator ->") GenericDictEntryRef access();

  
}
