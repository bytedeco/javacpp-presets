// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("at") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class XPUHooksInterface extends AcceleratorHooksInterface {
    static { Loader.load(); }
    /** Default native constructor. */
    public XPUHooksInterface() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public XPUHooksInterface(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public XPUHooksInterface(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public XPUHooksInterface position(long position) {
        return (XPUHooksInterface)super.position(position);
    }
    @Override public XPUHooksInterface getPointer(long i) {
        return new XPUHooksInterface((Pointer)this).offsetAddress(i);
    }


  public native void init();

  public native @Cast("bool") boolean hasXPU();

  public native @StdString BytePointer showConfig();

  public native int getGlobalIdxFromDevice(@Const @ByRef Device device);

  public native @Const @ByRef Generator getDefaultGenerator(
        @Cast("c10::DeviceIndex") byte device_index/*=-1*/);
  public native @Const @ByRef Generator getDefaultGenerator();

  public native @ByVal Generator getNewGenerator(
        @Cast("c10::DeviceIndex") byte device_index/*=-1*/);
  public native @ByVal Generator getNewGenerator();

  public native @Cast("c10::DeviceIndex") byte getNumGPUs();

  public native @Cast("c10::DeviceIndex") byte current_device();

  public native @ByVal Device getDeviceFromPtr(Pointer arg0);

  public native void deviceSynchronize(@Cast("c10::DeviceIndex") byte arg0);

  public native Allocator getPinnedMemoryAllocator();

  public native @Cast("bool") boolean isPinnedPtr(@Const Pointer data);

  public native @Cast("bool") boolean hasPrimaryContext(@Cast("c10::DeviceIndex") byte device_index);
}
