// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("at") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class XPUHooksInterface extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public XPUHooksInterface() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public XPUHooksInterface(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public XPUHooksInterface(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public XPUHooksInterface position(long position) {
        return (XPUHooksInterface)super.position(position);
    }
    @Override public XPUHooksInterface getPointer(long i) {
        return new XPUHooksInterface((Pointer)this).offsetAddress(i);
    }


  public native void initXPU();

  public native @Cast("bool") boolean hasXPU();

  public native @StdString BytePointer showConfig();

  public native @ByVal Device getATenDeviceFromDLPackDevice(
        @Const @ByRef DLDevice_ dl_device,
        Pointer data);

  public native @ByRef DLDevice_ getDLPackDeviceFromATenDevice(
        @ByRef DLDevice_ dl_device,
        @Const @ByRef Device aten_device,
        Pointer data);
}
