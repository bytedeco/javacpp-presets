// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;

@Name("torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module> >") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class StringSharedModuleDict extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StringSharedModuleDict(Pointer p) { super(p); }
    public StringSharedModuleDict()       { allocate();  }
    private native void allocate();
    public native @Name("operator =") @ByRef StringSharedModuleDict put(@ByRef StringSharedModuleDict x);

    public boolean empty() { return size() == 0; }
    public native long size();

    @Index(function = "operator []") public native @SharedPtr @Cast({"", "std::shared_ptr<torch::nn::Module>"}) Module get(@StdString BytePointer i);
    public native StringSharedModuleDict put(@StdString BytePointer i, Module value);

    public native @ByVal Iterator begin();
    public native @ByVal Iterator end();
    @NoOffset @Name("Iterator") public static class Iterator extends Pointer {
        public Iterator(Pointer p) { super(p); }
        public Iterator() { }

        public native @Name("operator ++") @ByRef Iterator increment();
        public native @Name("operator ==") boolean equals(@ByRef Iterator it);
        public native @Name("operator *().key()") @MemberGetter @StdString BytePointer first();
        public native @Name("operator *().value()") @MemberGetter @SharedPtr @Cast({"", "std::shared_ptr<torch::nn::Module>"}) Module second();
    }
}

