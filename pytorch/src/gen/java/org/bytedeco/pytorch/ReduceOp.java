// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


// Other ReduceOps that need different supplementary data can also
// derive from _SupplementBase.
@Namespace("c10d") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class ReduceOp extends CustomClassHolder {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ReduceOp(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ReduceOp(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ReduceOp position(long position) {
        return (ReduceOp)super.position(position);
    }
    @Override public ReduceOp getPointer(long i) {
        return new ReduceOp((Pointer)this).offsetAddress(i);
    }

  // note(crcrpar): RedOpType could be defined outside of `ReduceOp`
  public enum RedOpType {
    SUM((byte)(0)),
    AVG((byte)(1)),
    PRODUCT((byte)(2)),
    MIN((byte)(3)),
    MAX((byte)(4)),
    BAND((byte)(5)), // Bitwise AND
    BOR((byte)(6)), // Bitwise OR
    BXOR((byte)(7)), // Bitwise XOR
    PREMUL_SUM((byte)(8)), // Multiply by a user-supplied constant before summing.
    UNUSED((byte)(9));

      public final byte value;
      private RedOpType(byte v) { this.value = v; }
      private RedOpType(RedOpType e) { this.value = e.value; }
      public RedOpType intern() { for (RedOpType e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }

  public ReduceOp() { super((Pointer)null); allocate(); }
  private native void allocate();

  public ReduceOp(RedOpType op) { super((Pointer)null); allocate(op); }
  private native void allocate(RedOpType op);
  public ReduceOp(@Cast("c10d::ReduceOp::RedOpType") byte op) { super((Pointer)null); allocate(op); }
  private native void allocate(@Cast("c10d::ReduceOp::RedOpType") byte op);

  public ReduceOp(
        RedOpType op,
        @IntrusivePtr("c10d::_SupplementBase") @Cast({"", "c10::intrusive_ptr<c10d::_SupplementBase>&"}) _SupplementBase optional_supplement) { super((Pointer)null); allocate(op, optional_supplement); }
  private native void allocate(
        RedOpType op,
        @IntrusivePtr("c10d::_SupplementBase") @Cast({"", "c10::intrusive_ptr<c10d::_SupplementBase>&"}) _SupplementBase optional_supplement);
  public ReduceOp(
        @Cast("c10d::ReduceOp::RedOpType") byte op,
        @IntrusivePtr("c10d::_SupplementBase") @Cast({"", "c10::intrusive_ptr<c10d::_SupplementBase>&"}) _SupplementBase optional_supplement) { super((Pointer)null); allocate(op, optional_supplement); }
  private native void allocate(
        @Cast("c10d::ReduceOp::RedOpType") byte op,
        @IntrusivePtr("c10d::_SupplementBase") @Cast({"", "c10::intrusive_ptr<c10d::_SupplementBase>&"}) _SupplementBase optional_supplement);

  // The heap resource supplement_, if it exists, is managed by a
  // c10::intrusive_ptr, so constructors and operator= can be simple
  public ReduceOp(@Const @ByRef ReduceOp other) { super((Pointer)null); allocate(other); }
  private native void allocate(@Const @ByRef ReduceOp other);
  public native @ByRef @Name("operator =") ReduceOp put(@Const @ByRef ReduceOp other);

  public native @Name("operator c10d::ReduceOp::RedOpType") RedOpType asRedOpType();

  public native @Cast("bool") @Name("operator ==") boolean equals(@Cast("const std::uint8_t") byte other);

  public native @Cast("bool") @Name("operator ==") boolean equals(RedOpType other);

  // todo(crcrpar): Handle `RedOpType::PREMUL_SUM` with its scaling factor.
  public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef ReduceOp other);

  public native RedOpType op_(); public native ReduceOp op_(RedOpType setter);
  // supplement_ is "type-erased" storage for optional supplementary
  // data the op might need.
  // The point of use will know the derived type supplement_ really is,
  // and downcast its pointer to extract the data as the needed type(s).
  // Right now, only PREMUL_SUM needs supplementary data, but the same
  // mechanism could extend to support other nontrivial reduce ops with
  // different supplementary payloads.
  public native @IntrusivePtr("c10d::_SupplementBase") @Cast({"", "c10::intrusive_ptr<c10d::_SupplementBase>&"}) _SupplementBase supplement_(); public native ReduceOp supplement_(_SupplementBase setter);
}
