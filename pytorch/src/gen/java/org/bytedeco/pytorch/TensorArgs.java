// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::dynamo::autograd") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class TensorArgs extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TensorArgs(Pointer p) { super(p); }

  // Manages a collection of TensorArgs and mappings from Tensors/SavedVariables
  // to them.  This also allows us to unpack SavedVariable exactly once and
  // store the unpacked Tensor.
  public TensorArgs(@Const @ByRef SizeTOptional active_node_call_idx) { super((Pointer)null); allocate(active_node_call_idx); }
  private native void allocate(@Const @ByRef SizeTOptional active_node_call_idx);

  public native @ByRef DynamoTensorArg lookup(@Const @ByRef Tensor tensor, @Cast("bool") boolean create/*=false*/);
  public native @ByRef DynamoTensorArg lookup(@Const @ByRef Tensor tensor);

  public native @ByRef DynamoTensorArg add(@Const @ByRef Tensor tensor);

  // the concrete tensors that will get passed into the graph as inputs
  public native @ByRef @NoOffset TensorVector inputs(); public native TensorArgs inputs(TensorVector setter);
  // NodeCall id of each input, only when verbose logging is enabled
  public native @Cast("uint32_t*") @StdVector IntPointer input_origins(); public native TensorArgs input_origins(IntPointer setter);
}
