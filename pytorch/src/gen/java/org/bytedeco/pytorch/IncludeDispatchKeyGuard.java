// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// RAII API for manipulating the thread-local dispatch state.

@Namespace("c10::impl") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class IncludeDispatchKeyGuard extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IncludeDispatchKeyGuard(Pointer p) { super(p); }

  public IncludeDispatchKeyGuard(@ByVal DispatchKeySet arg0) { super((Pointer)null); allocate(arg0); }
  private native void allocate(@ByVal DispatchKeySet arg0);
  public IncludeDispatchKeyGuard(DispatchKey k) { super((Pointer)null); allocate(k); }
  private native void allocate(DispatchKey k);
  public IncludeDispatchKeyGuard(@Cast("c10::DispatchKey") short k) { super((Pointer)null); allocate(k); }
  private native void allocate(@Cast("c10::DispatchKey") short k);
  
  
  
  
}
