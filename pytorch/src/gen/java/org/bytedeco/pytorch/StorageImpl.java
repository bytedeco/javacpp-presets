// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("c10") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class StorageImpl extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StorageImpl(Pointer p) { super(p); }

  @Opaque public static class use_byte_size_t extends Pointer {
      /** Empty constructor. Calls {@code super((Pointer)null)}. */
      public use_byte_size_t() { super((Pointer)null); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public use_byte_size_t(Pointer p) { super(p); }
  }

  public StorageImpl(
        @ByVal use_byte_size_t use_byte_size,
        @Cast("size_t") long size_bytes,
        @Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr data_ptr,
        Allocator allocator,
        @Cast("bool") boolean resizable) { super((Pointer)null); allocate(use_byte_size, size_bytes, data_ptr, allocator, resizable); }
  private native void allocate(
        @ByVal use_byte_size_t use_byte_size,
        @Cast("size_t") long size_bytes,
        @Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr data_ptr,
        Allocator allocator,
        @Cast("bool") boolean resizable);

  public StorageImpl(
        @ByVal use_byte_size_t use_byte_size,
        @Cast("size_t") long size_bytes,
        Allocator allocator,
        @Cast("bool") boolean resizable) { super((Pointer)null); allocate(use_byte_size, size_bytes, allocator, resizable); }
  private native void allocate(
        @ByVal use_byte_size_t use_byte_size,
        @Cast("size_t") long size_bytes,
        Allocator allocator,
        @Cast("bool") boolean resizable);

  
  
  
  
  

  public native void reset();

  public native void release_resources();

  public native @Cast("size_t") long nbytes();

  // TODO: remove later
  public native void set_nbytes(@Cast("size_t") long size_bytes);

  public native @Cast("bool") boolean resizable();

  public native @ByRef DataPtr data_ptr();

  // Returns the previous data_ptr
  public native @Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr set_data_ptr(@Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr data_ptr);

  // TODO: Return const ptr eventually if possible
  public native Pointer data();

  public native @ByVal DeviceType device_type();

  public native Allocator allocator();

  // You generally shouldn't use this method, but it is occasionally
  // useful if you want to override how a tensor will be reallocated,
  // after it was already allocated (and its initial allocator was
  // set)
  public native void set_allocator(Allocator allocator);

  public native @ByVal Device device();

  public native void set_resizable(@Cast("bool") boolean resizable);

  /**
   * Can only be called when use_count is 1
   */
  public native void UniqueStorageShareExternalPointer(
        Pointer src,
        @Cast("size_t") long size_bytes,
        Deleter d/*=nullptr*/);
  public native void UniqueStorageShareExternalPointer(
        Pointer src,
        @Cast("size_t") long size_bytes);

  /**
   * Can only be called when use_count is 1
   */
  public native void UniqueStorageShareExternalPointer(
        @Cast({"", "c10::DataPtr&&"}) @StdMove DataPtr data_ptr,
        @Cast("size_t") long size_bytes);

  // This method can be used only after storage construction and cannot be used
  // to modify storage status
  public native void set_received_cuda(@Cast("bool") boolean received_cuda);

  public native @Cast("bool") boolean received_cuda();
}
