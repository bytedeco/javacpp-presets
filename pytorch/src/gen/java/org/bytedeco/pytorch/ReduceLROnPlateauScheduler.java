// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::optim") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class ReduceLROnPlateauScheduler extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ReduceLROnPlateauScheduler(Pointer p) { super(p); }

  public enum SchedulerMode { min(0), max(1);

      public final int value;
      private SchedulerMode(int v) { this.value = v; }
      private SchedulerMode(SchedulerMode e) { this.value = e.value; }
      public SchedulerMode intern() { for (SchedulerMode e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }
  public enum ThresholdMode { rel(0), abs(1);

      public final int value;
      private ThresholdMode(int v) { this.value = v; }
      private ThresholdMode(ThresholdMode e) { this.value = e.value; }
      public ThresholdMode intern() { for (ThresholdMode e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }
  public ReduceLROnPlateauScheduler(
        @ByRef Optimizer optimizer,
        SchedulerMode mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        ThresholdMode threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector FloatPointer min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/) { super((Pointer)null); allocate(optimizer, mode, factor, patience, threshold, threshold_mode, cooldown, min_lr, eps, verbose); }
  private native void allocate(
        @ByRef Optimizer optimizer,
        SchedulerMode mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        ThresholdMode threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector FloatPointer min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/);
  public ReduceLROnPlateauScheduler(
        @ByRef Optimizer optimizer) { super((Pointer)null); allocate(optimizer); }
  private native void allocate(
        @ByRef Optimizer optimizer);
  public ReduceLROnPlateauScheduler(
        @ByRef Optimizer optimizer,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::SchedulerMode") int mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::ThresholdMode") int threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector FloatBuffer min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/) { super((Pointer)null); allocate(optimizer, mode, factor, patience, threshold, threshold_mode, cooldown, min_lr, eps, verbose); }
  private native void allocate(
        @ByRef Optimizer optimizer,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::SchedulerMode") int mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::ThresholdMode") int threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector FloatBuffer min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/);
  public ReduceLROnPlateauScheduler(
        @ByRef Optimizer optimizer,
        SchedulerMode mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        ThresholdMode threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector float[] min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/) { super((Pointer)null); allocate(optimizer, mode, factor, patience, threshold, threshold_mode, cooldown, min_lr, eps, verbose); }
  private native void allocate(
        @ByRef Optimizer optimizer,
        SchedulerMode mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        ThresholdMode threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector float[] min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/);
  public ReduceLROnPlateauScheduler(
        @ByRef Optimizer optimizer,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::SchedulerMode") int mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::ThresholdMode") int threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector FloatPointer min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/) { super((Pointer)null); allocate(optimizer, mode, factor, patience, threshold, threshold_mode, cooldown, min_lr, eps, verbose); }
  private native void allocate(
        @ByRef Optimizer optimizer,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::SchedulerMode") int mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::ThresholdMode") int threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector FloatPointer min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/);
  public ReduceLROnPlateauScheduler(
        @ByRef Optimizer optimizer,
        SchedulerMode mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        ThresholdMode threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector FloatBuffer min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/) { super((Pointer)null); allocate(optimizer, mode, factor, patience, threshold, threshold_mode, cooldown, min_lr, eps, verbose); }
  private native void allocate(
        @ByRef Optimizer optimizer,
        SchedulerMode mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        ThresholdMode threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector FloatBuffer min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/);
  public ReduceLROnPlateauScheduler(
        @ByRef Optimizer optimizer,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::SchedulerMode") int mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::ThresholdMode") int threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector float[] min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/) { super((Pointer)null); allocate(optimizer, mode, factor, patience, threshold, threshold_mode, cooldown, min_lr, eps, verbose); }
  private native void allocate(
        @ByRef Optimizer optimizer,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::SchedulerMode") int mode/*=torch::optim::ReduceLROnPlateauScheduler::min*/,
        float factor/*=0.1*/,
        int patience/*=10*/,
        double threshold/*=1e-4*/,
        @Cast("torch::optim::ReduceLROnPlateauScheduler::ThresholdMode") int threshold_mode/*=torch::optim::ReduceLROnPlateauScheduler::rel*/,
        int cooldown/*=0*/,
        @StdVector float[] min_lr/*=std::vector<float>()*/,
        double eps/*=1e-8*/,
        @Cast("bool") boolean verbose/*=false*/);

  public native void step(float metric);
}
