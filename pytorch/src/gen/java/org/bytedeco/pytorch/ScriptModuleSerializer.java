// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// Serializer for both oldsyle and unified format TorchScript serialization
@Namespace("torch::jit") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class ScriptModuleSerializer extends Pointer {
    static { Loader.load(); }

  public ScriptModuleSerializer(
        @Cast("caffe2::serialize::PyTorchStreamWriter*") @ByRef Pointer export_writer) { super((Pointer)null); allocate(export_writer); }
  private native void allocate(
        @Cast("caffe2::serialize::PyTorchStreamWriter*") @ByRef Pointer export_writer);

  public native void writeFiles(@StdString BytePointer code_dir);
  public native void writeFiles(@StdString String code_dir);
  public native void serialize(
        @Const @ByRef JitModule module,
        @Cast("const torch::jit::ExtraFilesMap*") @ByRef IValueIValueMap extra_files,
        @Cast("bool") boolean bytecode_format,
        @Cast("bool") boolean save_mobile_debug_info);
  public native void serialize_unified_format(@ByRef JitModule module, @Cast("uint64_t") long script_module_id);
  public native @ByRef SerializationStorageContext storage_context();
}
