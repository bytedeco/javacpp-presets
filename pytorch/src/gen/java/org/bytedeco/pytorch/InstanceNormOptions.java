// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/** Options for the {@code InstanceNorm} module. */
@Namespace("torch::nn") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class InstanceNormOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public InstanceNormOptions(Pointer p) { super(p); }

  /* implicit */ public InstanceNormOptions(@Cast("int64_t") long num_features) { super((Pointer)null); allocate(num_features); }
private native void allocate(@Cast("int64_t") long num_features);
  public native @Cast("int64_t*") @ByRef @NoException LongPointer num_features();
  public native @ByRef @NoException DoublePointer eps();
  public native @ByRef @NoException DoublePointer momentum();
  public native @Cast("bool*") @ByRef @NoException BoolPointer affine();
  public native @Cast("bool*") @ByRef @NoException BoolPointer track_running_stats();
}
