// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("at") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class TensorGeometry extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TensorGeometry(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TensorGeometry(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TensorGeometry position(long position) {
        return (TensorGeometry)super.position(position);
    }
    @Override public TensorGeometry getPointer(long i) {
        return new TensorGeometry((Pointer)this).position(position + i);
    }

  public TensorGeometry() { super((Pointer)null); allocate(); }
  private native void allocate();

  public TensorGeometry(@ByVal @Cast("c10::ArrayRef<int64_t>*") LongArrayRef sizes) { super((Pointer)null); allocate(sizes); }
  private native void allocate(@ByVal @Cast("c10::ArrayRef<int64_t>*") LongArrayRef sizes);
  public TensorGeometry(@ByVal @Cast({"int64_t*", "std::vector<int64_t>&"}) @StdVector long... sizes) { super((Pointer)null); allocate(sizes); }
  private native void allocate(@ByVal @Cast({"int64_t*", "std::vector<int64_t>&"}) @StdVector long... sizes);

  public TensorGeometry(@Const @ByRef Tensor t) { super((Pointer)null); allocate(t); }
  private native void allocate(@Const @ByRef Tensor t);

  // true if the tensor is contiguous
  public native @Cast("bool") boolean is_contiguous();

  public native @Cast("int64_t") long dim();
  public native @Cast("int64_t") long size(@Cast("int64_t") long dim);
  public native @ByVal @Cast("c10::ArrayRef<int64_t>*") LongArrayRef sizes();
  public native @Cast("int64_t") long stride(@Cast("int64_t") long dim);
  public native @ByVal @Cast("c10::ArrayRef<int64_t>*") LongArrayRef strides();
  public native @Cast("int64_t") long storage_offset();
  public native @Cast("int64_t") long numel();

  public native @ByVal TensorGeometry transpose(@Cast("int64_t") long dim0, @Cast("int64_t") long dim1);

  public native @ByRef @Cast("std::vector<int64_t>*") LongVector sizes_(); public native TensorGeometry sizes_(LongVector setter);
  public native @ByRef @Cast("std::vector<int64_t>*") LongVector strides_(); public native TensorGeometry strides_(LongVector setter);
  public native @Cast("int64_t") long storage_offset_(); public native TensorGeometry storage_offset_(long setter);
  public native @Cast("int64_t") long numel_(); public native TensorGeometry numel_(long setter);
}
