// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::dynamo::autograd") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class CacheKeyBuffer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CacheKeyBuffer(Pointer p) { super(p); }

  public CacheKeyBuffer(@Cast("const uint8_t*") BytePointer key, @Cast("uint16_t") short len) { super((Pointer)null); allocate(key, len); }
  private native void allocate(@Cast("const uint8_t*") BytePointer key, @Cast("uint16_t") short len);
  public CacheKeyBuffer(@Cast("const uint8_t*") ByteBuffer key, @Cast("uint16_t") short len) { super((Pointer)null); allocate(key, len); }
  private native void allocate(@Cast("const uint8_t*") ByteBuffer key, @Cast("uint16_t") short len);
  public CacheKeyBuffer(@Cast("const uint8_t*") byte[] key, @Cast("uint16_t") short len) { super((Pointer)null); allocate(key, len); }
  private native void allocate(@Cast("const uint8_t*") byte[] key, @Cast("uint16_t") short len);
  public native @Cast("const uint8_t*") BytePointer get();
}
