// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// Source represents a code segment like SourceView, but the former owns a copy
// of source text while the latter doesn't.
@Namespace("torch::jit") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class Source extends SourceView {
    static { Loader.load(); }

  public Source(
        @StdString BytePointer text,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text, gen_ranges); }
  private native void allocate(
        @StdString BytePointer text,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @StdString BytePointer text) { super((Pointer)null); allocate(text); }
  private native void allocate(
        @StdString BytePointer text);
  public Source(
        @StdString String text,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text, gen_ranges); }
  private native void allocate(
        @StdString String text,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @StdString String text) { super((Pointer)null); allocate(text); }
  private native void allocate(
        @StdString String text);

  public Source(
        @ByVal @Cast("c10::string_view*") Pointer text_view,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text_view, gen_ranges); }
  private native void allocate(
        @ByVal @Cast("c10::string_view*") Pointer text_view,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @ByVal @Cast("c10::string_view*") Pointer text_view) { super((Pointer)null); allocate(text_view); }
  private native void allocate(
        @ByVal @Cast("c10::string_view*") Pointer text_view);

  public Source(
        @StdString BytePointer text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text, filename, starting_line_no, gen_ranges); }
  private native void allocate(
        @StdString BytePointer text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @StdString BytePointer text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no) { super((Pointer)null); allocate(text, filename, starting_line_no); }
  private native void allocate(
        @StdString BytePointer text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no);
  public Source(
        @StdString String text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text, filename, starting_line_no, gen_ranges); }
  private native void allocate(
        @StdString String text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @StdString String text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no) { super((Pointer)null); allocate(text, filename, starting_line_no); }
  private native void allocate(
        @StdString String text,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no);

  public Source(
        @ByVal @Cast("c10::string_view*") Pointer text_view,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/) { super((Pointer)null); allocate(text_view, filename, starting_line_no, gen_ranges); }
  private native void allocate(
        @ByVal @Cast("c10::string_view*") Pointer text_view,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no,
        @SharedPtr SourceRangeUnpickler gen_ranges/*=nullptr*/);
  public Source(
        @ByVal @Cast("c10::string_view*") Pointer text_view,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no) { super((Pointer)null); allocate(text_view, filename, starting_line_no); }
  private native void allocate(
        @ByVal @Cast("c10::string_view*") Pointer text_view,
        @ByVal StringOptional filename,
        @Cast("size_t") long starting_line_no);

  // Constructor that deepcopies and owns source text referenced in
  // `source_view`.
  public Source(@Const @ByRef SourceView source_view) { super((Pointer)null); allocate(source_view); }
  private native void allocate(@Const @ByRef SourceView source_view);

  public native @StdString BytePointer text_(); public native Source text_(BytePointer setter);
}
