// Targeted by JavaCPP version 1.5.6-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;
 // namespace functional

// ============================================================================

/** Options for the {@code GroupNorm} module.
 * 
 *  Example:
 *  <pre>{@code
 *  GroupNorm model(GroupNormOptions(2, 2).eps(2e-5).affine(false));
 *  }</pre> */
@Namespace("torch::nn") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class GroupNormOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GroupNormOptions(Pointer p) { super(p); }

  /* implicit */ public GroupNormOptions(@Cast("int64_t") long num_groups, @Cast("int64_t") long num_channels) { super((Pointer)null); allocate(num_groups, num_channels); }
private native void allocate(@Cast("int64_t") long num_groups, @Cast("int64_t") long num_channels);
  public native @Cast("int64_t*") @ByRef @NoException LongPointer num_groups();
  public native @Cast("int64_t*") @ByRef @NoException LongPointer num_channels();
  public native @ByRef @NoException DoublePointer eps();
  public native @Cast("bool*") @ByRef @NoException BoolPointer affine();
}
