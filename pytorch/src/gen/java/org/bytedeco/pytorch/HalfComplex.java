// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// TODO : move to complex.h
@Name("c10::complex<c10::Half>") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class HalfComplex extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public HalfComplex(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public HalfComplex(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public HalfComplex position(long position) {
        return (HalfComplex)super.position(position);
    }
    @Override public HalfComplex getPointer(long i) {
        return new HalfComplex((Pointer)this).offsetAddress(i);
    }

  public native @ByRef Half real_(); public native HalfComplex real_(Half setter);
  public native @ByRef Half imag_(); public native HalfComplex imag_(Half setter);

  // Constructors
  public HalfComplex() { super((Pointer)null); allocate(); }
  private native void allocate();
  // Half constructor is not constexpr so the following constructor can't
  // be constexpr
  public HalfComplex(@Const @ByRef Half real, @Const @ByRef Half imag) { super((Pointer)null); allocate(real, imag); }
  private native void allocate(@Const @ByRef Half real, @Const @ByRef Half imag);
  public HalfComplex(@Const @ByRef FloatComplex value) { super((Pointer)null); allocate(value); }
  private native void allocate(@Const @ByRef FloatComplex value);

  // Conversion operator
  public native @ByVal @Name("operator c10::complex<float>") FloatComplex asFloatComplex();

  public native @Const @ByVal @org.bytedeco.javacpp.annotation.Function Half real();
  public native @Const @ByVal @org.bytedeco.javacpp.annotation.Function Half imag();

  public native @ByRef @Name("operator +=") HalfComplex addPut(@Const @ByRef HalfComplex other);

  public native @ByRef @Name("operator -=") HalfComplex subtractPut(@Const @ByRef HalfComplex other);

  public native @ByRef @Name("operator *=") HalfComplex multiplyPut(@Const @ByRef HalfComplex other);
}
