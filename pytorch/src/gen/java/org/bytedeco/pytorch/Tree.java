// Targeted by JavaCPP version 1.5.12-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.javacpp.chrono.*;
import static org.bytedeco.javacpp.global.chrono.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::jit") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class Tree extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Tree(Pointer p) { super(p); }

  public Tree(int kind_) { super((Pointer)null); allocate(kind_); }
  @IntrusivePtr @Name("c10::make_intrusive<torch::jit::Tree>") private native void allocate(int kind_);
  public native int kind();
  public native @Cast("bool") boolean isAtom();
  public native @Const @ByRef SourceRange range();
  public native @StdString BytePointer stringValue();
  public native @Cast("const torch::jit::TreeList*") @ByRef SymDimVector trees();
  public native @IntrusivePtr("torch::jit::Tree") @Cast({"", "c10::intrusive_ptr<torch::jit::Tree>&"}) Tree tree(@Cast("size_t") long i);
  
  public native void matchNumSubtrees(int k, @Cast("size_t") long expected_subtrees);
  public native void matchNumSubtreesD(
        int k,
        @Cast("const char*") BytePointer filename,
        int lineno,
        @Cast("size_t") long expected_subtrees,
        @Cast("bool") boolean allow_more);
  public native void matchNumSubtreesD(
        int k,
        String filename,
        int lineno,
        @Cast("size_t") long expected_subtrees,
        @Cast("bool") boolean allow_more);
}
