// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.depthai;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

import static org.bytedeco.depthai.global.depthai.*;


/**
 * \brief UVC (USB Video Class) node
 */
@Namespace("dai::node") @NoOffset @Properties(inherit = org.bytedeco.depthai.presets.depthai.class)
public class UVC extends UVCPropertiesNode {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public UVC(Pointer p) { super(p); }

    @MemberGetter public static native @Cast("const char*") BytePointer NAME();
    public UVC(@SharedPtr PipelineImpl par, @Cast("int64_t") long nodeId) { super((Pointer)null); allocate(par, nodeId); }
    private native void allocate(@SharedPtr PipelineImpl par, @Cast("int64_t") long nodeId);
    public UVC(@SharedPtr PipelineImpl par, @Cast("int64_t") long nodeId, @UniquePtr UVCProperties props) { super((Pointer)null); allocate(par, nodeId, props); }
    private native void allocate(@SharedPtr PipelineImpl par, @Cast("int64_t") long nodeId, @UniquePtr UVCProperties props);

    /**
     * Input for image frames to be streamed over UVC
     *
     * Default queue is blocking with size 8
     */
    @MemberGetter public native @ByRef Input input();

    /** Set GPIO list <gpio_number, value> for GPIOs to set (on/off) at init */
    public native void setGpiosOnInit(@ByVal IntIntMap list);

    /** Set GPIO list <gpio_number, value> for GPIOs to set when streaming is enabled */
    public native void setGpiosOnStreamOn(@ByVal IntIntMap list);

    /** Set GPIO list <gpio_number, value> for GPIOs to set when streaming is disabled */
    public native void setGpiosOnStreamOff(@ByVal IntIntMap list);
}
