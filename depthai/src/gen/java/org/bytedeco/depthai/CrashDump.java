// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.depthai;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

import static org.bytedeco.depthai.global.depthai.*;


@Namespace("dai") @Properties(inherit = org.bytedeco.depthai.presets.depthai.class)
public class CrashDump extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public CrashDump() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CrashDump(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CrashDump(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public CrashDump position(long position) {
        return (CrashDump)super.position(position);
    }
    @Override public CrashDump getPointer(long i) {
        return new CrashDump((Pointer)this).offsetAddress(i);
    }

    public static class CrashReport extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public CrashReport() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public CrashReport(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public CrashReport(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public CrashReport position(long position) {
            return (CrashReport)super.position(position);
        }
        @Override public CrashReport getPointer(long i) {
            return new CrashReport((Pointer)this).offsetAddress(i);
        }
    
        public native ProcessorType processor(); public native CrashReport processor(ProcessorType setter);
        public native @StdString BytePointer errorSource(); public native CrashReport errorSource(BytePointer setter);
        public native @Cast("uint32_t") int crashedThreadId(); public native CrashReport crashedThreadId(int setter);

        public static class ErrorSourceInfo extends Pointer {
            static { Loader.load(); }
            /** Default native constructor. */
            public ErrorSourceInfo() { super((Pointer)null); allocate(); }
            /** Native array allocator. Access with {@link Pointer#position(long)}. */
            public ErrorSourceInfo(long size) { super((Pointer)null); allocateArray(size); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public ErrorSourceInfo(Pointer p) { super(p); }
            private native void allocate();
            private native void allocateArray(long size);
            @Override public ErrorSourceInfo position(long position) {
                return (ErrorSourceInfo)super.position(position);
            }
            @Override public ErrorSourceInfo getPointer(long i) {
                return new ErrorSourceInfo((Pointer)this).offsetAddress(i);
            }
        
            public static class AssertContext extends Pointer {
                static { Loader.load(); }
                /** Default native constructor. */
                public AssertContext() { super((Pointer)null); allocate(); }
                /** Native array allocator. Access with {@link Pointer#position(long)}. */
                public AssertContext(long size) { super((Pointer)null); allocateArray(size); }
                /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
                public AssertContext(Pointer p) { super(p); }
                private native void allocate();
                private native void allocateArray(long size);
                @Override public AssertContext position(long position) {
                    return (AssertContext)super.position(position);
                }
                @Override public AssertContext getPointer(long i) {
                    return new AssertContext((Pointer)this).offsetAddress(i);
                }
            
                public native @StdString BytePointer fileName(); public native AssertContext fileName(BytePointer setter);
                public native @StdString BytePointer functionName(); public native AssertContext functionName(BytePointer setter);
                public native @Cast("uint32_t") int line(); public native AssertContext line(int setter);
            }

            public native @ByRef AssertContext assertContext(); public native ErrorSourceInfo assertContext(AssertContext setter);

            public static class TrapContext extends Pointer {
                static { Loader.load(); }
                /** Default native constructor. */
                public TrapContext() { super((Pointer)null); allocate(); }
                /** Native array allocator. Access with {@link Pointer#position(long)}. */
                public TrapContext(long size) { super((Pointer)null); allocateArray(size); }
                /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
                public TrapContext(Pointer p) { super(p); }
                private native void allocate();
                private native void allocateArray(long size);
                @Override public TrapContext position(long position) {
                    return (TrapContext)super.position(position);
                }
                @Override public TrapContext getPointer(long i) {
                    return new TrapContext((Pointer)this).offsetAddress(i);
                }
            
                public native @Cast("uint32_t") int trapNumber(); public native TrapContext trapNumber(int setter);
                public native @Cast("uint32_t") int trapAddress(); public native TrapContext trapAddress(int setter);
                public native @StdString BytePointer trapName(); public native TrapContext trapName(BytePointer setter);
            }

            public native @ByRef TrapContext trapContext(); public native ErrorSourceInfo trapContext(TrapContext setter);

            public native @Cast("uint32_t") int errorId(); public native ErrorSourceInfo errorId(int setter);
        }

        public native @ByRef ErrorSourceInfo errorSourceInfo(); public native CrashReport errorSourceInfo(ErrorSourceInfo setter);

        public static class ThreadCallstack extends Pointer {
            static { Loader.load(); }
            /** Default native constructor. */
            public ThreadCallstack() { super((Pointer)null); allocate(); }
            /** Native array allocator. Access with {@link Pointer#position(long)}. */
            public ThreadCallstack(long size) { super((Pointer)null); allocateArray(size); }
            /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
            public ThreadCallstack(Pointer p) { super(p); }
            private native void allocate();
            private native void allocateArray(long size);
            @Override public ThreadCallstack position(long position) {
                return (ThreadCallstack)super.position(position);
            }
            @Override public ThreadCallstack getPointer(long i) {
                return new ThreadCallstack((Pointer)this).offsetAddress(i);
            }
        
            public native @Cast("uint32_t") int threadId(); public native ThreadCallstack threadId(int setter);
            public native @StdString BytePointer threadName(); public native ThreadCallstack threadName(BytePointer setter);
            public native @StdString BytePointer threadStatus(); public native ThreadCallstack threadStatus(BytePointer setter);
            public native @Cast("uint32_t") int stackBottom(); public native ThreadCallstack stackBottom(int setter);
            public native @Cast("uint32_t") int stackTop(); public native ThreadCallstack stackTop(int setter);
            public native @Cast("uint32_t") int stackPointer(); public native ThreadCallstack stackPointer(int setter);
            public native @Cast("uint32_t") int instructionPointer(); public native ThreadCallstack instructionPointer(int setter);

            public static class CallstackContext extends Pointer {
                static { Loader.load(); }
                /** Default native constructor. */
                public CallstackContext() { super((Pointer)null); allocate(); }
                /** Native array allocator. Access with {@link Pointer#position(long)}. */
                public CallstackContext(long size) { super((Pointer)null); allocateArray(size); }
                /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
                public CallstackContext(Pointer p) { super(p); }
                private native void allocate();
                private native void allocateArray(long size);
                @Override public CallstackContext position(long position) {
                    return (CallstackContext)super.position(position);
                }
                @Override public CallstackContext getPointer(long i) {
                    return new CallstackContext((Pointer)this).offsetAddress(i);
                }
            
                public native @Cast("uint32_t") int callSite(); public native CallstackContext callSite(int setter);
                public native @Cast("uint32_t") int calledTarget(); public native CallstackContext calledTarget(int setter);
                public native @Cast("uint32_t") int framePointer(); public native CallstackContext framePointer(int setter);
                public native @StdString BytePointer context(); public native CallstackContext context(BytePointer setter);
            }

            public native @StdVector CallstackContext callStack(); public native ThreadCallstack callStack(CallstackContext setter);
        }

        public native @StdVector ThreadCallstack threadCallstack(); public native CrashReport threadCallstack(ThreadCallstack setter);
    }

    public native @StdVector CrashReport crashReports(); public native CrashDump crashReports(CrashReport setter);
    public native @StdString BytePointer depthaiCommitHash(); public native CrashDump depthaiCommitHash(BytePointer setter);
    public native @StdString BytePointer deviceId(); public native CrashDump deviceId(BytePointer setter);

    public native @ByVal @Cast("nlohmann::json*") Pointer serializeToJson();
}
