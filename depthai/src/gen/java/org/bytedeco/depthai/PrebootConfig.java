// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.depthai;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

import static org.bytedeco.depthai.global.depthai.*;


@Namespace("dai") @Properties(inherit = org.bytedeco.depthai.presets.depthai.class)
public class PrebootConfig extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public PrebootConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public PrebootConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public PrebootConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public PrebootConfig position(long position) {
        return (PrebootConfig)super.position(position);
    }
    @Override public PrebootConfig getPointer(long i) {
        return new PrebootConfig((Pointer)this).offsetAddress(i);
    }

    // USB related config
    public static class USB extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public USB() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public USB(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public USB(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public USB position(long position) {
            return (USB)super.position(position);
        }
        @Override public USB getPointer(long i) {
            return new USB((Pointer)this).offsetAddress(i);
        }
    
        public native @Cast("uint16_t") short vid(); public native USB vid(short setter);
        public native @Cast("uint16_t") short pid(); public native USB pid(short setter);
        public native @Cast("uint16_t") short flashBootedVid(); public native USB flashBootedVid(short setter);
        public native @Cast("uint16_t") short flashBootedPid(); public native USB flashBootedPid(short setter);
        public native UsbSpeed maxSpeed(); public native USB maxSpeed(UsbSpeed setter);
    }

    public native @ByRef USB usb(); public native PrebootConfig usb(USB setter);
    public native @ByRef @Cast("tl::optional<uint32_t>*") IntOptional watchdogTimeoutMs(); public native PrebootConfig watchdogTimeoutMs(IntOptional setter);
    public native @ByRef @Cast("tl::optional<uint32_t>*") IntOptional watchdogInitialDelayMs(); public native PrebootConfig watchdogInitialDelayMs(IntOptional setter);
}
