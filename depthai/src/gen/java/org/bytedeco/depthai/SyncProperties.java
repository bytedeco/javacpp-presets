// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.depthai;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

import static org.bytedeco.depthai.global.depthai.*;


/**
 * Specify properties for Sync.
 */
@Namespace("dai") @NoOffset @Properties(inherit = org.bytedeco.depthai.presets.depthai.class)
public class SyncProperties extends SyncPropertiesSerializable {
    static { Loader.load(); }
    /** Default native constructor. */
    public SyncProperties() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public SyncProperties(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SyncProperties(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public SyncProperties position(long position) {
        return (SyncProperties)super.position(position);
    }
    @Override public SyncProperties getPointer(long i) {
        return new SyncProperties((Pointer)this).offsetAddress(i);
    }

    /**
     * The maximal interval the messages can be apart in nanoseconds.
     */
    public native @Cast("uint64_t") long syncThresholdNs(); public native SyncProperties syncThresholdNs(long setter);

    /**
     * The number of syncing attempts before fail (num of replaced messages).
     */
    public native int syncAttempts(); public native SyncProperties syncAttempts(int setter);
}
