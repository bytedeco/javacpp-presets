// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.depthai;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

import static org.bytedeco.depthai.global.depthai.*;


// // Json-Msgpack serialization
// template<typename T>
// inline void serialize(const T& obj, std::vector<std::uint8_t>& data){
//     nlohmann::json j = obj;
//     data = nlohmann::json::to_msgpack(j);
// }
// template<typename T>
// inline std::vector<std::uint8_t> serialize(const T& obj){
//     std::vector<std::uint8_t> data;
//     serialize(obj, data);
//     return data;
// }
//
// // Json-Msgpack deserialization
// template<typename T>
// inline void deserialize(const std::uint8_t* data, std::size_t size, T& obj){
//     nlohmann::from_json(nlohmann::json::from_msgpack(data, data + size), obj);
// }
// template<typename T>
// inline void deserialize(const std::vector<std::uint8_t>& data, T& obj){
//     deserialize(data.data(), data.size(), obj);
// }

@Namespace("dai::utility") @NoOffset @Properties(inherit = org.bytedeco.depthai.presets.depthai.class)
public class VectorWriter extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public VectorWriter(Pointer p) { super(p); }

    public VectorWriter(@Const @ByRef VectorWriter arg0) { super((Pointer)null); allocate(arg0); }
    private native void allocate(@Const @ByRef VectorWriter arg0);
    public native @ByRef @Name("operator =") VectorWriter put(@Const @ByRef VectorWriter arg0);

    public native @ByVal @Cast("nop::Status<void>*") Pointer Prepare(@Cast("std::size_t") long arg0);

    public native @ByVal @Cast("nop::Status<void>*") Pointer Write(@Cast("std::uint8_t") byte _byte);

    public native @ByVal @Cast("nop::Status<void>*") Pointer Write(@Const Pointer begin, @Const Pointer end);

    public native @ByVal @Cast("nop::Status<void>*") Pointer Skip(@Cast("std::size_t") long padding_bytes, @Cast("std::uint8_t") byte padding_value/*=0x00*/);
    public native @ByVal @Cast("nop::Status<void>*") Pointer Skip(@Cast("std::size_t") long padding_bytes);
    public native @Cast("std::uint8_t*") @StdVector BytePointer ref();
    public native @Cast("std::uint8_t*") @StdVector BytePointer take();
}
