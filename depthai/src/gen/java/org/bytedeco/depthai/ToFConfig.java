// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.depthai;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

import static org.bytedeco.depthai.global.depthai.*;


/**
 * ToFConfig message. Carries config for feature tracking algorithm
 */
@Namespace("dai") @NoOffset @Properties(inherit = org.bytedeco.depthai.presets.depthai.class)
public class ToFConfig extends Buffer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ToFConfig(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ToFConfig(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ToFConfig position(long position) {
        return (ToFConfig)super.position(position);
    }
    @Override public ToFConfig getPointer(long i) {
        return new ToFConfig((Pointer)this).offsetAddress(i);
    }

    // Raw* mirror

    /**
     * Construct ToFConfig message.
     */
    public ToFConfig() { super((Pointer)null); allocate(); }
    private native void allocate();
    public ToFConfig(@SharedPtr RawToFConfig ptr) { super((Pointer)null); allocate(ptr); }
    private native void allocate(@SharedPtr RawToFConfig ptr);

    public native @ByRef ToFConfig setDepthParams(@ByVal @Cast("dai::ToFConfig::DepthParams*") RawToFConfig.DepthParams config);
    public native @ByRef ToFConfig setFreqModUsed(@ByVal RawToFConfig.DepthParams.TypeFMod fmod);
    public native @ByRef ToFConfig setAvgPhaseShuffle(@Cast("bool") boolean enable);
    public native @ByRef ToFConfig setMinAmplitude(float minamp);
    /**
     * @param median Set kernel size for median filtering, or disable
     */
    public native @ByRef ToFConfig setMedianFilter(MedianFilter median);
    public native @ByRef ToFConfig setMedianFilter(@Cast("dai::MedianFilter") int median);

    /**
     * Set explicit configuration.
     * @param config Explicit configuration
     */
    public native @ByRef ToFConfig set(@ByVal RawToFConfig config);

    /**
     * Retrieve configuration data for ToF.
     * @return config for feature tracking algorithm
     */
    public native @ByVal RawToFConfig get();
}
