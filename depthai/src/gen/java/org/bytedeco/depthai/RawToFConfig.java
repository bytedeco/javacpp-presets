// Targeted by JavaCPP version 1.5.10: DO NOT EDIT THIS FILE

package org.bytedeco.depthai;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.opencv.opencv_core.*;
import static org.bytedeco.opencv.global.opencv_core.*;
import org.bytedeco.opencv.opencv_imgproc.*;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

import static org.bytedeco.depthai.global.depthai.*;


/** RawToFConfig configuration structure */
@Namespace("dai") @NoOffset @Properties(inherit = org.bytedeco.depthai.presets.depthai.class)
public class RawToFConfig extends RawBuffer {
    static { Loader.load(); }
    /** Default native constructor. */
    public RawToFConfig() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RawToFConfig(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RawToFConfig(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public RawToFConfig position(long position) {
        return (RawToFConfig)super.position(position);
    }
    @Override public RawToFConfig getPointer(long i) {
        return new RawToFConfig((Pointer)this).offsetAddress(i);
    }

    /**
     * DepthParams configuration structure.
     */
    public static class DepthParams extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public DepthParams() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public DepthParams(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public DepthParams(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public DepthParams position(long position) {
            return (DepthParams)super.position(position);
        }
        @Override public DepthParams getPointer(long i) {
            return new DepthParams((Pointer)this).offsetAddress(i);
        }
    
        /**
         * Enable averaging between phases with same modulation frequency(e.g. for ToF cameras with phase shuffle).
         * The depth frame rate will be half if this is enabled
         */
        public native @Cast("bool") boolean avgPhaseShuffle(); public native DepthParams avgPhaseShuffle(boolean setter);

        /**
         * Perform depth calculation only for pixels with amplitude greater than provided value
         */
        public native float minimumAmplitude(); public native DepthParams minimumAmplitude(float setter);

        /**
         * Frequency modulation frames used for depth calculation. If the ToF sensor supports multiple modulation frequencies,
         * all will be used for depth calculation.
         */
        public enum TypeFMod { F_MOD_ALL(0), F_MOD_MIN(1), F_MOD_MAX(2);

            public final int value;
            private TypeFMod(int v) { this.value = v; }
            private TypeFMod(TypeFMod e) { this.value = e.value; }
            public TypeFMod intern() { for (TypeFMod e : values()) if (e.value == value) return e; return this; }
            @Override public String toString() { return intern().name(); }
        }

        public native TypeFMod freqModUsed(); public native DepthParams freqModUsed(TypeFMod setter);

        /**
         * Set kernel size for depth median filtering, or disable
         */
        public native MedianFilter median(); public native DepthParams median(MedianFilter setter);
    }

    /**
     * DepthParams configuration.
     * Used for configuring the ToF.
     */
    public native @ByRef DepthParams depthParams(); public native RawToFConfig depthParams(DepthParams setter);

    public native @Override void serialize(@Cast("std::uint8_t*") @StdVector BytePointer metadata, @ByRef @Cast("dai::DatatypeEnum*") IntPointer datatype);
    public native @Override void serialize(@Cast("std::uint8_t*") @StdVector ByteBuffer metadata, @ByRef @Cast("dai::DatatypeEnum*") IntBuffer datatype);
    public native @Override void serialize(@Cast("std::uint8_t*") @StdVector byte[] metadata, @ByRef @Cast("dai::DatatypeEnum*") int[] datatype);

    public native @Override DatatypeEnum getType();
}
