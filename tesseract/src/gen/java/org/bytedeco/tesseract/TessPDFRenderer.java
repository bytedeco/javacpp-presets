// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.tesseract;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.leptonica.*;
import static org.bytedeco.leptonica.global.lept.*;

import static org.bytedeco.tesseract.global.tesseract.*;


/**
 * Renders tesseract output into searchable PDF
 */
@Namespace("tesseract") @NoOffset @Properties(inherit = org.bytedeco.tesseract.presets.tesseract.class)
public class TessPDFRenderer extends TessResultRenderer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TessPDFRenderer(Pointer p) { super(p); }

  // datadir is the location of the TESSDATA. We need it because
  // we load a custom PDF font from this location.
  public TessPDFRenderer(@Cast("const char*") BytePointer outputbase, @Cast("const char*") BytePointer datadir,
                    @Cast("bool") boolean textonly/*=false*/) { super((Pointer)null); allocate(outputbase, datadir, textonly); }
  private native void allocate(@Cast("const char*") BytePointer outputbase, @Cast("const char*") BytePointer datadir,
                    @Cast("bool") boolean textonly/*=false*/);
  public TessPDFRenderer(@Cast("const char*") BytePointer outputbase, @Cast("const char*") BytePointer datadir) { super((Pointer)null); allocate(outputbase, datadir); }
  private native void allocate(@Cast("const char*") BytePointer outputbase, @Cast("const char*") BytePointer datadir);
  public TessPDFRenderer(String outputbase, String datadir,
                    @Cast("bool") boolean textonly/*=false*/) { super((Pointer)null); allocate(outputbase, datadir, textonly); }
  private native void allocate(String outputbase, String datadir,
                    @Cast("bool") boolean textonly/*=false*/);
  public TessPDFRenderer(String outputbase, String datadir) { super((Pointer)null); allocate(outputbase, datadir); }
  private native void allocate(String outputbase, String datadir);
}
