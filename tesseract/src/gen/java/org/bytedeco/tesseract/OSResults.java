// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package org.bytedeco.tesseract;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.leptonica.*;
import static org.bytedeco.leptonica.global.lept.*;

import static org.bytedeco.tesseract.global.tesseract.*;


@Namespace("tesseract") @NoOffset @Properties(inherit = org.bytedeco.tesseract.presets.tesseract.class)
public class OSResults extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public OSResults(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public OSResults(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public OSResults position(long position) {
        return (OSResults)super.position(position);
    }
    @Override public OSResults getPointer(long i) {
        return new OSResults((Pointer)this).offsetAddress(i);
    }

  public OSResults() { super((Pointer)null); allocate(); }
  private native void allocate();
  public native void update_best_orientation();
  // Set the estimate of the orientation to the given id.
  public native void set_best_orientation(int orientation_id);
  // Update/Compute the best estimate of the script assuming the given
  // orientation id.
  public native void update_best_script(int orientation_id);
  // Return the index of the script with the highest score for this orientation.
  public native int get_best_script(int orientation_id);
  // Accumulate scores with given OSResults instance and update the best script.
  public native void accumulate(@Const @ByRef OSResults osr);

  // Print statistics.
  public native void print_scores();
  public native void print_scores(int orientation_id);

  // Array holding scores for each orientation id [0,3].
  // Orientation ids [0..3] map to [0, 270, 180, 90] degree orientations of the
  // page respectively, where the values refer to the amount of clockwise
  // rotation to be applied to the page for the text to be upright and readable.
  public native float orientations(int i); public native OSResults orientations(int i, float setter);
  @MemberGetter public native FloatPointer orientations();
  // Script confidence scores for each of 4 possible orientations.
  public native float scripts_na(int i, int j); public native OSResults scripts_na(int i, int j, float setter);
  @MemberGetter public native @Cast("float*") FloatPointer scripts_na();

  public native UNICHARSET unicharset(); public native OSResults unicharset(UNICHARSET setter);
  public native @ByRef OSBestResult best_result(); public native OSResults best_result(OSBestResult setter);
}
