diff -Naur cppbuild/linux-x86_64/librealsense-1.9.6/include/librealsense/rscore.hpp cppbuild-good/linux-x86_64/librealsense-1.9.6/include/librealsense/rscore.hpp
--- cppbuild/linux-x86_64/librealsense-1.9.6/include/librealsense/rscore.hpp	2016-08-18 09:03:02.000000000 +0200
+++ cppbuild-good/linux-x86_64/librealsense-1.9.6/include/librealsense/rscore.hpp	2016-08-18 16:15:28.141873000 +0200
@@ -19,7 +19,7 @@
 
     virtual rs_extrinsics                   get_extrinsics_to(const rs_stream_interface & r) const = 0;
     virtual float                           get_depth_scale() const = 0;
-    
+
     virtual rs_intrinsics                   get_intrinsics() const = 0;
     virtual rs_intrinsics                   get_rectified_intrinsics() const = 0;
     virtual rs_format                       get_format() const = 0;
@@ -67,11 +67,11 @@
     virtual const char *                    get_firmware_version() const = 0;
     virtual const char *                    get_camera_info(rs_camera_info) const = 0;
     virtual float                           get_depth_scale() const = 0;
-                                            
+
     virtual void                            enable_stream(rs_stream stream, int width, int height, rs_format format, int fps, rs_output_buffer_format output) = 0;
     virtual void                            enable_stream_preset(rs_stream stream, rs_preset preset) = 0;
     virtual void                            disable_stream(rs_stream stream) = 0;
-                                            
+
     virtual void                            enable_motion_tracking() = 0;
     virtual void                            set_stream_callback(rs_stream stream, void(*on_frame)(rs_device * device, rs_frame_ref * frame, void * user), void * user) = 0;
     virtual void                            set_stream_callback(rs_stream stream, rs_frame_callback * callback) = 0;
@@ -83,7 +83,7 @@
     virtual void                            set_motion_callback(rs_motion_callback * callback) = 0;
     virtual void                            set_timestamp_callback(void(*on_event)(rs_device * device, rs_timestamp_data data, void * user), void * user) = 0;
     virtual void                            set_timestamp_callback(rs_timestamp_callback * callback) = 0;
-                                            
+
     virtual void                            start(rs_source source) = 0;
     virtual void                            stop(rs_source source) = 0;
 
@@ -92,12 +92,12 @@
 
     virtual bool                            is_capturing() const = 0;
     virtual int                             is_motion_tracking_active() const = 0;
-                                            
+
     virtual void                            wait_all_streams() = 0;
     virtual bool                            poll_all_streams() = 0;
-                                            
+
     virtual bool                            supports(rs_capabilities capability) const = 0;
-                                            
+
     virtual bool                            supports_option(rs_option option) const = 0;
     virtual void                            get_option_range(rs_option option, double & min, double & max, double & step, double & def) = 0;
     virtual void                            set_options(const rs_option options[], size_t count, const double values[]) = 0;
diff -Naur cppbuild/linux-x86_64/librealsense-1.9.6/include/librealsense/rs.h cppbuild-good/linux-x86_64/librealsense-1.9.6/include/librealsense/rs.h
--- cppbuild/linux-x86_64/librealsense-1.9.6/include/librealsense/rs.h	2016-08-18 09:03:02.000000000 +0200
+++ cppbuild-good/linux-x86_64/librealsense-1.9.6/include/librealsense/rs.h	2016-08-18 17:53:38.437558000 +0200
@@ -18,7 +18,8 @@
 /* Version in encoded integer format (1,9,x) -> 1090x note that each component is limited into [0-99] range by design*/
 #define	RS_API_VERSION  (((RS_API_MAJOR_VERSION) * 10000) + ((RS_API_MINOR_VERSION) * 100) + (RS_API_PATCH_VERSION))
 /*// Return version in "X.Y.Z" format */
-#define RS_API_VERSION_STR (VAR_ARG_STRING(RS_API_MAJOR_VERSION.RS_API_MINOR_VERSION.RS_API_PATCH_VERSION))
+/* #define RS_API_VERSION_STR (VAR_ARG_STRING(RS_API_MAJOR_VERSION.RS_API_MINOR_VERSION.RS_API_PATCH_VERSION))*/
+#define RS_API_VERSION_STR "1.9.6"
 
 /* rs_capabilities defines the full set of functionality that a RealSense device might provide
    to check what functionality is supported by a particular device at runtime call dev->supports(capability) */
@@ -33,7 +34,7 @@
     RS_CAPABILITIES_MOTION_MODULE_FW_UPDATE = 6, /**< provides method for upgrading motion module firmware */
     RS_CAPABILITIES_ADAPTER_BOARD           = 7, /**< interanlly includes MIPI to USB adapter */
     RS_CAPABILITIES_ENUMERATION             = 8, /**< provides enough basic functionality to be considered supported. this to catch at runtime various outdated engineering samples */
-    RS_CAPABILITIES_COUNT                   = 9, 
+    RS_CAPABILITIES_COUNT                   = 9,
     RS_CAPABILITIES_MAX_ENUM = 0x7FFFFFFF
 } rs_capabilities;
 
@@ -280,7 +281,7 @@
 {
     double              timestamp;     /* timestamp in milliseconds */
     rs_event_source     source_id;
-    unsigned long long  frame_number;  
+    unsigned long long  frame_number;
 } rs_timestamp_data;
 
 typedef struct rs_motion_data
@@ -790,7 +791,7 @@
 rs_stream rs_get_detached_frame_stream_type(const rs_frame_ref * frameset, rs_error ** error);
 
 /**
-* send a blob of data to the device. at the moment only RS_BLOB_TYPE_MOTION_MODULE_FIRMWARE_UPDATE is support 
+* send a blob of data to the device. at the moment only RS_BLOB_TYPE_MOTION_MODULE_FIRMWARE_UPDATE is support
 * of the motiohn module.
 * \param[in] firmware data.
 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored
diff -Naur cppbuild/linux-x86_64/librealsense-1.9.6/include/librealsense/rs.hpp cppbuild-good/linux-x86_64/librealsense-1.9.6/include/librealsense/rs.hpp
--- cppbuild/linux-x86_64/librealsense-1.9.6/include/librealsense/rs.hpp	2016-08-18 09:03:02.000000000 +0200
+++ cppbuild-good/linux-x86_64/librealsense-1.9.6/include/librealsense/rs.hpp	2016-08-18 17:56:18.142514000 +0200
@@ -18,10 +18,10 @@
 {
     enum class capabilities : int32_t
     {
-        depth                   = 0,
-        color                   = 1,
-        infrared                = 2,
-        infrared2               = 3,
+        // depth                   = 0,
+        // color                   = 1,
+        // infrared                = 2,
+        // infrared2               = 3,
         fish_eye                = 4,
         motion_events           = 5,
         motion_module_fw_update = 6,
@@ -47,33 +47,33 @@
 
     enum class format : int32_t
     {
-        any         = 0,  
+        any         = 0,
         z16         = 1,  ///< 16 bit linear depth values. The depth is meters is equal to depth scale * pixel value
         disparity16 = 2,  ///< 16 bit linear disparity values. The depth in meters is equal to depth scale / pixel value
         xyz32f      = 3,  ///< 32 bit floating point 3D coordinates.
-        yuyv        = 4,  
-        rgb8        = 5,  
-        bgr8        = 6,  
-        rgba8       = 7,  
-        bgra8       = 8,  
-        y8          = 9,  
-        y16         = 10, 
+        yuyv        = 4,
+        rgb8        = 5,
+        bgr8        = 6,
+        rgba8       = 7,
+        bgra8       = 8,
+        y8          = 9,
+        y16         = 10,
         raw10       = 11,  ///< Four 10-bit luminance values encoded into a 5-byte macropixel
         raw16       = 12,  ///< Four 10-bit luminance filled in 16 bit pixel (6 bit unused)
         raw8        = 13
     };
 
     enum class output_buffer_format : int32_t
-    {
-        continous      = 0,
-        native         = 1
-    };
+     {
+         output_buffer_continous      = 0,
+         output_buffer_native         = 1
+     };
 
     enum class preset : int32_t
     {
-        best_quality      = 0, 
-        largest_image     = 1, 
-        highest_framerate = 2  
+        best_quality      = 0,
+        largest_image     = 1,
+        highest_framerate = 2
     };
 
     enum class distortion : int32_t
@@ -81,7 +81,7 @@
         none                   = 0, ///< Rectilinear images, no distortion compensation required
         modified_brown_conrady = 1, ///< Equivalent to Brown-Conrady distortion, except that tangential distortion is applied to radially distorted points
         inverse_brown_conrady  = 2,  ///< Equivalent to Brown-Conrady distortion, except undistorts image instead of distorting it
-        distortion_ftheta      = 3 
+        distortion_ftheta      = 3
     };
 
     // reflection of rs_option
@@ -242,16 +242,16 @@
 
     class context;
     class device;
-    
+
     class error : public std::runtime_error
     {
         std::string function, args;
     public:
         error(rs_error * err) : std::runtime_error(rs_get_error_message(err))
-        { 
+        {
             function = (nullptr != rs_get_failed_function(err)) ? rs_get_failed_function(err) : std::string();
             args = (nullptr != rs_get_failed_args(err)) ? rs_get_failed_args(err) : std::string();
-            rs_free_error(err); 
+            rs_free_error(err);
         }
         const std::string & get_failed_function() const { return function; }
         const std::string & get_failed_args() const { return args; }
@@ -261,8 +261,8 @@
     class context
     {
         rs_context * handle;
-        context(const context &) = delete;
-        context & operator = (const context &) = delete;
+        // context(const context &) = delete;
+        // context & operator = (const context &) = delete;
     public:
         context()
         {
@@ -298,13 +298,13 @@
             error::handle(e);
             return (device *)r;
         }
-    };  
+    };
 
     class motion_callback : public rs_motion_callback
     {
-        std::function<void(motion_data)> on_event_function;
+        std::function<void(rs::motion_data)> on_event_function;
     public:
-        explicit motion_callback(std::function<void(motion_data)> on_event) : on_event_function(on_event) {}
+        explicit motion_callback(std::function<void(rs::motion_data)> on_event) : on_event_function(on_event) {}
 
         void on_event(rs_motion_data e) override
         {
@@ -316,9 +316,9 @@
 
     class timestamp_callback : public rs_timestamp_callback
     {
-        std::function<void(timestamp_data)> on_event_function;
+        std::function<void(rs::timestamp_data)> on_event_function;
     public:
-        explicit timestamp_callback(std::function<void(timestamp_data)> on_event) : on_event_function(on_event) {}
+        explicit timestamp_callback(std::function<void(rs::timestamp_data)> on_event) : on_event_function(on_event) {}
 
         void on_event(rs_timestamp_data data) override
         {
@@ -333,9 +333,12 @@
         rs_device * device;
         rs_frame_ref * frame_ref;
 
-        frame(const frame &) = delete;
+
 
     public:
+
+        frame(const frame &) {}
+
         frame() : device(nullptr), frame_ref(nullptr) {}
         frame(rs_device * device, rs_frame_ref * frame_ref) : device(device), frame_ref(frame_ref) {}
         frame(frame&& other) : device(other.device), frame_ref(other.frame_ref) { other.frame_ref = nullptr; }
@@ -370,7 +373,7 @@
             return r;
         }
 
-        /// retrieve the timestamp domain 
+        /// retrieve the timestamp domain
         /// \return            timestamp domain (clock name) for timestamp values
         timestamp_domain get_frame_timestamp_domain() const
         {
@@ -402,7 +405,7 @@
             auto r = rs_get_detached_frame_width(frame_ref, &e);
             error::handle(e);
             return r;
-        } 
+        }
 
         int get_height() const
         {
@@ -457,9 +460,9 @@
 
     class frame_callback : public rs_frame_callback
     {
-        std::function<void(frame)> on_frame_function;
+        std::function<void(rs::frame)> on_frame_function;
     public:
-        explicit frame_callback(std::function<void(frame)> on_frame) : on_frame_function(on_frame) {}
+        explicit frame_callback(std::function<void(rs::frame)> on_frame) : on_frame_function(on_frame) {}
 
         void on_frame(rs_device * device, rs_frame_ref * fref) override
         {
@@ -471,13 +474,15 @@
 
     class device
     {
-        device() = delete;
-        device(const device &) = delete;
-        device & operator = (const device &) = delete;
-        ~device() = delete;
-
+        // todo: check how useful it is ?
+        // device() = delete;
+        // device(const device &) = delete;
+        // device & operator = (const device &) = delete;
+        // ~device() = delete;
 
     public:
+
+
         /// retrieve a human readable device model string
         /// \return  the model string, such as "Intel RealSense F200" or "Intel RealSense R200"
         const char * get_name() const
@@ -606,7 +611,7 @@
         /// \param[in] format                   the pixel format of a frame image, or ANY if any format is acceptable
         /// \param[in] framerate                the number of frames which will be streamed per second, or 0 if any framerate is acceptable
         /// \param[in] output_buffer_type       output buffer format (continous in memory / native with pitch)
-        void enable_stream(stream stream, int width, int height, format format, int framerate, output_buffer_format output_buffer_type = output_buffer_format::continous)
+        void enable_stream(stream stream, int width, int height, format format, int framerate, output_buffer_format output_buffer_type = output_buffer_format::output_buffer_continous)
         {
             rs_error * e = nullptr;
             rs_enable_stream_ex((rs_device *)this, (rs_stream)stream, width, height, (rs_format)format, framerate, (rs_output_buffer_format)output_buffer_type, &e);
@@ -711,38 +716,38 @@
         }
 
         /// sets the callback for frame arrival event. provided callback will be called the instant new frame of given stream becomes available
-        /// once callback is set on certain stream type, frames of this type will no longer be available throuhg wait/poll methods (those two approaches are mutually exclusive) 
+        /// once callback is set on certain stream type, frames of this type will no longer be available throuhg wait/poll methods (those two approaches are mutually exclusive)
         /// while wait/poll methods provide consistent set of syncronized frames at the expense of extra latency,
         /// set frame callbacks provides low latency solution with no syncronization
-        /// \param[in] stream    the stream 
+        /// \param[in] stream    the stream
         /// \param[in] on_frame  frame callback to be invoke on every new frame
         /// \return            the framerate of the stream, in frames per second
-        void set_frame_callback(rs::stream stream, std::function<void(frame)> frame_handler)
+        void set_frame_callback(rs::stream stream, std::function<void(rs::frame)> frame_handler)
         {
             rs_error * e = nullptr;
             rs_set_frame_callback_cpp((rs_device *)this, (rs_stream)stream, new frame_callback(frame_handler), &e);
             error::handle(e);
         }
 
-        ///// sets the callback for motion module event. provided callback will be called the instant new motion or timestamp event is available. 
-        ///// \param[in] stream             the stream 
+        ///// sets the callback for motion module event. provided callback will be called the instant new motion or timestamp event is available.
+        ///// \param[in] stream             the stream
         ///// \param[in] motion_handler     frame callback to be invoke on every new motion event
         ///// \param[in] timestamp_handler  frame callback to be invoke on every new timestamp event
         ///// \return                       the framerate of the stream, in frames per second
-        void enable_motion_tracking(std::function<void(motion_data)> motion_handler, std::function<void(timestamp_data)> timestamp_handler)
+        void enable_motion_tracking(std::function<void(rs::motion_data)> motion_handler, std::function<void(rs::timestamp_data)> timestamp_handler)
         {
-            rs_error * e = nullptr;            
+            rs_error * e = nullptr;
             rs_enable_motion_tracking_cpp((rs_device *)this, new motion_callback(motion_handler), new timestamp_callback(timestamp_handler), &e);
             error::handle(e);
         }
 
-        ///// sets the callback for motion module event. provided callback will be called the instant new motion event is available. 
-        ///// \param[in] stream             the stream 
+        ///// sets the callback for motion module event. provided callback will be called the instant new motion event is available.
+        ///// \param[in] stream             the stream
         ///// \param[in] motion_handler     frame callback to be invoke on every new motion event
         ///// \return                       the framerate of the stream, in frames per second
-        void enable_motion_tracking(std::function<void(motion_data)> motion_handler)
+        void enable_motion_tracking(std::function<void(rs::motion_data)> motion_handler)
         {
-            rs_error * e = nullptr;            
+            rs_error * e = nullptr;
             rs_enable_motion_tracking_cpp((rs_device *)this, new motion_callback(motion_handler), new timestamp_callback([](rs::timestamp_data data) {}), &e);
             error::handle(e);
         }
@@ -755,7 +760,7 @@
             error::handle(e);
         }
 
-        /// check if data acquisition is active        
+        /// check if data acquisition is active
         int is_motion_tracking_active()
         {
             rs_error * e = nullptr;
@@ -768,7 +773,7 @@
         /// begin streaming on all enabled streams for this device
         ///
         void start(rs::source source = rs::source::video)
-        {            
+        {
             rs_error * e = nullptr;
             rs_start_source((rs_device *)this, (rs_source)source, &e);
             error::handle(e);
@@ -850,7 +855,7 @@
             error::handle(e);
             return r;
         }
-        
+
         /// retrieve the device specific option description
         /// \param[in] option  the option whose description should be retrieved
         /// \return            the value of the option
@@ -951,7 +956,7 @@
     inline std::ostream & operator << (std::ostream & o, format format) { return o << rs_format_to_string((rs_format)format); }
     inline std::ostream & operator << (std::ostream & o, preset preset) { return o << rs_preset_to_string((rs_preset)preset); }
     inline std::ostream & operator << (std::ostream & o, distortion distortion) { return o << rs_distortion_to_string((rs_distortion)distortion); }
-    inline std::ostream & operator << (std::ostream & o, option option) { return o << rs_option_to_string((rs_option)option); }    
+    inline std::ostream & operator << (std::ostream & o, option option) { return o << rs_option_to_string((rs_option)option); }
     inline std::ostream & operator << (std::ostream & o, capabilities capability) { return o << rs_capabilities_to_string((rs_capabilities)capability); }
     inline std::ostream & operator << (std::ostream & o, source src) { return o << rs_source_to_string((rs_source)src); }
     inline std::ostream & operator << (std::ostream & o, event evt) { return o << rs_event_to_string((rs_event_source)evt); }
@@ -964,22 +969,22 @@
         warn  = 2, // Indication of possible failure
         error = 3, // Indication of definite failure
         fatal = 4, // Indication of unrecoverable failure
-        none  = 5, // No logging will occur
+        //        none  = 5, // No logging will occur
     };
 
-    class log_callback : public rs_log_callback
-    {
-        std::function<void(log_severity, const char *)> on_event_function;
-    public:
-        explicit log_callback(std::function<void(log_severity, const char *)> on_event) : on_event_function(on_event) {}
+    // class log_callback : public rs_log_callback
+    // {
+    //     std::function<void(log_severity, const char *)> on_event_function;
+    // public:
+    //     explicit log_callback(std::function<void(log_severity, const char *)> on_event) : on_event_function(on_event) {}
+
+    //     void on_event(rs_log_severity severity, const char * message) override
+    //     {
+    //         on_event_function((log_severity)severity, message);
+    //     }
 
-        void on_event(rs_log_severity severity, const char * message) override
-        {
-            on_event_function((log_severity)severity, message);
-        }
-
-        void release() override { delete this; }
-    };
+    //     void release() override { delete this; }
+    // };
 
     inline void log_to_console(log_severity min_severity)
     {
@@ -995,12 +1000,12 @@
         error::handle(e);
     }
 
-    inline void log_to_callback(log_severity min_severity, std::function<void(log_severity, const char *)> callback)
-    {
-        rs_error * e = nullptr;
-        rs_log_to_callback_cpp((rs_log_severity)min_severity, new log_callback(callback), &e);
-        error::handle(e);
-    }
+    // inline void log_to_callback(log_severity min_severity, std::function<void(log_severity, const char *)> callback)
+    // {
+    //     rs_error * e = nullptr;
+    //     rs_log_to_callback_cpp((rs_log_severity)min_severity, new log_callback(callback), &e);
+    //     error::handle(e);
+    // }
 
     // Additional utilities
     inline void apply_depth_control_preset(device * device, int preset) { rs_apply_depth_control_preset((rs_device *)device, preset); }
